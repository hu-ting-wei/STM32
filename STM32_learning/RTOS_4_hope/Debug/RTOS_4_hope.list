
RTOS_4_hope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006334  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080064c4  080064c4  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006738  08006738  00016738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006740  08006740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006744  08006744  00016744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000000  08006748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001068  2000001c  08006764  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001084  08006764  00021084  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016e92  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002d5d  00000000  00000000  00036ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001338  00000000  00000000  00039c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001200  00000000  00000000  0003af78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a3dc  00000000  00000000  0003c178  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006ada  00000000  00000000  00046554  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004d02e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005060  00000000  00000000  0004d0ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064ac 	.word	0x080064ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080064ac 	.word	0x080064ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b97a 	b.w	80004ec <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	468c      	mov	ip, r1
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	9e08      	ldr	r6, [sp, #32]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d151      	bne.n	80002c4 <__udivmoddi4+0xb4>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d96d      	bls.n	8000302 <__udivmoddi4+0xf2>
 8000226:	fab2 fe82 	clz	lr, r2
 800022a:	f1be 0f00 	cmp.w	lr, #0
 800022e:	d00b      	beq.n	8000248 <__udivmoddi4+0x38>
 8000230:	f1ce 0c20 	rsb	ip, lr, #32
 8000234:	fa01 f50e 	lsl.w	r5, r1, lr
 8000238:	fa20 fc0c 	lsr.w	ip, r0, ip
 800023c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000240:	ea4c 0c05 	orr.w	ip, ip, r5
 8000244:	fa00 f40e 	lsl.w	r4, r0, lr
 8000248:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800024c:	0c25      	lsrs	r5, r4, #16
 800024e:	fbbc f8fa 	udiv	r8, ip, sl
 8000252:	fa1f f987 	uxth.w	r9, r7
 8000256:	fb0a cc18 	mls	ip, sl, r8, ip
 800025a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800025e:	fb08 f309 	mul.w	r3, r8, r9
 8000262:	42ab      	cmp	r3, r5
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x6c>
 8000266:	19ed      	adds	r5, r5, r7
 8000268:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800026c:	f080 8123 	bcs.w	80004b6 <__udivmoddi4+0x2a6>
 8000270:	42ab      	cmp	r3, r5
 8000272:	f240 8120 	bls.w	80004b6 <__udivmoddi4+0x2a6>
 8000276:	f1a8 0802 	sub.w	r8, r8, #2
 800027a:	443d      	add	r5, r7
 800027c:	1aed      	subs	r5, r5, r3
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb5 f0fa 	udiv	r0, r5, sl
 8000284:	fb0a 5510 	mls	r5, sl, r0, r5
 8000288:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800028c:	fb00 f909 	mul.w	r9, r0, r9
 8000290:	45a1      	cmp	r9, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x98>
 8000294:	19e4      	adds	r4, r4, r7
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 810a 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 800029e:	45a1      	cmp	r9, r4
 80002a0:	f240 8107 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	eba4 0409 	sub.w	r4, r4, r9
 80002ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	d061      	beq.n	800037a <__udivmoddi4+0x16a>
 80002b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ba:	2300      	movs	r3, #0
 80002bc:	6034      	str	r4, [r6, #0]
 80002be:	6073      	str	r3, [r6, #4]
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d907      	bls.n	80002d8 <__udivmoddi4+0xc8>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d054      	beq.n	8000376 <__udivmoddi4+0x166>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	f040 808e 	bne.w	80003fe <__udivmoddi4+0x1ee>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xdc>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2d0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0503 	sbc.w	r5, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	46ac      	mov	ip, r5
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d03f      	beq.n	800037a <__udivmoddi4+0x16a>
 80002fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	b912      	cbnz	r2, 800030a <__udivmoddi4+0xfa>
 8000304:	2701      	movs	r7, #1
 8000306:	fbb7 f7f2 	udiv	r7, r7, r2
 800030a:	fab7 fe87 	clz	lr, r7
 800030e:	f1be 0f00 	cmp.w	lr, #0
 8000312:	d134      	bne.n	800037e <__udivmoddi4+0x16e>
 8000314:	1beb      	subs	r3, r5, r7
 8000316:	0c3a      	lsrs	r2, r7, #16
 8000318:	fa1f fc87 	uxth.w	ip, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb02 3318 	mls	r3, r2, r8, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb0c f308 	mul.w	r3, ip, r8
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x134>
 8000334:	19ed      	adds	r5, r5, r7
 8000336:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x132>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80d1 	bhi.w	80004e4 <__udivmoddi4+0x2d4>
 8000342:	4680      	mov	r8, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0f2 	udiv	r0, r5, r2
 800034c:	fb02 5510 	mls	r5, r2, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb0c fc00 	mul.w	ip, ip, r0
 8000358:	45a4      	cmp	ip, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x15c>
 800035c:	19e4      	adds	r4, r4, r7
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x15a>
 8000364:	45a4      	cmp	ip, r4
 8000366:	f200 80b8 	bhi.w	80004da <__udivmoddi4+0x2ca>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 040c 	sub.w	r4, r4, ip
 8000370:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000374:	e79d      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000376:	4631      	mov	r1, r6
 8000378:	4630      	mov	r0, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	f1ce 0420 	rsb	r4, lr, #32
 8000382:	fa05 f30e 	lsl.w	r3, r5, lr
 8000386:	fa07 f70e 	lsl.w	r7, r7, lr
 800038a:	fa20 f804 	lsr.w	r8, r0, r4
 800038e:	0c3a      	lsrs	r2, r7, #16
 8000390:	fa25 f404 	lsr.w	r4, r5, r4
 8000394:	ea48 0803 	orr.w	r8, r8, r3
 8000398:	fbb4 f1f2 	udiv	r1, r4, r2
 800039c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a0:	fb02 4411 	mls	r4, r2, r1, r4
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ac:	fb01 f30c 	mul.w	r3, r1, ip
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1bc>
 80003b8:	19ed      	adds	r5, r5, r7
 80003ba:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003be:	f080 808a 	bcs.w	80004d6 <__udivmoddi4+0x2c6>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	f240 8087 	bls.w	80004d6 <__udivmoddi4+0x2c6>
 80003c8:	3902      	subs	r1, #2
 80003ca:	443d      	add	r5, r7
 80003cc:	1aeb      	subs	r3, r5, r3
 80003ce:	fa1f f588 	uxth.w	r5, r8
 80003d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003d6:	fb02 3310 	mls	r3, r2, r0, r3
 80003da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003de:	fb00 f30c 	mul.w	r3, r0, ip
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1e6>
 80003e6:	19ed      	adds	r5, r5, r7
 80003e8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003ec:	d26f      	bcs.n	80004ce <__udivmoddi4+0x2be>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d96d      	bls.n	80004ce <__udivmoddi4+0x2be>
 80003f2:	3802      	subs	r0, #2
 80003f4:	443d      	add	r5, r7
 80003f6:	1aeb      	subs	r3, r5, r3
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	e78f      	b.n	800031e <__udivmoddi4+0x10e>
 80003fe:	f1c1 0720 	rsb	r7, r1, #32
 8000402:	fa22 f807 	lsr.w	r8, r2, r7
 8000406:	408b      	lsls	r3, r1
 8000408:	fa05 f401 	lsl.w	r4, r5, r1
 800040c:	ea48 0303 	orr.w	r3, r8, r3
 8000410:	fa20 fe07 	lsr.w	lr, r0, r7
 8000414:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4e 0e04 	orr.w	lr, lr, r4
 800041e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000422:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000426:	fb0c 5519 	mls	r5, ip, r9, r5
 800042a:	fa1f f883 	uxth.w	r8, r3
 800042e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000432:	fb09 f408 	mul.w	r4, r9, r8
 8000436:	42ac      	cmp	r4, r5
 8000438:	fa02 f201 	lsl.w	r2, r2, r1
 800043c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x244>
 8000442:	18ed      	adds	r5, r5, r3
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d243      	bcs.n	80004d2 <__udivmoddi4+0x2c2>
 800044a:	42ac      	cmp	r4, r5
 800044c:	d941      	bls.n	80004d2 <__udivmoddi4+0x2c2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	441d      	add	r5, r3
 8000454:	1b2d      	subs	r5, r5, r4
 8000456:	fa1f fe8e 	uxth.w	lr, lr
 800045a:	fbb5 f0fc 	udiv	r0, r5, ip
 800045e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000462:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45a0      	cmp	r8, r4
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x26e>
 800046e:	18e4      	adds	r4, r4, r3
 8000470:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000474:	d229      	bcs.n	80004ca <__udivmoddi4+0x2ba>
 8000476:	45a0      	cmp	r8, r4
 8000478:	d927      	bls.n	80004ca <__udivmoddi4+0x2ba>
 800047a:	3802      	subs	r0, #2
 800047c:	441c      	add	r4, r3
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba4 0408 	sub.w	r4, r4, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454c      	cmp	r4, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	464d      	mov	r5, r9
 8000490:	d315      	bcc.n	80004be <__udivmoddi4+0x2ae>
 8000492:	d012      	beq.n	80004ba <__udivmoddi4+0x2aa>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x29c>
 8000496:	ebba 030e 	subs.w	r3, sl, lr
 800049a:	eb64 0405 	sbc.w	r4, r4, r5
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40cb      	lsrs	r3, r1
 80004a4:	431f      	orrs	r7, r3
 80004a6:	40cc      	lsrs	r4, r1
 80004a8:	6037      	str	r7, [r6, #0]
 80004aa:	6074      	str	r4, [r6, #4]
 80004ac:	2100      	movs	r1, #0
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	4618      	mov	r0, r3
 80004b4:	e6f8      	b.n	80002a8 <__udivmoddi4+0x98>
 80004b6:	4690      	mov	r8, r2
 80004b8:	e6e0      	b.n	800027c <__udivmoddi4+0x6c>
 80004ba:	45c2      	cmp	sl, r8
 80004bc:	d2ea      	bcs.n	8000494 <__udivmoddi4+0x284>
 80004be:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c2:	eb69 0503 	sbc.w	r5, r9, r3
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7e4      	b.n	8000494 <__udivmoddi4+0x284>
 80004ca:	4628      	mov	r0, r5
 80004cc:	e7d7      	b.n	800047e <__udivmoddi4+0x26e>
 80004ce:	4640      	mov	r0, r8
 80004d0:	e791      	b.n	80003f6 <__udivmoddi4+0x1e6>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e7be      	b.n	8000454 <__udivmoddi4+0x244>
 80004d6:	4601      	mov	r1, r0
 80004d8:	e778      	b.n	80003cc <__udivmoddi4+0x1bc>
 80004da:	3802      	subs	r0, #2
 80004dc:	443c      	add	r4, r7
 80004de:	e745      	b.n	800036c <__udivmoddi4+0x15c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xe6>
 80004e4:	f1a8 0802 	sub.w	r8, r8, #2
 80004e8:	443d      	add	r5, r7
 80004ea:	e72b      	b.n	8000344 <__udivmoddi4+0x134>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	4a07      	ldr	r2, [pc, #28]	; (800051c <vApplicationGetIdleTaskMemory+0x2c>)
 8000500:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	4a06      	ldr	r2, [pc, #24]	; (8000520 <vApplicationGetIdleTaskMemory+0x30>)
 8000506:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000038 	.word	0x20000038
 8000520:	2000008c 	.word	0x2000008c

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fd03 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f86f 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f915 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000536:	f000 f8e3 	bl	8000700 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	4923      	ldr	r1, [pc, #140]	; (80005cc <main+0xa8>)
 800053e:	4824      	ldr	r0, [pc, #144]	; (80005d0 <main+0xac>)
 8000540:	f002 ff1c 	bl	800337c <HAL_UART_Receive_IT>

  CountingSem=xSemaphoreCreateCounting(3,0);
 8000544:	2100      	movs	r1, #0
 8000546:	2003      	movs	r0, #3
 8000548:	f004 fcce 	bl	8004ee8 <xQueueCreateCountingSemaphore>
 800054c:	4602      	mov	r2, r0
 800054e:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <main+0xb0>)
 8000550:	601a      	str	r2, [r3, #0]
  if(CountingSem==NULL)
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <main+0xb0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d106      	bne.n	8000568 <main+0x44>
  {
	  HAL_UART_Transmit(&huart2,(uint8_t *) "Unable to create Semaphore\r\n",28,100);
 800055a:	2364      	movs	r3, #100	; 0x64
 800055c:	221c      	movs	r2, #28
 800055e:	491e      	ldr	r1, [pc, #120]	; (80005d8 <main+0xb4>)
 8000560:	481b      	ldr	r0, [pc, #108]	; (80005d0 <main+0xac>)
 8000562:	f002 fe77 	bl	8003254 <HAL_UART_Transmit>
 8000566:	e006      	b.n	8000576 <main+0x52>
  }
  else
  {
	  HAL_UART_Transmit(&huart2,(uint8_t *) "Counting Semaphore create successfully\r\n",41,1000);
 8000568:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056c:	2229      	movs	r2, #41	; 0x29
 800056e:	491b      	ldr	r1, [pc, #108]	; (80005dc <main+0xb8>)
 8000570:	4817      	ldr	r0, [pc, #92]	; (80005d0 <main+0xac>)
 8000572:	f002 fe6f 	bl	8003254 <HAL_UART_Transmit>
  }

  //creat task
  xTaskCreate(HPT_TASK,"HPT",128, NULL, 3, &HPThandler);
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <main+0xbc>)
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2303      	movs	r3, #3
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2300      	movs	r3, #0
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	4918      	ldr	r1, [pc, #96]	; (80005e4 <main+0xc0>)
 8000584:	4818      	ldr	r0, [pc, #96]	; (80005e8 <main+0xc4>)
 8000586:	f004 ff4b 	bl	8005420 <xTaskCreate>
  xTaskCreate(MPT_TASK,"MPT",128, NULL, 2, &MPThandler);
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <main+0xc8>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	4916      	ldr	r1, [pc, #88]	; (80005f0 <main+0xcc>)
 8000598:	4816      	ldr	r0, [pc, #88]	; (80005f4 <main+0xd0>)
 800059a:	f004 ff41 	bl	8005420 <xTaskCreate>
  xTaskCreate(LPT_TASK,"LPT",128, NULL, 1, &LPThandler);
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <main+0xd4>)
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	2280      	movs	r2, #128	; 0x80
 80005aa:	4914      	ldr	r1, [pc, #80]	; (80005fc <main+0xd8>)
 80005ac:	4814      	ldr	r0, [pc, #80]	; (8000600 <main+0xdc>)
 80005ae:	f004 ff37 	bl	8005420 <xTaskCreate>
  xTaskCreate(VLPT_TASK,"VLPT",128, NULL, 0, &VLPThandler);
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <main+0xe0>)
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2300      	movs	r3, #0
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2280      	movs	r2, #128	; 0x80
 80005be:	4912      	ldr	r1, [pc, #72]	; (8000608 <main+0xe4>)
 80005c0:	4812      	ldr	r0, [pc, #72]	; (800060c <main+0xe8>)
 80005c2:	f004 ff2d 	bl	8005420 <xTaskCreate>


  vTaskStartScheduler();
 80005c6:	f005 f923 	bl	8005810 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <main+0xa6>
 80005cc:	20000290 	.word	0x20000290
 80005d0:	20000fac 	.word	0x20000fac
 80005d4:	20000fa4 	.word	0x20000fa4
 80005d8:	080064c4 	.word	0x080064c4
 80005dc:	080064e4 	.word	0x080064e4
 80005e0:	20000f9c 	.word	0x20000f9c
 80005e4:	08006510 	.word	0x08006510
 80005e8:	08000791 	.word	0x08000791
 80005ec:	20000fa0 	.word	0x20000fa0
 80005f0:	08006514 	.word	0x08006514
 80005f4:	080008c1 	.word	0x080008c1
 80005f8:	20001030 	.word	0x20001030
 80005fc:	08006518 	.word	0x08006518
 8000600:	080009f1 	.word	0x080009f1
 8000604:	20000fa8 	.word	0x20000fa8
 8000608:	0800651c 	.word	0x0800651c
 800060c:	08000b21 	.word	0x08000b21

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0b8      	sub	sp, #224	; 0xe0
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800061a:	2244      	movs	r2, #68	; 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f005 feec 	bl	80063fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2288      	movs	r2, #136	; 0x88
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f005 fede 	bl	80063fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000640:	2310      	movs	r3, #16
 8000642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000652:	2360      	movs	r3, #96	; 0x60
 8000654:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800065e:	2301      	movs	r3, #1
 8000660:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800066a:	2328      	movs	r3, #40	; 0x28
 800066c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000670:	2307      	movs	r3, #7
 8000672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fff8 	bl	800167c <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000692:	f000 fb27 	bl	8000ce4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2303      	movs	r3, #3
 800069e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006b8:	2104      	movs	r1, #4
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fbc4 	bl	8001e48 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006c6:	f000 fb0d 	bl	8000ce4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d2:	463b      	mov	r3, r7
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fded 	bl	80022b4 <HAL_RCCEx_PeriphCLKConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006e0:	f000 fb00 	bl	8000ce4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e8:	f000 ff72 	bl	80015d0 <HAL_PWREx_ControlVoltageScaling>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006f2:	f000 faf7 	bl	8000ce4 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	37e0      	adds	r7, #224	; 0xe0
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <MX_USART2_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000744:	f002 fd38 	bl	80031b8 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 fac9 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000fac 	.word	0x20000fac
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4a09      	ldr	r2, [pc, #36]	; (800078c <MX_GPIO_Init+0x2c>)
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_GPIO_Init+0x2c>)
 800076a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_GPIO_Init+0x2c>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <HPT_TASK>:

/* USER CODE BEGIN 4 */
void HPT_TASK(void *pvParameters)
{
 8000790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000792:	b0ab      	sub	sp, #172	; 0xac
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(CountingSem);*/

	while(1)
	{
		char str[150];
		strcpy(str,"Entered HPT Task\r\n About to AQUIRE the Semaphore\r\n");
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4a41      	ldr	r2, [pc, #260]	; (80008a4 <HPT_TASK+0x114>)
 800079e:	461c      	mov	r4, r3
 80007a0:	4615      	mov	r5, r2
 80007a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ae:	682b      	ldr	r3, [r5, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	8022      	strh	r2, [r4, #0]
 80007b4:	3402      	adds	r4, #2
 80007b6:	0c1b      	lsrs	r3, r3, #16
 80007b8:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd06 	bl	80001d0 <strlen>
 80007c4:	4603      	mov	r3, r0
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	f107 010c 	add.w	r1, r7, #12
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007d0:	4835      	ldr	r0, [pc, #212]	; (80008a8 <HPT_TASK+0x118>)
 80007d2:	f002 fd3f 	bl	8003254 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem,portMAX_DELAY);
 80007d6:	4b35      	ldr	r3, [pc, #212]	; (80008ac <HPT_TASK+0x11c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007de:	4618      	mov	r0, r3
 80007e0:	f004 fc3c 	bl	800505c <xQueueSemaphoreTake>
		//portMAX_DELAY means wait forever until semaphore available

		itoa (resource[indx], sresource, 10);
 80007e4:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <HPT_TASK+0x120>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a32      	ldr	r2, [pc, #200]	; (80008b4 <HPT_TASK+0x124>)
 80007ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ee:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80007f2:	220a      	movs	r2, #10
 80007f4:	4618      	mov	r0, r3
 80007f6:	f005 fdff 	bl	80063f8 <itoa>
		//itoa convert int to string
		strcpy (str, "Leaving HPT Task\r\n Data ACCESSED is :: ");
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <HPT_TASK+0x128>)
 8000800:	461c      	mov	r4, r3
 8000802:	4615      	mov	r5, r2
 8000804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000810:	e884 0003 	stmia.w	r4, {r0, r1}
		strcat (str, sresource);
 8000814:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4611      	mov	r1, r2
 800081e:	4618      	mov	r0, r3
 8000820:	f005 fdf4 	bl	800640c <strcat>
		strcat (str, "\r\n Not releasing the Semaphore\r\n\r\n\r\n");
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fcd1 	bl	80001d0 <strlen>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4413      	add	r3, r2
 8000838:	4a20      	ldr	r2, [pc, #128]	; (80008bc <HPT_TASK+0x12c>)
 800083a:	4614      	mov	r4, r2
 800083c:	469e      	mov	lr, r3
 800083e:	f104 0c20 	add.w	ip, r4, #32
 8000842:	4675      	mov	r5, lr
 8000844:	4626      	mov	r6, r4
 8000846:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000848:	6028      	str	r0, [r5, #0]
 800084a:	6069      	str	r1, [r5, #4]
 800084c:	60aa      	str	r2, [r5, #8]
 800084e:	60eb      	str	r3, [r5, #12]
 8000850:	3410      	adds	r4, #16
 8000852:	f10e 0e10 	add.w	lr, lr, #16
 8000856:	4564      	cmp	r4, ip
 8000858:	d1f3      	bne.n	8000842 <HPT_TASK+0xb2>
 800085a:	4673      	mov	r3, lr
 800085c:	4622      	mov	r2, r4
 800085e:	6810      	ldr	r0, [r2, #0]
 8000860:	6018      	str	r0, [r3, #0]
 8000862:	7912      	ldrb	r2, [r2, #4]
 8000864:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fcb0 	bl	80001d0 <strlen>
 8000870:	4603      	mov	r3, r0
 8000872:	b29a      	uxth	r2, r3
 8000874:	f107 010c 	add.w	r1, r7, #12
 8000878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <HPT_TASK+0x118>)
 800087e:	f002 fce9 	bl	8003254 <HAL_UART_Transmit>

		indx++;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HPT_TASK+0x120>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <HPT_TASK+0x120>)
 800088a:	6013      	str	r3, [r2, #0]
		if (indx>2) indx = 0;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HPT_TASK+0x120>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b02      	cmp	r3, #2
 8000892:	dd02      	ble.n	800089a <HPT_TASK+0x10a>
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HPT_TASK+0x120>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]

		//vTaskDelay(3000);
		vTaskDelete(NULL);
 800089a:	2000      	movs	r0, #0
 800089c:	f004 fef6 	bl	800568c <vTaskDelete>
	{
 80008a0:	e77a      	b.n	8000798 <HPT_TASK+0x8>
 80008a2:	bf00      	nop
 80008a4:	08006524 	.word	0x08006524
 80008a8:	20000fac 	.word	0x20000fac
 80008ac:	20000fa4 	.word	0x20000fa4
 80008b0:	2000028c 	.word	0x2000028c
 80008b4:	20000000 	.word	0x20000000
 80008b8:	08006558 	.word	0x08006558
 80008bc:	08006580 	.word	0x08006580

080008c0 <MPT_TASK>:
	}
}

void MPT_TASK(void *pvParameters)
{
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	b0ab      	sub	sp, #172	; 0xac
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	char sresource[3];

	while(1)
	{
		char str[150];
		strcpy(str,"Entered MPT Task\r\n About to AQUIRE the Semaphore\r\n");
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4a41      	ldr	r2, [pc, #260]	; (80009d4 <MPT_TASK+0x114>)
 80008ce:	461c      	mov	r4, r3
 80008d0:	4615      	mov	r5, r2
 80008d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008de:	682b      	ldr	r3, [r5, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	8022      	strh	r2, [r4, #0]
 80008e4:	3402      	adds	r4, #2
 80008e6:	0c1b      	lsrs	r3, r3, #16
 80008e8:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fc6e 	bl	80001d0 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	f107 010c 	add.w	r1, r7, #12
 80008fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000900:	4835      	ldr	r0, [pc, #212]	; (80009d8 <MPT_TASK+0x118>)
 8000902:	f002 fca7 	bl	8003254 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem,portMAX_DELAY);
 8000906:	4b35      	ldr	r3, [pc, #212]	; (80009dc <MPT_TASK+0x11c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800090e:	4618      	mov	r0, r3
 8000910:	f004 fba4 	bl	800505c <xQueueSemaphoreTake>
		//portMAX_DELAY means wait forever until semaphore available

		itoa (resource[indx], sresource, 10);
 8000914:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <MPT_TASK+0x120>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a32      	ldr	r2, [pc, #200]	; (80009e4 <MPT_TASK+0x124>)
 800091a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000922:	220a      	movs	r2, #10
 8000924:	4618      	mov	r0, r3
 8000926:	f005 fd67 	bl	80063f8 <itoa>
		//itoa convert int to string
		strcpy (str, "Leaving MPT Task\r\n Data ACCESSED is :: ");
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4a2e      	ldr	r2, [pc, #184]	; (80009e8 <MPT_TASK+0x128>)
 8000930:	461c      	mov	r4, r3
 8000932:	4615      	mov	r5, r2
 8000934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000940:	e884 0003 	stmia.w	r4, {r0, r1}
		strcat (str, sresource);
 8000944:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	4611      	mov	r1, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f005 fd5c 	bl	800640c <strcat>
		strcat (str, "\r\n Not releasing the Semaphore\r\n\r\n\r\n");
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fc39 	bl	80001d0 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4413      	add	r3, r2
 8000968:	4a20      	ldr	r2, [pc, #128]	; (80009ec <MPT_TASK+0x12c>)
 800096a:	4614      	mov	r4, r2
 800096c:	469e      	mov	lr, r3
 800096e:	f104 0c20 	add.w	ip, r4, #32
 8000972:	4675      	mov	r5, lr
 8000974:	4626      	mov	r6, r4
 8000976:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000978:	6028      	str	r0, [r5, #0]
 800097a:	6069      	str	r1, [r5, #4]
 800097c:	60aa      	str	r2, [r5, #8]
 800097e:	60eb      	str	r3, [r5, #12]
 8000980:	3410      	adds	r4, #16
 8000982:	f10e 0e10 	add.w	lr, lr, #16
 8000986:	4564      	cmp	r4, ip
 8000988:	d1f3      	bne.n	8000972 <MPT_TASK+0xb2>
 800098a:	4673      	mov	r3, lr
 800098c:	4622      	mov	r2, r4
 800098e:	6810      	ldr	r0, [r2, #0]
 8000990:	6018      	str	r0, [r3, #0]
 8000992:	7912      	ldrb	r2, [r2, #4]
 8000994:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fc18 	bl	80001d0 <strlen>
 80009a0:	4603      	mov	r3, r0
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	f107 010c 	add.w	r1, r7, #12
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ac:	480a      	ldr	r0, [pc, #40]	; (80009d8 <MPT_TASK+0x118>)
 80009ae:	f002 fc51 	bl	8003254 <HAL_UART_Transmit>

		indx++;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MPT_TASK+0x120>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <MPT_TASK+0x120>)
 80009ba:	6013      	str	r3, [r2, #0]
		if (indx>2) indx = 0;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MPT_TASK+0x120>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	dd02      	ble.n	80009ca <MPT_TASK+0x10a>
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MPT_TASK+0x120>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]

		//vTaskDelay(2000);
		vTaskDelete(NULL);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f004 fe5e 	bl	800568c <vTaskDelete>
	{
 80009d0:	e77a      	b.n	80008c8 <MPT_TASK+0x8>
 80009d2:	bf00      	nop
 80009d4:	080065a8 	.word	0x080065a8
 80009d8:	20000fac 	.word	0x20000fac
 80009dc:	20000fa4 	.word	0x20000fa4
 80009e0:	2000028c 	.word	0x2000028c
 80009e4:	20000000 	.word	0x20000000
 80009e8:	080065dc 	.word	0x080065dc
 80009ec:	08006580 	.word	0x08006580

080009f0 <LPT_TASK>:
	}
}

void LPT_TASK(void *pvParameters)
{
 80009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f2:	b0ab      	sub	sp, #172	; 0xac
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	char sresource[3];

	while(1)
	{
		char str[150];
		strcpy(str,"Entered LPT Task\r\n About to AQUIRE the Semaphore\r\n");
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	4a41      	ldr	r2, [pc, #260]	; (8000b04 <LPT_TASK+0x114>)
 80009fe:	461c      	mov	r4, r3
 8000a00:	4615      	mov	r5, r2
 8000a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0e:	682b      	ldr	r3, [r5, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	8022      	strh	r2, [r4, #0]
 8000a14:	3402      	adds	r4, #2
 8000a16:	0c1b      	lsrs	r3, r3, #16
 8000a18:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fbd6 	bl	80001d0 <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	f107 010c 	add.w	r1, r7, #12
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a30:	4835      	ldr	r0, [pc, #212]	; (8000b08 <LPT_TASK+0x118>)
 8000a32:	f002 fc0f 	bl	8003254 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem,portMAX_DELAY);
 8000a36:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <LPT_TASK+0x11c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 fb0c 	bl	800505c <xQueueSemaphoreTake>
		//portMAX_DELAY means wait forever until semaphore available

		itoa (resource[indx], sresource, 10);
 8000a44:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <LPT_TASK+0x120>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a32      	ldr	r2, [pc, #200]	; (8000b14 <LPT_TASK+0x124>)
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000a52:	220a      	movs	r2, #10
 8000a54:	4618      	mov	r0, r3
 8000a56:	f005 fccf 	bl	80063f8 <itoa>
		//itoa convert int to string
		strcpy (str, "Leaving LPT Task\r\n Data ACCESSED is :: ");
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4a2e      	ldr	r2, [pc, #184]	; (8000b18 <LPT_TASK+0x128>)
 8000a60:	461c      	mov	r4, r3
 8000a62:	4615      	mov	r5, r2
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a70:	e884 0003 	stmia.w	r4, {r0, r1}
		strcat (str, sresource);
 8000a74:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 fcc4 	bl	800640c <strcat>
		strcat (str, "\r\n Not releasing the Semaphore\r\n\r\n\r\n");
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fba1 	bl	80001d0 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4413      	add	r3, r2
 8000a98:	4a20      	ldr	r2, [pc, #128]	; (8000b1c <LPT_TASK+0x12c>)
 8000a9a:	4614      	mov	r4, r2
 8000a9c:	469e      	mov	lr, r3
 8000a9e:	f104 0c20 	add.w	ip, r4, #32
 8000aa2:	4675      	mov	r5, lr
 8000aa4:	4626      	mov	r6, r4
 8000aa6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000aa8:	6028      	str	r0, [r5, #0]
 8000aaa:	6069      	str	r1, [r5, #4]
 8000aac:	60aa      	str	r2, [r5, #8]
 8000aae:	60eb      	str	r3, [r5, #12]
 8000ab0:	3410      	adds	r4, #16
 8000ab2:	f10e 0e10 	add.w	lr, lr, #16
 8000ab6:	4564      	cmp	r4, ip
 8000ab8:	d1f3      	bne.n	8000aa2 <LPT_TASK+0xb2>
 8000aba:	4673      	mov	r3, lr
 8000abc:	4622      	mov	r2, r4
 8000abe:	6810      	ldr	r0, [r2, #0]
 8000ac0:	6018      	str	r0, [r3, #0]
 8000ac2:	7912      	ldrb	r2, [r2, #4]
 8000ac4:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fb80 	bl	80001d0 <strlen>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	f107 010c 	add.w	r1, r7, #12
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000adc:	480a      	ldr	r0, [pc, #40]	; (8000b08 <LPT_TASK+0x118>)
 8000ade:	f002 fbb9 	bl	8003254 <HAL_UART_Transmit>

		indx++;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <LPT_TASK+0x120>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <LPT_TASK+0x120>)
 8000aea:	6013      	str	r3, [r2, #0]
		if (indx>2) indx = 0;
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <LPT_TASK+0x120>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	dd02      	ble.n	8000afa <LPT_TASK+0x10a>
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <LPT_TASK+0x120>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]

		//vTaskDelay(1000);
		vTaskDelete(NULL);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f004 fdc6 	bl	800568c <vTaskDelete>
	{
 8000b00:	e77a      	b.n	80009f8 <LPT_TASK+0x8>
 8000b02:	bf00      	nop
 8000b04:	08006604 	.word	0x08006604
 8000b08:	20000fac 	.word	0x20000fac
 8000b0c:	20000fa4 	.word	0x20000fa4
 8000b10:	2000028c 	.word	0x2000028c
 8000b14:	20000000 	.word	0x20000000
 8000b18:	08006638 	.word	0x08006638
 8000b1c:	08006580 	.word	0x08006580

08000b20 <VLPT_TASK>:
	}
}

void VLPT_TASK(void *pvParameters)
{
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	b0ab      	sub	sp, #172	; 0xac
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	char sresource[3];

	while(1)
	{
		char str[150];
		strcpy(str,"Entered VLPT Task\r\n About to AQUIRE the Semaphore\r\n");
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	4a3f      	ldr	r2, [pc, #252]	; (8000c2c <VLPT_TASK+0x10c>)
 8000b2e:	461c      	mov	r4, r3
 8000b30:	4615      	mov	r5, r2
 8000b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3e:	682b      	ldr	r3, [r5, #0]
 8000b40:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fb42 	bl	80001d0 <strlen>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	f107 010c 	add.w	r1, r7, #12
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b58:	4835      	ldr	r0, [pc, #212]	; (8000c30 <VLPT_TASK+0x110>)
 8000b5a:	f002 fb7b 	bl	8003254 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem,portMAX_DELAY);
 8000b5e:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <VLPT_TASK+0x114>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b66:	4618      	mov	r0, r3
 8000b68:	f004 fa78 	bl	800505c <xQueueSemaphoreTake>
		//portMAX_DELAY means wait forever until semaphore available

		itoa (resource[indx], sresource, 10);
 8000b6c:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <VLPT_TASK+0x118>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <VLPT_TASK+0x11c>)
 8000b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b76:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000b7a:	220a      	movs	r2, #10
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f005 fc3b 	bl	80063f8 <itoa>
		//itoa convert int to string
		strcpy (str, "Leaving VLPT Task\r\n Data ACCESSED is :: ");
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	4a2e      	ldr	r2, [pc, #184]	; (8000c40 <VLPT_TASK+0x120>)
 8000b88:	461c      	mov	r4, r3
 8000b8a:	4615      	mov	r5, r2
 8000b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b98:	c403      	stmia	r4!, {r0, r1}
 8000b9a:	7022      	strb	r2, [r4, #0]
		strcat (str, sresource);
 8000b9c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f005 fc30 	bl	800640c <strcat>
		strcat (str, "\r\n Not releasing the Semaphore\r\n\r\n\r\n");
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fb0d 	bl	80001d0 <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <VLPT_TASK+0x124>)
 8000bc2:	4614      	mov	r4, r2
 8000bc4:	469e      	mov	lr, r3
 8000bc6:	f104 0c20 	add.w	ip, r4, #32
 8000bca:	4675      	mov	r5, lr
 8000bcc:	4626      	mov	r6, r4
 8000bce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bd0:	6028      	str	r0, [r5, #0]
 8000bd2:	6069      	str	r1, [r5, #4]
 8000bd4:	60aa      	str	r2, [r5, #8]
 8000bd6:	60eb      	str	r3, [r5, #12]
 8000bd8:	3410      	adds	r4, #16
 8000bda:	f10e 0e10 	add.w	lr, lr, #16
 8000bde:	4564      	cmp	r4, ip
 8000be0:	d1f3      	bne.n	8000bca <VLPT_TASK+0xaa>
 8000be2:	4673      	mov	r3, lr
 8000be4:	4622      	mov	r2, r4
 8000be6:	6810      	ldr	r0, [r2, #0]
 8000be8:	6018      	str	r0, [r3, #0]
 8000bea:	7912      	ldrb	r2, [r2, #4]
 8000bec:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff faec 	bl	80001d0 <strlen>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	f107 010c 	add.w	r1, r7, #12
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c04:	480a      	ldr	r0, [pc, #40]	; (8000c30 <VLPT_TASK+0x110>)
 8000c06:	f002 fb25 	bl	8003254 <HAL_UART_Transmit>

		indx++;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <VLPT_TASK+0x118>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <VLPT_TASK+0x118>)
 8000c12:	6013      	str	r3, [r2, #0]
		if (indx>2) indx = 0;
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <VLPT_TASK+0x118>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	dd02      	ble.n	8000c22 <VLPT_TASK+0x102>
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <VLPT_TASK+0x118>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]

		vTaskDelay(3000);
 8000c22:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c26:	f004 fdbf 	bl	80057a8 <vTaskDelay>
	{
 8000c2a:	e77d      	b.n	8000b28 <VLPT_TASK+0x8>
 8000c2c:	08006660 	.word	0x08006660
 8000c30:	20000fac 	.word	0x20000fac
 8000c34:	20000fa4 	.word	0x20000fa4
 8000c38:	2000028c 	.word	0x2000028c
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	08006694 	.word	0x08006694
 8000c44:	08006580 	.word	0x08006580

08000c48 <HAL_UART_RxCpltCallback>:

	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &rx_data, 1);
 8000c50:	2201      	movs	r2, #1
 8000c52:	4918      	ldr	r1, [pc, #96]	; (8000cb4 <HAL_UART_RxCpltCallback+0x6c>)
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f002 fb91 	bl	800337c <HAL_UART_Receive_IT>
	if (rx_data == 'r')
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_UART_RxCpltCallback+0x6c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b72      	cmp	r3, #114	; 0x72
 8000c60:	d124      	bne.n	8000cac <HAL_UART_RxCpltCallback+0x64>
	{
		// release the semaphore here
		 /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
		 it will get set to pdTRUE inside the interrupt safe API function if a
		 context switch is required. */
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]

		xSemaphoreGiveFromISR(CountingSem, &xHigherPriorityTaskWoken);  // ISR SAFE VERSION
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_UART_RxCpltCallback+0x70>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f107 020c 	add.w	r2, r7, #12
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f004 f96a 	bl	8004f4a <xQueueGiveFromISR>
		xSemaphoreGiveFromISR(CountingSem, &xHigherPriorityTaskWoken);  // ISR SAFE VERSION
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_UART_RxCpltCallback+0x70>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f107 020c 	add.w	r2, r7, #12
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 f962 	bl	8004f4a <xQueueGiveFromISR>
		xSemaphoreGiveFromISR(CountingSem, &xHigherPriorityTaskWoken);  // ISR SAFE VERSION
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_UART_RxCpltCallback+0x70>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f107 020c 	add.w	r2, r7, #12
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f004 f95a 	bl	8004f4a <xQueueGiveFromISR>
		 xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
		 then calling portEND_SWITCHING_ISR() will request a context switch. If
		 xHigherPriorityTaskWoken is still pdFALSE then calling
		 portEND_SWITCHING_ISR() will have no effect */

		portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d007      	beq.n	8000cac <HAL_UART_RxCpltCallback+0x64>
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <HAL_UART_RxCpltCallback+0x74>)
 8000c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	f3bf 8f4f 	dsb	sy
 8000ca8:	f3bf 8f6f 	isb	sy
	}
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000290 	.word	0x20000290
 8000cb8:	20000fa4 	.word	0x20000fa4
 8000cbc:	e000ed04 	.word	0xe000ed04

08000cc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d101      	bne.n	8000cd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cd2:	f000 f947 	bl	8000f64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40012c00 	.word	0x40012c00

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cea:	e7fe      	b.n	8000cea <Error_Handler+0x6>

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <HAL_MspInit+0x4c>)
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_MspInit+0x4c>)
 8000cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	6593      	str	r3, [r2, #88]	; 0x58
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	210f      	movs	r1, #15
 8000d26:	f06f 0001 	mvn.w	r0, #1
 8000d2a:	f000 f9f1 	bl	8001110 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1b      	ldr	r2, [pc, #108]	; (8000dc8 <HAL_UART_MspInit+0x8c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d130      	bne.n	8000dc0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5e:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	6593      	str	r3, [r2, #88]	; 0x58
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d8e:	230c      	movs	r3, #12
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d9e:	2307      	movs	r3, #7
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dac:	f000 fa5a 	bl	8001264 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2105      	movs	r1, #5
 8000db4:	2026      	movs	r0, #38	; 0x26
 8000db6:	f000 f9ab 	bl	8001110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dba:	2026      	movs	r0, #38	; 0x26
 8000dbc:	f000 f9c4 	bl	8001148 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	2019      	movs	r0, #25
 8000de6:	f000 f993 	bl	8001110 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000dea:	2019      	movs	r0, #25
 8000dec:	f000 f9ac 	bl	8001148 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000df0:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <HAL_InitTick+0x9c>)
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <HAL_InitTick+0x9c>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dfa:	6613      	str	r3, [r2, #96]	; 0x60
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <HAL_InitTick+0x9c>)
 8000dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e08:	f107 0210 	add.w	r2, r7, #16
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 f9bc 	bl	8002190 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e18:	f001 f9a4 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 8000e1c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e20:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <HAL_InitTick+0xa0>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	0c9b      	lsrs	r3, r3, #18
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <HAL_InitTick+0xa8>)
 8000e30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e4e:	f001 fee1 	bl	8002c14 <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d104      	bne.n	8000e62 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e58:	4806      	ldr	r0, [pc, #24]	; (8000e74 <HAL_InitTick+0xa4>)
 8000e5a:	f001 ff3d 	bl	8002cd8 <HAL_TIM_Base_Start_IT>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3730      	adds	r7, #48	; 0x30
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	431bde83 	.word	0x431bde83
 8000e74:	20001034 	.word	0x20001034
 8000e78:	40012c00 	.word	0x40012c00

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler+0x4>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <MemManage_Handler+0x4>

08000e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000eae:	f001 ff83 	bl	8002db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20001034 	.word	0x20001034

08000ebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <USART2_IRQHandler+0x10>)
 8000ec2:	f002 fa9f 	bl	8003404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000fac 	.word	0x20000fac

08000ed0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ed4:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <SystemInit+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <SystemInit+0x5c>)
 8000ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ee4:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <SystemInit+0x60>)
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <SystemInit+0x60>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <SystemInit+0x60>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <SystemInit+0x60>)
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <SystemInit+0x60>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f00:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <SystemInit+0x60>)
 8000f08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f0c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <SystemInit+0x60>)
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <SystemInit+0x60>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <SystemInit+0x60>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f000 f8db 	bl	80010fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff ff43 	bl	8000dd0 <HAL_InitTick>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	e001      	b.n	8000f5a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f56:	f7ff fec9 	bl	8000cec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000014 	.word	0x20000014
 8000f88:	20001080 	.word	0x20001080

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20001080 	.word	0x20001080

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	4909      	ldr	r1, [pc, #36]	; (8001040 <__NVIC_EnableIRQ+0x38>)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	095b      	lsrs	r3, r3, #5
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	f002 021f 	and.w	r2, r2, #31
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	490d      	ldr	r1, [pc, #52]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	4909      	ldr	r1, [pc, #36]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	2201      	movs	r2, #1
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	1e5a      	subs	r2, r3, #1
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	401a      	ands	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010de:	2101      	movs	r1, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	1e59      	subs	r1, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff4e 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001122:	f7ff ff63 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001126:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	6978      	ldr	r0, [r7, #20]
 800112e:	f7ff ffb3 	bl	8001098 <NVIC_EncodePriority>
 8001132:	4602      	mov	r2, r0
 8001134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff82 	bl	8001044 <__NVIC_SetPriority>
}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff56 	bl	8001008 <__NVIC_EnableIRQ>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d008      	beq.n	800118e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2204      	movs	r2, #4
 8001180:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e022      	b.n	80011d4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	6812      	ldr	r2, [r2, #0]
 8001198:	f022 020e 	bic.w	r2, r2, #14
 800119c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	6812      	ldr	r2, [r2, #0]
 80011a8:	f022 0201 	bic.w	r2, r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011b6:	f002 021c 	and.w	r2, r2, #28
 80011ba:	2101      	movs	r1, #1
 80011bc:	fa01 f202 	lsl.w	r2, r1, r2
 80011c0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d005      	beq.n	8001204 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2204      	movs	r2, #4
 80011fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e029      	b.n	8001258 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	f022 020e 	bic.w	r2, r2, #14
 8001212:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	f022 0201 	bic.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800122c:	f002 021c 	and.w	r2, r2, #28
 8001230:	2101      	movs	r1, #1
 8001232:	fa01 f202 	lsl.w	r2, r1, r2
 8001236:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	4798      	blx	r3
    }
  }
  return status;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001272:	e17f      	b.n	8001574 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	4013      	ands	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 8171 	beq.w	800156e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d00b      	beq.n	80012ac <HAL_GPIO_Init+0x48>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d007      	beq.n	80012ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a0:	2b11      	cmp	r3, #17
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b12      	cmp	r3, #18
 80012aa:	d130      	bne.n	800130e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012e2:	2201      	movs	r2, #1
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	f003 0201 	and.w	r2, r3, #1
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b03      	cmp	r3, #3
 8001318:	d118      	bne.n	800134c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001320:	2201      	movs	r2, #1
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	f003 0201 	and.w	r2, r3, #1
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x128>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b12      	cmp	r3, #18
 800138a:	d123      	bne.n	80013d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	6939      	ldr	r1, [r7, #16]
 80013d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0203 	and.w	r2, r3, #3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80ac 	beq.w	800156e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	4a5e      	ldr	r2, [pc, #376]	; (8001590 <HAL_GPIO_Init+0x32c>)
 8001418:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <HAL_GPIO_Init+0x32c>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6613      	str	r3, [r2, #96]	; 0x60
 8001422:	4b5b      	ldr	r3, [pc, #364]	; (8001590 <HAL_GPIO_Init+0x32c>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800142e:	4a59      	ldr	r2, [pc, #356]	; (8001594 <HAL_GPIO_Init+0x330>)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	220f      	movs	r2, #15
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001458:	d025      	beq.n	80014a6 <HAL_GPIO_Init+0x242>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4e      	ldr	r2, [pc, #312]	; (8001598 <HAL_GPIO_Init+0x334>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d01f      	beq.n	80014a2 <HAL_GPIO_Init+0x23e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4d      	ldr	r2, [pc, #308]	; (800159c <HAL_GPIO_Init+0x338>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d019      	beq.n	800149e <HAL_GPIO_Init+0x23a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4c      	ldr	r2, [pc, #304]	; (80015a0 <HAL_GPIO_Init+0x33c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d013      	beq.n	800149a <HAL_GPIO_Init+0x236>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4b      	ldr	r2, [pc, #300]	; (80015a4 <HAL_GPIO_Init+0x340>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00d      	beq.n	8001496 <HAL_GPIO_Init+0x232>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4a      	ldr	r2, [pc, #296]	; (80015a8 <HAL_GPIO_Init+0x344>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d007      	beq.n	8001492 <HAL_GPIO_Init+0x22e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a49      	ldr	r2, [pc, #292]	; (80015ac <HAL_GPIO_Init+0x348>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d101      	bne.n	800148e <HAL_GPIO_Init+0x22a>
 800148a:	2306      	movs	r3, #6
 800148c:	e00c      	b.n	80014a8 <HAL_GPIO_Init+0x244>
 800148e:	2307      	movs	r3, #7
 8001490:	e00a      	b.n	80014a8 <HAL_GPIO_Init+0x244>
 8001492:	2305      	movs	r3, #5
 8001494:	e008      	b.n	80014a8 <HAL_GPIO_Init+0x244>
 8001496:	2304      	movs	r3, #4
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x244>
 800149a:	2303      	movs	r3, #3
 800149c:	e004      	b.n	80014a8 <HAL_GPIO_Init+0x244>
 800149e:	2302      	movs	r3, #2
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_Init+0x244>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <HAL_GPIO_Init+0x244>
 80014a6:	2300      	movs	r3, #0
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	f002 0203 	and.w	r2, r2, #3
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	4093      	lsls	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014b8:	4936      	ldr	r1, [pc, #216]	; (8001594 <HAL_GPIO_Init+0x330>)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014c6:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <HAL_GPIO_Init+0x34c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ea:	4a31      	ldr	r2, [pc, #196]	; (80015b0 <HAL_GPIO_Init+0x34c>)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <HAL_GPIO_Init+0x34c>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001514:	4a26      	ldr	r2, [pc, #152]	; (80015b0 <HAL_GPIO_Init+0x34c>)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800151a:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <HAL_GPIO_Init+0x34c>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800153e:	4a1c      	ldr	r2, [pc, #112]	; (80015b0 <HAL_GPIO_Init+0x34c>)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <HAL_GPIO_Init+0x34c>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001568:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <HAL_GPIO_Init+0x34c>)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa22 f303 	lsr.w	r3, r2, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	f47f ae78 	bne.w	8001274 <HAL_GPIO_Init+0x10>
  }
}
 8001584:	bf00      	nop
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40021000 	.word	0x40021000
 8001594:	40010000 	.word	0x40010000
 8001598:	48000400 	.word	0x48000400
 800159c:	48000800 	.word	0x48000800
 80015a0:	48000c00 	.word	0x48000c00
 80015a4:	48001000 	.word	0x48001000
 80015a8:	48001400 	.word	0x48001400
 80015ac:	48001800 	.word	0x48001800
 80015b0:	40010400 	.word	0x40010400

080015b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <HAL_PWREx_GetVoltageRange+0x18>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40007000 	.word	0x40007000

080015d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015de:	d130      	bne.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ec:	d038      	beq.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ee:	4a20      	ldr	r2, [pc, #128]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2232      	movs	r2, #50	; 0x32
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0c9b      	lsrs	r3, r3, #18
 8001610:	3301      	adds	r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001614:	e002      	b.n	800161c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3b01      	subs	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001628:	d102      	bne.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x60>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f2      	bne.n	8001616 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163c:	d110      	bne.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e00f      	b.n	8001662 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800164a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164e:	d007      	beq.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001650:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800165a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40007000 	.word	0x40007000
 8001674:	2000000c 	.word	0x2000000c
 8001678:	431bde83 	.word	0x431bde83

0800167c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e3d4      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168e:	4ba1      	ldr	r3, [pc, #644]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001698:	4b9e      	ldr	r3, [pc, #632]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80e4 	beq.w	8001878 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <HAL_RCC_OscConfig+0x4a>
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b0c      	cmp	r3, #12
 80016ba:	f040 808b 	bne.w	80017d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	f040 8087 	bne.w	80017d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016c6:	4b93      	ldr	r3, [pc, #588]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_RCC_OscConfig+0x62>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e3ac      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1a      	ldr	r2, [r3, #32]
 80016e2:	4b8c      	ldr	r3, [pc, #560]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d004      	beq.n	80016f8 <HAL_RCC_OscConfig+0x7c>
 80016ee:	4b89      	ldr	r3, [pc, #548]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016f6:	e005      	b.n	8001704 <HAL_RCC_OscConfig+0x88>
 80016f8:	4b86      	ldr	r3, [pc, #536]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80016fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001704:	429a      	cmp	r2, r3
 8001706:	d923      	bls.n	8001750 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fd71 	bl	80021f4 <RCC_SetFlashLatencyFromMSIRange>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e38d      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800171c:	4a7d      	ldr	r2, [pc, #500]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800171e:	4b7d      	ldr	r3, [pc, #500]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f043 0308 	orr.w	r3, r3, #8
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	497a      	ldr	r1, [pc, #488]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800172a:	4b7a      	ldr	r3, [pc, #488]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800173a:	4976      	ldr	r1, [pc, #472]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800173c:	4b75      	ldr	r3, [pc, #468]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
 800174e:	e025      	b.n	800179c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001750:	4a70      	ldr	r2, [pc, #448]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001752:	4b70      	ldr	r3, [pc, #448]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	496d      	ldr	r1, [pc, #436]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800175e:	4b6d      	ldr	r3, [pc, #436]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176e:	4969      	ldr	r1, [pc, #420]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4618      	mov	r0, r3
 800178e:	f000 fd31 	bl	80021f4 <RCC_SetFlashLatencyFromMSIRange>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e34d      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800179c:	f000 fc36 	bl	800200c <HAL_RCC_GetSysClockFreq>
 80017a0:	4601      	mov	r1, r0
 80017a2:	4b5c      	ldr	r3, [pc, #368]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	4a5a      	ldr	r2, [pc, #360]	; (8001918 <HAL_RCC_OscConfig+0x29c>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	fa21 f303 	lsr.w	r3, r1, r3
 80017b8:	4a58      	ldr	r2, [pc, #352]	; (800191c <HAL_RCC_OscConfig+0x2a0>)
 80017ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017bc:	4b58      	ldr	r3, [pc, #352]	; (8001920 <HAL_RCC_OscConfig+0x2a4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fb05 	bl	8000dd0 <HAL_InitTick>
 80017c6:	4603      	mov	r3, r0
 80017c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d052      	beq.n	8001876 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	e331      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d032      	beq.n	8001842 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017dc:	4a4d      	ldr	r2, [pc, #308]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80017de:	4b4d      	ldr	r3, [pc, #308]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fbd0 	bl	8000f8c <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f0:	f7ff fbcc 	bl	8000f8c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e31a      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001802:	4b44      	ldr	r3, [pc, #272]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800180e:	4a41      	ldr	r2, [pc, #260]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001810:	4b40      	ldr	r3, [pc, #256]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f043 0308 	orr.w	r3, r3, #8
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	493e      	ldr	r1, [pc, #248]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800181c:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800182c:	4939      	ldr	r1, [pc, #228]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
 8001840:	e01a      	b.n	8001878 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001842:	4a34      	ldr	r2, [pc, #208]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001844:	4b33      	ldr	r3, [pc, #204]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800184e:	f7ff fb9d 	bl	8000f8c <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001856:	f7ff fb99 	bl	8000f8c <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e2e7      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x1da>
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001876:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d074      	beq.n	800196e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2b08      	cmp	r3, #8
 8001888:	d005      	beq.n	8001896 <HAL_RCC_OscConfig+0x21a>
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b0c      	cmp	r3, #12
 800188e:	d10e      	bne.n	80018ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2b03      	cmp	r3, #3
 8001894:	d10b      	bne.n	80018ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001896:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d064      	beq.n	800196c <HAL_RCC_OscConfig+0x2f0>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d160      	bne.n	800196c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e2c4      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x24a>
 80018b8:	4a16      	ldr	r2, [pc, #88]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	e01d      	b.n	8001902 <HAL_RCC_OscConfig+0x286>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ce:	d10c      	bne.n	80018ea <HAL_RCC_OscConfig+0x26e>
 80018d0:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4a0d      	ldr	r2, [pc, #52]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e00b      	b.n	8001902 <HAL_RCC_OscConfig+0x286>
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001900:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d01c      	beq.n	8001944 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff fb3f 	bl	8000f8c <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001910:	e011      	b.n	8001936 <HAL_RCC_OscConfig+0x2ba>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	080066c8 	.word	0x080066c8
 800191c:	2000000c 	.word	0x2000000c
 8001920:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fb32 	bl	8000f8c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e280      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001936:	4baf      	ldr	r3, [pc, #700]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x2a8>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fb22 	bl	8000f8c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff fb1e 	bl	8000f8c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e26c      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800195e:	4ba5      	ldr	r3, [pc, #660]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x2d0>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d060      	beq.n	8001a3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d005      	beq.n	800198c <HAL_RCC_OscConfig+0x310>
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d119      	bne.n	80019ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d116      	bne.n	80019ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800198c:	4b99      	ldr	r3, [pc, #612]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_OscConfig+0x328>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e249      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a4:	4993      	ldr	r1, [pc, #588]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 80019a6:	4b93      	ldr	r3, [pc, #588]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	061b      	lsls	r3, r3, #24
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b8:	e040      	b.n	8001a3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d023      	beq.n	8001a0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c2:	4a8c      	ldr	r2, [pc, #560]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 80019c4:	4b8b      	ldr	r3, [pc, #556]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff fadd 	bl	8000f8c <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d6:	f7ff fad9 	bl	8000f8c <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e227      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e8:	4b82      	ldr	r3, [pc, #520]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f4:	497f      	ldr	r1, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 80019f6:	4b7f      	ldr	r3, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	061b      	lsls	r3, r3, #24
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
 8001a08:	e018      	b.n	8001a3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0a:	4a7a      	ldr	r2, [pc, #488]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a0c:	4b79      	ldr	r3, [pc, #484]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff fab9 	bl	8000f8c <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fab5 	bl	8000f8c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e203      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a30:	4b70      	ldr	r3, [pc, #448]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f0      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d03c      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a50:	4a68      	ldr	r2, [pc, #416]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a52:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff fa94 	bl	8000f8c <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff fa90 	bl	8000f8c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1de      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a7a:	4b5e      	ldr	r3, [pc, #376]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ef      	beq.n	8001a68 <HAL_RCC_OscConfig+0x3ec>
 8001a88:	e01b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8a:	4a5a      	ldr	r2, [pc, #360]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a8c:	4b59      	ldr	r3, [pc, #356]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fa77 	bl	8000f8c <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fa73 	bl	8000f8c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e1c1      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab4:	4b4f      	ldr	r3, [pc, #316]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1ef      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80a6 	beq.w	8001c1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ad4:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10d      	bne.n	8001afc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae0:	4a44      	ldr	r2, [pc, #272]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001ae2:	4b44      	ldr	r3, [pc, #272]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aea:	6593      	str	r3, [r2, #88]	; 0x58
 8001aec:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af8:	2301      	movs	r3, #1
 8001afa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afc:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <HAL_RCC_OscConfig+0x57c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d118      	bne.n	8001b3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b08:	4a3b      	ldr	r2, [pc, #236]	; (8001bf8 <HAL_RCC_OscConfig+0x57c>)
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_RCC_OscConfig+0x57c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b14:	f7ff fa3a 	bl	8000f8c <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1c:	f7ff fa36 	bl	8000f8c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e184      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2e:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <HAL_RCC_OscConfig+0x57c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d108      	bne.n	8001b54 <HAL_RCC_OscConfig+0x4d8>
 8001b42:	4a2c      	ldr	r2, [pc, #176]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b52:	e024      	b.n	8001b9e <HAL_RCC_OscConfig+0x522>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	d110      	bne.n	8001b7e <HAL_RCC_OscConfig+0x502>
 8001b5c:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b6c:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b7c:	e00f      	b.n	8001b9e <HAL_RCC_OscConfig+0x522>
 8001b7e:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b8e:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b96:	f023 0304 	bic.w	r3, r3, #4
 8001b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d016      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f9f1 	bl	8000f8c <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff f9ed 	bl	8000f8c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e139      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0ed      	beq.n	8001bae <HAL_RCC_OscConfig+0x532>
 8001bd2:	e01a      	b.n	8001c0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7ff f9da 	bl	8000f8c <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bda:	e00f      	b.n	8001bfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bdc:	f7ff f9d6 	bl	8000f8c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d906      	bls.n	8001bfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e122      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bfc:	4b90      	ldr	r3, [pc, #576]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1e8      	bne.n	8001bdc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c0a:	7ffb      	ldrb	r3, [r7, #31]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c10:	4a8b      	ldr	r2, [pc, #556]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001c12:	4b8b      	ldr	r3, [pc, #556]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 8108 	beq.w	8001e36 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	f040 80d0 	bne.w	8001dd0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c30:	4b83      	ldr	r3, [pc, #524]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f003 0203 	and.w	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d130      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d127      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d11f      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c70:	2a07      	cmp	r2, #7
 8001c72:	bf14      	ite	ne
 8001c74:	2201      	movne	r2, #1
 8001c76:	2200      	moveq	r2, #0
 8001c78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d113      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	085b      	lsrs	r3, r3, #1
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d109      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d06e      	beq.n	8001d84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	d069      	beq.n	8001d80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cac:	4b64      	ldr	r3, [pc, #400]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d105      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cb8:	4b61      	ldr	r3, [pc, #388]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0b7      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cc8:	4a5d      	ldr	r2, [pc, #372]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cd4:	f7ff f95a 	bl	8000f8c <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff f956 	bl	8000f8c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e0a4      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cee:	4b54      	ldr	r3, [pc, #336]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cfa:	4851      	ldr	r0, [pc, #324]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001cfc:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	4b50      	ldr	r3, [pc, #320]	; (8001e44 <HAL_RCC_OscConfig+0x7c8>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d0c:	3a01      	subs	r2, #1
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	4311      	orrs	r1, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d16:	0212      	lsls	r2, r2, #8
 8001d18:	4311      	orrs	r1, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d1e:	0852      	lsrs	r2, r2, #1
 8001d20:	3a01      	subs	r2, #1
 8001d22:	0552      	lsls	r2, r2, #21
 8001d24:	4311      	orrs	r1, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d2a:	0852      	lsrs	r2, r2, #1
 8001d2c:	3a01      	subs	r2, #1
 8001d2e:	0652      	lsls	r2, r2, #25
 8001d30:	4311      	orrs	r1, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d36:	0912      	lsrs	r2, r2, #4
 8001d38:	0452      	lsls	r2, r2, #17
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d40:	4a3f      	ldr	r2, [pc, #252]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d42:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d4c:	4a3c      	ldr	r2, [pc, #240]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d4e:	4b3c      	ldr	r3, [pc, #240]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d58:	f7ff f918 	bl	8000f8c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7ff f914 	bl	8000f8c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e062      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d72:	4b33      	ldr	r3, [pc, #204]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d7e:	e05a      	b.n	8001e36 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e059      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d84:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d152      	bne.n	8001e36 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d90:	4a2b      	ldr	r2, [pc, #172]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d92:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d9c:	4a28      	ldr	r2, [pc, #160]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d9e:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001da8:	f7ff f8f0 	bl	8000f8c <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff f8ec 	bl	8000f8c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e03a      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x734>
 8001dce:	e032      	b.n	8001e36 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b0c      	cmp	r3, #12
 8001dd4:	d02d      	beq.n	8001e32 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	4a1a      	ldr	r2, [pc, #104]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dee:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f023 0303 	bic.w	r3, r3, #3
 8001df8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dfa:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e08:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7ff f8bf 	bl	8000f8c <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff f8bb 	bl	8000f8c <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e009      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x796>
 8001e30:	e001      	b.n	8001e36 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3720      	adds	r7, #32
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	f99d808c 	.word	0xf99d808c

08001e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0c8      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b66      	ldr	r3, [pc, #408]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0207 	and.w	r2, r3, #7
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d210      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4963      	ldr	r1, [pc, #396]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e6c:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 0207 	bic.w	r2, r3, #7
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b5f      	ldr	r3, [pc, #380]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0207 	and.w	r2, r3, #7
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0b0      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d04c      	beq.n	8001f32 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea0:	4b56      	ldr	r3, [pc, #344]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d121      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e09e      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb8:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d115      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e092      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e086      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee0:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e07e      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ef0:	4942      	ldr	r1, [pc, #264]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001ef2:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f023 0203 	bic.w	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f02:	f7ff f843 	bl	8000f8c <HAL_GetTick>
 8001f06:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f08:	e00a      	b.n	8001f20 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0a:	f7ff f83f 	bl	8000f8c <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e066      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f20:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 020c 	and.w	r2, r3, #12
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d1eb      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d008      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3e:	492f      	ldr	r1, [pc, #188]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001f40:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0207 	and.w	r2, r3, #7
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d910      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4926      	ldr	r1, [pc, #152]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f60:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 0207 	bic.w	r2, r3, #7
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0207 	and.w	r2, r3, #7
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e036      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8c:	491b      	ldr	r1, [pc, #108]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001faa:	4914      	ldr	r1, [pc, #80]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fbe:	f000 f825 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd0:	5cd3      	ldrb	r3, [r2, r3]
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fef4 	bl	8000dd0 <HAL_InitTick>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fec:	7afb      	ldrb	r3, [r7, #11]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	080066c8 	.word	0x080066c8
 8002004:	2000000c 	.word	0x2000000c
 8002008:	20000010 	.word	0x20000010

0800200c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	4b3d      	ldr	r3, [pc, #244]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002024:	4b3a      	ldr	r3, [pc, #232]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x34>
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d121      	bne.n	800207e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d11e      	bne.n	800207e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002040:	4b33      	ldr	r3, [pc, #204]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d107      	bne.n	800205c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800204c:	4b30      	ldr	r3, [pc, #192]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 800204e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e005      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800205c:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002068:	4a2a      	ldr	r2, [pc, #168]	; (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10d      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800207c:	e00a      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b04      	cmp	r3, #4
 8002082:	d102      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	e004      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b08      	cmp	r3, #8
 800208e:	d101      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_RCC_GetSysClockFreq+0x110>)
 8002092:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d133      	bne.n	8002102 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d002      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0xa4>
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0xaa>
 80020ae:	e005      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020b2:	617b      	str	r3, [r7, #20]
      break;
 80020b4:	e005      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_GetSysClockFreq+0x110>)
 80020b8:	617b      	str	r3, [r7, #20]
      break;
 80020ba:	e002      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	617b      	str	r3, [r7, #20]
      break;
 80020c0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	3301      	adds	r3, #1
 80020ce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	fb02 f203 	mul.w	r2, r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0e5b      	lsrs	r3, r3, #25
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	3301      	adds	r3, #1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002102:	69bb      	ldr	r3, [r7, #24]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3724      	adds	r7, #36	; 0x24
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40021000 	.word	0x40021000
 8002114:	080066e0 	.word	0x080066e0
 8002118:	00f42400 	.word	0x00f42400
 800211c:	007a1200 	.word	0x007a1200

08002120 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_RCC_GetHCLKFreq+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	2000000c 	.word	0x2000000c

08002138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800213c:	f7ff fff0 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002140:	4601      	mov	r1, r0
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x28>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	080066d8 	.word	0x080066d8

08002164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002168:	f7ff ffda 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 800216c:	4601      	mov	r1, r0
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	0adb      	lsrs	r3, r3, #11
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_RCC_GetPCLK2Freq+0x28>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	080066d8 	.word	0x080066d8

08002190 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	220f      	movs	r2, #15
 800219e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	08db      	lsrs	r3, r3, #3
 80021ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <HAL_RCC_GetClockConfig+0x60>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0207 	and.w	r2, r3, #7
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	601a      	str	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40022000 	.word	0x40022000

080021f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800220c:	f7ff f9d2 	bl	80015b4 <HAL_PWREx_GetVoltageRange>
 8002210:	6178      	str	r0, [r7, #20]
 8002212:	e014      	b.n	800223e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	4a25      	ldr	r2, [pc, #148]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002216:	4b25      	ldr	r3, [pc, #148]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221e:	6593      	str	r3, [r2, #88]	; 0x58
 8002220:	4b22      	ldr	r3, [pc, #136]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800222c:	f7ff f9c2 	bl	80015b4 <HAL_PWREx_GetVoltageRange>
 8002230:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4a1e      	ldr	r2, [pc, #120]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002244:	d10b      	bne.n	800225e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d919      	bls.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2ba0      	cmp	r3, #160	; 0xa0
 8002250:	d902      	bls.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002252:	2302      	movs	r3, #2
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	e013      	b.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002258:	2301      	movs	r3, #1
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e010      	b.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b80      	cmp	r3, #128	; 0x80
 8002262:	d902      	bls.n	800226a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002264:	2303      	movs	r3, #3
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	e00a      	b.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b80      	cmp	r3, #128	; 0x80
 800226e:	d102      	bne.n	8002276 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002270:	2302      	movs	r3, #2
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	e004      	b.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b70      	cmp	r3, #112	; 0x70
 800227a:	d101      	bne.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800227c:	2301      	movs	r3, #1
 800227e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002280:	490b      	ldr	r1, [pc, #44]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 0207 	bic.w	r2, r3, #7
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0207 	and.w	r2, r3, #7
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	429a      	cmp	r2, r3
 800229c:	d001      	beq.n	80022a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40022000 	.word	0x40022000

080022b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022bc:	2300      	movs	r3, #0
 80022be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022c0:	2300      	movs	r3, #0
 80022c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d03f      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d8:	d01c      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80022da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022de:	d802      	bhi.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00e      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80022e4:	e01f      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80022e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022ea:	d003      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80022ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022f0:	d01c      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80022f2:	e018      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022f4:	4a85      	ldr	r2, [pc, #532]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022f6:	4b85      	ldr	r3, [pc, #532]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002300:	e015      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3304      	adds	r3, #4
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fab9 	bl	8002880 <RCCEx_PLLSAI1_Config>
 800230e:	4603      	mov	r3, r0
 8002310:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002312:	e00c      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3320      	adds	r3, #32
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fba0 	bl	8002a60 <RCCEx_PLLSAI2_Config>
 8002320:	4603      	mov	r3, r0
 8002322:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002324:	e003      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	74fb      	strb	r3, [r7, #19]
      break;
 800232a:	e000      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800232c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800232e:	7cfb      	ldrb	r3, [r7, #19]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002334:	4975      	ldr	r1, [pc, #468]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002336:	4b75      	ldr	r3, [pc, #468]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800234a:	e001      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800234c:	7cfb      	ldrb	r3, [r7, #19]
 800234e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d03f      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d01c      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002366:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800236a:	d802      	bhi.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00e      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002370:	e01f      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002372:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002376:	d003      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002378:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800237c:	d01c      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800237e:	e018      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002380:	4a62      	ldr	r2, [pc, #392]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002382:	4b62      	ldr	r3, [pc, #392]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800238c:	e015      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fa73 	bl	8002880 <RCCEx_PLLSAI1_Config>
 800239a:	4603      	mov	r3, r0
 800239c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800239e:	e00c      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3320      	adds	r3, #32
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fb5a 	bl	8002a60 <RCCEx_PLLSAI2_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023b0:	e003      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	74fb      	strb	r3, [r7, #19]
      break;
 80023b6:	e000      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80023b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023c0:	4952      	ldr	r1, [pc, #328]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023c2:	4b52      	ldr	r3, [pc, #328]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023d6:	e001      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80a0 	beq.w	800252a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023ee:	4b47      	ldr	r3, [pc, #284]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80023fe:	2300      	movs	r3, #0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00d      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002404:	4a41      	ldr	r2, [pc, #260]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002406:	4b41      	ldr	r3, [pc, #260]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240e:	6593      	str	r3, [r2, #88]	; 0x58
 8002410:	4b3e      	ldr	r3, [pc, #248]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241c:	2301      	movs	r3, #1
 800241e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002420:	4a3b      	ldr	r2, [pc, #236]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002422:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800242c:	f7fe fdae 	bl	8000f8c <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002432:	e009      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002434:	f7fe fdaa 	bl	8000f8c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d902      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	74fb      	strb	r3, [r7, #19]
        break;
 8002446:	e005      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002448:	4b31      	ldr	r3, [pc, #196]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ef      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d15c      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800245a:	4b2c      	ldr	r3, [pc, #176]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002464:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01f      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	429a      	cmp	r2, r3
 8002476:	d019      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002482:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002484:	4a21      	ldr	r2, [pc, #132]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002486:	4b21      	ldr	r3, [pc, #132]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002494:	4a1d      	ldr	r2, [pc, #116]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024a4:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d016      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7fe fd69 	bl	8000f8c <HAL_GetTick>
 80024ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024bc:	e00b      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7fe fd65 	bl	8000f8c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d902      	bls.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	74fb      	strb	r3, [r7, #19]
            break;
 80024d4:	e006      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ec      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10c      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ea:	4908      	ldr	r1, [pc, #32]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002502:	e009      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	74bb      	strb	r3, [r7, #18]
 8002508:	e006      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002518:	7c7b      	ldrb	r3, [r7, #17]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d105      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251e:	4a9e      	ldr	r2, [pc, #632]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002520:	4b9d      	ldr	r3, [pc, #628]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002528:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002536:	4998      	ldr	r1, [pc, #608]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002538:	4b97      	ldr	r3, [pc, #604]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002558:	498f      	ldr	r1, [pc, #572]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800255a:	4b8f      	ldr	r3, [pc, #572]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002560:	f023 020c 	bic.w	r2, r3, #12
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800257a:	4987      	ldr	r1, [pc, #540]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800257c:	4b86      	ldr	r3, [pc, #536]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800259c:	497e      	ldr	r1, [pc, #504]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800259e:	4b7e      	ldr	r3, [pc, #504]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025be:	4976      	ldr	r1, [pc, #472]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025c0:	4b75      	ldr	r3, [pc, #468]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025e0:	496d      	ldr	r1, [pc, #436]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025e2:	4b6d      	ldr	r3, [pc, #436]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002602:	4965      	ldr	r1, [pc, #404]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002604:	4b64      	ldr	r3, [pc, #400]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002624:	495c      	ldr	r1, [pc, #368]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002626:	4b5c      	ldr	r3, [pc, #368]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002646:	4954      	ldr	r1, [pc, #336]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002648:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002668:	494b      	ldr	r1, [pc, #300]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800266a:	4b4b      	ldr	r3, [pc, #300]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800268a:	4943      	ldr	r1, [pc, #268]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800268c:	4b42      	ldr	r3, [pc, #264]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d028      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ac:	493a      	ldr	r1, [pc, #232]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ae:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ca:	d106      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026cc:	4a32      	ldr	r2, [pc, #200]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ce:	4b32      	ldr	r3, [pc, #200]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d6:	60d3      	str	r3, [r2, #12]
 80026d8:	e011      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e2:	d10c      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3304      	adds	r3, #4
 80026e8:	2101      	movs	r1, #1
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f8c8 	bl	8002880 <RCCEx_PLLSAI1_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80026fa:	7cfb      	ldrb	r3, [r7, #19]
 80026fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d028      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800270a:	4923      	ldr	r1, [pc, #140]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800270c:	4b22      	ldr	r3, [pc, #136]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002728:	d106      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272a:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002734:	60d3      	str	r3, [r2, #12]
 8002736:	e011      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002740:	d10c      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	2101      	movs	r1, #1
 8002748:	4618      	mov	r0, r3
 800274a:	f000 f899 	bl	8002880 <RCCEx_PLLSAI1_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d02b      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002768:	490b      	ldr	r1, [pc, #44]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002770:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002786:	d109      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002788:	4a03      	ldr	r2, [pc, #12]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800278a:	4b03      	ldr	r3, [pc, #12]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002792:	60d3      	str	r3, [r2, #12]
 8002794:	e014      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2101      	movs	r1, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f867 	bl	8002880 <RCCEx_PLLSAI1_Config>
 80027b2:	4603      	mov	r3, r0
 80027b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d02f      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027cc:	492b      	ldr	r1, [pc, #172]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ce:	4b2b      	ldr	r3, [pc, #172]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ea:	d10d      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3304      	adds	r3, #4
 80027f0:	2102      	movs	r1, #2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f844 	bl	8002880 <RCCEx_PLLSAI1_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d014      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	74bb      	strb	r3, [r7, #18]
 8002806:	e011      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800280c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002810:	d10c      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3320      	adds	r3, #32
 8002816:	2102      	movs	r1, #2
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f921 	bl	8002a60 <RCCEx_PLLSAI2_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002838:	4910      	ldr	r1, [pc, #64]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800285a:	4908      	ldr	r1, [pc, #32]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002872:	7cbb      	ldrb	r3, [r7, #18]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000

08002880 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800288e:	4b73      	ldr	r3, [pc, #460]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d018      	beq.n	80028cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800289a:	4b70      	ldr	r3, [pc, #448]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0203 	and.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d10d      	bne.n	80028c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
       ||
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028b2:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
       ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d044      	beq.n	8002950 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	e041      	b.n	8002950 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d00c      	beq.n	80028ee <RCCEx_PLLSAI1_Config+0x6e>
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d013      	beq.n	8002900 <RCCEx_PLLSAI1_Config+0x80>
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d120      	bne.n	800291e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028dc:	4b5f      	ldr	r3, [pc, #380]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d11d      	bne.n	8002924 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ec:	e01a      	b.n	8002924 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028ee:	4b5b      	ldr	r3, [pc, #364]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d116      	bne.n	8002928 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fe:	e013      	b.n	8002928 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002900:	4b56      	ldr	r3, [pc, #344]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10f      	bne.n	800292c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800290c:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d109      	bne.n	800292c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800291c:	e006      	b.n	800292c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
      break;
 8002922:	e004      	b.n	800292e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002924:	bf00      	nop
 8002926:	e002      	b.n	800292e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002928:	bf00      	nop
 800292a:	e000      	b.n	800292e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800292c:	bf00      	nop
    }

    if(status == HAL_OK)
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10d      	bne.n	8002950 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002934:	4849      	ldr	r0, [pc, #292]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002936:	4b49      	ldr	r3, [pc, #292]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	430b      	orrs	r3, r1
 800294c:	4313      	orrs	r3, r2
 800294e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d17d      	bne.n	8002a52 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002956:	4a41      	ldr	r2, [pc, #260]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002958:	4b40      	ldr	r3, [pc, #256]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002962:	f7fe fb13 	bl	8000f8c <HAL_GetTick>
 8002966:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002968:	e009      	b.n	800297e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800296a:	f7fe fb0f 	bl	8000f8c <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d902      	bls.n	800297e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	73fb      	strb	r3, [r7, #15]
        break;
 800297c:	e005      	b.n	800298a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800297e:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ef      	bne.n	800296a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d160      	bne.n	8002a52 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d111      	bne.n	80029ba <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002996:	4831      	ldr	r0, [pc, #196]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002998:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6892      	ldr	r2, [r2, #8]
 80029a8:	0211      	lsls	r1, r2, #8
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68d2      	ldr	r2, [r2, #12]
 80029ae:	0912      	lsrs	r2, r2, #4
 80029b0:	0452      	lsls	r2, r2, #17
 80029b2:	430a      	orrs	r2, r1
 80029b4:	4313      	orrs	r3, r2
 80029b6:	6103      	str	r3, [r0, #16]
 80029b8:	e027      	b.n	8002a0a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d112      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c0:	4826      	ldr	r0, [pc, #152]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c2:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6892      	ldr	r2, [r2, #8]
 80029d2:	0211      	lsls	r1, r2, #8
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6912      	ldr	r2, [r2, #16]
 80029d8:	0852      	lsrs	r2, r2, #1
 80029da:	3a01      	subs	r2, #1
 80029dc:	0552      	lsls	r2, r2, #21
 80029de:	430a      	orrs	r2, r1
 80029e0:	4313      	orrs	r3, r2
 80029e2:	6103      	str	r3, [r0, #16]
 80029e4:	e011      	b.n	8002a0a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029e6:	481d      	ldr	r0, [pc, #116]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029e8:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6892      	ldr	r2, [r2, #8]
 80029f8:	0211      	lsls	r1, r2, #8
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6952      	ldr	r2, [r2, #20]
 80029fe:	0852      	lsrs	r2, r2, #1
 8002a00:	3a01      	subs	r2, #1
 8002a02:	0652      	lsls	r2, r2, #25
 8002a04:	430a      	orrs	r2, r1
 8002a06:	4313      	orrs	r3, r2
 8002a08:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a0a:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7fe fab9 	bl	8000f8c <HAL_GetTick>
 8002a1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a1c:	e009      	b.n	8002a32 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a1e:	f7fe fab5 	bl	8000f8c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d902      	bls.n	8002a32 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	73fb      	strb	r3, [r7, #15]
          break;
 8002a30:	e005      	b.n	8002a3e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0ef      	beq.n	8002a1e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d106      	bne.n	8002a52 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a44:	4905      	ldr	r1, [pc, #20]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000

08002a60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a6e:	4b68      	ldr	r3, [pc, #416]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d018      	beq.n	8002aac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a7a:	4b65      	ldr	r3, [pc, #404]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f003 0203 	and.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d10d      	bne.n	8002aa6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a92:	4b5f      	ldr	r3, [pc, #380]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
       ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d044      	beq.n	8002b30 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
 8002aaa:	e041      	b.n	8002b30 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d00c      	beq.n	8002ace <RCCEx_PLLSAI2_Config+0x6e>
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d013      	beq.n	8002ae0 <RCCEx_PLLSAI2_Config+0x80>
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d120      	bne.n	8002afe <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002abc:	4b54      	ldr	r3, [pc, #336]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11d      	bne.n	8002b04 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002acc:	e01a      	b.n	8002b04 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ace:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d116      	bne.n	8002b08 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ade:	e013      	b.n	8002b08 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ae0:	4b4b      	ldr	r3, [pc, #300]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10f      	bne.n	8002b0c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aec:	4b48      	ldr	r3, [pc, #288]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d109      	bne.n	8002b0c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002afc:	e006      	b.n	8002b0c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
      break;
 8002b02:	e004      	b.n	8002b0e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b04:	bf00      	nop
 8002b06:	e002      	b.n	8002b0e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b08:	bf00      	nop
 8002b0a:	e000      	b.n	8002b0e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b0c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10d      	bne.n	8002b30 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b14:	483e      	ldr	r0, [pc, #248]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b16:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6819      	ldr	r1, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d167      	bne.n	8002c06 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b36:	4a36      	ldr	r2, [pc, #216]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b38:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b42:	f7fe fa23 	bl	8000f8c <HAL_GetTick>
 8002b46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b48:	e009      	b.n	8002b5e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b4a:	f7fe fa1f 	bl	8000f8c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d902      	bls.n	8002b5e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	73fb      	strb	r3, [r7, #15]
        break;
 8002b5c:	e005      	b.n	8002b6a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b5e:	4b2c      	ldr	r3, [pc, #176]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ef      	bne.n	8002b4a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d14a      	bne.n	8002c06 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d111      	bne.n	8002b9a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b76:	4826      	ldr	r0, [pc, #152]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6892      	ldr	r2, [r2, #8]
 8002b88:	0211      	lsls	r1, r2, #8
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68d2      	ldr	r2, [r2, #12]
 8002b8e:	0912      	lsrs	r2, r2, #4
 8002b90:	0452      	lsls	r2, r2, #17
 8002b92:	430a      	orrs	r2, r1
 8002b94:	4313      	orrs	r3, r2
 8002b96:	6143      	str	r3, [r0, #20]
 8002b98:	e011      	b.n	8002bbe <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b9a:	481d      	ldr	r0, [pc, #116]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ba4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6892      	ldr	r2, [r2, #8]
 8002bac:	0211      	lsls	r1, r2, #8
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6912      	ldr	r2, [r2, #16]
 8002bb2:	0852      	lsrs	r2, r2, #1
 8002bb4:	3a01      	subs	r2, #1
 8002bb6:	0652      	lsls	r2, r2, #25
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bbe:	4a14      	ldr	r2, [pc, #80]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7fe f9df 	bl	8000f8c <HAL_GetTick>
 8002bce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bd0:	e009      	b.n	8002be6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bd2:	f7fe f9db 	bl	8000f8c <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d902      	bls.n	8002be6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	73fb      	strb	r3, [r7, #15]
          break;
 8002be4:	e005      	b.n	8002bf2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0ef      	beq.n	8002bd2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bf8:	4905      	ldr	r1, [pc, #20]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000

08002c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e049      	b.n	8002cba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f841 	bl	8002cc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	4619      	mov	r1, r3
 8002c52:	4610      	mov	r0, r2
 8002c54:	f000 f9f8 	bl	8003048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d001      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e04f      	b.n	8002d90 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	68d2      	ldr	r2, [r2, #12]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a23      	ldr	r2, [pc, #140]	; (8002d9c <HAL_TIM_Base_Start_IT+0xc4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01d      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x76>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1a:	d018      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x76>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1f      	ldr	r2, [pc, #124]	; (8002da0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x76>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00e      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x76>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d009      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x76>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1b      	ldr	r2, [pc, #108]	; (8002dac <HAL_TIM_Base_Start_IT+0xd4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x76>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d115      	bne.n	8002d7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b06      	cmp	r3, #6
 8002d5e:	d015      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0xb4>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d66:	d011      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d78:	e008      	b.n	8002d8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e000      	b.n	8002d8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800
 8002da8:	40000c00 	.word	0x40000c00
 8002dac:	40013400 	.word	0x40013400
 8002db0:	40014000 	.word	0x40014000
 8002db4:	00010007 	.word	0x00010007

08002db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d122      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d11b      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0202 	mvn.w	r2, #2
 8002de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f905 	bl	800300a <HAL_TIM_IC_CaptureCallback>
 8002e00:	e005      	b.n	8002e0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f8f7 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f908 	bl	800301e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d122      	bne.n	8002e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d11b      	bne.n	8002e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0204 	mvn.w	r2, #4
 8002e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f8db 	bl	800300a <HAL_TIM_IC_CaptureCallback>
 8002e54:	e005      	b.n	8002e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f8cd 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f8de 	bl	800301e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d122      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d11b      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0208 	mvn.w	r2, #8
 8002e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2204      	movs	r2, #4
 8002e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f8b1 	bl	800300a <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f8a3 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f8b4 	bl	800301e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d122      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b10      	cmp	r3, #16
 8002ed6:	d11b      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0210 	mvn.w	r2, #16
 8002ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2208      	movs	r2, #8
 8002ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f887 	bl	800300a <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f879 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f88a 	bl	800301e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d10e      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0201 	mvn.w	r2, #1
 8002f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd fec2 	bl	8000cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f46:	2b80      	cmp	r3, #128	; 0x80
 8002f48:	d10e      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f54:	2b80      	cmp	r3, #128	; 0x80
 8002f56:	d107      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f914 	bl	8003190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f76:	d10e      	bne.n	8002f96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f82:	2b80      	cmp	r3, #128	; 0x80
 8002f84:	d107      	bne.n	8002f96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f907 	bl	80031a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa0:	2b40      	cmp	r3, #64	; 0x40
 8002fa2:	d10e      	bne.n	8002fc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d107      	bne.n	8002fc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f838 	bl	8003032 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d10e      	bne.n	8002fee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d107      	bne.n	8002fee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f06f 0220 	mvn.w	r2, #32
 8002fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f8c7 	bl	800317c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a40      	ldr	r2, [pc, #256]	; (800315c <TIM_Base_SetConfig+0x114>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <TIM_Base_SetConfig+0x40>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003066:	d00f      	beq.n	8003088 <TIM_Base_SetConfig+0x40>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a3d      	ldr	r2, [pc, #244]	; (8003160 <TIM_Base_SetConfig+0x118>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00b      	beq.n	8003088 <TIM_Base_SetConfig+0x40>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a3c      	ldr	r2, [pc, #240]	; (8003164 <TIM_Base_SetConfig+0x11c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d007      	beq.n	8003088 <TIM_Base_SetConfig+0x40>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a3b      	ldr	r2, [pc, #236]	; (8003168 <TIM_Base_SetConfig+0x120>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d003      	beq.n	8003088 <TIM_Base_SetConfig+0x40>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a3a      	ldr	r2, [pc, #232]	; (800316c <TIM_Base_SetConfig+0x124>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d108      	bne.n	800309a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a2f      	ldr	r2, [pc, #188]	; (800315c <TIM_Base_SetConfig+0x114>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d01f      	beq.n	80030e2 <TIM_Base_SetConfig+0x9a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a8:	d01b      	beq.n	80030e2 <TIM_Base_SetConfig+0x9a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a2c      	ldr	r2, [pc, #176]	; (8003160 <TIM_Base_SetConfig+0x118>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d017      	beq.n	80030e2 <TIM_Base_SetConfig+0x9a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a2b      	ldr	r2, [pc, #172]	; (8003164 <TIM_Base_SetConfig+0x11c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <TIM_Base_SetConfig+0x9a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a2a      	ldr	r2, [pc, #168]	; (8003168 <TIM_Base_SetConfig+0x120>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00f      	beq.n	80030e2 <TIM_Base_SetConfig+0x9a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a29      	ldr	r2, [pc, #164]	; (800316c <TIM_Base_SetConfig+0x124>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00b      	beq.n	80030e2 <TIM_Base_SetConfig+0x9a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a28      	ldr	r2, [pc, #160]	; (8003170 <TIM_Base_SetConfig+0x128>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <TIM_Base_SetConfig+0x9a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a27      	ldr	r2, [pc, #156]	; (8003174 <TIM_Base_SetConfig+0x12c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_Base_SetConfig+0x9a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a26      	ldr	r2, [pc, #152]	; (8003178 <TIM_Base_SetConfig+0x130>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d108      	bne.n	80030f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a10      	ldr	r2, [pc, #64]	; (800315c <TIM_Base_SetConfig+0x114>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00f      	beq.n	8003140 <TIM_Base_SetConfig+0xf8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a12      	ldr	r2, [pc, #72]	; (800316c <TIM_Base_SetConfig+0x124>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00b      	beq.n	8003140 <TIM_Base_SetConfig+0xf8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a11      	ldr	r2, [pc, #68]	; (8003170 <TIM_Base_SetConfig+0x128>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d007      	beq.n	8003140 <TIM_Base_SetConfig+0xf8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a10      	ldr	r2, [pc, #64]	; (8003174 <TIM_Base_SetConfig+0x12c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d003      	beq.n	8003140 <TIM_Base_SetConfig+0xf8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a0f      	ldr	r2, [pc, #60]	; (8003178 <TIM_Base_SetConfig+0x130>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d103      	bne.n	8003148 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	615a      	str	r2, [r3, #20]
}
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40012c00 	.word	0x40012c00
 8003160:	40000400 	.word	0x40000400
 8003164:	40000800 	.word	0x40000800
 8003168:	40000c00 	.word	0x40000c00
 800316c:	40013400 	.word	0x40013400
 8003170:	40014000 	.word	0x40014000
 8003174:	40014400 	.word	0x40014400
 8003178:	40014800 	.word	0x40014800

0800317c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e040      	b.n	800324c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd fdae 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fb26 	bl	8003848 <UART_SetConfig>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e022      	b.n	800324c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fd9e 	bl	8003d50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	6852      	ldr	r2, [r2, #4]
 800321e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	6892      	ldr	r2, [r2, #8]
 800322e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fe25 	bl	8003e94 <UART_CheckIdleState>
 800324a:	4603      	mov	r3, r0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af02      	add	r7, sp, #8
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	4613      	mov	r3, r2
 8003262:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003268:	2b20      	cmp	r3, #32
 800326a:	f040 8082 	bne.w	8003372 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_UART_Transmit+0x26>
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e07a      	b.n	8003374 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_UART_Transmit+0x38>
 8003288:	2302      	movs	r3, #2
 800328a:	e073      	b.n	8003374 <HAL_UART_Transmit+0x120>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2221      	movs	r2, #33	; 0x21
 80032a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032a2:	f7fd fe73 	bl	8000f8c <HAL_GetTick>
 80032a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	88fa      	ldrh	r2, [r7, #6]
 80032ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	88fa      	ldrh	r2, [r7, #6]
 80032b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c0:	d108      	bne.n	80032d4 <HAL_UART_Transmit+0x80>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d104      	bne.n	80032d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	e003      	b.n	80032dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80032e4:	e02d      	b.n	8003342 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2200      	movs	r2, #0
 80032ee:	2180      	movs	r1, #128	; 0x80
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fe18 	bl	8003f26 <UART_WaitOnFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e039      	b.n	8003374 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10b      	bne.n	800331e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	8812      	ldrh	r2, [r2, #0]
 800330e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003312:	b292      	uxth	r2, r2
 8003314:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	3302      	adds	r3, #2
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	e008      	b.n	8003330 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	7812      	ldrb	r2, [r2, #0]
 8003326:	b292      	uxth	r2, r2
 8003328:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3301      	adds	r3, #1
 800332e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1cb      	bne.n	80032e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2200      	movs	r2, #0
 8003356:	2140      	movs	r1, #64	; 0x40
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 fde4 	bl	8003f26 <UART_WaitOnFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e005      	b.n	8003374 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	e000      	b.n	8003374 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003372:	2302      	movs	r3, #2
  }
}
 8003374:	4618      	mov	r0, r3
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	4613      	mov	r3, r2
 8003388:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338e:	2b20      	cmp	r3, #32
 8003390:	d131      	bne.n	80033f6 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_UART_Receive_IT+0x22>
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e02a      	b.n	80033f8 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_UART_Receive_IT+0x34>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e023      	b.n	80033f8 <HAL_UART_Receive_IT+0x7c>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a0f      	ldr	r2, [pc, #60]	; (8003400 <HAL_UART_Receive_IT+0x84>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00e      	beq.n	80033e6 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033e4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	461a      	mov	r2, r3
 80033ea:	68b9      	ldr	r1, [r7, #8]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fe17 	bl	8004020 <UART_Start_Receive_IT>
 80033f2:	4603      	mov	r3, r0
 80033f4:	e000      	b.n	80033f8 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80033f6:	2302      	movs	r3, #2
  }
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40008000 	.word	0x40008000

08003404 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	f640 030f 	movw	r3, #2063	; 0x80f
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d113      	bne.n	800345c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00e      	beq.n	800345c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d009      	beq.n	800345c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 81cf 	beq.w	80037f0 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
      }
      return;
 800345a:	e1c9      	b.n	80037f0 <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80e3 	beq.w	800362a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4ba6      	ldr	r3, [pc, #664]	; (800370c <HAL_UART_IRQHandler+0x308>)
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80d8 	beq.w	800362a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d010      	beq.n	80034a6 <HAL_UART_IRQHandler+0xa2>
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2201      	movs	r2, #1
 8003494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800349c:	f043 0201 	orr.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d010      	beq.n	80034d2 <HAL_UART_IRQHandler+0xce>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2202      	movs	r2, #2
 80034c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034c8:	f043 0204 	orr.w	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d010      	beq.n	80034fe <HAL_UART_IRQHandler+0xfa>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2204      	movs	r2, #4
 80034ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f4:	f043 0202 	orr.w	r2, r3, #2
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d015      	beq.n	8003534 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b00      	cmp	r3, #0
 8003510:	d104      	bne.n	800351c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00b      	beq.n	8003534 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2208      	movs	r2, #8
 8003522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800352a:	f043 0208 	orr.w	r2, r3, #8
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800353a:	2b00      	cmp	r3, #0
 800353c:	d011      	beq.n	8003562 <HAL_UART_IRQHandler+0x15e>
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00c      	beq.n	8003562 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003550:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003558:	f043 0220 	orr.w	r2, r3, #32
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8143 	beq.w	80037f4 <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00c      	beq.n	8003592 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003598:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d004      	beq.n	80035b2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d031      	beq.n	8003616 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fdbc 	bl	8004130 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	d123      	bne.n	800360e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	6892      	ldr	r2, [r2, #8]
 80035d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d013      	beq.n	8003606 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	4a4b      	ldr	r2, [pc, #300]	; (8003710 <HAL_UART_IRQHandler+0x30c>)
 80035e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fd fdf8 	bl	80011e0 <HAL_DMA_Abort_IT>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d017      	beq.n	8003626 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003600:	4610      	mov	r0, r2
 8003602:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003604:	e00f      	b.n	8003626 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f908 	bl	800381c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360c:	e00b      	b.n	8003626 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f904 	bl	800381c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003614:	e007      	b.n	8003626 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f900 	bl	800381c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003624:	e0e6      	b.n	80037f4 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003626:	bf00      	nop
    return;
 8003628:	e0e4      	b.n	80037f4 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362e:	2b01      	cmp	r3, #1
 8003630:	f040 80a9 	bne.w	8003786 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 80a3 	beq.w	8003786 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 809d 	beq.w	8003786 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2210      	movs	r2, #16
 8003652:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d158      	bne.n	8003714 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	817b      	strh	r3, [r7, #10]
      if (  (nb_remaining_rx_data > 0U)
 800366c:	897b      	ldrh	r3, [r7, #10]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80c2 	beq.w	80037f8 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800367a:	897a      	ldrh	r2, [r7, #10]
 800367c:	429a      	cmp	r2, r3
 800367e:	f080 80bb 	bcs.w	80037f8 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	897a      	ldrh	r2, [r7, #10]
 8003686:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d12a      	bne.n	80036f0 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	6892      	ldr	r2, [r2, #8]
 80036c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	f022 0210 	bic.w	r2, r2, #16
 80036e4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fd fd3a 	bl	8001164 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	b29b      	uxth	r3, r3
 8003702:	4619      	mov	r1, r3
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f893 	bl	8003830 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800370a:	e075      	b.n	80037f8 <HAL_UART_IRQHandler+0x3f4>
 800370c:	04000120 	.word	0x04000120
 8003710:	0800418f 	.word	0x0800418f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003720:	b29b      	uxth	r3, r3
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	813b      	strh	r3, [r7, #8]
      if (  (huart->RxXferCount > 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d064      	beq.n	80037fc <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8003732:	893b      	ldrh	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d061      	beq.n	80037fc <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003746:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	6892      	ldr	r2, [r2, #8]
 8003752:	f022 0201 	bic.w	r2, r2, #1
 8003756:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	f022 0210 	bic.w	r2, r2, #16
 8003778:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800377a:	893b      	ldrh	r3, [r7, #8]
 800377c:	4619      	mov	r1, r3
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f856 	bl	8003830 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003784:	e03a      	b.n	80037fc <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00d      	beq.n	80037ac <HAL_UART_IRQHandler+0x3a8>
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fdf9 	bl	800439c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037aa:	e02a      	b.n	8003802 <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01b      	beq.n	8003800 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
    }
    return;
 80037d0:	e016      	b.n	8003800 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d012      	beq.n	8003802 <HAL_UART_IRQHandler+0x3fe>
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fce7 	bl	80041ba <UART_EndTransmit_IT>
    return;
 80037ec:	bf00      	nop
 80037ee:	e008      	b.n	8003802 <HAL_UART_IRQHandler+0x3fe>
      return;
 80037f0:	bf00      	nop
 80037f2:	e006      	b.n	8003802 <HAL_UART_IRQHandler+0x3fe>
    return;
 80037f4:	bf00      	nop
 80037f6:	e004      	b.n	8003802 <HAL_UART_IRQHandler+0x3fe>
      return;
 80037f8:	bf00      	nop
 80037fa:	e002      	b.n	8003802 <HAL_UART_IRQHandler+0x3fe>
      return;
 80037fc:	bf00      	nop
 80037fe:	e000      	b.n	8003802 <HAL_UART_IRQHandler+0x3fe>
    return;
 8003800:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003848:	b5b0      	push	{r4, r5, r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	4313      	orrs	r3, r2
 800386a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6819      	ldr	r1, [r3, #0]
 8003876:	4bac      	ldr	r3, [pc, #688]	; (8003b28 <UART_SetConfig+0x2e0>)
 8003878:	400b      	ands	r3, r1
 800387a:	69f9      	ldr	r1, [r7, #28]
 800387c:	430b      	orrs	r3, r1
 800387e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	6852      	ldr	r2, [r2, #4]
 800388a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68d2      	ldr	r2, [r2, #12]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4aa2      	ldr	r2, [pc, #648]	; (8003b2c <UART_SetConfig+0x2e4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	6892      	ldr	r2, [r2, #8]
 80038ba:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a99      	ldr	r2, [pc, #612]	; (8003b30 <UART_SetConfig+0x2e8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d122      	bne.n	8003914 <UART_SetConfig+0xcc>
 80038ce:	4b99      	ldr	r3, [pc, #612]	; (8003b34 <UART_SetConfig+0x2ec>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d817      	bhi.n	800390c <UART_SetConfig+0xc4>
 80038dc:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <UART_SetConfig+0x9c>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	080038f5 	.word	0x080038f5
 80038e8:	08003901 	.word	0x08003901
 80038ec:	080038fb 	.word	0x080038fb
 80038f0:	08003907 	.word	0x08003907
 80038f4:	2301      	movs	r3, #1
 80038f6:	76fb      	strb	r3, [r7, #27]
 80038f8:	e0e8      	b.n	8003acc <UART_SetConfig+0x284>
 80038fa:	2302      	movs	r3, #2
 80038fc:	76fb      	strb	r3, [r7, #27]
 80038fe:	e0e5      	b.n	8003acc <UART_SetConfig+0x284>
 8003900:	2304      	movs	r3, #4
 8003902:	76fb      	strb	r3, [r7, #27]
 8003904:	e0e2      	b.n	8003acc <UART_SetConfig+0x284>
 8003906:	2308      	movs	r3, #8
 8003908:	76fb      	strb	r3, [r7, #27]
 800390a:	e0df      	b.n	8003acc <UART_SetConfig+0x284>
 800390c:	2310      	movs	r3, #16
 800390e:	76fb      	strb	r3, [r7, #27]
 8003910:	bf00      	nop
 8003912:	e0db      	b.n	8003acc <UART_SetConfig+0x284>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a87      	ldr	r2, [pc, #540]	; (8003b38 <UART_SetConfig+0x2f0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d134      	bne.n	8003988 <UART_SetConfig+0x140>
 800391e:	4b85      	ldr	r3, [pc, #532]	; (8003b34 <UART_SetConfig+0x2ec>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	2b0c      	cmp	r3, #12
 800392a:	d829      	bhi.n	8003980 <UART_SetConfig+0x138>
 800392c:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <UART_SetConfig+0xec>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003969 	.word	0x08003969
 8003938:	08003981 	.word	0x08003981
 800393c:	08003981 	.word	0x08003981
 8003940:	08003981 	.word	0x08003981
 8003944:	08003975 	.word	0x08003975
 8003948:	08003981 	.word	0x08003981
 800394c:	08003981 	.word	0x08003981
 8003950:	08003981 	.word	0x08003981
 8003954:	0800396f 	.word	0x0800396f
 8003958:	08003981 	.word	0x08003981
 800395c:	08003981 	.word	0x08003981
 8003960:	08003981 	.word	0x08003981
 8003964:	0800397b 	.word	0x0800397b
 8003968:	2300      	movs	r3, #0
 800396a:	76fb      	strb	r3, [r7, #27]
 800396c:	e0ae      	b.n	8003acc <UART_SetConfig+0x284>
 800396e:	2302      	movs	r3, #2
 8003970:	76fb      	strb	r3, [r7, #27]
 8003972:	e0ab      	b.n	8003acc <UART_SetConfig+0x284>
 8003974:	2304      	movs	r3, #4
 8003976:	76fb      	strb	r3, [r7, #27]
 8003978:	e0a8      	b.n	8003acc <UART_SetConfig+0x284>
 800397a:	2308      	movs	r3, #8
 800397c:	76fb      	strb	r3, [r7, #27]
 800397e:	e0a5      	b.n	8003acc <UART_SetConfig+0x284>
 8003980:	2310      	movs	r3, #16
 8003982:	76fb      	strb	r3, [r7, #27]
 8003984:	bf00      	nop
 8003986:	e0a1      	b.n	8003acc <UART_SetConfig+0x284>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a6b      	ldr	r2, [pc, #428]	; (8003b3c <UART_SetConfig+0x2f4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d120      	bne.n	80039d4 <UART_SetConfig+0x18c>
 8003992:	4b68      	ldr	r3, [pc, #416]	; (8003b34 <UART_SetConfig+0x2ec>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800399c:	2b10      	cmp	r3, #16
 800399e:	d00f      	beq.n	80039c0 <UART_SetConfig+0x178>
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d802      	bhi.n	80039aa <UART_SetConfig+0x162>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <UART_SetConfig+0x16c>
 80039a8:	e010      	b.n	80039cc <UART_SetConfig+0x184>
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d005      	beq.n	80039ba <UART_SetConfig+0x172>
 80039ae:	2b30      	cmp	r3, #48	; 0x30
 80039b0:	d009      	beq.n	80039c6 <UART_SetConfig+0x17e>
 80039b2:	e00b      	b.n	80039cc <UART_SetConfig+0x184>
 80039b4:	2300      	movs	r3, #0
 80039b6:	76fb      	strb	r3, [r7, #27]
 80039b8:	e088      	b.n	8003acc <UART_SetConfig+0x284>
 80039ba:	2302      	movs	r3, #2
 80039bc:	76fb      	strb	r3, [r7, #27]
 80039be:	e085      	b.n	8003acc <UART_SetConfig+0x284>
 80039c0:	2304      	movs	r3, #4
 80039c2:	76fb      	strb	r3, [r7, #27]
 80039c4:	e082      	b.n	8003acc <UART_SetConfig+0x284>
 80039c6:	2308      	movs	r3, #8
 80039c8:	76fb      	strb	r3, [r7, #27]
 80039ca:	e07f      	b.n	8003acc <UART_SetConfig+0x284>
 80039cc:	2310      	movs	r3, #16
 80039ce:	76fb      	strb	r3, [r7, #27]
 80039d0:	bf00      	nop
 80039d2:	e07b      	b.n	8003acc <UART_SetConfig+0x284>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a59      	ldr	r2, [pc, #356]	; (8003b40 <UART_SetConfig+0x2f8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d120      	bne.n	8003a20 <UART_SetConfig+0x1d8>
 80039de:	4b55      	ldr	r3, [pc, #340]	; (8003b34 <UART_SetConfig+0x2ec>)
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d00f      	beq.n	8003a0c <UART_SetConfig+0x1c4>
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d802      	bhi.n	80039f6 <UART_SetConfig+0x1ae>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <UART_SetConfig+0x1b8>
 80039f4:	e010      	b.n	8003a18 <UART_SetConfig+0x1d0>
 80039f6:	2b80      	cmp	r3, #128	; 0x80
 80039f8:	d005      	beq.n	8003a06 <UART_SetConfig+0x1be>
 80039fa:	2bc0      	cmp	r3, #192	; 0xc0
 80039fc:	d009      	beq.n	8003a12 <UART_SetConfig+0x1ca>
 80039fe:	e00b      	b.n	8003a18 <UART_SetConfig+0x1d0>
 8003a00:	2300      	movs	r3, #0
 8003a02:	76fb      	strb	r3, [r7, #27]
 8003a04:	e062      	b.n	8003acc <UART_SetConfig+0x284>
 8003a06:	2302      	movs	r3, #2
 8003a08:	76fb      	strb	r3, [r7, #27]
 8003a0a:	e05f      	b.n	8003acc <UART_SetConfig+0x284>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	76fb      	strb	r3, [r7, #27]
 8003a10:	e05c      	b.n	8003acc <UART_SetConfig+0x284>
 8003a12:	2308      	movs	r3, #8
 8003a14:	76fb      	strb	r3, [r7, #27]
 8003a16:	e059      	b.n	8003acc <UART_SetConfig+0x284>
 8003a18:	2310      	movs	r3, #16
 8003a1a:	76fb      	strb	r3, [r7, #27]
 8003a1c:	bf00      	nop
 8003a1e:	e055      	b.n	8003acc <UART_SetConfig+0x284>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a47      	ldr	r2, [pc, #284]	; (8003b44 <UART_SetConfig+0x2fc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d124      	bne.n	8003a74 <UART_SetConfig+0x22c>
 8003a2a:	4b42      	ldr	r3, [pc, #264]	; (8003b34 <UART_SetConfig+0x2ec>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a38:	d012      	beq.n	8003a60 <UART_SetConfig+0x218>
 8003a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3e:	d802      	bhi.n	8003a46 <UART_SetConfig+0x1fe>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <UART_SetConfig+0x20c>
 8003a44:	e012      	b.n	8003a6c <UART_SetConfig+0x224>
 8003a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a4a:	d006      	beq.n	8003a5a <UART_SetConfig+0x212>
 8003a4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a50:	d009      	beq.n	8003a66 <UART_SetConfig+0x21e>
 8003a52:	e00b      	b.n	8003a6c <UART_SetConfig+0x224>
 8003a54:	2300      	movs	r3, #0
 8003a56:	76fb      	strb	r3, [r7, #27]
 8003a58:	e038      	b.n	8003acc <UART_SetConfig+0x284>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	76fb      	strb	r3, [r7, #27]
 8003a5e:	e035      	b.n	8003acc <UART_SetConfig+0x284>
 8003a60:	2304      	movs	r3, #4
 8003a62:	76fb      	strb	r3, [r7, #27]
 8003a64:	e032      	b.n	8003acc <UART_SetConfig+0x284>
 8003a66:	2308      	movs	r3, #8
 8003a68:	76fb      	strb	r3, [r7, #27]
 8003a6a:	e02f      	b.n	8003acc <UART_SetConfig+0x284>
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	76fb      	strb	r3, [r7, #27]
 8003a70:	bf00      	nop
 8003a72:	e02b      	b.n	8003acc <UART_SetConfig+0x284>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a2c      	ldr	r2, [pc, #176]	; (8003b2c <UART_SetConfig+0x2e4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d124      	bne.n	8003ac8 <UART_SetConfig+0x280>
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <UART_SetConfig+0x2ec>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8c:	d012      	beq.n	8003ab4 <UART_SetConfig+0x26c>
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a92:	d802      	bhi.n	8003a9a <UART_SetConfig+0x252>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <UART_SetConfig+0x260>
 8003a98:	e012      	b.n	8003ac0 <UART_SetConfig+0x278>
 8003a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a9e:	d006      	beq.n	8003aae <UART_SetConfig+0x266>
 8003aa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aa4:	d009      	beq.n	8003aba <UART_SetConfig+0x272>
 8003aa6:	e00b      	b.n	8003ac0 <UART_SetConfig+0x278>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	76fb      	strb	r3, [r7, #27]
 8003aac:	e00e      	b.n	8003acc <UART_SetConfig+0x284>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	76fb      	strb	r3, [r7, #27]
 8003ab2:	e00b      	b.n	8003acc <UART_SetConfig+0x284>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	76fb      	strb	r3, [r7, #27]
 8003ab8:	e008      	b.n	8003acc <UART_SetConfig+0x284>
 8003aba:	2308      	movs	r3, #8
 8003abc:	76fb      	strb	r3, [r7, #27]
 8003abe:	e005      	b.n	8003acc <UART_SetConfig+0x284>
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	76fb      	strb	r3, [r7, #27]
 8003ac4:	bf00      	nop
 8003ac6:	e001      	b.n	8003acc <UART_SetConfig+0x284>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <UART_SetConfig+0x2e4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	f040 8080 	bne.w	8003bd8 <UART_SetConfig+0x390>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ad8:	7efb      	ldrb	r3, [r7, #27]
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d836      	bhi.n	8003b4c <UART_SetConfig+0x304>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <UART_SetConfig+0x29c>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b09 	.word	0x08003b09
 8003ae8:	08003b4d 	.word	0x08003b4d
 8003aec:	08003b11 	.word	0x08003b11
 8003af0:	08003b4d 	.word	0x08003b4d
 8003af4:	08003b17 	.word	0x08003b17
 8003af8:	08003b4d 	.word	0x08003b4d
 8003afc:	08003b4d 	.word	0x08003b4d
 8003b00:	08003b4d 	.word	0x08003b4d
 8003b04:	08003b1f 	.word	0x08003b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b08:	f7fe fb16 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8003b0c:	6178      	str	r0, [r7, #20]
        break;
 8003b0e:	e022      	b.n	8003b56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b10:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <UART_SetConfig+0x300>)
 8003b12:	617b      	str	r3, [r7, #20]
        break;
 8003b14:	e01f      	b.n	8003b56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b16:	f7fe fa79 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8003b1a:	6178      	str	r0, [r7, #20]
        break;
 8003b1c:	e01b      	b.n	8003b56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b22:	617b      	str	r3, [r7, #20]
        break;
 8003b24:	e017      	b.n	8003b56 <UART_SetConfig+0x30e>
 8003b26:	bf00      	nop
 8003b28:	efff69f3 	.word	0xefff69f3
 8003b2c:	40008000 	.word	0x40008000
 8003b30:	40013800 	.word	0x40013800
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40004400 	.word	0x40004400
 8003b3c:	40004800 	.word	0x40004800
 8003b40:	40004c00 	.word	0x40004c00
 8003b44:	40005000 	.word	0x40005000
 8003b48:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	76bb      	strb	r3, [r7, #26]
        break;
 8003b54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80eb 	beq.w	8003d34 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	441a      	add	r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d805      	bhi.n	8003b7a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d202      	bcs.n	8003b80 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	76bb      	strb	r3, [r7, #26]
 8003b7e:	e0d9      	b.n	8003d34 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	021d      	lsls	r5, r3, #8
 8003b8a:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8003b8e:	0214      	lsls	r4, r2, #8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	085b      	lsrs	r3, r3, #1
 8003b96:	461a      	mov	r2, r3
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	18a0      	adds	r0, r4, r2
 8003b9e:	eb45 0103 	adc.w	r1, r5, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f04f 0400 	mov.w	r4, #0
 8003baa:	461a      	mov	r2, r3
 8003bac:	4623      	mov	r3, r4
 8003bae:	f7fc fb17 	bl	80001e0 <__aeabi_uldivmod>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	460c      	mov	r4, r1
 8003bb6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bbe:	d308      	bcc.n	8003bd2 <UART_SetConfig+0x38a>
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc6:	d204      	bcs.n	8003bd2 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	60da      	str	r2, [r3, #12]
 8003bd0:	e0b0      	b.n	8003d34 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	76bb      	strb	r3, [r7, #26]
 8003bd6:	e0ad      	b.n	8003d34 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be0:	d15c      	bne.n	8003c9c <UART_SetConfig+0x454>
  {
    switch (clocksource)
 8003be2:	7efb      	ldrb	r3, [r7, #27]
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d828      	bhi.n	8003c3a <UART_SetConfig+0x3f2>
 8003be8:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <UART_SetConfig+0x3a8>)
 8003bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bee:	bf00      	nop
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c1d 	.word	0x08003c1d
 8003bf8:	08003c25 	.word	0x08003c25
 8003bfc:	08003c3b 	.word	0x08003c3b
 8003c00:	08003c2b 	.word	0x08003c2b
 8003c04:	08003c3b 	.word	0x08003c3b
 8003c08:	08003c3b 	.word	0x08003c3b
 8003c0c:	08003c3b 	.word	0x08003c3b
 8003c10:	08003c33 	.word	0x08003c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c14:	f7fe fa90 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8003c18:	6178      	str	r0, [r7, #20]
        break;
 8003c1a:	e013      	b.n	8003c44 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c1c:	f7fe faa2 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 8003c20:	6178      	str	r0, [r7, #20]
        break;
 8003c22:	e00f      	b.n	8003c44 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c24:	4b49      	ldr	r3, [pc, #292]	; (8003d4c <UART_SetConfig+0x504>)
 8003c26:	617b      	str	r3, [r7, #20]
        break;
 8003c28:	e00c      	b.n	8003c44 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2a:	f7fe f9ef 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8003c2e:	6178      	str	r0, [r7, #20]
        break;
 8003c30:	e008      	b.n	8003c44 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c36:	617b      	str	r3, [r7, #20]
        break;
 8003c38:	e004      	b.n	8003c44 <UART_SetConfig+0x3fc>
      default:
        pclk = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	76bb      	strb	r3, [r7, #26]
        break;
 8003c42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d074      	beq.n	8003d34 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	005a      	lsls	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	441a      	add	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b0f      	cmp	r3, #15
 8003c66:	d916      	bls.n	8003c96 <UART_SetConfig+0x44e>
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6e:	d212      	bcs.n	8003c96 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f023 030f 	bic.w	r3, r3, #15
 8003c78:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	89fb      	ldrh	r3, [r7, #14]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	89fa      	ldrh	r2, [r7, #14]
 8003c92:	60da      	str	r2, [r3, #12]
 8003c94:	e04e      	b.n	8003d34 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	76bb      	strb	r3, [r7, #26]
 8003c9a:	e04b      	b.n	8003d34 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c9c:	7efb      	ldrb	r3, [r7, #27]
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d827      	bhi.n	8003cf2 <UART_SetConfig+0x4aa>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0x460>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003cd5 	.word	0x08003cd5
 8003cb0:	08003cdd 	.word	0x08003cdd
 8003cb4:	08003cf3 	.word	0x08003cf3
 8003cb8:	08003ce3 	.word	0x08003ce3
 8003cbc:	08003cf3 	.word	0x08003cf3
 8003cc0:	08003cf3 	.word	0x08003cf3
 8003cc4:	08003cf3 	.word	0x08003cf3
 8003cc8:	08003ceb 	.word	0x08003ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7fe fa34 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8003cd0:	6178      	str	r0, [r7, #20]
        break;
 8003cd2:	e013      	b.n	8003cfc <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd4:	f7fe fa46 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 8003cd8:	6178      	str	r0, [r7, #20]
        break;
 8003cda:	e00f      	b.n	8003cfc <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cdc:	4b1b      	ldr	r3, [pc, #108]	; (8003d4c <UART_SetConfig+0x504>)
 8003cde:	617b      	str	r3, [r7, #20]
        break;
 8003ce0:	e00c      	b.n	8003cfc <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce2:	f7fe f993 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8003ce6:	6178      	str	r0, [r7, #20]
        break;
 8003ce8:	e008      	b.n	8003cfc <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cee:	617b      	str	r3, [r7, #20]
        break;
 8003cf0:	e004      	b.n	8003cfc <UART_SetConfig+0x4b4>
      default:
        pclk = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	76bb      	strb	r3, [r7, #26]
        break;
 8003cfa:	bf00      	nop
    }

    if (pclk != 0U)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d018      	beq.n	8003d34 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	085a      	lsrs	r2, r3, #1
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	441a      	add	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2b0f      	cmp	r3, #15
 8003d1c:	d908      	bls.n	8003d30 <UART_SetConfig+0x4e8>
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d24:	d204      	bcs.n	8003d30 <UART_SetConfig+0x4e8>
      {
        huart->Instance->BRR = usartdiv;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	e001      	b.n	8003d34 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d40:	7ebb      	ldrb	r3, [r7, #26]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3720      	adds	r7, #32
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bdb0      	pop	{r4, r5, r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	00f42400 	.word	0x00f42400

08003d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	6852      	ldr	r2, [r2, #4]
 8003d6e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	6852      	ldr	r2, [r2, #4]
 8003d90:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	6852      	ldr	r2, [r2, #4]
 8003db2:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	6852      	ldr	r2, [r2, #4]
 8003dd4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	6892      	ldr	r2, [r2, #8]
 8003df6:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	6892      	ldr	r2, [r2, #8]
 8003e18:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e20:	430a      	orrs	r2, r1
 8003e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01a      	beq.n	8003e66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	6852      	ldr	r2, [r2, #4]
 8003e3a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e4e:	d10a      	bne.n	8003e66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	6852      	ldr	r2, [r2, #4]
 8003e5a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	6852      	ldr	r2, [r2, #4]
 8003e7c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e84:	430a      	orrs	r2, r1
 8003e86:	605a      	str	r2, [r3, #4]
  }
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ea4:	f7fd f872 	bl	8000f8c <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d10e      	bne.n	8003ed6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f82d 	bl	8003f26 <UART_WaitOnFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e023      	b.n	8003f1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d10e      	bne.n	8003f02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f817 	bl	8003f26 <UART_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e00d      	b.n	8003f1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	4613      	mov	r3, r2
 8003f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f36:	e05e      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f3e:	d05a      	beq.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f40:	f7fd f824 	bl	8000f8c <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	1ad2      	subs	r2, r2, r3
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d802      	bhi.n	8003f56 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d11b      	bne.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f64:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	6892      	ldr	r2, [r2, #8]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e043      	b.n	8004016 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02c      	beq.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003faa:	d124      	bne.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fb4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fc4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	6892      	ldr	r2, [r2, #8]
 8003fd0:	f022 0201 	bic.w	r2, r2, #1
 8003fd4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e00f      	b.n	8004016 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	401a      	ands	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	bf0c      	ite	eq
 8004006:	2301      	moveq	r3, #1
 8004008:	2300      	movne	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	429a      	cmp	r2, r3
 8004012:	d091      	beq.n	8003f38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	88fa      	ldrh	r2, [r7, #6]
 8004038:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	88fa      	ldrh	r2, [r7, #6]
 8004040:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004052:	d10e      	bne.n	8004072 <UART_Start_Receive_IT+0x52>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d105      	bne.n	8004068 <UART_Start_Receive_IT+0x48>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004062:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004066:	e02d      	b.n	80040c4 <UART_Start_Receive_IT+0xa4>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	22ff      	movs	r2, #255	; 0xff
 800406c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004070:	e028      	b.n	80040c4 <UART_Start_Receive_IT+0xa4>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10d      	bne.n	8004096 <UART_Start_Receive_IT+0x76>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <UART_Start_Receive_IT+0x6c>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	22ff      	movs	r2, #255	; 0xff
 8004086:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800408a:	e01b      	b.n	80040c4 <UART_Start_Receive_IT+0xa4>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	227f      	movs	r2, #127	; 0x7f
 8004090:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004094:	e016      	b.n	80040c4 <UART_Start_Receive_IT+0xa4>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800409e:	d10d      	bne.n	80040bc <UART_Start_Receive_IT+0x9c>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d104      	bne.n	80040b2 <UART_Start_Receive_IT+0x92>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	227f      	movs	r2, #127	; 0x7f
 80040ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040b0:	e008      	b.n	80040c4 <UART_Start_Receive_IT+0xa4>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	223f      	movs	r2, #63	; 0x3f
 80040b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ba:	e003      	b.n	80040c4 <UART_Start_Receive_IT+0xa4>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2222      	movs	r2, #34	; 0x22
 80040d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	6892      	ldr	r2, [r2, #8]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ea:	d107      	bne.n	80040fc <UART_Start_Receive_IT+0xdc>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d103      	bne.n	80040fc <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4a0c      	ldr	r2, [pc, #48]	; (8004128 <UART_Start_Receive_IT+0x108>)
 80040f8:	665a      	str	r2, [r3, #100]	; 0x64
 80040fa:	e002      	b.n	8004102 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4a0b      	ldr	r2, [pc, #44]	; (800412c <UART_Start_Receive_IT+0x10c>)
 8004100:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004118:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	080042c5 	.word	0x080042c5
 800412c:	080041ed 	.word	0x080041ed

08004130 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004146:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	6892      	ldr	r2, [r2, #8]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800415c:	2b01      	cmp	r3, #1
 800415e:	d107      	bne.n	8004170 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	f022 0210 	bic.w	r2, r2, #16
 800416e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff fb35 	bl	800381c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff fb12 	bl	8003808 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041e4:	bf00      	nop
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041fa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004200:	2b22      	cmp	r3, #34	; 0x22
 8004202:	d151      	bne.n	80042a8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800420a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004210:	89ba      	ldrh	r2, [r7, #12]
 8004212:	b2d1      	uxtb	r1, r2
 8004214:	89fa      	ldrh	r2, [r7, #14]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	400a      	ands	r2, r1
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d13a      	bne.n	80042bc <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004254:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	6892      	ldr	r2, [r2, #8]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004276:	2b01      	cmp	r3, #1
 8004278:	d10f      	bne.n	800429a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	f022 0210 	bic.w	r2, r2, #16
 8004288:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004290:	4619      	mov	r1, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff facc 	bl	8003830 <HAL_UARTEx_RxEventCallback>
 8004298:	e002      	b.n	80042a0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fc fcd4 	bl	8000c48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042a6:	e009      	b.n	80042bc <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	8b12      	ldrh	r2, [r2, #24]
 80042b2:	b292      	uxth	r2, r2
 80042b4:	f042 0208 	orr.w	r2, r2, #8
 80042b8:	b292      	uxth	r2, r2
 80042ba:	831a      	strh	r2, [r3, #24]
}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042d2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d8:	2b22      	cmp	r3, #34	; 0x22
 80042da:	d151      	bne.n	8004380 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042e2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80042ea:	89ba      	ldrh	r2, [r7, #12]
 80042ec:	89fb      	ldrh	r3, [r7, #14]
 80042ee:	4013      	ands	r3, r2
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fa:	1c9a      	adds	r2, r3, #2
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d13a      	bne.n	8004394 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800432c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	6892      	ldr	r2, [r2, #8]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434e:	2b01      	cmp	r3, #1
 8004350:	d10f      	bne.n	8004372 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	f022 0210 	bic.w	r2, r2, #16
 8004360:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004368:	4619      	mov	r1, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff fa60 	bl	8003830 <HAL_UARTEx_RxEventCallback>
 8004370:	e002      	b.n	8004378 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fc fc68 	bl	8000c48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800437e:	e009      	b.n	8004394 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	8b12      	ldrh	r2, [r2, #24]
 800438a:	b292      	uxth	r2, r2
 800438c:	f042 0208 	orr.w	r2, r2, #8
 8004390:	b292      	uxth	r2, r2
 8004392:	831a      	strh	r2, [r3, #24]
}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f103 0208 	add.w	r2, r3, #8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f103 0208 	add.w	r2, r3, #8
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f103 0208 	add.w	r2, r3, #8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	601a      	str	r2, [r3, #0]
}
 8004446:	bf00      	nop
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004468:	d103      	bne.n	8004472 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e00c      	b.n	800448c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3308      	adds	r3, #8
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e002      	b.n	8004480 <vListInsert+0x2e>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	429a      	cmp	r2, r3
 800448a:	d9f6      	bls.n	800447a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	601a      	str	r2, [r3, #0]
}
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6892      	ldr	r2, [r2, #8]
 80044da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6852      	ldr	r2, [r2, #4]
 80044e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d103      	bne.n	80044f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	1e5a      	subs	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3b04      	subs	r3, #4
 8004528:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3b04      	subs	r3, #4
 8004536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f023 0201 	bic.w	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3b04      	subs	r3, #4
 8004546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004548:	4a0c      	ldr	r2, [pc, #48]	; (800457c <pxPortInitialiseStack+0x64>)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3b14      	subs	r3, #20
 8004552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3b04      	subs	r3, #4
 800455e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f06f 0202 	mvn.w	r2, #2
 8004566:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3b20      	subs	r3, #32
 800456c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800456e:	68fb      	ldr	r3, [r7, #12]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	08004581 	.word	0x08004581

08004580 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800458a:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <prvTaskExitError+0x50>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004592:	d009      	beq.n	80045a8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e7fe      	b.n	80045a6 <prvTaskExitError+0x26>
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80045ba:	bf00      	nop
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0fc      	beq.n	80045bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000018 	.word	0x20000018
	...

080045e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045e0:	4b07      	ldr	r3, [pc, #28]	; (8004600 <pxCurrentTCBConst2>)
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	6808      	ldr	r0, [r1, #0]
 80045e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ea:	f380 8809 	msr	PSP, r0
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f380 8811 	msr	BASEPRI, r0
 80045fa:	4770      	bx	lr
 80045fc:	f3af 8000 	nop.w

08004600 <pxCurrentTCBConst2>:
 8004600:	20000e70 	.word	0x20000e70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop

08004608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004608:	4808      	ldr	r0, [pc, #32]	; (800462c <prvPortStartFirstTask+0x24>)
 800460a:	6800      	ldr	r0, [r0, #0]
 800460c:	6800      	ldr	r0, [r0, #0]
 800460e:	f380 8808 	msr	MSP, r0
 8004612:	f04f 0000 	mov.w	r0, #0
 8004616:	f380 8814 	msr	CONTROL, r0
 800461a:	b662      	cpsie	i
 800461c:	b661      	cpsie	f
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	df00      	svc	0
 8004628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800462a:	bf00      	nop
 800462c:	e000ed08 	.word	0xe000ed08

08004630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004636:	4b44      	ldr	r3, [pc, #272]	; (8004748 <xPortStartScheduler+0x118>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a44      	ldr	r2, [pc, #272]	; (800474c <xPortStartScheduler+0x11c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d109      	bne.n	8004654 <xPortStartScheduler+0x24>
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	e7fe      	b.n	8004652 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004654:	4b3c      	ldr	r3, [pc, #240]	; (8004748 <xPortStartScheduler+0x118>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a3d      	ldr	r2, [pc, #244]	; (8004750 <xPortStartScheduler+0x120>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d109      	bne.n	8004672 <xPortStartScheduler+0x42>
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e7fe      	b.n	8004670 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004672:	4b38      	ldr	r3, [pc, #224]	; (8004754 <xPortStartScheduler+0x124>)
 8004674:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	22ff      	movs	r2, #255	; 0xff
 8004682:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	b2db      	uxtb	r3, r3
 800468a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004694:	b2da      	uxtb	r2, r3
 8004696:	4b30      	ldr	r3, [pc, #192]	; (8004758 <xPortStartScheduler+0x128>)
 8004698:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800469a:	4b30      	ldr	r3, [pc, #192]	; (800475c <xPortStartScheduler+0x12c>)
 800469c:	2207      	movs	r2, #7
 800469e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046a0:	e009      	b.n	80046b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80046a2:	4b2e      	ldr	r3, [pc, #184]	; (800475c <xPortStartScheduler+0x12c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	4a2c      	ldr	r2, [pc, #176]	; (800475c <xPortStartScheduler+0x12c>)
 80046aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b80      	cmp	r3, #128	; 0x80
 80046c0:	d0ef      	beq.n	80046a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046c2:	4b26      	ldr	r3, [pc, #152]	; (800475c <xPortStartScheduler+0x12c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f1c3 0307 	rsb	r3, r3, #7
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d009      	beq.n	80046e2 <xPortStartScheduler+0xb2>
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	e7fe      	b.n	80046e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046e2:	4b1e      	ldr	r3, [pc, #120]	; (800475c <xPortStartScheduler+0x12c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	4a1c      	ldr	r2, [pc, #112]	; (800475c <xPortStartScheduler+0x12c>)
 80046ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <xPortStartScheduler+0x12c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046f4:	4a19      	ldr	r2, [pc, #100]	; (800475c <xPortStartScheduler+0x12c>)
 80046f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004700:	4a17      	ldr	r2, [pc, #92]	; (8004760 <xPortStartScheduler+0x130>)
 8004702:	4b17      	ldr	r3, [pc, #92]	; (8004760 <xPortStartScheduler+0x130>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800470a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800470c:	4a14      	ldr	r2, [pc, #80]	; (8004760 <xPortStartScheduler+0x130>)
 800470e:	4b14      	ldr	r3, [pc, #80]	; (8004760 <xPortStartScheduler+0x130>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004716:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004718:	f000 f8d6 	bl	80048c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <xPortStartScheduler+0x134>)
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004722:	f000 f8f5 	bl	8004910 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004726:	4a10      	ldr	r2, [pc, #64]	; (8004768 <xPortStartScheduler+0x138>)
 8004728:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <xPortStartScheduler+0x138>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004730:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004732:	f7ff ff69 	bl	8004608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004736:	f001 fa2b 	bl	8005b90 <vTaskSwitchContext>
	prvTaskExitError();
 800473a:	f7ff ff21 	bl	8004580 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	e000ed00 	.word	0xe000ed00
 800474c:	410fc271 	.word	0x410fc271
 8004750:	410fc270 	.word	0x410fc270
 8004754:	e000e400 	.word	0xe000e400
 8004758:	20000291 	.word	0x20000291
 800475c:	20000294 	.word	0x20000294
 8004760:	e000ed20 	.word	0xe000ed20
 8004764:	20000018 	.word	0x20000018
 8004768:	e000ef34 	.word	0xe000ef34

0800476c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004784:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <vPortEnterCritical+0x54>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	4a0d      	ldr	r2, [pc, #52]	; (80047c0 <vPortEnterCritical+0x54>)
 800478c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800478e:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <vPortEnterCritical+0x54>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d10e      	bne.n	80047b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <vPortEnterCritical+0x58>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d009      	beq.n	80047b4 <vPortEnterCritical+0x48>
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	e7fe      	b.n	80047b2 <vPortEnterCritical+0x46>
	}
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	20000018 	.word	0x20000018
 80047c4:	e000ed04 	.word	0xe000ed04

080047c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047ce:	4b11      	ldr	r3, [pc, #68]	; (8004814 <vPortExitCritical+0x4c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <vPortExitCritical+0x22>
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	607b      	str	r3, [r7, #4]
 80047e8:	e7fe      	b.n	80047e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80047ea:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <vPortExitCritical+0x4c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	4a08      	ldr	r2, [pc, #32]	; (8004814 <vPortExitCritical+0x4c>)
 80047f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <vPortExitCritical+0x4c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <vPortExitCritical+0x3e>
 80047fc:	2300      	movs	r3, #0
 80047fe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20000018 	.word	0x20000018
	...

08004820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004820:	f3ef 8009 	mrs	r0, PSP
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	4b15      	ldr	r3, [pc, #84]	; (8004880 <pxCurrentTCBConst>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	f01e 0f10 	tst.w	lr, #16
 8004830:	bf08      	it	eq
 8004832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800483a:	6010      	str	r0, [r2, #0]
 800483c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004840:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004844:	f380 8811 	msr	BASEPRI, r0
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f001 f99e 	bl	8005b90 <vTaskSwitchContext>
 8004854:	f04f 0000 	mov.w	r0, #0
 8004858:	f380 8811 	msr	BASEPRI, r0
 800485c:	bc09      	pop	{r0, r3}
 800485e:	6819      	ldr	r1, [r3, #0]
 8004860:	6808      	ldr	r0, [r1, #0]
 8004862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004866:	f01e 0f10 	tst.w	lr, #16
 800486a:	bf08      	it	eq
 800486c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004870:	f380 8809 	msr	PSP, r0
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	f3af 8000 	nop.w

08004880 <pxCurrentTCBConst>:
 8004880:	20000e70 	.word	0x20000e70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop

08004888 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
	__asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048a0:	f001 f8be 	bl	8005a20 <xTaskIncrementTick>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <SysTick_Handler+0x3c>)
 80048ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	2300      	movs	r3, #0
 80048b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	e000ed04 	.word	0xe000ed04

080048c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <vPortSetupTimerInterrupt+0x34>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <vPortSetupTimerInterrupt+0x38>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048d8:	4a0a      	ldr	r2, [pc, #40]	; (8004904 <vPortSetupTimerInterrupt+0x3c>)
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <vPortSetupTimerInterrupt+0x40>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	490b      	ldr	r1, [pc, #44]	; (800490c <vPortSetupTimerInterrupt+0x44>)
 80048e0:	fba1 1303 	umull	r1, r3, r1, r3
 80048e4:	099b      	lsrs	r3, r3, #6
 80048e6:	3b01      	subs	r3, #1
 80048e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ea:	4b04      	ldr	r3, [pc, #16]	; (80048fc <vPortSetupTimerInterrupt+0x34>)
 80048ec:	2207      	movs	r2, #7
 80048ee:	601a      	str	r2, [r3, #0]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	e000e010 	.word	0xe000e010
 8004900:	e000e018 	.word	0xe000e018
 8004904:	e000e014 	.word	0xe000e014
 8004908:	2000000c 	.word	0x2000000c
 800490c:	10624dd3 	.word	0x10624dd3

08004910 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004910:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004920 <vPortEnableVFP+0x10>
 8004914:	6801      	ldr	r1, [r0, #0]
 8004916:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800491a:	6001      	str	r1, [r0, #0]
 800491c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800491e:	bf00      	nop
 8004920:	e000ed88 	.word	0xe000ed88

08004924 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800492a:	f3ef 8305 	mrs	r3, IPSR
 800492e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b0f      	cmp	r3, #15
 8004934:	d913      	bls.n	800495e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004936:	4a16      	ldr	r2, [pc, #88]	; (8004990 <vPortValidateInterruptPriority+0x6c>)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004940:	4b14      	ldr	r3, [pc, #80]	; (8004994 <vPortValidateInterruptPriority+0x70>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	7afa      	ldrb	r2, [r7, #11]
 8004946:	429a      	cmp	r2, r3
 8004948:	d209      	bcs.n	800495e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	607b      	str	r3, [r7, #4]
 800495c:	e7fe      	b.n	800495c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800495e:	4b0e      	ldr	r3, [pc, #56]	; (8004998 <vPortValidateInterruptPriority+0x74>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004966:	4b0d      	ldr	r3, [pc, #52]	; (800499c <vPortValidateInterruptPriority+0x78>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d909      	bls.n	8004982 <vPortValidateInterruptPriority+0x5e>
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	e7fe      	b.n	8004980 <vPortValidateInterruptPriority+0x5c>
	}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000e3f0 	.word	0xe000e3f0
 8004994:	20000291 	.word	0x20000291
 8004998:	e000ed0c 	.word	0xe000ed0c
 800499c:	20000294 	.word	0x20000294

080049a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08a      	sub	sp, #40	; 0x28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049ac:	f000 ff8e 	bl	80058cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049b0:	4b59      	ldr	r3, [pc, #356]	; (8004b18 <pvPortMalloc+0x178>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049b8:	f000 f91a 	bl	8004bf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049bc:	4b57      	ldr	r3, [pc, #348]	; (8004b1c <pvPortMalloc+0x17c>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f040 8091 	bne.w	8004aec <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d01c      	beq.n	8004a0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80049d0:	2208      	movs	r2, #8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4413      	add	r3, r2
 80049d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d013      	beq.n	8004a0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f023 0307 	bic.w	r3, r3, #7
 80049e8:	3308      	adds	r3, #8
 80049ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <pvPortMalloc+0x6a>
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	e7fe      	b.n	8004a08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d06d      	beq.n	8004aec <pvPortMalloc+0x14c>
 8004a10:	4b43      	ldr	r3, [pc, #268]	; (8004b20 <pvPortMalloc+0x180>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d868      	bhi.n	8004aec <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a1a:	4b42      	ldr	r3, [pc, #264]	; (8004b24 <pvPortMalloc+0x184>)
 8004a1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a1e:	4b41      	ldr	r3, [pc, #260]	; (8004b24 <pvPortMalloc+0x184>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a24:	e004      	b.n	8004a30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d203      	bcs.n	8004a42 <pvPortMalloc+0xa2>
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f1      	bne.n	8004a26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a42:	4b35      	ldr	r3, [pc, #212]	; (8004b18 <pvPortMalloc+0x178>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d04f      	beq.n	8004aec <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2208      	movs	r2, #8
 8004a52:	4413      	add	r3, r2
 8004a54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	1ad2      	subs	r2, r2, r3
 8004a66:	2308      	movs	r3, #8
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d91e      	bls.n	8004aac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4413      	add	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d009      	beq.n	8004a94 <pvPortMalloc+0xf4>
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	e7fe      	b.n	8004a92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	1ad2      	subs	r2, r2, r3
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004aa6:	69b8      	ldr	r0, [r7, #24]
 8004aa8:	f000 f904 	bl	8004cb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004aac:	4b1c      	ldr	r3, [pc, #112]	; (8004b20 <pvPortMalloc+0x180>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	4a1a      	ldr	r2, [pc, #104]	; (8004b20 <pvPortMalloc+0x180>)
 8004ab8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004aba:	4b19      	ldr	r3, [pc, #100]	; (8004b20 <pvPortMalloc+0x180>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <pvPortMalloc+0x188>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d203      	bcs.n	8004ace <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ac6:	4b16      	ldr	r3, [pc, #88]	; (8004b20 <pvPortMalloc+0x180>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a17      	ldr	r2, [pc, #92]	; (8004b28 <pvPortMalloc+0x188>)
 8004acc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <pvPortMalloc+0x17c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <pvPortMalloc+0x18c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	4a10      	ldr	r2, [pc, #64]	; (8004b2c <pvPortMalloc+0x18c>)
 8004aea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004aec:	f000 fefc 	bl	80058e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <pvPortMalloc+0x16e>
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e7fe      	b.n	8004b0c <pvPortMalloc+0x16c>
	return pvReturn;
 8004b0e:	69fb      	ldr	r3, [r7, #28]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3728      	adds	r7, #40	; 0x28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20000e58 	.word	0x20000e58
 8004b1c:	20000e6c 	.word	0x20000e6c
 8004b20:	20000e5c 	.word	0x20000e5c
 8004b24:	20000e50 	.word	0x20000e50
 8004b28:	20000e60 	.word	0x20000e60
 8004b2c:	20000e64 	.word	0x20000e64

08004b30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d04b      	beq.n	8004bda <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b42:	2308      	movs	r3, #8
 8004b44:	425b      	negs	r3, r3
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4413      	add	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <vPortFree+0xb4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <vPortFree+0x42>
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	e7fe      	b.n	8004b70 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <vPortFree+0x5e>
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	e7fe      	b.n	8004b8c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <vPortFree+0xb4>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01e      	beq.n	8004bda <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d11a      	bne.n	8004bda <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <vPortFree+0xb4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	43db      	mvns	r3, r3
 8004bae:	401a      	ands	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004bb4:	f000 fe8a 	bl	80058cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <vPortFree+0xb8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	4a09      	ldr	r2, [pc, #36]	; (8004be8 <vPortFree+0xb8>)
 8004bc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bc6:	6938      	ldr	r0, [r7, #16]
 8004bc8:	f000 f874 	bl	8004cb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004bcc:	4b07      	ldr	r3, [pc, #28]	; (8004bec <vPortFree+0xbc>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	4a06      	ldr	r2, [pc, #24]	; (8004bec <vPortFree+0xbc>)
 8004bd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004bd6:	f000 fe87 	bl	80058e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004bda:	bf00      	nop
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000e6c 	.word	0x20000e6c
 8004be8:	20000e5c 	.word	0x20000e5c
 8004bec:	20000e68 	.word	0x20000e68

08004bf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bf6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004bfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004bfc:	4b27      	ldr	r3, [pc, #156]	; (8004c9c <prvHeapInit+0xac>)
 8004bfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00c      	beq.n	8004c24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3307      	adds	r3, #7
 8004c0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0307 	bic.w	r3, r3, #7
 8004c16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	4a1f      	ldr	r2, [pc, #124]	; (8004c9c <prvHeapInit+0xac>)
 8004c20:	4413      	add	r3, r2
 8004c22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c28:	4a1d      	ldr	r2, [pc, #116]	; (8004ca0 <prvHeapInit+0xb0>)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ca0 <prvHeapInit+0xb0>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	4413      	add	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c3c:	2208      	movs	r2, #8
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0307 	bic.w	r3, r3, #7
 8004c4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <prvHeapInit+0xb4>)
 8004c50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <prvHeapInit+0xb4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2200      	movs	r2, #0
 8004c58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <prvHeapInit+0xb4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	1ad2      	subs	r2, r2, r3
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c70:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <prvHeapInit+0xb4>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <prvHeapInit+0xb8>)
 8004c7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4a09      	ldr	r2, [pc, #36]	; (8004cac <prvHeapInit+0xbc>)
 8004c86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c88:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <prvHeapInit+0xc0>)
 8004c8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c8e:	601a      	str	r2, [r3, #0]
}
 8004c90:	bf00      	nop
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	20000298 	.word	0x20000298
 8004ca0:	20000e50 	.word	0x20000e50
 8004ca4:	20000e58 	.word	0x20000e58
 8004ca8:	20000e60 	.word	0x20000e60
 8004cac:	20000e5c 	.word	0x20000e5c
 8004cb0:	20000e6c 	.word	0x20000e6c

08004cb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cbc:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <prvInsertBlockIntoFreeList+0xac>)
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e002      	b.n	8004cc8 <prvInsertBlockIntoFreeList+0x14>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d3f7      	bcc.n	8004cc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	441a      	add	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d108      	bne.n	8004cf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	441a      	add	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	441a      	add	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d118      	bne.n	8004d3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <prvInsertBlockIntoFreeList+0xb0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d00d      	beq.n	8004d32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	441a      	add	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	e008      	b.n	8004d44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d32:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <prvInsertBlockIntoFreeList+0xb0>)
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	e003      	b.n	8004d44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d002      	beq.n	8004d52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000e50 	.word	0x20000e50
 8004d64:	20000e58 	.word	0x20000e58

08004d68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <xQueueGenericReset+0x28>
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	e7fe      	b.n	8004d8e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004d90:	f7ff fcec 	bl	800476c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9c:	68f9      	ldr	r1, [r7, #12]
 8004d9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004da0:	fb01 f303 	mul.w	r3, r1, r3
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	68f9      	ldr	r1, [r7, #12]
 8004dc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dc6:	fb01 f303 	mul.w	r3, r1, r3
 8004dca:	441a      	add	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	22ff      	movs	r2, #255	; 0xff
 8004dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	22ff      	movs	r2, #255	; 0xff
 8004ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d114      	bne.n	8004e10 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d01a      	beq.n	8004e24 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3310      	adds	r3, #16
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 ff4a 	bl	8005c8c <xTaskRemoveFromEventList>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d012      	beq.n	8004e24 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <xQueueGenericReset+0xcc>)
 8004e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	e009      	b.n	8004e24 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3310      	adds	r3, #16
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff facb 	bl	80043b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3324      	adds	r3, #36	; 0x24
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff fac6 	bl	80043b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e24:	f7ff fcd0 	bl	80047c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e28:	2301      	movs	r3, #1
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	e000ed04 	.word	0xe000ed04

08004e38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	; 0x28
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	4613      	mov	r3, r2
 8004e44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d109      	bne.n	8004e60 <xQueueGenericCreate+0x28>
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	e7fe      	b.n	8004e5e <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	fb02 f303 	mul.w	r3, r2, r3
 8004e68:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	3348      	adds	r3, #72	; 0x48
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff fd96 	bl	80049a0 <pvPortMalloc>
 8004e74:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d011      	beq.n	8004ea0 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	3348      	adds	r3, #72	; 0x48
 8004e84:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e8e:	79fa      	ldrb	r2, [r7, #7]
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f805 	bl	8004eaa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
	}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3720      	adds	r7, #32
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
 8004eb6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d103      	bne.n	8004ec6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	e002      	b.n	8004ecc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ed8:	2101      	movs	r1, #1
 8004eda:	69b8      	ldr	r0, [r7, #24]
 8004edc:	f7ff ff44 	bl	8004d68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <xQueueCreateCountingSemaphore+0x24>
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	e7fe      	b.n	8004f0a <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d909      	bls.n	8004f28 <xQueueCreateCountingSemaphore+0x40>
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	e7fe      	b.n	8004f26 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f28:	2202      	movs	r2, #2
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ff83 	bl	8004e38 <xQueueGenericCreate>
 8004f32:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f40:	697b      	ldr	r3, [r7, #20]
	}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b08e      	sub	sp, #56	; 0x38
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d109      	bne.n	8004f72 <xQueueGiveFromISR+0x28>
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	623b      	str	r3, [r7, #32]
 8004f70:	e7fe      	b.n	8004f70 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <xQueueGiveFromISR+0x44>
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	e7fe      	b.n	8004f8c <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <xQueueGiveFromISR+0x54>
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <xQueueGiveFromISR+0x58>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <xQueueGiveFromISR+0x5a>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d109      	bne.n	8004fbc <xQueueGiveFromISR+0x72>
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	e7fe      	b.n	8004fba <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fbc:	f7ff fcb2 	bl	8004924 <vPortValidateInterruptPriority>
	__asm volatile
 8004fc0:	f3ef 8211 	mrs	r2, BASEPRI
 8004fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	617a      	str	r2, [r7, #20]
 8004fd6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004fd8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d92b      	bls.n	8005044 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ffe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005006:	d112      	bne.n	800502e <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	2b00      	cmp	r3, #0
 800500e:	d016      	beq.n	800503e <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	3324      	adds	r3, #36	; 0x24
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fe39 	bl	8005c8c <xTaskRemoveFromEventList>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00e      	beq.n	800503e <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00b      	beq.n	800503e <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2201      	movs	r2, #1
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e007      	b.n	800503e <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800502e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005032:	3301      	adds	r3, #1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	b25a      	sxtb	r2, r3
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800503e:	2301      	movs	r3, #1
 8005040:	637b      	str	r3, [r7, #52]	; 0x34
 8005042:	e001      	b.n	8005048 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005044:	2300      	movs	r3, #0
 8005046:	637b      	str	r3, [r7, #52]	; 0x34
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005054:	4618      	mov	r0, r3
 8005056:	3738      	adds	r7, #56	; 0x38
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08e      	sub	sp, #56	; 0x38
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005066:	2300      	movs	r3, #0
 8005068:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800506e:	2300      	movs	r3, #0
 8005070:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d109      	bne.n	800508c <xQueueSemaphoreTake+0x30>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	623b      	str	r3, [r7, #32]
 800508a:	e7fe      	b.n	800508a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800508c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <xQueueSemaphoreTake+0x4c>
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	e7fe      	b.n	80050a6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050a8:	f000 ffa6 	bl	8005ff8 <xTaskGetSchedulerState>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d102      	bne.n	80050b8 <xQueueSemaphoreTake+0x5c>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <xQueueSemaphoreTake+0x60>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <xQueueSemaphoreTake+0x62>
 80050bc:	2300      	movs	r3, #0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <xQueueSemaphoreTake+0x7a>
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	61bb      	str	r3, [r7, #24]
 80050d4:	e7fe      	b.n	80050d4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050d6:	f7ff fb49 	bl	800476c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80050da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d024      	beq.n	8005130 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	1e5a      	subs	r2, r3, #1
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ec:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d104      	bne.n	8005100 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80050f6:	f001 f89f 	bl	8006238 <pvTaskIncrementMutexHeldCount>
 80050fa:	4602      	mov	r2, r0
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00f      	beq.n	8005128 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	3310      	adds	r3, #16
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fdbd 	bl	8005c8c <xTaskRemoveFromEventList>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005118:	4b53      	ldr	r3, [pc, #332]	; (8005268 <xQueueSemaphoreTake+0x20c>)
 800511a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005128:	f7ff fb4e 	bl	80047c8 <vPortExitCritical>
				return pdPASS;
 800512c:	2301      	movs	r3, #1
 800512e:	e096      	b.n	800525e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d110      	bne.n	8005158 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	2b00      	cmp	r3, #0
 800513a:	d009      	beq.n	8005150 <xQueueSemaphoreTake+0xf4>
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	e7fe      	b.n	800514e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005150:	f7ff fb3a 	bl	80047c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005154:	2300      	movs	r3, #0
 8005156:	e082      	b.n	800525e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800515e:	f107 030c 	add.w	r3, r7, #12
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fdf4 	bl	8005d50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005168:	2301      	movs	r3, #1
 800516a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800516c:	f7ff fb2c 	bl	80047c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005170:	f000 fbac 	bl	80058cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005174:	f7ff fafa 	bl	800476c <vPortEnterCritical>
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800517e:	b25b      	sxtb	r3, r3
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005184:	d103      	bne.n	800518e <xQueueSemaphoreTake+0x132>
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005194:	b25b      	sxtb	r3, r3
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800519a:	d103      	bne.n	80051a4 <xQueueSemaphoreTake+0x148>
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a4:	f7ff fb10 	bl	80047c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051a8:	463a      	mov	r2, r7
 80051aa:	f107 030c 	add.w	r3, r7, #12
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fde3 	bl	8005d7c <xTaskCheckForTimeOut>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d132      	bne.n	8005222 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051be:	f000 f8bf 	bl	8005340 <prvIsQueueEmpty>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d026      	beq.n	8005216 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d109      	bne.n	80051e4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80051d0:	f7ff facc 	bl	800476c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 ff2b 	bl	8006034 <xTaskPriorityInherit>
 80051de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80051e0:	f7ff faf2 	bl	80047c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	3324      	adds	r3, #36	; 0x24
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	4611      	mov	r1, r2
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fd29 	bl	8005c44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051f4:	f000 f852 	bl	800529c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051f8:	f000 fb76 	bl	80058e8 <xTaskResumeAll>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f47f af69 	bne.w	80050d6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005204:	4b18      	ldr	r3, [pc, #96]	; (8005268 <xQueueSemaphoreTake+0x20c>)
 8005206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	e75f      	b.n	80050d6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005218:	f000 f840 	bl	800529c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800521c:	f000 fb64 	bl	80058e8 <xTaskResumeAll>
 8005220:	e759      	b.n	80050d6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005224:	f000 f83a 	bl	800529c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005228:	f000 fb5e 	bl	80058e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800522c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800522e:	f000 f887 	bl	8005340 <prvIsQueueEmpty>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	f43f af4e 	beq.w	80050d6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00d      	beq.n	800525c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005240:	f7ff fa94 	bl	800476c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005246:	f000 f811 	bl	800526c <prvGetDisinheritPriorityAfterTimeout>
 800524a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800524c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005252:	4618      	mov	r0, r3
 8005254:	f000 ff64 	bl	8006120 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005258:	f7ff fab6 	bl	80047c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800525c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800525e:	4618      	mov	r0, r3
 8005260:	3738      	adds	r7, #56	; 0x38
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d006      	beq.n	800528a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1c3 0307 	rsb	r3, r3, #7
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e001      	b.n	800528e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800528e:	68fb      	ldr	r3, [r7, #12]
	}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052a4:	f7ff fa62 	bl	800476c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052b0:	e011      	b.n	80052d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d012      	beq.n	80052e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3324      	adds	r3, #36	; 0x24
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fce4 	bl	8005c8c <xTaskRemoveFromEventList>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052ca:	f000 fdb7 	bl	8005e3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	dce9      	bgt.n	80052b2 <prvUnlockQueue+0x16>
 80052de:	e000      	b.n	80052e2 <prvUnlockQueue+0x46>
					break;
 80052e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	22ff      	movs	r2, #255	; 0xff
 80052e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052ea:	f7ff fa6d 	bl	80047c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052ee:	f7ff fa3d 	bl	800476c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052fa:	e011      	b.n	8005320 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d012      	beq.n	800532a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3310      	adds	r3, #16
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fcbf 	bl	8005c8c <xTaskRemoveFromEventList>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005314:	f000 fd92 	bl	8005e3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005318:	7bbb      	ldrb	r3, [r7, #14]
 800531a:	3b01      	subs	r3, #1
 800531c:	b2db      	uxtb	r3, r3
 800531e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005324:	2b00      	cmp	r3, #0
 8005326:	dce9      	bgt.n	80052fc <prvUnlockQueue+0x60>
 8005328:	e000      	b.n	800532c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800532a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	22ff      	movs	r2, #255	; 0xff
 8005330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005334:	f7ff fa48 	bl	80047c8 <vPortExitCritical>
}
 8005338:	bf00      	nop
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005348:	f7ff fa10 	bl	800476c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	2b00      	cmp	r3, #0
 8005352:	d102      	bne.n	800535a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005354:	2301      	movs	r3, #1
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e001      	b.n	800535e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800535e:	f7ff fa33 	bl	80047c8 <vPortExitCritical>

	return xReturn;
 8005362:	68fb      	ldr	r3, [r7, #12]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08e      	sub	sp, #56	; 0x38
 8005370:	af04      	add	r7, sp, #16
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800537a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537c:	2b00      	cmp	r3, #0
 800537e:	d109      	bne.n	8005394 <xTaskCreateStatic+0x28>
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	623b      	str	r3, [r7, #32]
 8005392:	e7fe      	b.n	8005392 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <xTaskCreateStatic+0x42>
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	e7fe      	b.n	80053ac <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053ae:	2354      	movs	r3, #84	; 0x54
 80053b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b54      	cmp	r3, #84	; 0x54
 80053b6:	d009      	beq.n	80053cc <xTaskCreateStatic+0x60>
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	e7fe      	b.n	80053ca <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01e      	beq.n	8005412 <xTaskCreateStatic+0xa6>
 80053d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01b      	beq.n	8005412 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053ec:	2300      	movs	r3, #0
 80053ee:	9303      	str	r3, [sp, #12]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	9302      	str	r3, [sp, #8]
 80053f4:	f107 0314 	add.w	r3, r7, #20
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f850 	bl	80054aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800540a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800540c:	f000 f8d4 	bl	80055b8 <prvAddNewTaskToReadyList>
 8005410:	e001      	b.n	8005416 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005416:	697b      	ldr	r3, [r7, #20]
	}
 8005418:	4618      	mov	r0, r3
 800541a:	3728      	adds	r7, #40	; 0x28
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08c      	sub	sp, #48	; 0x30
 8005424:	af04      	add	r7, sp, #16
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff fab3 	bl	80049a0 <pvPortMalloc>
 800543a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00e      	beq.n	8005460 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005442:	2054      	movs	r0, #84	; 0x54
 8005444:	f7ff faac 	bl	80049a0 <pvPortMalloc>
 8005448:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	631a      	str	r2, [r3, #48]	; 0x30
 8005456:	e005      	b.n	8005464 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005458:	6978      	ldr	r0, [r7, #20]
 800545a:	f7ff fb69 	bl	8004b30 <vPortFree>
 800545e:	e001      	b.n	8005464 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d017      	beq.n	800549a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005472:	88fa      	ldrh	r2, [r7, #6]
 8005474:	2300      	movs	r3, #0
 8005476:	9303      	str	r3, [sp, #12]
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	9302      	str	r3, [sp, #8]
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f80e 	bl	80054aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800548e:	69f8      	ldr	r0, [r7, #28]
 8005490:	f000 f892 	bl	80055b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005494:	2301      	movs	r3, #1
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	e002      	b.n	80054a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800549e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054a0:	69bb      	ldr	r3, [r7, #24]
	}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b088      	sub	sp, #32
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	60b9      	str	r1, [r7, #8]
 80054b4:	607a      	str	r2, [r7, #4]
 80054b6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054c2:	3b01      	subs	r3, #1
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	f023 0307 	bic.w	r3, r3, #7
 80054d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d009      	beq.n	80054f0 <prvInitialiseNewTask+0x46>
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	e7fe      	b.n	80054ee <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d01f      	beq.n	8005536 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	e012      	b.n	8005522 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	7819      	ldrb	r1, [r3, #0]
 8005504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	3334      	adds	r3, #52	; 0x34
 800550c:	460a      	mov	r2, r1
 800550e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	4413      	add	r3, r2
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d006      	beq.n	800552a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	3301      	adds	r3, #1
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	2b0f      	cmp	r3, #15
 8005526:	d9e9      	bls.n	80054fc <prvInitialiseNewTask+0x52>
 8005528:	e000      	b.n	800552c <prvInitialiseNewTask+0x82>
			{
				break;
 800552a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005534:	e003      	b.n	800553e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	2b06      	cmp	r3, #6
 8005542:	d901      	bls.n	8005548 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005544:	2306      	movs	r3, #6
 8005546:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800554c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005552:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	2200      	movs	r2, #0
 8005558:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	3304      	adds	r3, #4
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe ff46 	bl	80043f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	3318      	adds	r3, #24
 8005568:	4618      	mov	r0, r3
 800556a:	f7fe ff41 	bl	80043f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005572:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	f1c3 0207 	rsb	r2, r3, #7
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005582:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	2200      	movs	r2, #0
 8005588:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	68f9      	ldr	r1, [r7, #12]
 8005596:	69b8      	ldr	r0, [r7, #24]
 8005598:	f7fe ffbe 	bl	8004518 <pxPortInitialiseStack>
 800559c:	4602      	mov	r2, r0
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055ae:	bf00      	nop
 80055b0:	3720      	adds	r7, #32
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055c0:	f7ff f8d4 	bl	800476c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055c4:	4b2a      	ldr	r3, [pc, #168]	; (8005670 <prvAddNewTaskToReadyList+0xb8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3301      	adds	r3, #1
 80055ca:	4a29      	ldr	r2, [pc, #164]	; (8005670 <prvAddNewTaskToReadyList+0xb8>)
 80055cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055ce:	4b29      	ldr	r3, [pc, #164]	; (8005674 <prvAddNewTaskToReadyList+0xbc>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055d6:	4a27      	ldr	r2, [pc, #156]	; (8005674 <prvAddNewTaskToReadyList+0xbc>)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055dc:	4b24      	ldr	r3, [pc, #144]	; (8005670 <prvAddNewTaskToReadyList+0xb8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d110      	bne.n	8005606 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055e4:	f000 fc4e 	bl	8005e84 <prvInitialiseTaskLists>
 80055e8:	e00d      	b.n	8005606 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055ea:	4b23      	ldr	r3, [pc, #140]	; (8005678 <prvAddNewTaskToReadyList+0xc0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055f2:	4b20      	ldr	r3, [pc, #128]	; (8005674 <prvAddNewTaskToReadyList+0xbc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d802      	bhi.n	8005606 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005600:	4a1c      	ldr	r2, [pc, #112]	; (8005674 <prvAddNewTaskToReadyList+0xbc>)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005606:	4b1d      	ldr	r3, [pc, #116]	; (800567c <prvAddNewTaskToReadyList+0xc4>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3301      	adds	r3, #1
 800560c:	4a1b      	ldr	r2, [pc, #108]	; (800567c <prvAddNewTaskToReadyList+0xc4>)
 800560e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	2201      	movs	r2, #1
 8005616:	409a      	lsls	r2, r3
 8005618:	4b19      	ldr	r3, [pc, #100]	; (8005680 <prvAddNewTaskToReadyList+0xc8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4313      	orrs	r3, r2
 800561e:	4a18      	ldr	r2, [pc, #96]	; (8005680 <prvAddNewTaskToReadyList+0xc8>)
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4a15      	ldr	r2, [pc, #84]	; (8005684 <prvAddNewTaskToReadyList+0xcc>)
 8005630:	441a      	add	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3304      	adds	r3, #4
 8005636:	4619      	mov	r1, r3
 8005638:	4610      	mov	r0, r2
 800563a:	f7fe fee6 	bl	800440a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800563e:	f7ff f8c3 	bl	80047c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005642:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <prvAddNewTaskToReadyList+0xc0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00e      	beq.n	8005668 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800564a:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <prvAddNewTaskToReadyList+0xbc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	429a      	cmp	r2, r3
 8005656:	d207      	bcs.n	8005668 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <prvAddNewTaskToReadyList+0xd0>)
 800565a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	20000f70 	.word	0x20000f70
 8005674:	20000e70 	.word	0x20000e70
 8005678:	20000f7c 	.word	0x20000f7c
 800567c:	20000f8c 	.word	0x20000f8c
 8005680:	20000f78 	.word	0x20000f78
 8005684:	20000e74 	.word	0x20000e74
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005694:	f7ff f86a 	bl	800476c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <vTaskDelete+0x18>
 800569e:	4b38      	ldr	r3, [pc, #224]	; (8005780 <vTaskDelete+0xf4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	e000      	b.n	80056a6 <vTaskDelete+0x1a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fe ff09 	bl	80044c4 <uxListRemove>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d115      	bne.n	80056e4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056bc:	4931      	ldr	r1, [pc, #196]	; (8005784 <vTaskDelete+0xf8>)
 80056be:	4613      	mov	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10a      	bne.n	80056e4 <vTaskDelete+0x58>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	2201      	movs	r2, #1
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	43da      	mvns	r2, r3
 80056da:	4b2b      	ldr	r3, [pc, #172]	; (8005788 <vTaskDelete+0xfc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4013      	ands	r3, r2
 80056e0:	4a29      	ldr	r2, [pc, #164]	; (8005788 <vTaskDelete+0xfc>)
 80056e2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d004      	beq.n	80056f6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3318      	adds	r3, #24
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fe fee7 	bl	80044c4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80056f6:	4b25      	ldr	r3, [pc, #148]	; (800578c <vTaskDelete+0x100>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3301      	adds	r3, #1
 80056fc:	4a23      	ldr	r2, [pc, #140]	; (800578c <vTaskDelete+0x100>)
 80056fe:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005700:	4b1f      	ldr	r3, [pc, #124]	; (8005780 <vTaskDelete+0xf4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	429a      	cmp	r2, r3
 8005708:	d10b      	bne.n	8005722 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3304      	adds	r3, #4
 800570e:	4619      	mov	r1, r3
 8005710:	481f      	ldr	r0, [pc, #124]	; (8005790 <vTaskDelete+0x104>)
 8005712:	f7fe fe7a 	bl	800440a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005716:	4b1f      	ldr	r3, [pc, #124]	; (8005794 <vTaskDelete+0x108>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3301      	adds	r3, #1
 800571c:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <vTaskDelete+0x108>)
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	e009      	b.n	8005736 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005722:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <vTaskDelete+0x10c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3b01      	subs	r3, #1
 8005728:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <vTaskDelete+0x10c>)
 800572a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fc15 	bl	8005f5c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005732:	f000 fc41 	bl	8005fb8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005736:	f7ff f847 	bl	80047c8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800573a:	4b18      	ldr	r3, [pc, #96]	; (800579c <vTaskDelete+0x110>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d01a      	beq.n	8005778 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8005742:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <vTaskDelete+0xf4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	429a      	cmp	r2, r3
 800574a:	d115      	bne.n	8005778 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800574c:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <vTaskDelete+0x114>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d009      	beq.n	8005768 <vTaskDelete+0xdc>
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	60bb      	str	r3, [r7, #8]
 8005766:	e7fe      	b.n	8005766 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8005768:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <vTaskDelete+0x118>)
 800576a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005778:	bf00      	nop
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	20000e70 	.word	0x20000e70
 8005784:	20000e74 	.word	0x20000e74
 8005788:	20000f78 	.word	0x20000f78
 800578c:	20000f8c 	.word	0x20000f8c
 8005790:	20000f44 	.word	0x20000f44
 8005794:	20000f58 	.word	0x20000f58
 8005798:	20000f70 	.word	0x20000f70
 800579c:	20000f7c 	.word	0x20000f7c
 80057a0:	20000f98 	.word	0x20000f98
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d016      	beq.n	80057e8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057ba:	4b13      	ldr	r3, [pc, #76]	; (8005808 <vTaskDelay+0x60>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <vTaskDelay+0x2e>
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	60bb      	str	r3, [r7, #8]
 80057d4:	e7fe      	b.n	80057d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80057d6:	f000 f879 	bl	80058cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057da:	2100      	movs	r1, #0
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fd3f 	bl	8006260 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057e2:	f000 f881 	bl	80058e8 <xTaskResumeAll>
 80057e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d107      	bne.n	80057fe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80057ee:	4b07      	ldr	r3, [pc, #28]	; (800580c <vTaskDelay+0x64>)
 80057f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057fe:	bf00      	nop
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000f98 	.word	0x20000f98
 800580c:	e000ed04 	.word	0xe000ed04

08005810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005816:	2300      	movs	r3, #0
 8005818:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800581e:	463a      	mov	r2, r7
 8005820:	1d39      	adds	r1, r7, #4
 8005822:	f107 0308 	add.w	r3, r7, #8
 8005826:	4618      	mov	r0, r3
 8005828:	f7fa fe62 	bl	80004f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	9202      	str	r2, [sp, #8]
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	2300      	movs	r3, #0
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	2300      	movs	r3, #0
 800583c:	460a      	mov	r2, r1
 800583e:	491d      	ldr	r1, [pc, #116]	; (80058b4 <vTaskStartScheduler+0xa4>)
 8005840:	481d      	ldr	r0, [pc, #116]	; (80058b8 <vTaskStartScheduler+0xa8>)
 8005842:	f7ff fd93 	bl	800536c <xTaskCreateStatic>
 8005846:	4602      	mov	r2, r0
 8005848:	4b1c      	ldr	r3, [pc, #112]	; (80058bc <vTaskStartScheduler+0xac>)
 800584a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800584c:	4b1b      	ldr	r3, [pc, #108]	; (80058bc <vTaskStartScheduler+0xac>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005854:	2301      	movs	r3, #1
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	e001      	b.n	800585e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d115      	bne.n	8005890 <vTaskStartScheduler+0x80>
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	613b      	str	r3, [r7, #16]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005876:	4b12      	ldr	r3, [pc, #72]	; (80058c0 <vTaskStartScheduler+0xb0>)
 8005878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800587c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800587e:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <vTaskStartScheduler+0xb4>)
 8005880:	2201      	movs	r2, #1
 8005882:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005884:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <vTaskStartScheduler+0xb8>)
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800588a:	f7fe fed1 	bl	8004630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800588e:	e00d      	b.n	80058ac <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005896:	d109      	bne.n	80058ac <vTaskStartScheduler+0x9c>
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e7fe      	b.n	80058aa <vTaskStartScheduler+0x9a>
}
 80058ac:	bf00      	nop
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	080066c0 	.word	0x080066c0
 80058b8:	08005e55 	.word	0x08005e55
 80058bc:	20000f94 	.word	0x20000f94
 80058c0:	20000f90 	.word	0x20000f90
 80058c4:	20000f7c 	.word	0x20000f7c
 80058c8:	20000f74 	.word	0x20000f74

080058cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058d0:	4b04      	ldr	r3, [pc, #16]	; (80058e4 <vTaskSuspendAll+0x18>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	4a03      	ldr	r2, [pc, #12]	; (80058e4 <vTaskSuspendAll+0x18>)
 80058d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058da:	bf00      	nop
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	20000f98 	.word	0x20000f98

080058e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058f6:	4b41      	ldr	r3, [pc, #260]	; (80059fc <xTaskResumeAll+0x114>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <xTaskResumeAll+0x2a>
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	e7fe      	b.n	8005910 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005912:	f7fe ff2b 	bl	800476c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005916:	4b39      	ldr	r3, [pc, #228]	; (80059fc <xTaskResumeAll+0x114>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3b01      	subs	r3, #1
 800591c:	4a37      	ldr	r2, [pc, #220]	; (80059fc <xTaskResumeAll+0x114>)
 800591e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005920:	4b36      	ldr	r3, [pc, #216]	; (80059fc <xTaskResumeAll+0x114>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d161      	bne.n	80059ec <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005928:	4b35      	ldr	r3, [pc, #212]	; (8005a00 <xTaskResumeAll+0x118>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d05d      	beq.n	80059ec <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005930:	e02e      	b.n	8005990 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005932:	4b34      	ldr	r3, [pc, #208]	; (8005a04 <xTaskResumeAll+0x11c>)
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3318      	adds	r3, #24
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe fdc0 	bl	80044c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3304      	adds	r3, #4
 8005948:	4618      	mov	r0, r3
 800594a:	f7fe fdbb 	bl	80044c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	2201      	movs	r2, #1
 8005954:	409a      	lsls	r2, r3
 8005956:	4b2c      	ldr	r3, [pc, #176]	; (8005a08 <xTaskResumeAll+0x120>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4313      	orrs	r3, r2
 800595c:	4a2a      	ldr	r2, [pc, #168]	; (8005a08 <xTaskResumeAll+0x120>)
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4a27      	ldr	r2, [pc, #156]	; (8005a0c <xTaskResumeAll+0x124>)
 800596e:	441a      	add	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3304      	adds	r3, #4
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f7fe fd47 	bl	800440a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	4b23      	ldr	r3, [pc, #140]	; (8005a10 <xTaskResumeAll+0x128>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800598a:	4b22      	ldr	r3, [pc, #136]	; (8005a14 <xTaskResumeAll+0x12c>)
 800598c:	2201      	movs	r2, #1
 800598e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005990:	4b1c      	ldr	r3, [pc, #112]	; (8005a04 <xTaskResumeAll+0x11c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1cc      	bne.n	8005932 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800599e:	f000 fb0b 	bl	8005fb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059a2:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <xTaskResumeAll+0x130>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d010      	beq.n	80059d0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059ae:	f000 f837 	bl	8005a20 <xTaskIncrementTick>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80059b8:	4b16      	ldr	r3, [pc, #88]	; (8005a14 <xTaskResumeAll+0x12c>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f1      	bne.n	80059ae <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 80059ca:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <xTaskResumeAll+0x130>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059d0:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <xTaskResumeAll+0x12c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d009      	beq.n	80059ec <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059d8:	2301      	movs	r3, #1
 80059da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059dc:	4b0f      	ldr	r3, [pc, #60]	; (8005a1c <xTaskResumeAll+0x134>)
 80059de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059ec:	f7fe feec 	bl	80047c8 <vPortExitCritical>

	return xAlreadyYielded;
 80059f0:	68bb      	ldr	r3, [r7, #8]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000f98 	.word	0x20000f98
 8005a00:	20000f70 	.word	0x20000f70
 8005a04:	20000f30 	.word	0x20000f30
 8005a08:	20000f78 	.word	0x20000f78
 8005a0c:	20000e74 	.word	0x20000e74
 8005a10:	20000e70 	.word	0x20000e70
 8005a14:	20000f84 	.word	0x20000f84
 8005a18:	20000f80 	.word	0x20000f80
 8005a1c:	e000ed04 	.word	0xe000ed04

08005a20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a2a:	4b4e      	ldr	r3, [pc, #312]	; (8005b64 <xTaskIncrementTick+0x144>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f040 808d 	bne.w	8005b4e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a34:	4b4c      	ldr	r3, [pc, #304]	; (8005b68 <xTaskIncrementTick+0x148>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a3c:	4a4a      	ldr	r2, [pc, #296]	; (8005b68 <xTaskIncrementTick+0x148>)
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11f      	bne.n	8005a88 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a48:	4b48      	ldr	r3, [pc, #288]	; (8005b6c <xTaskIncrementTick+0x14c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <xTaskIncrementTick+0x46>
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	603b      	str	r3, [r7, #0]
 8005a64:	e7fe      	b.n	8005a64 <xTaskIncrementTick+0x44>
 8005a66:	4b41      	ldr	r3, [pc, #260]	; (8005b6c <xTaskIncrementTick+0x14c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	4b40      	ldr	r3, [pc, #256]	; (8005b70 <xTaskIncrementTick+0x150>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a3e      	ldr	r2, [pc, #248]	; (8005b6c <xTaskIncrementTick+0x14c>)
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	4a3e      	ldr	r2, [pc, #248]	; (8005b70 <xTaskIncrementTick+0x150>)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	4b3e      	ldr	r3, [pc, #248]	; (8005b74 <xTaskIncrementTick+0x154>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	4a3c      	ldr	r2, [pc, #240]	; (8005b74 <xTaskIncrementTick+0x154>)
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	f000 fa98 	bl	8005fb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a88:	4b3b      	ldr	r3, [pc, #236]	; (8005b78 <xTaskIncrementTick+0x158>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d348      	bcc.n	8005b24 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a92:	4b36      	ldr	r3, [pc, #216]	; (8005b6c <xTaskIncrementTick+0x14c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a9c:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <xTaskIncrementTick+0x158>)
 8005a9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aa2:	601a      	str	r2, [r3, #0]
					break;
 8005aa4:	e03e      	b.n	8005b24 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa6:	4b31      	ldr	r3, [pc, #196]	; (8005b6c <xTaskIncrementTick+0x14c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d203      	bcs.n	8005ac6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005abe:	4a2e      	ldr	r2, [pc, #184]	; (8005b78 <xTaskIncrementTick+0x158>)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ac4:	e02e      	b.n	8005b24 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe fcfa 	bl	80044c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d004      	beq.n	8005ae2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	3318      	adds	r3, #24
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fe fcf1 	bl	80044c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	409a      	lsls	r2, r3
 8005aea:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <xTaskIncrementTick+0x15c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	4a22      	ldr	r2, [pc, #136]	; (8005b7c <xTaskIncrementTick+0x15c>)
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4a1f      	ldr	r2, [pc, #124]	; (8005b80 <xTaskIncrementTick+0x160>)
 8005b02:	441a      	add	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	f7fe fc7d 	bl	800440a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b14:	4b1b      	ldr	r3, [pc, #108]	; (8005b84 <xTaskIncrementTick+0x164>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d3b9      	bcc.n	8005a92 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b22:	e7b6      	b.n	8005a92 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b24:	4b17      	ldr	r3, [pc, #92]	; (8005b84 <xTaskIncrementTick+0x164>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2a:	4915      	ldr	r1, [pc, #84]	; (8005b80 <xTaskIncrementTick+0x160>)
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d901      	bls.n	8005b40 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b40:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <xTaskIncrementTick+0x168>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	e004      	b.n	8005b58 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b4e:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <xTaskIncrementTick+0x16c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3301      	adds	r3, #1
 8005b54:	4a0d      	ldr	r2, [pc, #52]	; (8005b8c <xTaskIncrementTick+0x16c>)
 8005b56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b58:	697b      	ldr	r3, [r7, #20]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20000f98 	.word	0x20000f98
 8005b68:	20000f74 	.word	0x20000f74
 8005b6c:	20000f28 	.word	0x20000f28
 8005b70:	20000f2c 	.word	0x20000f2c
 8005b74:	20000f88 	.word	0x20000f88
 8005b78:	20000f90 	.word	0x20000f90
 8005b7c:	20000f78 	.word	0x20000f78
 8005b80:	20000e74 	.word	0x20000e74
 8005b84:	20000e70 	.word	0x20000e70
 8005b88:	20000f84 	.word	0x20000f84
 8005b8c:	20000f80 	.word	0x20000f80

08005b90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b96:	4b26      	ldr	r3, [pc, #152]	; (8005c30 <vTaskSwitchContext+0xa0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b9e:	4b25      	ldr	r3, [pc, #148]	; (8005c34 <vTaskSwitchContext+0xa4>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ba4:	e03e      	b.n	8005c24 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005ba6:	4b23      	ldr	r3, [pc, #140]	; (8005c34 <vTaskSwitchContext+0xa4>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bac:	4b22      	ldr	r3, [pc, #136]	; (8005c38 <vTaskSwitchContext+0xa8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	fab3 f383 	clz	r3, r3
 8005bb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005bba:	7afb      	ldrb	r3, [r7, #11]
 8005bbc:	f1c3 031f 	rsb	r3, r3, #31
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	491e      	ldr	r1, [pc, #120]	; (8005c3c <vTaskSwitchContext+0xac>)
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d109      	bne.n	8005bea <vTaskSwitchContext+0x5a>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	607b      	str	r3, [r7, #4]
 8005be8:	e7fe      	b.n	8005be8 <vTaskSwitchContext+0x58>
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4a11      	ldr	r2, [pc, #68]	; (8005c3c <vTaskSwitchContext+0xac>)
 8005bf6:	4413      	add	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	605a      	str	r2, [r3, #4]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d104      	bne.n	8005c1a <vTaskSwitchContext+0x8a>
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	605a      	str	r2, [r3, #4]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4a07      	ldr	r2, [pc, #28]	; (8005c40 <vTaskSwitchContext+0xb0>)
 8005c22:	6013      	str	r3, [r2, #0]
}
 8005c24:	bf00      	nop
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	20000f98 	.word	0x20000f98
 8005c34:	20000f84 	.word	0x20000f84
 8005c38:	20000f78 	.word	0x20000f78
 8005c3c:	20000e74 	.word	0x20000e74
 8005c40:	20000e70 	.word	0x20000e70

08005c44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d109      	bne.n	8005c68 <vTaskPlaceOnEventList+0x24>
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e7fe      	b.n	8005c66 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c68:	4b07      	ldr	r3, [pc, #28]	; (8005c88 <vTaskPlaceOnEventList+0x44>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3318      	adds	r3, #24
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7fe fbee 	bl	8004452 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c76:	2101      	movs	r1, #1
 8005c78:	6838      	ldr	r0, [r7, #0]
 8005c7a:	f000 faf1 	bl	8006260 <prvAddCurrentTaskToDelayedList>
}
 8005c7e:	bf00      	nop
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20000e70 	.word	0x20000e70

08005c8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <xTaskRemoveFromEventList+0x2a>
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e7fe      	b.n	8005cb4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	3318      	adds	r3, #24
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe fc02 	bl	80044c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cc0:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <xTaskRemoveFromEventList+0xac>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d11c      	bne.n	8005d02 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe fbf9 	bl	80044c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	409a      	lsls	r2, r3
 8005cda:	4b18      	ldr	r3, [pc, #96]	; (8005d3c <xTaskRemoveFromEventList+0xb0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <xTaskRemoveFromEventList+0xb0>)
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4a13      	ldr	r2, [pc, #76]	; (8005d40 <xTaskRemoveFromEventList+0xb4>)
 8005cf2:	441a      	add	r2, r3
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f7fe fb85 	bl	800440a <vListInsertEnd>
 8005d00:	e005      	b.n	8005d0e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	3318      	adds	r3, #24
 8005d06:	4619      	mov	r1, r3
 8005d08:	480e      	ldr	r0, [pc, #56]	; (8005d44 <xTaskRemoveFromEventList+0xb8>)
 8005d0a:	f7fe fb7e 	bl	800440a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d12:	4b0d      	ldr	r3, [pc, #52]	; (8005d48 <xTaskRemoveFromEventList+0xbc>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d905      	bls.n	8005d28 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <xTaskRemoveFromEventList+0xc0>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	e001      	b.n	8005d2c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d2c:	697b      	ldr	r3, [r7, #20]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000f98 	.word	0x20000f98
 8005d3c:	20000f78 	.word	0x20000f78
 8005d40:	20000e74 	.word	0x20000e74
 8005d44:	20000f30 	.word	0x20000f30
 8005d48:	20000e70 	.word	0x20000e70
 8005d4c:	20000f84 	.word	0x20000f84

08005d50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <vTaskInternalSetTimeOutState+0x24>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <vTaskInternalSetTimeOutState+0x28>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	605a      	str	r2, [r3, #4]
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	20000f88 	.word	0x20000f88
 8005d78:	20000f74 	.word	0x20000f74

08005d7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <xTaskCheckForTimeOut+0x24>
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	e7fe      	b.n	8005d9e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <xTaskCheckForTimeOut+0x3e>
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	e7fe      	b.n	8005db8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005dba:	f7fe fcd7 	bl	800476c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dbe:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <xTaskCheckForTimeOut+0xb8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd6:	d102      	bne.n	8005dde <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	e023      	b.n	8005e26 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4b15      	ldr	r3, [pc, #84]	; (8005e38 <xTaskCheckForTimeOut+0xbc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d007      	beq.n	8005dfa <xTaskCheckForTimeOut+0x7e>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d802      	bhi.n	8005dfa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005df4:	2301      	movs	r3, #1
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	e015      	b.n	8005e26 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d90b      	bls.n	8005e1c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1ad2      	subs	r2, r2, r3
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff ff9d 	bl	8005d50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	e004      	b.n	8005e26 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e22:	2301      	movs	r3, #1
 8005e24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e26:	f7fe fccf 	bl	80047c8 <vPortExitCritical>

	return xReturn;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20000f74 	.word	0x20000f74
 8005e38:	20000f88 	.word	0x20000f88

08005e3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e40:	4b03      	ldr	r3, [pc, #12]	; (8005e50 <vTaskMissedYield+0x14>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
}
 8005e46:	bf00      	nop
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	20000f84 	.word	0x20000f84

08005e54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e5c:	f000 f852 	bl	8005f04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e60:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <prvIdleTask+0x28>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d9f9      	bls.n	8005e5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e68:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <prvIdleTask+0x2c>)
 8005e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e78:	e7f0      	b.n	8005e5c <prvIdleTask+0x8>
 8005e7a:	bf00      	nop
 8005e7c:	20000e74 	.word	0x20000e74
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	607b      	str	r3, [r7, #4]
 8005e8e:	e00c      	b.n	8005eaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4a12      	ldr	r2, [pc, #72]	; (8005ee4 <prvInitialiseTaskLists+0x60>)
 8005e9c:	4413      	add	r3, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe fa86 	bl	80043b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b06      	cmp	r3, #6
 8005eae:	d9ef      	bls.n	8005e90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005eb0:	480d      	ldr	r0, [pc, #52]	; (8005ee8 <prvInitialiseTaskLists+0x64>)
 8005eb2:	f7fe fa7d 	bl	80043b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eb6:	480d      	ldr	r0, [pc, #52]	; (8005eec <prvInitialiseTaskLists+0x68>)
 8005eb8:	f7fe fa7a 	bl	80043b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ebc:	480c      	ldr	r0, [pc, #48]	; (8005ef0 <prvInitialiseTaskLists+0x6c>)
 8005ebe:	f7fe fa77 	bl	80043b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ec2:	480c      	ldr	r0, [pc, #48]	; (8005ef4 <prvInitialiseTaskLists+0x70>)
 8005ec4:	f7fe fa74 	bl	80043b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ec8:	480b      	ldr	r0, [pc, #44]	; (8005ef8 <prvInitialiseTaskLists+0x74>)
 8005eca:	f7fe fa71 	bl	80043b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ece:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <prvInitialiseTaskLists+0x78>)
 8005ed0:	4a05      	ldr	r2, [pc, #20]	; (8005ee8 <prvInitialiseTaskLists+0x64>)
 8005ed2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ed4:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <prvInitialiseTaskLists+0x7c>)
 8005ed6:	4a05      	ldr	r2, [pc, #20]	; (8005eec <prvInitialiseTaskLists+0x68>)
 8005ed8:	601a      	str	r2, [r3, #0]
}
 8005eda:	bf00      	nop
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000e74 	.word	0x20000e74
 8005ee8:	20000f00 	.word	0x20000f00
 8005eec:	20000f14 	.word	0x20000f14
 8005ef0:	20000f30 	.word	0x20000f30
 8005ef4:	20000f44 	.word	0x20000f44
 8005ef8:	20000f5c 	.word	0x20000f5c
 8005efc:	20000f28 	.word	0x20000f28
 8005f00:	20000f2c 	.word	0x20000f2c

08005f04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f0a:	e019      	b.n	8005f40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f0c:	f7fe fc2e 	bl	800476c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f10:	4b0f      	ldr	r3, [pc, #60]	; (8005f50 <prvCheckTasksWaitingTermination+0x4c>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fe fad1 	bl	80044c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f22:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <prvCheckTasksWaitingTermination+0x50>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	4a0a      	ldr	r2, [pc, #40]	; (8005f54 <prvCheckTasksWaitingTermination+0x50>)
 8005f2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <prvCheckTasksWaitingTermination+0x54>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	4a09      	ldr	r2, [pc, #36]	; (8005f58 <prvCheckTasksWaitingTermination+0x54>)
 8005f34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f36:	f7fe fc47 	bl	80047c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f80e 	bl	8005f5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f40:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <prvCheckTasksWaitingTermination+0x54>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e1      	bne.n	8005f0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20000f44 	.word	0x20000f44
 8005f54:	20000f70 	.word	0x20000f70
 8005f58:	20000f58 	.word	0x20000f58

08005f5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d108      	bne.n	8005f80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe fddc 	bl	8004b30 <vPortFree>
				vPortFree( pxTCB );
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7fe fdd9 	bl	8004b30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f7e:	e017      	b.n	8005fb0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d103      	bne.n	8005f92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fe fdd0 	bl	8004b30 <vPortFree>
	}
 8005f90:	e00e      	b.n	8005fb0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d009      	beq.n	8005fb0 <prvDeleteTCB+0x54>
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	e7fe      	b.n	8005fae <prvDeleteTCB+0x52>
	}
 8005fb0:	bf00      	nop
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fbe:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <prvResetNextTaskUnblockTime+0x38>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d104      	bne.n	8005fd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <prvResetNextTaskUnblockTime+0x3c>)
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fd0:	e008      	b.n	8005fe4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd2:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <prvResetNextTaskUnblockTime+0x38>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	4a04      	ldr	r2, [pc, #16]	; (8005ff4 <prvResetNextTaskUnblockTime+0x3c>)
 8005fe2:	6013      	str	r3, [r2, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	20000f28 	.word	0x20000f28
 8005ff4:	20000f90 	.word	0x20000f90

08005ff8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ffe:	4b0b      	ldr	r3, [pc, #44]	; (800602c <xTaskGetSchedulerState+0x34>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006006:	2301      	movs	r3, #1
 8006008:	607b      	str	r3, [r7, #4]
 800600a:	e008      	b.n	800601e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800600c:	4b08      	ldr	r3, [pc, #32]	; (8006030 <xTaskGetSchedulerState+0x38>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d102      	bne.n	800601a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006014:	2302      	movs	r3, #2
 8006016:	607b      	str	r3, [r7, #4]
 8006018:	e001      	b.n	800601e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800601a:	2300      	movs	r3, #0
 800601c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800601e:	687b      	ldr	r3, [r7, #4]
	}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	20000f7c 	.word	0x20000f7c
 8006030:	20000f98 	.word	0x20000f98

08006034 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d05e      	beq.n	8006108 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604e:	4b31      	ldr	r3, [pc, #196]	; (8006114 <xTaskPriorityInherit+0xe0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	429a      	cmp	r2, r3
 8006056:	d24e      	bcs.n	80060f6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	db06      	blt.n	800606e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006060:	4b2c      	ldr	r3, [pc, #176]	; (8006114 <xTaskPriorityInherit+0xe0>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	f1c3 0207 	rsb	r2, r3, #7
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	6959      	ldr	r1, [r3, #20]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4a26      	ldr	r2, [pc, #152]	; (8006118 <xTaskPriorityInherit+0xe4>)
 8006080:	4413      	add	r3, r2
 8006082:	4299      	cmp	r1, r3
 8006084:	d12f      	bne.n	80060e6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	3304      	adds	r3, #4
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fa1a 	bl	80044c4 <uxListRemove>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	2201      	movs	r2, #1
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	43da      	mvns	r2, r3
 80060a2:	4b1e      	ldr	r3, [pc, #120]	; (800611c <xTaskPriorityInherit+0xe8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4013      	ands	r3, r2
 80060a8:	4a1c      	ldr	r2, [pc, #112]	; (800611c <xTaskPriorityInherit+0xe8>)
 80060aa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060ac:	4b19      	ldr	r3, [pc, #100]	; (8006114 <xTaskPriorityInherit+0xe0>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	2201      	movs	r2, #1
 80060bc:	409a      	lsls	r2, r3
 80060be:	4b17      	ldr	r3, [pc, #92]	; (800611c <xTaskPriorityInherit+0xe8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	4a15      	ldr	r2, [pc, #84]	; (800611c <xTaskPriorityInherit+0xe8>)
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4a10      	ldr	r2, [pc, #64]	; (8006118 <xTaskPriorityInherit+0xe4>)
 80060d6:	441a      	add	r2, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	3304      	adds	r3, #4
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f7fe f993 	bl	800440a <vListInsertEnd>
 80060e4:	e004      	b.n	80060f0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060e6:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <xTaskPriorityInherit+0xe0>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80060f0:	2301      	movs	r3, #1
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	e008      	b.n	8006108 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060fa:	4b06      	ldr	r3, [pc, #24]	; (8006114 <xTaskPriorityInherit+0xe0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	429a      	cmp	r2, r3
 8006102:	d201      	bcs.n	8006108 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006104:	2301      	movs	r3, #1
 8006106:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006108:	68fb      	ldr	r3, [r7, #12]
	}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20000e70 	.word	0x20000e70
 8006118:	20000e74 	.word	0x20000e74
 800611c:	20000f78 	.word	0x20000f78

08006120 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800612e:	2301      	movs	r3, #1
 8006130:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d075      	beq.n	8006224 <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800613c:	2b00      	cmp	r3, #0
 800613e:	d109      	bne.n	8006154 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e7fe      	b.n	8006152 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d202      	bcs.n	8006164 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	61fb      	str	r3, [r7, #28]
 8006162:	e002      	b.n	800616a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006168:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	429a      	cmp	r2, r3
 8006172:	d057      	beq.n	8006224 <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	429a      	cmp	r2, r3
 800617c:	d152      	bne.n	8006224 <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800617e:	4b2b      	ldr	r3, [pc, #172]	; (800622c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	429a      	cmp	r2, r3
 8006186:	d109      	bne.n	800619c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8006188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	60bb      	str	r3, [r7, #8]
 800619a:	e7fe      	b.n	800619a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	db04      	blt.n	80061ba <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f1c3 0207 	rsb	r2, r3, #7
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	6959      	ldr	r1, [r3, #20]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4613      	mov	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4a19      	ldr	r2, [pc, #100]	; (8006230 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80061ca:	4413      	add	r3, r2
 80061cc:	4299      	cmp	r1, r3
 80061ce:	d129      	bne.n	8006224 <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fe f975 	bl	80044c4 <uxListRemove>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	2201      	movs	r2, #1
 80061e6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ea:	43da      	mvns	r2, r3
 80061ec:	4b11      	ldr	r3, [pc, #68]	; (8006234 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4013      	ands	r3, r2
 80061f2:	4a10      	ldr	r2, [pc, #64]	; (8006234 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80061f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	2201      	movs	r2, #1
 80061fc:	409a      	lsls	r2, r3
 80061fe:	4b0d      	ldr	r3, [pc, #52]	; (8006234 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4313      	orrs	r3, r2
 8006204:	4a0b      	ldr	r2, [pc, #44]	; (8006234 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620c:	4613      	mov	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4a06      	ldr	r2, [pc, #24]	; (8006230 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006216:	441a      	add	r2, r3
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	3304      	adds	r3, #4
 800621c:	4619      	mov	r1, r3
 800621e:	4610      	mov	r0, r2
 8006220:	f7fe f8f3 	bl	800440a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006224:	bf00      	nop
 8006226:	3720      	adds	r7, #32
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	20000e70 	.word	0x20000e70
 8006230:	20000e74 	.word	0x20000e74
 8006234:	20000f78 	.word	0x20000f78

08006238 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006238:	b480      	push	{r7}
 800623a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800623c:	4b07      	ldr	r3, [pc, #28]	; (800625c <pvTaskIncrementMutexHeldCount+0x24>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d004      	beq.n	800624e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006244:	4b05      	ldr	r3, [pc, #20]	; (800625c <pvTaskIncrementMutexHeldCount+0x24>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800624a:	3201      	adds	r2, #1
 800624c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800624e:	4b03      	ldr	r3, [pc, #12]	; (800625c <pvTaskIncrementMutexHeldCount+0x24>)
 8006250:	681b      	ldr	r3, [r3, #0]
	}
 8006252:	4618      	mov	r0, r3
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	20000e70 	.word	0x20000e70

08006260 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800626a:	4b29      	ldr	r3, [pc, #164]	; (8006310 <prvAddCurrentTaskToDelayedList+0xb0>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006270:	4b28      	ldr	r3, [pc, #160]	; (8006314 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3304      	adds	r3, #4
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe f924 	bl	80044c4 <uxListRemove>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10b      	bne.n	800629a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006282:	4b24      	ldr	r3, [pc, #144]	; (8006314 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	2201      	movs	r2, #1
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	43da      	mvns	r2, r3
 8006290:	4b21      	ldr	r3, [pc, #132]	; (8006318 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4013      	ands	r3, r2
 8006296:	4a20      	ldr	r2, [pc, #128]	; (8006318 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006298:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a0:	d10a      	bne.n	80062b8 <prvAddCurrentTaskToDelayedList+0x58>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062a8:	4b1a      	ldr	r3, [pc, #104]	; (8006314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4619      	mov	r1, r3
 80062b0:	481a      	ldr	r0, [pc, #104]	; (800631c <prvAddCurrentTaskToDelayedList+0xbc>)
 80062b2:	f7fe f8aa 	bl	800440a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062b6:	e026      	b.n	8006306 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4413      	add	r3, r2
 80062be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062c0:	4b14      	ldr	r3, [pc, #80]	; (8006314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d209      	bcs.n	80062e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062d0:	4b13      	ldr	r3, [pc, #76]	; (8006320 <prvAddCurrentTaskToDelayedList+0xc0>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	4b0f      	ldr	r3, [pc, #60]	; (8006314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3304      	adds	r3, #4
 80062da:	4619      	mov	r1, r3
 80062dc:	4610      	mov	r0, r2
 80062de:	f7fe f8b8 	bl	8004452 <vListInsert>
}
 80062e2:	e010      	b.n	8006306 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062e4:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <prvAddCurrentTaskToDelayedList+0xc4>)
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f7fe f8ae 	bl	8004452 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062f6:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <prvAddCurrentTaskToDelayedList+0xc8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d202      	bcs.n	8006306 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006300:	4a09      	ldr	r2, [pc, #36]	; (8006328 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6013      	str	r3, [r2, #0]
}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000f74 	.word	0x20000f74
 8006314:	20000e70 	.word	0x20000e70
 8006318:	20000f78 	.word	0x20000f78
 800631c:	20000f5c 	.word	0x20000f5c
 8006320:	20000f2c 	.word	0x20000f2c
 8006324:	20000f28 	.word	0x20000f28
 8006328:	20000f90 	.word	0x20000f90

0800632c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800632c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006364 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006330:	f7fa fdce 	bl	8000ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006334:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006336:	e003      	b.n	8006340 <LoopCopyDataInit>

08006338 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006338:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800633a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800633c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800633e:	3104      	adds	r1, #4

08006340 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006340:	480a      	ldr	r0, [pc, #40]	; (800636c <LoopForever+0xa>)
	ldr	r3, =_edata
 8006342:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006344:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006346:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006348:	d3f6      	bcc.n	8006338 <CopyDataInit>
	ldr	r2, =_sbss
 800634a:	4a0a      	ldr	r2, [pc, #40]	; (8006374 <LoopForever+0x12>)
	b	LoopFillZerobss
 800634c:	e002      	b.n	8006354 <LoopFillZerobss>

0800634e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800634e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006350:	f842 3b04 	str.w	r3, [r2], #4

08006354 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006354:	4b08      	ldr	r3, [pc, #32]	; (8006378 <LoopForever+0x16>)
	cmp	r2, r3
 8006356:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006358:	d3f9      	bcc.n	800634e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800635a:	f000 f811 	bl	8006380 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800635e:	f7fa f8e1 	bl	8000524 <main>

08006362 <LoopForever>:

LoopForever:
    b LoopForever
 8006362:	e7fe      	b.n	8006362 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006364:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006368:	08006748 	.word	0x08006748
	ldr	r0, =_sdata
 800636c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006370:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8006374:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8006378:	20001084 	.word	0x20001084

0800637c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800637c:	e7fe      	b.n	800637c <ADC1_2_IRQHandler>
	...

08006380 <__libc_init_array>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	4e0d      	ldr	r6, [pc, #52]	; (80063b8 <__libc_init_array+0x38>)
 8006384:	4c0d      	ldr	r4, [pc, #52]	; (80063bc <__libc_init_array+0x3c>)
 8006386:	1ba4      	subs	r4, r4, r6
 8006388:	10a4      	asrs	r4, r4, #2
 800638a:	2500      	movs	r5, #0
 800638c:	42a5      	cmp	r5, r4
 800638e:	d109      	bne.n	80063a4 <__libc_init_array+0x24>
 8006390:	4e0b      	ldr	r6, [pc, #44]	; (80063c0 <__libc_init_array+0x40>)
 8006392:	4c0c      	ldr	r4, [pc, #48]	; (80063c4 <__libc_init_array+0x44>)
 8006394:	f000 f88a 	bl	80064ac <_init>
 8006398:	1ba4      	subs	r4, r4, r6
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	2500      	movs	r5, #0
 800639e:	42a5      	cmp	r5, r4
 80063a0:	d105      	bne.n	80063ae <__libc_init_array+0x2e>
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063a8:	4798      	blx	r3
 80063aa:	3501      	adds	r5, #1
 80063ac:	e7ee      	b.n	800638c <__libc_init_array+0xc>
 80063ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063b2:	4798      	blx	r3
 80063b4:	3501      	adds	r5, #1
 80063b6:	e7f2      	b.n	800639e <__libc_init_array+0x1e>
 80063b8:	08006740 	.word	0x08006740
 80063bc:	08006740 	.word	0x08006740
 80063c0:	08006740 	.word	0x08006740
 80063c4:	08006744 	.word	0x08006744

080063c8 <__itoa>:
 80063c8:	1e93      	subs	r3, r2, #2
 80063ca:	2b22      	cmp	r3, #34	; 0x22
 80063cc:	b510      	push	{r4, lr}
 80063ce:	460c      	mov	r4, r1
 80063d0:	d904      	bls.n	80063dc <__itoa+0x14>
 80063d2:	2300      	movs	r3, #0
 80063d4:	700b      	strb	r3, [r1, #0]
 80063d6:	461c      	mov	r4, r3
 80063d8:	4620      	mov	r0, r4
 80063da:	bd10      	pop	{r4, pc}
 80063dc:	2a0a      	cmp	r2, #10
 80063de:	d109      	bne.n	80063f4 <__itoa+0x2c>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	da07      	bge.n	80063f4 <__itoa+0x2c>
 80063e4:	232d      	movs	r3, #45	; 0x2d
 80063e6:	700b      	strb	r3, [r1, #0]
 80063e8:	4240      	negs	r0, r0
 80063ea:	2101      	movs	r1, #1
 80063ec:	4421      	add	r1, r4
 80063ee:	f000 f81d 	bl	800642c <__utoa>
 80063f2:	e7f1      	b.n	80063d8 <__itoa+0x10>
 80063f4:	2100      	movs	r1, #0
 80063f6:	e7f9      	b.n	80063ec <__itoa+0x24>

080063f8 <itoa>:
 80063f8:	f7ff bfe6 	b.w	80063c8 <__itoa>

080063fc <memset>:
 80063fc:	4402      	add	r2, r0
 80063fe:	4603      	mov	r3, r0
 8006400:	4293      	cmp	r3, r2
 8006402:	d100      	bne.n	8006406 <memset+0xa>
 8006404:	4770      	bx	lr
 8006406:	f803 1b01 	strb.w	r1, [r3], #1
 800640a:	e7f9      	b.n	8006400 <memset+0x4>

0800640c <strcat>:
 800640c:	b510      	push	{r4, lr}
 800640e:	4602      	mov	r2, r0
 8006410:	4613      	mov	r3, r2
 8006412:	3201      	adds	r2, #1
 8006414:	781c      	ldrb	r4, [r3, #0]
 8006416:	2c00      	cmp	r4, #0
 8006418:	d1fa      	bne.n	8006410 <strcat+0x4>
 800641a:	3b01      	subs	r3, #1
 800641c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006420:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006424:	2a00      	cmp	r2, #0
 8006426:	d1f9      	bne.n	800641c <strcat+0x10>
 8006428:	bd10      	pop	{r4, pc}
	...

0800642c <__utoa>:
 800642c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800642e:	4c1e      	ldr	r4, [pc, #120]	; (80064a8 <__utoa+0x7c>)
 8006430:	b08b      	sub	sp, #44	; 0x2c
 8006432:	4603      	mov	r3, r0
 8006434:	460f      	mov	r7, r1
 8006436:	466d      	mov	r5, sp
 8006438:	f104 0e20 	add.w	lr, r4, #32
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	6861      	ldr	r1, [r4, #4]
 8006440:	462e      	mov	r6, r5
 8006442:	c603      	stmia	r6!, {r0, r1}
 8006444:	3408      	adds	r4, #8
 8006446:	4574      	cmp	r4, lr
 8006448:	4635      	mov	r5, r6
 800644a:	d1f7      	bne.n	800643c <__utoa+0x10>
 800644c:	7921      	ldrb	r1, [r4, #4]
 800644e:	7131      	strb	r1, [r6, #4]
 8006450:	1e91      	subs	r1, r2, #2
 8006452:	6820      	ldr	r0, [r4, #0]
 8006454:	6030      	str	r0, [r6, #0]
 8006456:	2922      	cmp	r1, #34	; 0x22
 8006458:	f04f 0100 	mov.w	r1, #0
 800645c:	d904      	bls.n	8006468 <__utoa+0x3c>
 800645e:	7039      	strb	r1, [r7, #0]
 8006460:	460f      	mov	r7, r1
 8006462:	4638      	mov	r0, r7
 8006464:	b00b      	add	sp, #44	; 0x2c
 8006466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006468:	1e78      	subs	r0, r7, #1
 800646a:	4606      	mov	r6, r0
 800646c:	fbb3 f5f2 	udiv	r5, r3, r2
 8006470:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006474:	fb02 3315 	mls	r3, r2, r5, r3
 8006478:	4473      	add	r3, lr
 800647a:	1c4c      	adds	r4, r1, #1
 800647c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006480:	f806 3f01 	strb.w	r3, [r6, #1]!
 8006484:	462b      	mov	r3, r5
 8006486:	b965      	cbnz	r5, 80064a2 <__utoa+0x76>
 8006488:	553d      	strb	r5, [r7, r4]
 800648a:	187a      	adds	r2, r7, r1
 800648c:	1acc      	subs	r4, r1, r3
 800648e:	42a3      	cmp	r3, r4
 8006490:	dae7      	bge.n	8006462 <__utoa+0x36>
 8006492:	7844      	ldrb	r4, [r0, #1]
 8006494:	7815      	ldrb	r5, [r2, #0]
 8006496:	f800 5f01 	strb.w	r5, [r0, #1]!
 800649a:	3301      	adds	r3, #1
 800649c:	f802 4901 	strb.w	r4, [r2], #-1
 80064a0:	e7f4      	b.n	800648c <__utoa+0x60>
 80064a2:	4621      	mov	r1, r4
 80064a4:	e7e2      	b.n	800646c <__utoa+0x40>
 80064a6:	bf00      	nop
 80064a8:	08006710 	.word	0x08006710

080064ac <_init>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	bf00      	nop
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr

080064b8 <_fini>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr
