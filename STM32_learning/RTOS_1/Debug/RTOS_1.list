
RTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004a5c  08004a5c  00014a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004b5c  08004b5c  00014b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08004b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000105c  20000010  08004b7c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000106c  08004b7c  0002106c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014d0d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000029b1  00000000  00000000  00034d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001300  00000000  00000000  00037700  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011e8  00000000  00000000  00038a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009613  00000000  00000000  00039be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000069c5  00000000  00000000  000431fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00049bc0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004f38  00000000  00000000  00049c3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a44 	.word	0x08004a44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004a44 	.word	0x08004a44

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <send_deftask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_deftask(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
	uint8_t data[]="Hello from deftask\r\n";
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <send_deftask+0x30>)
 800051c:	463c      	mov	r4, r7
 800051e:	461d      	mov	r5, r3
 8000520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000524:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000528:	6020      	str	r0, [r4, #0]
 800052a:	3404      	adds	r4, #4
 800052c:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart2,data,sizeof(data),500);
 800052e:	4639      	mov	r1, r7
 8000530:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000534:	2215      	movs	r2, #21
 8000536:	4804      	ldr	r0, [pc, #16]	; (8000548 <send_deftask+0x34>)
 8000538:	f002 fb7e 	bl	8002c38 <HAL_UART_Transmit>
}
 800053c:	bf00      	nop
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bdb0      	pop	{r4, r5, r7, pc}
 8000544:	08004a5c 	.word	0x08004a5c
 8000548:	20000f98 	.word	0x20000f98

0800054c <send_task2>:

void send_task2(void)
{
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
	uint8_t data[]="Hello from task2\r\n";
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <send_task2+0x34>)
 8000554:	1d3c      	adds	r4, r7, #4
 8000556:	461d      	mov	r5, r3
 8000558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055c:	682b      	ldr	r3, [r5, #0]
 800055e:	461a      	mov	r2, r3
 8000560:	8022      	strh	r2, [r4, #0]
 8000562:	3402      	adds	r4, #2
 8000564:	0c1b      	lsrs	r3, r3, #16
 8000566:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2,data,sizeof(data),500);
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800056e:	2213      	movs	r2, #19
 8000570:	4804      	ldr	r0, [pc, #16]	; (8000584 <send_task2+0x38>)
 8000572:	f002 fb61 	bl	8002c38 <HAL_UART_Transmit>
}
 8000576:	bf00      	nop
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bdb0      	pop	{r4, r5, r7, pc}
 800057e:	bf00      	nop
 8000580:	08004a74 	.word	0x08004a74
 8000584:	20000f98 	.word	0x20000f98

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	b096      	sub	sp, #88	; 0x58
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fa43 	bl	8000a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f84b 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f8df 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 f8ad 	bl	80006f8 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059e:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <main+0x8c>)
 80005a0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005a4:	461d      	mov	r5, r3
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 ffdb 	bl	8003574 <osThreadCreate>
 80005be:	4602      	mov	r2, r0
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <main+0x90>)
 80005c2:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task02_init, osPriorityAboveNormal, 0, 128);
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <main+0x94>)
 80005c6:	f107 0420 	add.w	r4, r7, #32
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 ffc8 	bl	8003574 <osThreadCreate>
 80005e4:	4602      	mov	r2, r0
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <main+0x98>)
 80005e8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(Task3, Task03_init, osPriorityBelowNormal, 0, 128);
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <main+0x9c>)
 80005ec:	1d3c      	adds	r4, r7, #4
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f002 ffb7 	bl	8003574 <osThreadCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <main+0xa0>)
 800060a:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f002 ffab 	bl	8003566 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x88>
 8000612:	bf00      	nop
 8000614:	08004aa8 	.word	0x08004aa8
 8000618:	20000f8c 	.word	0x20000f8c
 800061c:	08004acc 	.word	0x08004acc
 8000620:	20000f94 	.word	0x20000f94
 8000624:	08004af0 	.word	0x08004af0
 8000628:	20000f90 	.word	0x20000f90

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b0b8      	sub	sp, #224	; 0xe0
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000636:	2244      	movs	r2, #68	; 0x44
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 f9fa 	bl	8004a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2288      	movs	r2, #136	; 0x88
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f004 f9ec 	bl	8004a34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800065c:	2310      	movs	r3, #16
 800065e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000662:	2301      	movs	r3, #1
 8000664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800066e:	2360      	movs	r3, #96	; 0x60
 8000670:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000674:	2300      	movs	r3, #0
 8000676:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fcee 	bl	8001060 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800068a:	f000 f8af 	bl	80007ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000694:	2300      	movs	r3, #0
 8000696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f8ba 	bl	800182c <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006be:	f000 f895 	bl	80007ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ca:	463b      	mov	r3, r7
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fae3 	bl	8001c98 <HAL_RCCEx_PeriphCLKConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006d8:	f000 f888 	bl	80007ec <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e0:	f000 fc68 	bl	8000fb4 <HAL_PWREx_ControlVoltageScaling>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ea:	f000 f87f 	bl	80007ec <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	37e0      	adds	r7, #224	; 0xe0
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART2_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART2_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800073c:	f002 fa2e 	bl	8002b9c <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f851 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000f98 	.word	0x20000f98
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4a09      	ldr	r2, [pc, #36]	; (8000784 <MX_GPIO_Init+0x2c>)
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_GPIO_Init+0x2c>)
 8000762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_GPIO_Init+0x2c>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000

08000788 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	send_deftask();
 8000790:	f7ff fec0 	bl	8000514 <send_deftask>
    osDelay(1000);
 8000794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000798:	f002 ff38 	bl	800360c <osDelay>
	send_deftask();
 800079c:	e7f8      	b.n	8000790 <StartDefaultTask+0x8>

0800079e <Task02_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02_init */
void Task02_init(void const * argument)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02_init */
  /* Infinite loop */
  for(;;)
  {
	send_task2();
 80007a6:	f7ff fed1 	bl	800054c <send_task2>
    osDelay(2000);
 80007aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007ae:	f002 ff2d 	bl	800360c <osDelay>
	send_task2();
 80007b2:	e7f8      	b.n	80007a6 <Task02_init+0x8>

080007b4 <Task03_init>:
  /* USER CODE END Task02_init */
}


void Task03_init(void const * argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02_init */
  /* Infinite loop */
  while(1)
  {
	  //send_task3();
	  osDelay(1000);
 80007bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c0:	f002 ff24 	bl	800360c <osDelay>
 80007c4:	e7fa      	b.n	80007bc <Task03_init+0x8>
	...

080007c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d101      	bne.n	80007de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007da:	f000 f935 	bl	8000a48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40012c00 	.word	0x40012c00

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <Error_Handler+0x6>

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	4a11      	ldr	r2, [pc, #68]	; (8000840 <HAL_MspInit+0x4c>)
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_MspInit+0x4c>)
 80007fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6613      	str	r3, [r2, #96]	; 0x60
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <HAL_MspInit+0x4c>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <HAL_MspInit+0x4c>)
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_MspInit+0x4c>)
 8000816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	6593      	str	r3, [r2, #88]	; 0x58
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_MspInit+0x4c>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	210f      	movs	r1, #15
 800082e:	f06f 0001 	mvn.w	r0, #1
 8000832:	f000 f9df 	bl	8000bf4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <HAL_UART_MspInit+0x7c>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d128      	bne.n	80008b8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000866:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <HAL_UART_MspInit+0x80>)
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <HAL_UART_MspInit+0x80>)
 800086a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000870:	6593      	str	r3, [r2, #88]	; 0x58
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <HAL_UART_MspInit+0x80>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <HAL_UART_MspInit+0x80>)
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_UART_MspInit+0x80>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_UART_MspInit+0x80>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000896:	230c      	movs	r3, #12
 8000898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a6:	2307      	movs	r3, #7
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f000 f9c8 	bl	8000c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	; 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40004400 	.word	0x40004400
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	; 0x30
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	2019      	movs	r0, #25
 80008de:	f000 f989 	bl	8000bf4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008e2:	2019      	movs	r0, #25
 80008e4:	f000 f9a2 	bl	8000c2c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008e8:	4a1e      	ldr	r2, [pc, #120]	; (8000964 <HAL_InitTick+0x9c>)
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <HAL_InitTick+0x9c>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008f2:	6613      	str	r3, [r2, #96]	; 0x60
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <HAL_InitTick+0x9c>)
 80008f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000900:	f107 0210 	add.w	r2, r7, #16
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4611      	mov	r1, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f001 f932 	bl	8001b74 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000910:	f001 f91a 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8000914:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <HAL_InitTick+0xa0>)
 800091a:	fba2 2303 	umull	r2, r3, r2, r3
 800091e:	0c9b      	lsrs	r3, r3, #18
 8000920:	3b01      	subs	r3, #1
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_InitTick+0xa4>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <HAL_InitTick+0xa8>)
 8000928:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_InitTick+0xa4>)
 800092c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000930:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_InitTick+0xa4>)
 8000934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000936:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_InitTick+0xa4>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_InitTick+0xa4>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <HAL_InitTick+0xa4>)
 8000946:	f001 fe57 	bl	80025f8 <HAL_TIM_Base_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d104      	bne.n	800095a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000950:	4806      	ldr	r0, [pc, #24]	; (800096c <HAL_InitTick+0xa4>)
 8000952:	f001 feb3 	bl	80026bc <HAL_TIM_Base_Start_IT>
 8000956:	4603      	mov	r3, r0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	3730      	adds	r7, #48	; 0x30
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40021000 	.word	0x40021000
 8000968:	431bde83 	.word	0x431bde83
 800096c:	2000101c 	.word	0x2000101c
 8000970:	40012c00 	.word	0x40012c00

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009a6:	f001 fef9 	bl	800279c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000101c 	.word	0x2000101c

080009b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009b8:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <SystemInit+0x5c>)
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <SystemInit+0x5c>)
 80009bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009c8:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <SystemInit+0x60>)
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <SystemInit+0x60>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <SystemInit+0x60>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <SystemInit+0x60>)
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <SystemInit+0x60>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <SystemInit+0x60>)
 80009ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <SystemInit+0x60>)
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <SystemInit+0x60>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <SystemInit+0x60>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a22:	2003      	movs	r0, #3
 8000a24:	f000 f8db 	bl	8000bde <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f7ff ff4d 	bl	80008c8 <HAL_InitTick>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	e001      	b.n	8000a3e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a3a:	f7ff fedb 	bl	80007f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_IncTick+0x20>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_IncTick+0x24>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <HAL_IncTick+0x24>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20001068 	.word	0x20001068

08000a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <HAL_GetTick+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20001068 	.word	0x20001068

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db0b      	blt.n	8000b16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afe:	4909      	ldr	r1, [pc, #36]	; (8000b24 <__NVIC_EnableIRQ+0x38>)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	095b      	lsrs	r3, r3, #5
 8000b06:	79fa      	ldrb	r2, [r7, #7]
 8000b08:	f002 021f 	and.w	r2, r2, #31
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	490d      	ldr	r1, [pc, #52]	; (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	4909      	ldr	r1, [pc, #36]	; (8000b78 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	1e59      	subs	r1, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ff4e 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c06:	f7ff ff63 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	68b9      	ldr	r1, [r7, #8]
 8000c10:	6978      	ldr	r0, [r7, #20]
 8000c12:	f7ff ffb3 	bl	8000b7c <NVIC_EncodePriority>
 8000c16:	4602      	mov	r2, r0
 8000c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff82 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff56 	bl	8000aec <__NVIC_EnableIRQ>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c56:	e17f      	b.n	8000f58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 8171 	beq.w	8000f52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d00b      	beq.n	8000c90 <HAL_GPIO_Init+0x48>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d007      	beq.n	8000c90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c84:	2b11      	cmp	r3, #17
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b12      	cmp	r3, #18
 8000c8e:	d130      	bne.n	8000cf2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	091b      	lsrs	r3, r3, #4
 8000cdc:	f003 0201 	and.w	r2, r3, #1
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d118      	bne.n	8000d30 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d04:	2201      	movs	r2, #1
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	f003 0201 	and.w	r2, r3, #1
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x128>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b12      	cmp	r3, #18
 8000d6e:	d123      	bne.n	8000db8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	220f      	movs	r2, #15
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	691a      	ldr	r2, [r3, #16]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	6939      	ldr	r1, [r7, #16]
 8000db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0203 	and.w	r2, r3, #3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 80ac 	beq.w	8000f52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4a5e      	ldr	r2, [pc, #376]	; (8000f74 <HAL_GPIO_Init+0x32c>)
 8000dfc:	4b5d      	ldr	r3, [pc, #372]	; (8000f74 <HAL_GPIO_Init+0x32c>)
 8000dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6613      	str	r3, [r2, #96]	; 0x60
 8000e06:	4b5b      	ldr	r3, [pc, #364]	; (8000f74 <HAL_GPIO_Init+0x32c>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e12:	4a59      	ldr	r2, [pc, #356]	; (8000f78 <HAL_GPIO_Init+0x330>)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	220f      	movs	r2, #15
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e3c:	d025      	beq.n	8000e8a <HAL_GPIO_Init+0x242>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4e      	ldr	r2, [pc, #312]	; (8000f7c <HAL_GPIO_Init+0x334>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01f      	beq.n	8000e86 <HAL_GPIO_Init+0x23e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4d      	ldr	r2, [pc, #308]	; (8000f80 <HAL_GPIO_Init+0x338>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0x23a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4c      	ldr	r2, [pc, #304]	; (8000f84 <HAL_GPIO_Init+0x33c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x236>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4b      	ldr	r2, [pc, #300]	; (8000f88 <HAL_GPIO_Init+0x340>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x232>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4a      	ldr	r2, [pc, #296]	; (8000f8c <HAL_GPIO_Init+0x344>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x22e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a49      	ldr	r2, [pc, #292]	; (8000f90 <HAL_GPIO_Init+0x348>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x22a>
 8000e6e:	2306      	movs	r3, #6
 8000e70:	e00c      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e72:	2307      	movs	r3, #7
 8000e74:	e00a      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e76:	2305      	movs	r3, #5
 8000e78:	e008      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e004      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	f002 0203 	and.w	r2, r2, #3
 8000e92:	0092      	lsls	r2, r2, #2
 8000e94:	4093      	lsls	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e9c:	4936      	ldr	r1, [pc, #216]	; (8000f78 <HAL_GPIO_Init+0x330>)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000eaa:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <HAL_GPIO_Init+0x34c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ece:	4a31      	ldr	r2, [pc, #196]	; (8000f94 <HAL_GPIO_Init+0x34c>)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ed4:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <HAL_GPIO_Init+0x34c>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ef8:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <HAL_GPIO_Init+0x34c>)
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <HAL_GPIO_Init+0x34c>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f22:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <HAL_GPIO_Init+0x34c>)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <HAL_GPIO_Init+0x34c>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f4c:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <HAL_GPIO_Init+0x34c>)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f47f ae78 	bne.w	8000c58 <HAL_GPIO_Init+0x10>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	371c      	adds	r7, #28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010000 	.word	0x40010000
 8000f7c:	48000400 	.word	0x48000400
 8000f80:	48000800 	.word	0x48000800
 8000f84:	48000c00 	.word	0x48000c00
 8000f88:	48001000 	.word	0x48001000
 8000f8c:	48001400 	.word	0x48001400
 8000f90:	48001800 	.word	0x48001800
 8000f94:	40010400 	.word	0x40010400

08000f98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40007000 	.word	0x40007000

08000fb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fc2:	d130      	bne.n	8001026 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fd0:	d038      	beq.n	8001044 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd2:	4a20      	ldr	r2, [pc, #128]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2232      	movs	r2, #50	; 0x32
 8000fe8:	fb02 f303 	mul.w	r3, r2, r3
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	0c9b      	lsrs	r3, r3, #18
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ff8:	e002      	b.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800100c:	d102      	bne.n	8001014 <HAL_PWREx_ControlVoltageScaling+0x60>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f2      	bne.n	8000ffa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001020:	d110      	bne.n	8001044 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e00f      	b.n	8001046 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800102e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001032:	d007      	beq.n	8001044 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800103e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001042:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40007000 	.word	0x40007000
 8001058:	20000000 	.word	0x20000000
 800105c:	431bde83 	.word	0x431bde83

08001060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e3d4      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001072:	4ba1      	ldr	r3, [pc, #644]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800107c:	4b9e      	ldr	r3, [pc, #632]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 80e4 	beq.w	800125c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <HAL_RCC_OscConfig+0x4a>
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	2b0c      	cmp	r3, #12
 800109e:	f040 808b 	bne.w	80011b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	f040 8087 	bne.w	80011b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010aa:	4b93      	ldr	r3, [pc, #588]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d005      	beq.n	80010c2 <HAL_RCC_OscConfig+0x62>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e3ac      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1a      	ldr	r2, [r3, #32]
 80010c6:	4b8c      	ldr	r3, [pc, #560]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d004      	beq.n	80010dc <HAL_RCC_OscConfig+0x7c>
 80010d2:	4b89      	ldr	r3, [pc, #548]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010da:	e005      	b.n	80010e8 <HAL_RCC_OscConfig+0x88>
 80010dc:	4b86      	ldr	r3, [pc, #536]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80010de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e2:	091b      	lsrs	r3, r3, #4
 80010e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d923      	bls.n	8001134 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fd71 	bl	8001bd8 <RCC_SetFlashLatencyFromMSIRange>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e38d      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001100:	4a7d      	ldr	r2, [pc, #500]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001102:	4b7d      	ldr	r3, [pc, #500]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f043 0308 	orr.w	r3, r3, #8
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	497a      	ldr	r1, [pc, #488]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 800110e:	4b7a      	ldr	r3, [pc, #488]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800111e:	4976      	ldr	r1, [pc, #472]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001120:	4b75      	ldr	r3, [pc, #468]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	4313      	orrs	r3, r2
 8001130:	604b      	str	r3, [r1, #4]
 8001132:	e025      	b.n	8001180 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001134:	4a70      	ldr	r2, [pc, #448]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001136:	4b70      	ldr	r3, [pc, #448]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	496d      	ldr	r1, [pc, #436]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001142:	4b6d      	ldr	r3, [pc, #436]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	4313      	orrs	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001152:	4969      	ldr	r1, [pc, #420]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001154:	4b68      	ldr	r3, [pc, #416]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	4313      	orrs	r3, r2
 8001164:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d109      	bne.n	8001180 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fd31 	bl	8001bd8 <RCC_SetFlashLatencyFromMSIRange>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e34d      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001180:	f000 fc36 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 8001184:	4601      	mov	r1, r0
 8001186:	4b5c      	ldr	r3, [pc, #368]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	f003 030f 	and.w	r3, r3, #15
 8001190:	4a5a      	ldr	r2, [pc, #360]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 8001192:	5cd3      	ldrb	r3, [r2, r3]
 8001194:	f003 031f 	and.w	r3, r3, #31
 8001198:	fa21 f303 	lsr.w	r3, r1, r3
 800119c:	4a58      	ldr	r2, [pc, #352]	; (8001300 <HAL_RCC_OscConfig+0x2a0>)
 800119e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011a0:	4b58      	ldr	r3, [pc, #352]	; (8001304 <HAL_RCC_OscConfig+0x2a4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fb8f 	bl	80008c8 <HAL_InitTick>
 80011aa:	4603      	mov	r3, r0
 80011ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d052      	beq.n	800125a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	e331      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d032      	beq.n	8001226 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011c0:	4a4d      	ldr	r2, [pc, #308]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80011c2:	4b4d      	ldr	r3, [pc, #308]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fc50 	bl	8000a70 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011d4:	f7ff fc4c 	bl	8000a70 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e31a      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011e6:	4b44      	ldr	r3, [pc, #272]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011f2:	4a41      	ldr	r2, [pc, #260]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80011f4:	4b40      	ldr	r3, [pc, #256]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	493e      	ldr	r1, [pc, #248]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001200:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001210:	4939      	ldr	r1, [pc, #228]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001212:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]
 8001224:	e01a      	b.n	800125c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001226:	4a34      	ldr	r2, [pc, #208]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 8001228:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001232:	f7ff fc1d 	bl	8000a70 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800123a:	f7ff fc19 	bl	8000a70 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e2e7      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800124c:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f0      	bne.n	800123a <HAL_RCC_OscConfig+0x1da>
 8001258:	e000      	b.n	800125c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800125a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b00      	cmp	r3, #0
 8001266:	d074      	beq.n	8001352 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b08      	cmp	r3, #8
 800126c:	d005      	beq.n	800127a <HAL_RCC_OscConfig+0x21a>
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d10e      	bne.n	8001292 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d10b      	bne.n	8001292 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d064      	beq.n	8001350 <HAL_RCC_OscConfig+0x2f0>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d160      	bne.n	8001350 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e2c4      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129a:	d106      	bne.n	80012aa <HAL_RCC_OscConfig+0x24a>
 800129c:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	e01d      	b.n	80012e6 <HAL_RCC_OscConfig+0x286>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b2:	d10c      	bne.n	80012ce <HAL_RCC_OscConfig+0x26e>
 80012b4:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	e00b      	b.n	80012e6 <HAL_RCC_OscConfig+0x286>
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_RCC_OscConfig+0x298>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d01c      	beq.n	8001328 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ee:	f7ff fbbf 	bl	8000a70 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012f4:	e011      	b.n	800131a <HAL_RCC_OscConfig+0x2ba>
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	08004b14 	.word	0x08004b14
 8001300:	20000000 	.word	0x20000000
 8001304:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fbb2 	bl	8000a70 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e280      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800131a:	4baf      	ldr	r3, [pc, #700]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0x2a8>
 8001326:	e014      	b.n	8001352 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fba2 	bl	8000a70 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fb9e 	bl	8000a70 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	; 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e26c      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001342:	4ba5      	ldr	r3, [pc, #660]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x2d0>
 800134e:	e000      	b.n	8001352 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d060      	beq.n	8001420 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2b04      	cmp	r3, #4
 8001362:	d005      	beq.n	8001370 <HAL_RCC_OscConfig+0x310>
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2b0c      	cmp	r3, #12
 8001368:	d119      	bne.n	800139e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d116      	bne.n	800139e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001370:	4b99      	ldr	r3, [pc, #612]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <HAL_RCC_OscConfig+0x328>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e249      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001388:	4993      	ldr	r1, [pc, #588]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 800138a:	4b93      	ldr	r3, [pc, #588]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	061b      	lsls	r3, r3, #24
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800139c:	e040      	b.n	8001420 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d023      	beq.n	80013ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a6:	4a8c      	ldr	r2, [pc, #560]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 80013a8:	4b8b      	ldr	r3, [pc, #556]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b2:	f7ff fb5d 	bl	8000a70 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff fb59 	bl	8000a70 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e227      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013cc:	4b82      	ldr	r3, [pc, #520]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	497f      	ldr	r1, [pc, #508]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 80013da:	4b7f      	ldr	r3, [pc, #508]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	061b      	lsls	r3, r3, #24
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
 80013ec:	e018      	b.n	8001420 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ee:	4a7a      	ldr	r2, [pc, #488]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 80013f0:	4b79      	ldr	r3, [pc, #484]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb39 	bl	8000a70 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff fb35 	bl	8000a70 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e203      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001414:	4b70      	ldr	r3, [pc, #448]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	2b00      	cmp	r3, #0
 800142a:	d03c      	beq.n	80014a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01c      	beq.n	800146e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001434:	4a68      	ldr	r2, [pc, #416]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001436:	4b68      	ldr	r3, [pc, #416]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fb14 	bl	8000a70 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fb10 	bl	8000a70 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e1de      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800145e:	4b5e      	ldr	r3, [pc, #376]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0ef      	beq.n	800144c <HAL_RCC_OscConfig+0x3ec>
 800146c:	e01b      	b.n	80014a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146e:	4a5a      	ldr	r2, [pc, #360]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001470:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147e:	f7ff faf7 	bl	8000a70 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001486:	f7ff faf3 	bl	8000a70 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e1c1      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001498:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 800149a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1ef      	bne.n	8001486 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80a6 	beq.w	8001600 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014b8:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10d      	bne.n	80014e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	4a44      	ldr	r2, [pc, #272]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 80014c6:	4b44      	ldr	r3, [pc, #272]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ce:	6593      	str	r3, [r2, #88]	; 0x58
 80014d0:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014dc:	2301      	movs	r3, #1
 80014de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e0:	4b3e      	ldr	r3, [pc, #248]	; (80015dc <HAL_RCC_OscConfig+0x57c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d118      	bne.n	800151e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014ec:	4a3b      	ldr	r2, [pc, #236]	; (80015dc <HAL_RCC_OscConfig+0x57c>)
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <HAL_RCC_OscConfig+0x57c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f8:	f7ff faba 	bl	8000a70 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001500:	f7ff fab6 	bl	8000a70 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e184      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001512:	4b32      	ldr	r3, [pc, #200]	; (80015dc <HAL_RCC_OscConfig+0x57c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d108      	bne.n	8001538 <HAL_RCC_OscConfig+0x4d8>
 8001526:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 800152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001536:	e024      	b.n	8001582 <HAL_RCC_OscConfig+0x522>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b05      	cmp	r3, #5
 800153e:	d110      	bne.n	8001562 <HAL_RCC_OscConfig+0x502>
 8001540:	4a25      	ldr	r2, [pc, #148]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001542:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001550:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001560:	e00f      	b.n	8001582 <HAL_RCC_OscConfig+0x522>
 8001562:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001572:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 8001576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157a:	f023 0304 	bic.w	r3, r3, #4
 800157e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d016      	beq.n	80015b8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff fa71 	bl	8000a70 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff fa6d 	bl	8000a70 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e139      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_RCC_OscConfig+0x578>)
 80015aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0ed      	beq.n	8001592 <HAL_RCC_OscConfig+0x532>
 80015b6:	e01a      	b.n	80015ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fa5a 	bl	8000a70 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015be:	e00f      	b.n	80015e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c0:	f7ff fa56 	bl	8000a70 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d906      	bls.n	80015e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e122      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015e0:	4b90      	ldr	r3, [pc, #576]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80015e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1e8      	bne.n	80015c0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ee:	7ffb      	ldrb	r3, [r7, #31]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d105      	bne.n	8001600 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f4:	4a8b      	ldr	r2, [pc, #556]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80015f6:	4b8b      	ldr	r3, [pc, #556]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8108 	beq.w	800181a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	2b02      	cmp	r3, #2
 8001610:	f040 80d0 	bne.w	80017b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001614:	4b83      	ldr	r3, [pc, #524]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f003 0203 	and.w	r2, r3, #3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	429a      	cmp	r2, r3
 8001626:	d130      	bne.n	800168a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	3b01      	subs	r3, #1
 8001634:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	429a      	cmp	r2, r3
 8001638:	d127      	bne.n	800168a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001644:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001646:	429a      	cmp	r2, r3
 8001648:	d11f      	bne.n	800168a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001654:	2a07      	cmp	r2, #7
 8001656:	bf14      	ite	ne
 8001658:	2201      	movne	r2, #1
 800165a:	2200      	moveq	r2, #0
 800165c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800165e:	4293      	cmp	r3, r2
 8001660:	d113      	bne.n	800168a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166c:	085b      	lsrs	r3, r3, #1
 800166e:	3b01      	subs	r3, #1
 8001670:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d109      	bne.n	800168a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	3b01      	subs	r3, #1
 8001684:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d06e      	beq.n	8001768 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	2b0c      	cmp	r3, #12
 800168e:	d069      	beq.n	8001764 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001690:	4b64      	ldr	r3, [pc, #400]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800169c:	4b61      	ldr	r3, [pc, #388]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0b7      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016ac:	4a5d      	ldr	r2, [pc, #372]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80016ae:	4b5d      	ldr	r3, [pc, #372]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016b8:	f7ff f9da 	bl	8000a70 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff f9d6 	bl	8000a70 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e0a4      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d2:	4b54      	ldr	r3, [pc, #336]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016de:	4851      	ldr	r0, [pc, #324]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80016e0:	4b50      	ldr	r3, [pc, #320]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_OscConfig+0x7c8>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016f0:	3a01      	subs	r2, #1
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	4311      	orrs	r1, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016fa:	0212      	lsls	r2, r2, #8
 80016fc:	4311      	orrs	r1, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001702:	0852      	lsrs	r2, r2, #1
 8001704:	3a01      	subs	r2, #1
 8001706:	0552      	lsls	r2, r2, #21
 8001708:	4311      	orrs	r1, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800170e:	0852      	lsrs	r2, r2, #1
 8001710:	3a01      	subs	r2, #1
 8001712:	0652      	lsls	r2, r2, #25
 8001714:	4311      	orrs	r1, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800171a:	0912      	lsrs	r2, r2, #4
 800171c:	0452      	lsls	r2, r2, #17
 800171e:	430a      	orrs	r2, r1
 8001720:	4313      	orrs	r3, r2
 8001722:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001724:	4a3f      	ldr	r2, [pc, #252]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 8001726:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800172e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001730:	4a3c      	ldr	r2, [pc, #240]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 8001732:	4b3c      	ldr	r3, [pc, #240]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800173a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800173c:	f7ff f998 	bl	8000a70 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff f994 	bl	8000a70 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e062      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001756:	4b33      	ldr	r3, [pc, #204]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001762:	e05a      	b.n	800181a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e059      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001768:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d152      	bne.n	800181a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001774:	4a2b      	ldr	r2, [pc, #172]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800177e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001780:	4a28      	ldr	r2, [pc, #160]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 8001782:	4b28      	ldr	r3, [pc, #160]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800178a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800178c:	f7ff f970 	bl	8000a70 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff f96c 	bl	8000a70 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e03a      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x734>
 80017b2:	e032      	b.n	800181a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d02d      	beq.n	8001816 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ba:	4a1a      	ldr	r2, [pc, #104]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80017d2:	4a14      	ldr	r2, [pc, #80]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f023 0303 	bic.w	r3, r3, #3
 80017dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017de:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff f93f 	bl	8000a70 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff f93b 	bl	8000a70 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e009      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_RCC_OscConfig+0x7c4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x796>
 8001814:	e001      	b.n	800181a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000
 8001828:	f99d808c 	.word	0xf99d808c

0800182c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0c8      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b66      	ldr	r3, [pc, #408]	; (80019dc <HAL_RCC_ClockConfig+0x1b0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0207 	and.w	r2, r3, #7
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d210      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4963      	ldr	r1, [pc, #396]	; (80019dc <HAL_RCC_ClockConfig+0x1b0>)
 8001850:	4b62      	ldr	r3, [pc, #392]	; (80019dc <HAL_RCC_ClockConfig+0x1b0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 0207 	bic.w	r2, r3, #7
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	4313      	orrs	r3, r2
 800185c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b5f      	ldr	r3, [pc, #380]	; (80019dc <HAL_RCC_ClockConfig+0x1b0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0207 	and.w	r2, r3, #7
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0b0      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d04c      	beq.n	8001916 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d107      	bne.n	8001894 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001884:	4b56      	ldr	r3, [pc, #344]	; (80019e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d121      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e09e      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d107      	bne.n	80018ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189c:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <HAL_RCC_ClockConfig+0x1b4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d115      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e092      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d107      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b4:	4b4a      	ldr	r3, [pc, #296]	; (80019e0 <HAL_RCC_ClockConfig+0x1b4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e086      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c4:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <HAL_RCC_ClockConfig+0x1b4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e07e      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018d4:	4942      	ldr	r1, [pc, #264]	; (80019e0 <HAL_RCC_ClockConfig+0x1b4>)
 80018d6:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <HAL_RCC_ClockConfig+0x1b4>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f023 0203 	bic.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018e6:	f7ff f8c3 	bl	8000a70 <HAL_GetTick>
 80018ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ee:	f7ff f8bf 	bl	8000a70 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e066      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001904:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 020c 	and.w	r2, r3, #12
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	429a      	cmp	r2, r3
 8001914:	d1eb      	bne.n	80018ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001922:	492f      	ldr	r1, [pc, #188]	; (80019e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001924:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4313      	orrs	r3, r2
 8001932:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001934:	4b29      	ldr	r3, [pc, #164]	; (80019dc <HAL_RCC_ClockConfig+0x1b0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0207 	and.w	r2, r3, #7
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d910      	bls.n	8001964 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4926      	ldr	r1, [pc, #152]	; (80019dc <HAL_RCC_ClockConfig+0x1b0>)
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <HAL_RCC_ClockConfig+0x1b0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 0207 	bic.w	r2, r3, #7
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_RCC_ClockConfig+0x1b0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0207 	and.w	r2, r3, #7
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e036      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001970:	491b      	ldr	r1, [pc, #108]	; (80019e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001972:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198e:	4914      	ldr	r1, [pc, #80]	; (80019e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019a2:	f000 f825 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 80019a6:	4601      	mov	r1, r0
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_RCC_ClockConfig+0x1b4>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	4a0c      	ldr	r2, [pc, #48]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	5cd3      	ldrb	r3, [r2, r3]
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	fa21 f303 	lsr.w	r3, r1, r3
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe ff7e 	bl	80008c8 <HAL_InitTick>
 80019cc:	4603      	mov	r3, r0
 80019ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80019d0:	7afb      	ldrb	r3, [r7, #11]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40022000 	.word	0x40022000
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08004b14 	.word	0x08004b14
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fe:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a08:	4b3a      	ldr	r3, [pc, #232]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x34>
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d121      	bne.n	8001a62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d11e      	bne.n	8001a62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a24:	4b33      	ldr	r3, [pc, #204]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a30:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e005      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a40:	4b2c      	ldr	r3, [pc, #176]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a4c:	4a2a      	ldr	r2, [pc, #168]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10d      	bne.n	8001a78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d102      	bne.n	8001a6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a68:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	e004      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d133      	bne.n	8001ae6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d002      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0xa4>
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d003      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0xaa>
 8001a92:	e005      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a96:	617b      	str	r3, [r7, #20]
      break;
 8001a98:	e005      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a9c:	617b      	str	r3, [r7, #20]
      break;
 8001a9e:	e002      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	617b      	str	r3, [r7, #20]
      break;
 8001aa4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	fb02 f203 	mul.w	r2, r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0e5b      	lsrs	r3, r3, #25
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ae6:	69bb      	ldr	r3, [r7, #24]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3724      	adds	r7, #36	; 0x24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40021000 	.word	0x40021000
 8001af8:	08004b2c 	.word	0x08004b2c
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	007a1200 	.word	0x007a1200

08001b04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b24:	4601      	mov	r1, r0
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0a1b      	lsrs	r3, r3, #8
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08004b24 	.word	0x08004b24

08001b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b4c:	f7ff ffda 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b50:	4601      	mov	r1, r0
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0adb      	lsrs	r3, r3, #11
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b5e:	5cd3      	ldrb	r3, [r2, r3]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08004b24 	.word	0x08004b24

08001b74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	220f      	movs	r2, #15
 8001b82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	08db      	lsrs	r3, r3, #3
 8001bae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <HAL_RCC_GetClockConfig+0x60>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0207 	and.w	r2, r3, #7
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40022000 	.word	0x40022000

08001bd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001be0:	2300      	movs	r3, #0
 8001be2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001be4:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bf0:	f7ff f9d2 	bl	8000f98 <HAL_PWREx_GetVoltageRange>
 8001bf4:	6178      	str	r0, [r7, #20]
 8001bf6:	e014      	b.n	8001c22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	4a25      	ldr	r2, [pc, #148]	; (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bfa:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c02:	6593      	str	r3, [r2, #88]	; 0x58
 8001c04:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c10:	f7ff f9c2 	bl	8000f98 <HAL_PWREx_GetVoltageRange>
 8001c14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c16:	4a1e      	ldr	r2, [pc, #120]	; (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c28:	d10b      	bne.n	8001c42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b80      	cmp	r3, #128	; 0x80
 8001c2e:	d919      	bls.n	8001c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2ba0      	cmp	r3, #160	; 0xa0
 8001c34:	d902      	bls.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c36:	2302      	movs	r3, #2
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	e013      	b.n	8001c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	e010      	b.n	8001c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b80      	cmp	r3, #128	; 0x80
 8001c46:	d902      	bls.n	8001c4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c48:	2303      	movs	r3, #3
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	e00a      	b.n	8001c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b80      	cmp	r3, #128	; 0x80
 8001c52:	d102      	bne.n	8001c5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c54:	2302      	movs	r3, #2
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	e004      	b.n	8001c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b70      	cmp	r3, #112	; 0x70
 8001c5e:	d101      	bne.n	8001c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c60:	2301      	movs	r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c64:	490b      	ldr	r1, [pc, #44]	; (8001c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 0207 	bic.w	r2, r3, #7
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0207 	and.w	r2, r3, #7
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40022000 	.word	0x40022000

08001c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d03f      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cbc:	d01c      	beq.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cc2:	d802      	bhi.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00e      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001cc8:	e01f      	b.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001cca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cce:	d003      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001cd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001cd4:	d01c      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001cd6:	e018      	b.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cd8:	4a85      	ldr	r2, [pc, #532]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cda:	4b85      	ldr	r3, [pc, #532]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ce4:	e015      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 fab9 	bl	8002264 <RCCEx_PLLSAI1_Config>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cf6:	e00c      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3320      	adds	r3, #32
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fba0 	bl	8002444 <RCCEx_PLLSAI2_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d08:	e003      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	74fb      	strb	r3, [r7, #19]
      break;
 8001d0e:	e000      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d12:	7cfb      	ldrb	r3, [r7, #19]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10b      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d18:	4975      	ldr	r1, [pc, #468]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d1a:	4b75      	ldr	r3, [pc, #468]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d2e:	e001      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d30:	7cfb      	ldrb	r3, [r7, #19]
 8001d32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d03f      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d48:	d01c      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001d4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d4e:	d802      	bhi.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00e      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001d54:	e01f      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001d56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d5a:	d003      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001d5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d60:	d01c      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001d62:	e018      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d64:	4a62      	ldr	r2, [pc, #392]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d66:	4b62      	ldr	r3, [pc, #392]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d70:	e015      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fa73 	bl	8002264 <RCCEx_PLLSAI1_Config>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d82:	e00c      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3320      	adds	r3, #32
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fb5a 	bl	8002444 <RCCEx_PLLSAI2_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d94:	e003      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	74fb      	strb	r3, [r7, #19]
      break;
 8001d9a:	e000      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d9e:	7cfb      	ldrb	r3, [r7, #19]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10b      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001da4:	4952      	ldr	r1, [pc, #328]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001da6:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001db4:	4313      	orrs	r3, r2
 8001db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dba:	e001      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dbc:	7cfb      	ldrb	r3, [r7, #19]
 8001dbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80a0 	beq.w	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dd2:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001de2:	2300      	movs	r3, #0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00d      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de8:	4a41      	ldr	r2, [pc, #260]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dea:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df2:	6593      	str	r3, [r2, #88]	; 0x58
 8001df4:	4b3e      	ldr	r3, [pc, #248]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e00:	2301      	movs	r3, #1
 8001e02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e04:	4a3b      	ldr	r2, [pc, #236]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e06:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e10:	f7fe fe2e 	bl	8000a70 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e16:	e009      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e18:	f7fe fe2a 	bl	8000a70 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d902      	bls.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	74fb      	strb	r3, [r7, #19]
        break;
 8001e2a:	e005      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ef      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001e38:	7cfb      	ldrb	r3, [r7, #19]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d15c      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01f      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d019      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e68:	4a21      	ldr	r2, [pc, #132]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e6a:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e78:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e88:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d016      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7fe fde9 	bl	8000a70 <HAL_GetTick>
 8001e9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea0:	e00b      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7fe fde5 	bl	8000a70 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d902      	bls.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	74fb      	strb	r3, [r7, #19]
            break;
 8001eb8:	e006      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0ec      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001ec8:	7cfb      	ldrb	r3, [r7, #19]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ece:	4908      	ldr	r1, [pc, #32]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ee6:	e009      	b.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	74bb      	strb	r3, [r7, #18]
 8001eec:	e006      	b.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ef8:	7cfb      	ldrb	r3, [r7, #19]
 8001efa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001efc:	7c7b      	ldrb	r3, [r7, #17]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d105      	bne.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f02:	4a9e      	ldr	r2, [pc, #632]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f04:	4b9d      	ldr	r3, [pc, #628]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f1a:	4998      	ldr	r1, [pc, #608]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f1c:	4b97      	ldr	r3, [pc, #604]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	f023 0203 	bic.w	r2, r3, #3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00a      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f3c:	498f      	ldr	r1, [pc, #572]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f3e:	4b8f      	ldr	r3, [pc, #572]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f44:	f023 020c 	bic.w	r2, r3, #12
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f5e:	4987      	ldr	r1, [pc, #540]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f60:	4b86      	ldr	r3, [pc, #536]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00a      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f80:	497e      	ldr	r1, [pc, #504]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f82:	4b7e      	ldr	r3, [pc, #504]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fa2:	4976      	ldr	r1, [pc, #472]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fa4:	4b75      	ldr	r3, [pc, #468]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00a      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fc4:	496d      	ldr	r1, [pc, #436]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fc6:	4b6d      	ldr	r3, [pc, #436]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fcc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fe6:	4965      	ldr	r1, [pc, #404]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fe8:	4b64      	ldr	r3, [pc, #400]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00a      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002008:	495c      	ldr	r1, [pc, #368]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800200a:	4b5c      	ldr	r3, [pc, #368]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002010:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002018:	4313      	orrs	r3, r2
 800201a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800202a:	4954      	ldr	r1, [pc, #336]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800202c:	4b53      	ldr	r3, [pc, #332]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00a      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800204c:	494b      	ldr	r1, [pc, #300]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800204e:	4b4b      	ldr	r3, [pc, #300]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002054:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800206e:	4943      	ldr	r1, [pc, #268]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002070:	4b42      	ldr	r3, [pc, #264]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d028      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002090:	493a      	ldr	r1, [pc, #232]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002092:	4b3a      	ldr	r3, [pc, #232]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002098:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ae:	d106      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b0:	4a32      	ldr	r2, [pc, #200]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020b2:	4b32      	ldr	r3, [pc, #200]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ba:	60d3      	str	r3, [r2, #12]
 80020bc:	e011      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020c6:	d10c      	bne.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3304      	adds	r3, #4
 80020cc:	2101      	movs	r1, #1
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f8c8 	bl	8002264 <RCCEx_PLLSAI1_Config>
 80020d4:	4603      	mov	r3, r0
 80020d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80020de:	7cfb      	ldrb	r3, [r7, #19]
 80020e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d028      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020ee:	4923      	ldr	r1, [pc, #140]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800210c:	d106      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800210e:	4a1b      	ldr	r2, [pc, #108]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002118:	60d3      	str	r3, [r2, #12]
 800211a:	e011      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002124:	d10c      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3304      	adds	r3, #4
 800212a:	2101      	movs	r1, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f899 	bl	8002264 <RCCEx_PLLSAI1_Config>
 8002132:	4603      	mov	r3, r0
 8002134:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002136:	7cfb      	ldrb	r3, [r7, #19]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d02b      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800214c:	490b      	ldr	r1, [pc, #44]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002154:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800216a:	d109      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800216c:	4a03      	ldr	r2, [pc, #12]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800216e:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002176:	60d3      	str	r3, [r2, #12]
 8002178:	e014      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002184:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002188:	d10c      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3304      	adds	r3, #4
 800218e:	2101      	movs	r1, #1
 8002190:	4618      	mov	r0, r3
 8002192:	f000 f867 	bl	8002264 <RCCEx_PLLSAI1_Config>
 8002196:	4603      	mov	r3, r0
 8002198:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800219a:	7cfb      	ldrb	r3, [r7, #19]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d02f      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021b0:	492b      	ldr	r1, [pc, #172]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80021b2:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021ce:	d10d      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	2102      	movs	r1, #2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f844 	bl	8002264 <RCCEx_PLLSAI1_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d014      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	74bb      	strb	r3, [r7, #18]
 80021ea:	e011      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021f4:	d10c      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3320      	adds	r3, #32
 80021fa:	2102      	movs	r1, #2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 f921 	bl	8002444 <RCCEx_PLLSAI2_Config>
 8002202:	4603      	mov	r3, r0
 8002204:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002206:	7cfb      	ldrb	r3, [r7, #19]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800221c:	4910      	ldr	r1, [pc, #64]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002224:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002240:	4b07      	ldr	r3, [pc, #28]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002256:	7cbb      	ldrb	r3, [r7, #18]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000

08002264 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002272:	4b73      	ldr	r3, [pc, #460]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d018      	beq.n	80022b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800227e:	4b70      	ldr	r3, [pc, #448]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0203 	and.w	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d10d      	bne.n	80022aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
       ||
 8002292:	2b00      	cmp	r3, #0
 8002294:	d009      	beq.n	80022aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002296:	4b6a      	ldr	r3, [pc, #424]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
       ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d044      	beq.n	8002334 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	e041      	b.n	8002334 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d00c      	beq.n	80022d2 <RCCEx_PLLSAI1_Config+0x6e>
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d013      	beq.n	80022e4 <RCCEx_PLLSAI1_Config+0x80>
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d120      	bne.n	8002302 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022c0:	4b5f      	ldr	r3, [pc, #380]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d11d      	bne.n	8002308 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d0:	e01a      	b.n	8002308 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022d2:	4b5b      	ldr	r3, [pc, #364]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d116      	bne.n	800230c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e2:	e013      	b.n	800230c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022e4:	4b56      	ldr	r3, [pc, #344]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10f      	bne.n	8002310 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022f0:	4b53      	ldr	r3, [pc, #332]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002300:	e006      	b.n	8002310 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
      break;
 8002306:	e004      	b.n	8002312 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002308:	bf00      	nop
 800230a:	e002      	b.n	8002312 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800230c:	bf00      	nop
 800230e:	e000      	b.n	8002312 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002310:	bf00      	nop
    }

    if(status == HAL_OK)
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10d      	bne.n	8002334 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002318:	4849      	ldr	r0, [pc, #292]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 800231a:	4b49      	ldr	r3, [pc, #292]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6819      	ldr	r1, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	430b      	orrs	r3, r1
 8002330:	4313      	orrs	r3, r2
 8002332:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d17d      	bne.n	8002436 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800233a:	4a41      	ldr	r2, [pc, #260]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 800233c:	4b40      	ldr	r3, [pc, #256]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002346:	f7fe fb93 	bl	8000a70 <HAL_GetTick>
 800234a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800234c:	e009      	b.n	8002362 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800234e:	f7fe fb8f 	bl	8000a70 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d902      	bls.n	8002362 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	73fb      	strb	r3, [r7, #15]
        break;
 8002360:	e005      	b.n	800236e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002362:	4b37      	ldr	r3, [pc, #220]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1ef      	bne.n	800234e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d160      	bne.n	8002436 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d111      	bne.n	800239e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800237a:	4831      	ldr	r0, [pc, #196]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 800237c:	4b30      	ldr	r3, [pc, #192]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6892      	ldr	r2, [r2, #8]
 800238c:	0211      	lsls	r1, r2, #8
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68d2      	ldr	r2, [r2, #12]
 8002392:	0912      	lsrs	r2, r2, #4
 8002394:	0452      	lsls	r2, r2, #17
 8002396:	430a      	orrs	r2, r1
 8002398:	4313      	orrs	r3, r2
 800239a:	6103      	str	r3, [r0, #16]
 800239c:	e027      	b.n	80023ee <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d112      	bne.n	80023ca <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023a4:	4826      	ldr	r0, [pc, #152]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80023ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6892      	ldr	r2, [r2, #8]
 80023b6:	0211      	lsls	r1, r2, #8
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6912      	ldr	r2, [r2, #16]
 80023bc:	0852      	lsrs	r2, r2, #1
 80023be:	3a01      	subs	r2, #1
 80023c0:	0552      	lsls	r2, r2, #21
 80023c2:	430a      	orrs	r2, r1
 80023c4:	4313      	orrs	r3, r2
 80023c6:	6103      	str	r3, [r0, #16]
 80023c8:	e011      	b.n	80023ee <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023ca:	481d      	ldr	r0, [pc, #116]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023cc:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6892      	ldr	r2, [r2, #8]
 80023dc:	0211      	lsls	r1, r2, #8
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6952      	ldr	r2, [r2, #20]
 80023e2:	0852      	lsrs	r2, r2, #1
 80023e4:	3a01      	subs	r2, #1
 80023e6:	0652      	lsls	r2, r2, #25
 80023e8:	430a      	orrs	r2, r1
 80023ea:	4313      	orrs	r3, r2
 80023ec:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023ee:	4a14      	ldr	r2, [pc, #80]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fa:	f7fe fb39 	bl	8000a70 <HAL_GetTick>
 80023fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002400:	e009      	b.n	8002416 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002402:	f7fe fb35 	bl	8000a70 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d902      	bls.n	8002416 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	73fb      	strb	r3, [r7, #15]
          break;
 8002414:	e005      	b.n	8002422 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0ef      	beq.n	8002402 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d106      	bne.n	8002436 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002428:	4905      	ldr	r1, [pc, #20]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <RCCEx_PLLSAI1_Config+0x1dc>)
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002436:	7bfb      	ldrb	r3, [r7, #15]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40021000 	.word	0x40021000

08002444 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002452:	4b68      	ldr	r3, [pc, #416]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d018      	beq.n	8002490 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800245e:	4b65      	ldr	r3, [pc, #404]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 0203 	and.w	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d10d      	bne.n	800248a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
       ||
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002476:	4b5f      	ldr	r3, [pc, #380]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
       ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d044      	beq.n	8002514 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	e041      	b.n	8002514 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d00c      	beq.n	80024b2 <RCCEx_PLLSAI2_Config+0x6e>
 8002498:	2b03      	cmp	r3, #3
 800249a:	d013      	beq.n	80024c4 <RCCEx_PLLSAI2_Config+0x80>
 800249c:	2b01      	cmp	r3, #1
 800249e:	d120      	bne.n	80024e2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024a0:	4b54      	ldr	r3, [pc, #336]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d11d      	bne.n	80024e8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b0:	e01a      	b.n	80024e8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024b2:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d116      	bne.n	80024ec <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c2:	e013      	b.n	80024ec <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024c4:	4b4b      	ldr	r3, [pc, #300]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10f      	bne.n	80024f0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024d0:	4b48      	ldr	r3, [pc, #288]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d109      	bne.n	80024f0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024e0:	e006      	b.n	80024f0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
      break;
 80024e6:	e004      	b.n	80024f2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80024e8:	bf00      	nop
 80024ea:	e002      	b.n	80024f2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80024ec:	bf00      	nop
 80024ee:	e000      	b.n	80024f2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80024f0:	bf00      	nop
    }

    if(status == HAL_OK)
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10d      	bne.n	8002514 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024f8:	483e      	ldr	r0, [pc, #248]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024fa:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	430b      	orrs	r3, r1
 8002510:	4313      	orrs	r3, r2
 8002512:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d167      	bne.n	80025ea <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800251a:	4a36      	ldr	r2, [pc, #216]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800251c:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002526:	f7fe faa3 	bl	8000a70 <HAL_GetTick>
 800252a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800252c:	e009      	b.n	8002542 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800252e:	f7fe fa9f 	bl	8000a70 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d902      	bls.n	8002542 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	73fb      	strb	r3, [r7, #15]
        break;
 8002540:	e005      	b.n	800254e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002542:	4b2c      	ldr	r3, [pc, #176]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1ef      	bne.n	800252e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d14a      	bne.n	80025ea <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d111      	bne.n	800257e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800255a:	4826      	ldr	r0, [pc, #152]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6892      	ldr	r2, [r2, #8]
 800256c:	0211      	lsls	r1, r2, #8
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68d2      	ldr	r2, [r2, #12]
 8002572:	0912      	lsrs	r2, r2, #4
 8002574:	0452      	lsls	r2, r2, #17
 8002576:	430a      	orrs	r2, r1
 8002578:	4313      	orrs	r3, r2
 800257a:	6143      	str	r3, [r0, #20]
 800257c:	e011      	b.n	80025a2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800257e:	481d      	ldr	r0, [pc, #116]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002580:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002588:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6892      	ldr	r2, [r2, #8]
 8002590:	0211      	lsls	r1, r2, #8
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6912      	ldr	r2, [r2, #16]
 8002596:	0852      	lsrs	r2, r2, #1
 8002598:	3a01      	subs	r2, #1
 800259a:	0652      	lsls	r2, r2, #25
 800259c:	430a      	orrs	r2, r1
 800259e:	4313      	orrs	r3, r2
 80025a0:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80025a2:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7fe fa5f 	bl	8000a70 <HAL_GetTick>
 80025b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025b4:	e009      	b.n	80025ca <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025b6:	f7fe fa5b 	bl	8000a70 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d902      	bls.n	80025ca <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	73fb      	strb	r3, [r7, #15]
          break;
 80025c8:	e005      	b.n	80025d6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0ef      	beq.n	80025b6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d106      	bne.n	80025ea <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025dc:	4905      	ldr	r1, [pc, #20]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e049      	b.n	800269e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f841 	bl	80026a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3304      	adds	r3, #4
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f000 f9f8 	bl	8002a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d001      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e04f      	b.n	8002774 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	68d2      	ldr	r2, [r2, #12]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a23      	ldr	r2, [pc, #140]	; (8002780 <HAL_TIM_Base_Start_IT+0xc4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01d      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0x76>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fe:	d018      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0x76>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1f      	ldr	r2, [pc, #124]	; (8002784 <HAL_TIM_Base_Start_IT+0xc8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0x76>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <HAL_TIM_Base_Start_IT+0xcc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00e      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0x76>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1c      	ldr	r2, [pc, #112]	; (800278c <HAL_TIM_Base_Start_IT+0xd0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d009      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0x76>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <HAL_TIM_Base_Start_IT+0xd4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d004      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0x76>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a19      	ldr	r2, [pc, #100]	; (8002794 <HAL_TIM_Base_Start_IT+0xd8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d115      	bne.n	800275e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	4b17      	ldr	r3, [pc, #92]	; (8002798 <HAL_TIM_Base_Start_IT+0xdc>)
 800273a:	4013      	ands	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b06      	cmp	r3, #6
 8002742:	d015      	beq.n	8002770 <HAL_TIM_Base_Start_IT+0xb4>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274a:	d011      	beq.n	8002770 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275c:	e008      	b.n	8002770 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e000      	b.n	8002772 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002770:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40012c00 	.word	0x40012c00
 8002784:	40000400 	.word	0x40000400
 8002788:	40000800 	.word	0x40000800
 800278c:	40000c00 	.word	0x40000c00
 8002790:	40013400 	.word	0x40013400
 8002794:	40014000 	.word	0x40014000
 8002798:	00010007 	.word	0x00010007

0800279c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d122      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d11b      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0202 	mvn.w	r2, #2
 80027c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f905 	bl	80029ee <HAL_TIM_IC_CaptureCallback>
 80027e4:	e005      	b.n	80027f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f8f7 	bl	80029da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f908 	bl	8002a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b04      	cmp	r3, #4
 8002804:	d122      	bne.n	800284c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b04      	cmp	r3, #4
 8002812:	d11b      	bne.n	800284c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0204 	mvn.w	r2, #4
 800281c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8db 	bl	80029ee <HAL_TIM_IC_CaptureCallback>
 8002838:	e005      	b.n	8002846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f8cd 	bl	80029da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f8de 	bl	8002a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b08      	cmp	r3, #8
 8002858:	d122      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b08      	cmp	r3, #8
 8002866:	d11b      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0208 	mvn.w	r2, #8
 8002870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2204      	movs	r2, #4
 8002876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f8b1 	bl	80029ee <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f8a3 	bl	80029da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f8b4 	bl	8002a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d122      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d11b      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0210 	mvn.w	r2, #16
 80028c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2208      	movs	r2, #8
 80028ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f887 	bl	80029ee <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f879 	bl	80029da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f88a 	bl	8002a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d10e      	bne.n	8002920 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0201 	mvn.w	r2, #1
 8002918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fd ff54 	bl	80007c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	2b80      	cmp	r3, #128	; 0x80
 800292c:	d10e      	bne.n	800294c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	2b80      	cmp	r3, #128	; 0x80
 800293a:	d107      	bne.n	800294c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f914 	bl	8002b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800295a:	d10e      	bne.n	800297a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	2b80      	cmp	r3, #128	; 0x80
 8002968:	d107      	bne.n	800297a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f907 	bl	8002b88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	d10e      	bne.n	80029a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002992:	2b40      	cmp	r3, #64	; 0x40
 8002994:	d107      	bne.n	80029a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800299e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f838 	bl	8002a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d10e      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d107      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f06f 0220 	mvn.w	r2, #32
 80029ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f8c7 	bl	8002b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a40      	ldr	r2, [pc, #256]	; (8002b40 <TIM_Base_SetConfig+0x114>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d013      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4a:	d00f      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a3d      	ldr	r2, [pc, #244]	; (8002b44 <TIM_Base_SetConfig+0x118>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00b      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a3c      	ldr	r2, [pc, #240]	; (8002b48 <TIM_Base_SetConfig+0x11c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d007      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a3b      	ldr	r2, [pc, #236]	; (8002b4c <TIM_Base_SetConfig+0x120>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d003      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a3a      	ldr	r2, [pc, #232]	; (8002b50 <TIM_Base_SetConfig+0x124>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d108      	bne.n	8002a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a2f      	ldr	r2, [pc, #188]	; (8002b40 <TIM_Base_SetConfig+0x114>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01f      	beq.n	8002ac6 <TIM_Base_SetConfig+0x9a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8c:	d01b      	beq.n	8002ac6 <TIM_Base_SetConfig+0x9a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a2c      	ldr	r2, [pc, #176]	; (8002b44 <TIM_Base_SetConfig+0x118>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d017      	beq.n	8002ac6 <TIM_Base_SetConfig+0x9a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a2b      	ldr	r2, [pc, #172]	; (8002b48 <TIM_Base_SetConfig+0x11c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <TIM_Base_SetConfig+0x9a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a2a      	ldr	r2, [pc, #168]	; (8002b4c <TIM_Base_SetConfig+0x120>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00f      	beq.n	8002ac6 <TIM_Base_SetConfig+0x9a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a29      	ldr	r2, [pc, #164]	; (8002b50 <TIM_Base_SetConfig+0x124>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00b      	beq.n	8002ac6 <TIM_Base_SetConfig+0x9a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <TIM_Base_SetConfig+0x128>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d007      	beq.n	8002ac6 <TIM_Base_SetConfig+0x9a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a27      	ldr	r2, [pc, #156]	; (8002b58 <TIM_Base_SetConfig+0x12c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d003      	beq.n	8002ac6 <TIM_Base_SetConfig+0x9a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a26      	ldr	r2, [pc, #152]	; (8002b5c <TIM_Base_SetConfig+0x130>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d108      	bne.n	8002ad8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a10      	ldr	r2, [pc, #64]	; (8002b40 <TIM_Base_SetConfig+0x114>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00f      	beq.n	8002b24 <TIM_Base_SetConfig+0xf8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <TIM_Base_SetConfig+0x124>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00b      	beq.n	8002b24 <TIM_Base_SetConfig+0xf8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <TIM_Base_SetConfig+0x128>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d007      	beq.n	8002b24 <TIM_Base_SetConfig+0xf8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a10      	ldr	r2, [pc, #64]	; (8002b58 <TIM_Base_SetConfig+0x12c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d003      	beq.n	8002b24 <TIM_Base_SetConfig+0xf8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a0f      	ldr	r2, [pc, #60]	; (8002b5c <TIM_Base_SetConfig+0x130>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d103      	bne.n	8002b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	615a      	str	r2, [r3, #20]
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	40000c00 	.word	0x40000c00
 8002b50:	40013400 	.word	0x40013400
 8002b54:	40014000 	.word	0x40014000
 8002b58:	40014400 	.word	0x40014400
 8002b5c:	40014800 	.word	0x40014800

08002b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e040      	b.n	8002c30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fd fe40 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f8c0 	bl	8002d60 <UART_SetConfig>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e022      	b.n	8002c30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fb38 	bl	8003268 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	6852      	ldr	r2, [r2, #4]
 8002c02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	6892      	ldr	r2, [r2, #8]
 8002c12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fbbf 	bl	80033ac <UART_CheckIdleState>
 8002c2e:	4603      	mov	r3, r0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	; 0x28
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	f040 8082 	bne.w	8002d56 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <HAL_UART_Transmit+0x26>
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e07a      	b.n	8002d58 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_UART_Transmit+0x38>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e073      	b.n	8002d58 <HAL_UART_Transmit+0x120>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2221      	movs	r2, #33	; 0x21
 8002c84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c86:	f7fd fef3 	bl	8000a70 <HAL_GetTick>
 8002c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	88fa      	ldrh	r2, [r7, #6]
 8002c90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	88fa      	ldrh	r2, [r7, #6]
 8002c98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca4:	d108      	bne.n	8002cb8 <HAL_UART_Transmit+0x80>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d104      	bne.n	8002cb8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	e003      	b.n	8002cc0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002cc8:	e02d      	b.n	8002d26 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2180      	movs	r1, #128	; 0x80
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fbb2 	bl	800343e <UART_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e039      	b.n	8002d58 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	8812      	ldrh	r2, [r2, #0]
 8002cf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf6:	b292      	uxth	r2, r2
 8002cf8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	e008      	b.n	8002d14 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	7812      	ldrb	r2, [r2, #0]
 8002d0a:	b292      	uxth	r2, r2
 8002d0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1cb      	bne.n	8002cca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2140      	movs	r1, #64	; 0x40
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fb7e 	bl	800343e <UART_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e005      	b.n	8002d58 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
  }
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3720      	adds	r7, #32
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d60:	b5b0      	push	{r4, r5, r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6819      	ldr	r1, [r3, #0]
 8002d8e:	4bac      	ldr	r3, [pc, #688]	; (8003040 <UART_SetConfig+0x2e0>)
 8002d90:	400b      	ands	r3, r1
 8002d92:	69f9      	ldr	r1, [r7, #28]
 8002d94:	430b      	orrs	r3, r1
 8002d96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	6852      	ldr	r2, [r2, #4]
 8002da2:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68d2      	ldr	r2, [r2, #12]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4aa2      	ldr	r2, [pc, #648]	; (8003044 <UART_SetConfig+0x2e4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d004      	beq.n	8002dc8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	6892      	ldr	r2, [r2, #8]
 8002dd2:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a99      	ldr	r2, [pc, #612]	; (8003048 <UART_SetConfig+0x2e8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d122      	bne.n	8002e2c <UART_SetConfig+0xcc>
 8002de6:	4b99      	ldr	r3, [pc, #612]	; (800304c <UART_SetConfig+0x2ec>)
 8002de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d817      	bhi.n	8002e24 <UART_SetConfig+0xc4>
 8002df4:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <UART_SetConfig+0x9c>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002e19 	.word	0x08002e19
 8002e04:	08002e13 	.word	0x08002e13
 8002e08:	08002e1f 	.word	0x08002e1f
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	76fb      	strb	r3, [r7, #27]
 8002e10:	e0e8      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002e12:	2302      	movs	r3, #2
 8002e14:	76fb      	strb	r3, [r7, #27]
 8002e16:	e0e5      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002e18:	2304      	movs	r3, #4
 8002e1a:	76fb      	strb	r3, [r7, #27]
 8002e1c:	e0e2      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002e1e:	2308      	movs	r3, #8
 8002e20:	76fb      	strb	r3, [r7, #27]
 8002e22:	e0df      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002e24:	2310      	movs	r3, #16
 8002e26:	76fb      	strb	r3, [r7, #27]
 8002e28:	bf00      	nop
 8002e2a:	e0db      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a87      	ldr	r2, [pc, #540]	; (8003050 <UART_SetConfig+0x2f0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d134      	bne.n	8002ea0 <UART_SetConfig+0x140>
 8002e36:	4b85      	ldr	r3, [pc, #532]	; (800304c <UART_SetConfig+0x2ec>)
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	d829      	bhi.n	8002e98 <UART_SetConfig+0x138>
 8002e44:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <UART_SetConfig+0xec>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e81 	.word	0x08002e81
 8002e50:	08002e99 	.word	0x08002e99
 8002e54:	08002e99 	.word	0x08002e99
 8002e58:	08002e99 	.word	0x08002e99
 8002e5c:	08002e8d 	.word	0x08002e8d
 8002e60:	08002e99 	.word	0x08002e99
 8002e64:	08002e99 	.word	0x08002e99
 8002e68:	08002e99 	.word	0x08002e99
 8002e6c:	08002e87 	.word	0x08002e87
 8002e70:	08002e99 	.word	0x08002e99
 8002e74:	08002e99 	.word	0x08002e99
 8002e78:	08002e99 	.word	0x08002e99
 8002e7c:	08002e93 	.word	0x08002e93
 8002e80:	2300      	movs	r3, #0
 8002e82:	76fb      	strb	r3, [r7, #27]
 8002e84:	e0ae      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002e86:	2302      	movs	r3, #2
 8002e88:	76fb      	strb	r3, [r7, #27]
 8002e8a:	e0ab      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	76fb      	strb	r3, [r7, #27]
 8002e90:	e0a8      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002e92:	2308      	movs	r3, #8
 8002e94:	76fb      	strb	r3, [r7, #27]
 8002e96:	e0a5      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002e98:	2310      	movs	r3, #16
 8002e9a:	76fb      	strb	r3, [r7, #27]
 8002e9c:	bf00      	nop
 8002e9e:	e0a1      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a6b      	ldr	r2, [pc, #428]	; (8003054 <UART_SetConfig+0x2f4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d120      	bne.n	8002eec <UART_SetConfig+0x18c>
 8002eaa:	4b68      	ldr	r3, [pc, #416]	; (800304c <UART_SetConfig+0x2ec>)
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d00f      	beq.n	8002ed8 <UART_SetConfig+0x178>
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d802      	bhi.n	8002ec2 <UART_SetConfig+0x162>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <UART_SetConfig+0x16c>
 8002ec0:	e010      	b.n	8002ee4 <UART_SetConfig+0x184>
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d005      	beq.n	8002ed2 <UART_SetConfig+0x172>
 8002ec6:	2b30      	cmp	r3, #48	; 0x30
 8002ec8:	d009      	beq.n	8002ede <UART_SetConfig+0x17e>
 8002eca:	e00b      	b.n	8002ee4 <UART_SetConfig+0x184>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	76fb      	strb	r3, [r7, #27]
 8002ed0:	e088      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	76fb      	strb	r3, [r7, #27]
 8002ed6:	e085      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002ed8:	2304      	movs	r3, #4
 8002eda:	76fb      	strb	r3, [r7, #27]
 8002edc:	e082      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002ede:	2308      	movs	r3, #8
 8002ee0:	76fb      	strb	r3, [r7, #27]
 8002ee2:	e07f      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	76fb      	strb	r3, [r7, #27]
 8002ee8:	bf00      	nop
 8002eea:	e07b      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a59      	ldr	r2, [pc, #356]	; (8003058 <UART_SetConfig+0x2f8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d120      	bne.n	8002f38 <UART_SetConfig+0x1d8>
 8002ef6:	4b55      	ldr	r3, [pc, #340]	; (800304c <UART_SetConfig+0x2ec>)
 8002ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d00f      	beq.n	8002f24 <UART_SetConfig+0x1c4>
 8002f04:	2b40      	cmp	r3, #64	; 0x40
 8002f06:	d802      	bhi.n	8002f0e <UART_SetConfig+0x1ae>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <UART_SetConfig+0x1b8>
 8002f0c:	e010      	b.n	8002f30 <UART_SetConfig+0x1d0>
 8002f0e:	2b80      	cmp	r3, #128	; 0x80
 8002f10:	d005      	beq.n	8002f1e <UART_SetConfig+0x1be>
 8002f12:	2bc0      	cmp	r3, #192	; 0xc0
 8002f14:	d009      	beq.n	8002f2a <UART_SetConfig+0x1ca>
 8002f16:	e00b      	b.n	8002f30 <UART_SetConfig+0x1d0>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	76fb      	strb	r3, [r7, #27]
 8002f1c:	e062      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	76fb      	strb	r3, [r7, #27]
 8002f22:	e05f      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002f24:	2304      	movs	r3, #4
 8002f26:	76fb      	strb	r3, [r7, #27]
 8002f28:	e05c      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002f2a:	2308      	movs	r3, #8
 8002f2c:	76fb      	strb	r3, [r7, #27]
 8002f2e:	e059      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002f30:	2310      	movs	r3, #16
 8002f32:	76fb      	strb	r3, [r7, #27]
 8002f34:	bf00      	nop
 8002f36:	e055      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a47      	ldr	r2, [pc, #284]	; (800305c <UART_SetConfig+0x2fc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d124      	bne.n	8002f8c <UART_SetConfig+0x22c>
 8002f42:	4b42      	ldr	r3, [pc, #264]	; (800304c <UART_SetConfig+0x2ec>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f50:	d012      	beq.n	8002f78 <UART_SetConfig+0x218>
 8002f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f56:	d802      	bhi.n	8002f5e <UART_SetConfig+0x1fe>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <UART_SetConfig+0x20c>
 8002f5c:	e012      	b.n	8002f84 <UART_SetConfig+0x224>
 8002f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f62:	d006      	beq.n	8002f72 <UART_SetConfig+0x212>
 8002f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f68:	d009      	beq.n	8002f7e <UART_SetConfig+0x21e>
 8002f6a:	e00b      	b.n	8002f84 <UART_SetConfig+0x224>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e038      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002f72:	2302      	movs	r3, #2
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e035      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e032      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002f7e:	2308      	movs	r3, #8
 8002f80:	76fb      	strb	r3, [r7, #27]
 8002f82:	e02f      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002f84:	2310      	movs	r3, #16
 8002f86:	76fb      	strb	r3, [r7, #27]
 8002f88:	bf00      	nop
 8002f8a:	e02b      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a2c      	ldr	r2, [pc, #176]	; (8003044 <UART_SetConfig+0x2e4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d124      	bne.n	8002fe0 <UART_SetConfig+0x280>
 8002f96:	4b2d      	ldr	r3, [pc, #180]	; (800304c <UART_SetConfig+0x2ec>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa4:	d012      	beq.n	8002fcc <UART_SetConfig+0x26c>
 8002fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002faa:	d802      	bhi.n	8002fb2 <UART_SetConfig+0x252>
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <UART_SetConfig+0x260>
 8002fb0:	e012      	b.n	8002fd8 <UART_SetConfig+0x278>
 8002fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb6:	d006      	beq.n	8002fc6 <UART_SetConfig+0x266>
 8002fb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fbc:	d009      	beq.n	8002fd2 <UART_SetConfig+0x272>
 8002fbe:	e00b      	b.n	8002fd8 <UART_SetConfig+0x278>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	76fb      	strb	r3, [r7, #27]
 8002fc4:	e00e      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	76fb      	strb	r3, [r7, #27]
 8002fca:	e00b      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002fcc:	2304      	movs	r3, #4
 8002fce:	76fb      	strb	r3, [r7, #27]
 8002fd0:	e008      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	76fb      	strb	r3, [r7, #27]
 8002fd6:	e005      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	76fb      	strb	r3, [r7, #27]
 8002fdc:	bf00      	nop
 8002fde:	e001      	b.n	8002fe4 <UART_SetConfig+0x284>
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a16      	ldr	r2, [pc, #88]	; (8003044 <UART_SetConfig+0x2e4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	f040 8080 	bne.w	80030f0 <UART_SetConfig+0x390>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ff0:	7efb      	ldrb	r3, [r7, #27]
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d836      	bhi.n	8003064 <UART_SetConfig+0x304>
 8002ff6:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <UART_SetConfig+0x29c>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	08003021 	.word	0x08003021
 8003000:	08003065 	.word	0x08003065
 8003004:	08003029 	.word	0x08003029
 8003008:	08003065 	.word	0x08003065
 800300c:	0800302f 	.word	0x0800302f
 8003010:	08003065 	.word	0x08003065
 8003014:	08003065 	.word	0x08003065
 8003018:	08003065 	.word	0x08003065
 800301c:	08003037 	.word	0x08003037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003020:	f7fe fd7c 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8003024:	6178      	str	r0, [r7, #20]
        break;
 8003026:	e022      	b.n	800306e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003028:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <UART_SetConfig+0x300>)
 800302a:	617b      	str	r3, [r7, #20]
        break;
 800302c:	e01f      	b.n	800306e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800302e:	f7fe fcdf 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 8003032:	6178      	str	r0, [r7, #20]
        break;
 8003034:	e01b      	b.n	800306e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800303a:	617b      	str	r3, [r7, #20]
        break;
 800303c:	e017      	b.n	800306e <UART_SetConfig+0x30e>
 800303e:	bf00      	nop
 8003040:	efff69f3 	.word	0xefff69f3
 8003044:	40008000 	.word	0x40008000
 8003048:	40013800 	.word	0x40013800
 800304c:	40021000 	.word	0x40021000
 8003050:	40004400 	.word	0x40004400
 8003054:	40004800 	.word	0x40004800
 8003058:	40004c00 	.word	0x40004c00
 800305c:	40005000 	.word	0x40005000
 8003060:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	76bb      	strb	r3, [r7, #26]
        break;
 800306c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80eb 	beq.w	800324c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	441a      	add	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	429a      	cmp	r2, r3
 8003084:	d805      	bhi.n	8003092 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	429a      	cmp	r2, r3
 8003090:	d202      	bcs.n	8003098 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	76bb      	strb	r3, [r7, #26]
 8003096:	e0d9      	b.n	800324c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	461a      	mov	r2, r3
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	021d      	lsls	r5, r3, #8
 80030a2:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80030a6:	0214      	lsls	r4, r2, #8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	461a      	mov	r2, r3
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	18a0      	adds	r0, r4, r2
 80030b6:	eb45 0103 	adc.w	r1, r5, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f04f 0400 	mov.w	r4, #0
 80030c2:	461a      	mov	r2, r3
 80030c4:	4623      	mov	r3, r4
 80030c6:	f7fd f883 	bl	80001d0 <__aeabi_uldivmod>
 80030ca:	4603      	mov	r3, r0
 80030cc:	460c      	mov	r4, r1
 80030ce:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030d6:	d308      	bcc.n	80030ea <UART_SetConfig+0x38a>
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030de:	d204      	bcs.n	80030ea <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	60da      	str	r2, [r3, #12]
 80030e8:	e0b0      	b.n	800324c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	76bb      	strb	r3, [r7, #26]
 80030ee:	e0ad      	b.n	800324c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f8:	d15c      	bne.n	80031b4 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 80030fa:	7efb      	ldrb	r3, [r7, #27]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d828      	bhi.n	8003152 <UART_SetConfig+0x3f2>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <UART_SetConfig+0x3a8>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	0800312d 	.word	0x0800312d
 800310c:	08003135 	.word	0x08003135
 8003110:	0800313d 	.word	0x0800313d
 8003114:	08003153 	.word	0x08003153
 8003118:	08003143 	.word	0x08003143
 800311c:	08003153 	.word	0x08003153
 8003120:	08003153 	.word	0x08003153
 8003124:	08003153 	.word	0x08003153
 8003128:	0800314b 	.word	0x0800314b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800312c:	f7fe fcf6 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8003130:	6178      	str	r0, [r7, #20]
        break;
 8003132:	e013      	b.n	800315c <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003134:	f7fe fd08 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8003138:	6178      	str	r0, [r7, #20]
        break;
 800313a:	e00f      	b.n	800315c <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800313c:	4b49      	ldr	r3, [pc, #292]	; (8003264 <UART_SetConfig+0x504>)
 800313e:	617b      	str	r3, [r7, #20]
        break;
 8003140:	e00c      	b.n	800315c <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003142:	f7fe fc55 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 8003146:	6178      	str	r0, [r7, #20]
        break;
 8003148:	e008      	b.n	800315c <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800314e:	617b      	str	r3, [r7, #20]
        break;
 8003150:	e004      	b.n	800315c <UART_SetConfig+0x3fc>
      default:
        pclk = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	76bb      	strb	r3, [r7, #26]
        break;
 800315a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d074      	beq.n	800324c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	005a      	lsls	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	441a      	add	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	fbb2 f3f3 	udiv	r3, r2, r3
 8003176:	b29b      	uxth	r3, r3
 8003178:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b0f      	cmp	r3, #15
 800317e:	d916      	bls.n	80031ae <UART_SetConfig+0x44e>
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003186:	d212      	bcs.n	80031ae <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	b29b      	uxth	r3, r3
 800318c:	f023 030f 	bic.w	r3, r3, #15
 8003190:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	b29b      	uxth	r3, r3
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	b29a      	uxth	r2, r3
 800319e:	89fb      	ldrh	r3, [r7, #14]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	89fa      	ldrh	r2, [r7, #14]
 80031aa:	60da      	str	r2, [r3, #12]
 80031ac:	e04e      	b.n	800324c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	76bb      	strb	r3, [r7, #26]
 80031b2:	e04b      	b.n	800324c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031b4:	7efb      	ldrb	r3, [r7, #27]
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d827      	bhi.n	800320a <UART_SetConfig+0x4aa>
 80031ba:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <UART_SetConfig+0x460>)
 80031bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c0:	080031e5 	.word	0x080031e5
 80031c4:	080031ed 	.word	0x080031ed
 80031c8:	080031f5 	.word	0x080031f5
 80031cc:	0800320b 	.word	0x0800320b
 80031d0:	080031fb 	.word	0x080031fb
 80031d4:	0800320b 	.word	0x0800320b
 80031d8:	0800320b 	.word	0x0800320b
 80031dc:	0800320b 	.word	0x0800320b
 80031e0:	08003203 	.word	0x08003203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e4:	f7fe fc9a 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 80031e8:	6178      	str	r0, [r7, #20]
        break;
 80031ea:	e013      	b.n	8003214 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031ec:	f7fe fcac 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 80031f0:	6178      	str	r0, [r7, #20]
        break;
 80031f2:	e00f      	b.n	8003214 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <UART_SetConfig+0x504>)
 80031f6:	617b      	str	r3, [r7, #20]
        break;
 80031f8:	e00c      	b.n	8003214 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031fa:	f7fe fbf9 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 80031fe:	6178      	str	r0, [r7, #20]
        break;
 8003200:	e008      	b.n	8003214 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003206:	617b      	str	r3, [r7, #20]
        break;
 8003208:	e004      	b.n	8003214 <UART_SetConfig+0x4b4>
      default:
        pclk = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	76bb      	strb	r3, [r7, #26]
        break;
 8003212:	bf00      	nop
    }

    if (pclk != 0U)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d018      	beq.n	800324c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	085a      	lsrs	r2, r3, #1
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	441a      	add	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	b29b      	uxth	r3, r3
 800322e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b0f      	cmp	r3, #15
 8003234:	d908      	bls.n	8003248 <UART_SetConfig+0x4e8>
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323c:	d204      	bcs.n	8003248 <UART_SetConfig+0x4e8>
      {
        huart->Instance->BRR = usartdiv;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e001      	b.n	800324c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003258:	7ebb      	ldrb	r3, [r7, #26]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3720      	adds	r7, #32
 800325e:	46bd      	mov	sp, r7
 8003260:	bdb0      	pop	{r4, r5, r7, pc}
 8003262:	bf00      	nop
 8003264:	00f42400 	.word	0x00f42400

08003268 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	6852      	ldr	r2, [r2, #4]
 8003286:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	6852      	ldr	r2, [r2, #4]
 80032a8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032b0:	430a      	orrs	r2, r1
 80032b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	6852      	ldr	r2, [r2, #4]
 80032ca:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6812      	ldr	r2, [r2, #0]
 80032ea:	6852      	ldr	r2, [r2, #4]
 80032ec:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	6892      	ldr	r2, [r2, #8]
 800330e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003316:	430a      	orrs	r2, r1
 8003318:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	6892      	ldr	r2, [r2, #8]
 8003330:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003338:	430a      	orrs	r2, r1
 800333a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01a      	beq.n	800337e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	6852      	ldr	r2, [r2, #4]
 8003352:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003366:	d10a      	bne.n	800337e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	6852      	ldr	r2, [r2, #4]
 8003372:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	6852      	ldr	r2, [r2, #4]
 8003394:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  }
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033bc:	f7fd fb58 	bl	8000a70 <HAL_GetTick>
 80033c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d10e      	bne.n	80033ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f82d 	bl	800343e <UART_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e023      	b.n	8003436 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d10e      	bne.n	800341a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f817 	bl	800343e <UART_WaitOnFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e00d      	b.n	8003436 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	603b      	str	r3, [r7, #0]
 800344a:	4613      	mov	r3, r2
 800344c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800344e:	e05e      	b.n	800350e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003456:	d05a      	beq.n	800350e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003458:	f7fd fb0a 	bl	8000a70 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	1ad2      	subs	r2, r2, r3
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	429a      	cmp	r2, r3
 8003466:	d802      	bhi.n	800346e <UART_WaitOnFlagUntilTimeout+0x30>
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d11b      	bne.n	80034a6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800347c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	6892      	ldr	r2, [r2, #8]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2220      	movs	r2, #32
 8003492:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e043      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d02c      	beq.n	800350e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c2:	d124      	bne.n	800350e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034cc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034dc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	6892      	ldr	r2, [r2, #8]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e00f      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	401a      	ands	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	bf0c      	ite	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	2300      	movne	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	429a      	cmp	r2, r3
 800352a:	d091      	beq.n	8003450 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003548:	2b84      	cmp	r3, #132	; 0x84
 800354a:	d005      	beq.n	8003558 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800354c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	3303      	adds	r3, #3
 8003556:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003558:	68fb      	ldr	r3, [r7, #12]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800356a:	f000 fec3 	bl	80042f4 <vTaskStartScheduler>
  
  return osOK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	bd80      	pop	{r7, pc}

08003574 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003576:	b089      	sub	sp, #36	; 0x24
 8003578:	af04      	add	r7, sp, #16
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d020      	beq.n	80035c8 <osThreadCreate+0x54>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01c      	beq.n	80035c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685c      	ldr	r4, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681d      	ldr	r5, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691e      	ldr	r6, [r3, #16]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ffc8 	bl	8003536 <makeFreeRtosPriority>
 80035a6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035b0:	9202      	str	r2, [sp, #8]
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	9100      	str	r1, [sp, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	4632      	mov	r2, r6
 80035ba:	4629      	mov	r1, r5
 80035bc:	4620      	mov	r0, r4
 80035be:	f000 fcd5 	bl	8003f6c <xTaskCreateStatic>
 80035c2:	4603      	mov	r3, r0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	e01c      	b.n	8003602 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685c      	ldr	r4, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035d4:	b29e      	uxth	r6, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ffaa 	bl	8003536 <makeFreeRtosPriority>
 80035e2:	4602      	mov	r2, r0
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	9200      	str	r2, [sp, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	4632      	mov	r2, r6
 80035f0:	4629      	mov	r1, r5
 80035f2:	4620      	mov	r0, r4
 80035f4:	f000 fd14 	bl	8004020 <xTaskCreate>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d001      	beq.n	8003602 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	e000      	b.n	8003604 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003602:	68fb      	ldr	r3, [r7, #12]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800360c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <osDelay+0x16>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	e000      	b.n	8003624 <osDelay+0x18>
 8003622:	2301      	movs	r3, #1
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fe31 	bl	800428c <vTaskDelay>
  
  return osOK;
 800362a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f103 0208 	add.w	r2, r3, #8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800364c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f103 0208 	add.w	r2, r3, #8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f103 0208 	add.w	r2, r3, #8
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	601a      	str	r2, [r3, #0]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036ec:	d103      	bne.n	80036f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	e00c      	b.n	8003710 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3308      	adds	r3, #8
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e002      	b.n	8003704 <vListInsert+0x2e>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	429a      	cmp	r2, r3
 800370e:	d9f6      	bls.n	80036fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	601a      	str	r2, [r3, #0]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6892      	ldr	r2, [r2, #8]
 800375e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6852      	ldr	r2, [r2, #4]
 8003768:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	d103      	bne.n	800377c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	1e5a      	subs	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3b04      	subs	r3, #4
 80037ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3b04      	subs	r3, #4
 80037ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f023 0201 	bic.w	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3b04      	subs	r3, #4
 80037ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80037cc:	4a0c      	ldr	r2, [pc, #48]	; (8003800 <pxPortInitialiseStack+0x64>)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	3b14      	subs	r3, #20
 80037d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	3b04      	subs	r3, #4
 80037e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f06f 0202 	mvn.w	r2, #2
 80037ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3b20      	subs	r3, #32
 80037f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80037f2:	68fb      	ldr	r3, [r7, #12]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	08003805 	.word	0x08003805

08003804 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <prvTaskExitError+0x50>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003816:	d009      	beq.n	800382c <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e7fe      	b.n	800382a <prvTaskExitError+0x26>
 800382c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800383e:	bf00      	nop
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0fc      	beq.n	8003840 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	2000000c 	.word	0x2000000c
	...

08003860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <pxCurrentTCBConst2>)
 8003862:	6819      	ldr	r1, [r3, #0]
 8003864:	6808      	ldr	r0, [r1, #0]
 8003866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800386a:	f380 8809 	msr	PSP, r0
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f380 8811 	msr	BASEPRI, r0
 800387a:	4770      	bx	lr
 800387c:	f3af 8000 	nop.w

08003880 <pxCurrentTCBConst2>:
 8003880:	20000e60 	.word	0x20000e60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop

08003888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003888:	4808      	ldr	r0, [pc, #32]	; (80038ac <prvPortStartFirstTask+0x24>)
 800388a:	6800      	ldr	r0, [r0, #0]
 800388c:	6800      	ldr	r0, [r0, #0]
 800388e:	f380 8808 	msr	MSP, r0
 8003892:	f04f 0000 	mov.w	r0, #0
 8003896:	f380 8814 	msr	CONTROL, r0
 800389a:	b662      	cpsie	i
 800389c:	b661      	cpsie	f
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	df00      	svc	0
 80038a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80038aa:	bf00      	nop
 80038ac:	e000ed08 	.word	0xe000ed08

080038b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80038b6:	4b44      	ldr	r3, [pc, #272]	; (80039c8 <xPortStartScheduler+0x118>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a44      	ldr	r2, [pc, #272]	; (80039cc <xPortStartScheduler+0x11c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d109      	bne.n	80038d4 <xPortStartScheduler+0x24>
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	e7fe      	b.n	80038d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80038d4:	4b3c      	ldr	r3, [pc, #240]	; (80039c8 <xPortStartScheduler+0x118>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a3d      	ldr	r2, [pc, #244]	; (80039d0 <xPortStartScheduler+0x120>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d109      	bne.n	80038f2 <xPortStartScheduler+0x42>
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e7fe      	b.n	80038f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80038f2:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <xPortStartScheduler+0x124>)
 80038f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	22ff      	movs	r2, #255	; 0xff
 8003902:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <xPortStartScheduler+0x128>)
 8003918:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800391a:	4b30      	ldr	r3, [pc, #192]	; (80039dc <xPortStartScheduler+0x12c>)
 800391c:	2207      	movs	r2, #7
 800391e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003920:	e009      	b.n	8003936 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003922:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <xPortStartScheduler+0x12c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3b01      	subs	r3, #1
 8003928:	4a2c      	ldr	r2, [pc, #176]	; (80039dc <xPortStartScheduler+0x12c>)
 800392a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	b2db      	uxtb	r3, r3
 8003934:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393e:	2b80      	cmp	r3, #128	; 0x80
 8003940:	d0ef      	beq.n	8003922 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003942:	4b26      	ldr	r3, [pc, #152]	; (80039dc <xPortStartScheduler+0x12c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f1c3 0307 	rsb	r3, r3, #7
 800394a:	2b04      	cmp	r3, #4
 800394c:	d009      	beq.n	8003962 <xPortStartScheduler+0xb2>
 800394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	e7fe      	b.n	8003960 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003962:	4b1e      	ldr	r3, [pc, #120]	; (80039dc <xPortStartScheduler+0x12c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <xPortStartScheduler+0x12c>)
 800396a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <xPortStartScheduler+0x12c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003974:	4a19      	ldr	r2, [pc, #100]	; (80039dc <xPortStartScheduler+0x12c>)
 8003976:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003980:	4a17      	ldr	r2, [pc, #92]	; (80039e0 <xPortStartScheduler+0x130>)
 8003982:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <xPortStartScheduler+0x130>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800398a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800398c:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <xPortStartScheduler+0x130>)
 800398e:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <xPortStartScheduler+0x130>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003996:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003998:	f000 f8d6 	bl	8003b48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <xPortStartScheduler+0x134>)
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80039a2:	f000 f8f5 	bl	8003b90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80039a6:	4a10      	ldr	r2, [pc, #64]	; (80039e8 <xPortStartScheduler+0x138>)
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <xPortStartScheduler+0x138>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80039b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80039b2:	f7ff ff69 	bl	8003888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80039b6:	f000 fe5d 	bl	8004674 <vTaskSwitchContext>
	prvTaskExitError();
 80039ba:	f7ff ff23 	bl	8003804 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	e000ed00 	.word	0xe000ed00
 80039cc:	410fc271 	.word	0x410fc271
 80039d0:	410fc270 	.word	0x410fc270
 80039d4:	e000e400 	.word	0xe000e400
 80039d8:	20000280 	.word	0x20000280
 80039dc:	20000284 	.word	0x20000284
 80039e0:	e000ed20 	.word	0xe000ed20
 80039e4:	2000000c 	.word	0x2000000c
 80039e8:	e000ef34 	.word	0xe000ef34

080039ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a04:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <vPortEnterCritical+0x54>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	4a0d      	ldr	r2, [pc, #52]	; (8003a40 <vPortEnterCritical+0x54>)
 8003a0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <vPortEnterCritical+0x54>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d10e      	bne.n	8003a34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <vPortEnterCritical+0x58>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d009      	beq.n	8003a34 <vPortEnterCritical+0x48>
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	e7fe      	b.n	8003a32 <vPortEnterCritical+0x46>
	}
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	2000000c 	.word	0x2000000c
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <vPortExitCritical+0x4c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <vPortExitCritical+0x22>
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	607b      	str	r3, [r7, #4]
 8003a68:	e7fe      	b.n	8003a68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <vPortExitCritical+0x4c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	4a08      	ldr	r2, [pc, #32]	; (8003a94 <vPortExitCritical+0x4c>)
 8003a72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a74:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <vPortExitCritical+0x4c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d104      	bne.n	8003a86 <vPortExitCritical+0x3e>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	2000000c 	.word	0x2000000c
	...

08003aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003aa0:	f3ef 8009 	mrs	r0, PSP
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <pxCurrentTCBConst>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	f01e 0f10 	tst.w	lr, #16
 8003ab0:	bf08      	it	eq
 8003ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aba:	6010      	str	r0, [r2, #0]
 8003abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ac4:	f380 8811 	msr	BASEPRI, r0
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f000 fdd0 	bl	8004674 <vTaskSwitchContext>
 8003ad4:	f04f 0000 	mov.w	r0, #0
 8003ad8:	f380 8811 	msr	BASEPRI, r0
 8003adc:	bc09      	pop	{r0, r3}
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	6808      	ldr	r0, [r1, #0]
 8003ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae6:	f01e 0f10 	tst.w	lr, #16
 8003aea:	bf08      	it	eq
 8003aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003af0:	f380 8809 	msr	PSP, r0
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	f3af 8000 	nop.w

08003b00 <pxCurrentTCBConst>:
 8003b00:	20000e60 	.word	0x20000e60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop

08003b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b20:	f000 fcf0 	bl	8004504 <xTaskIncrementTick>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <SysTick_Handler+0x3c>)
 8003b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	e000ed04 	.word	0xe000ed04

08003b48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <vPortSetupTimerInterrupt+0x34>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b52:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <vPortSetupTimerInterrupt+0x38>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <vPortSetupTimerInterrupt+0x3c>)
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <vPortSetupTimerInterrupt+0x40>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	490b      	ldr	r1, [pc, #44]	; (8003b8c <vPortSetupTimerInterrupt+0x44>)
 8003b60:	fba1 1303 	umull	r1, r3, r1, r3
 8003b64:	099b      	lsrs	r3, r3, #6
 8003b66:	3b01      	subs	r3, #1
 8003b68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b6a:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <vPortSetupTimerInterrupt+0x34>)
 8003b6c:	2207      	movs	r2, #7
 8003b6e:	601a      	str	r2, [r3, #0]
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	e000e010 	.word	0xe000e010
 8003b80:	e000e018 	.word	0xe000e018
 8003b84:	e000e014 	.word	0xe000e014
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	10624dd3 	.word	0x10624dd3

08003b90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003ba0 <vPortEnableVFP+0x10>
 8003b94:	6801      	ldr	r1, [r0, #0]
 8003b96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b9a:	6001      	str	r1, [r0, #0]
 8003b9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003b9e:	bf00      	nop
 8003ba0:	e000ed88 	.word	0xe000ed88

08003ba4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003bb0:	f000 fbfe 	bl	80043b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003bb4:	4b59      	ldr	r3, [pc, #356]	; (8003d1c <pvPortMalloc+0x178>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003bbc:	f000 f91a 	bl	8003df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003bc0:	4b57      	ldr	r3, [pc, #348]	; (8003d20 <pvPortMalloc+0x17c>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f040 8091 	bne.w	8003cf0 <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01c      	beq.n	8003c0e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d013      	beq.n	8003c0e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f023 0307 	bic.w	r3, r3, #7
 8003bec:	3308      	adds	r3, #8
 8003bee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <pvPortMalloc+0x6a>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e7fe      	b.n	8003c0c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d06d      	beq.n	8003cf0 <pvPortMalloc+0x14c>
 8003c14:	4b43      	ldr	r3, [pc, #268]	; (8003d24 <pvPortMalloc+0x180>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d868      	bhi.n	8003cf0 <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c1e:	4b42      	ldr	r3, [pc, #264]	; (8003d28 <pvPortMalloc+0x184>)
 8003c20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c22:	4b41      	ldr	r3, [pc, #260]	; (8003d28 <pvPortMalloc+0x184>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c28:	e004      	b.n	8003c34 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d203      	bcs.n	8003c46 <pvPortMalloc+0xa2>
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f1      	bne.n	8003c2a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c46:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <pvPortMalloc+0x178>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d04f      	beq.n	8003cf0 <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2208      	movs	r2, #8
 8003c56:	4413      	add	r3, r2
 8003c58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	1ad2      	subs	r2, r2, r3
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d91e      	bls.n	8003cb0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4413      	add	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d009      	beq.n	8003c98 <pvPortMalloc+0xf4>
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	e7fe      	b.n	8003c96 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	1ad2      	subs	r2, r2, r3
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003caa:	69b8      	ldr	r0, [r7, #24]
 8003cac:	f000 f904 	bl	8003eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cb0:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <pvPortMalloc+0x180>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	4a1a      	ldr	r2, [pc, #104]	; (8003d24 <pvPortMalloc+0x180>)
 8003cbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003cbe:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <pvPortMalloc+0x180>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <pvPortMalloc+0x188>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d203      	bcs.n	8003cd2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003cca:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <pvPortMalloc+0x180>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <pvPortMalloc+0x188>)
 8003cd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <pvPortMalloc+0x17c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <pvPortMalloc+0x18c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3301      	adds	r3, #1
 8003cec:	4a10      	ldr	r2, [pc, #64]	; (8003d30 <pvPortMalloc+0x18c>)
 8003cee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003cf0:	f000 fb6c 	bl	80043cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <pvPortMalloc+0x16e>
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e7fe      	b.n	8003d10 <pvPortMalloc+0x16c>
	return pvReturn;
 8003d12:	69fb      	ldr	r3, [r7, #28]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3728      	adds	r7, #40	; 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000e48 	.word	0x20000e48
 8003d20:	20000e5c 	.word	0x20000e5c
 8003d24:	20000e4c 	.word	0x20000e4c
 8003d28:	20000e40 	.word	0x20000e40
 8003d2c:	20000e50 	.word	0x20000e50
 8003d30:	20000e54 	.word	0x20000e54

08003d34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d04b      	beq.n	8003dde <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d46:	2308      	movs	r3, #8
 8003d48:	425b      	negs	r3, r3
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <vPortFree+0xb4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <vPortFree+0x42>
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	e7fe      	b.n	8003d74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <vPortFree+0x5e>
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	e7fe      	b.n	8003d90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <vPortFree+0xb4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01e      	beq.n	8003dde <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d11a      	bne.n	8003dde <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <vPortFree+0xb4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	401a      	ands	r2, r3
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003db8:	f000 fafa 	bl	80043b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <vPortFree+0xb8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	4a09      	ldr	r2, [pc, #36]	; (8003dec <vPortFree+0xb8>)
 8003dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003dca:	6938      	ldr	r0, [r7, #16]
 8003dcc:	f000 f874 	bl	8003eb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003dd0:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <vPortFree+0xbc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	4a06      	ldr	r2, [pc, #24]	; (8003df0 <vPortFree+0xbc>)
 8003dd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003dda:	f000 faf7 	bl	80043cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003dde:	bf00      	nop
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000e5c 	.word	0x20000e5c
 8003dec:	20000e4c 	.word	0x20000e4c
 8003df0:	20000e58 	.word	0x20000e58

08003df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003dfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e00:	4b27      	ldr	r3, [pc, #156]	; (8003ea0 <prvHeapInit+0xac>)
 8003e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00c      	beq.n	8003e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3307      	adds	r3, #7
 8003e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0307 	bic.w	r3, r3, #7
 8003e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	4a1f      	ldr	r2, [pc, #124]	; (8003ea0 <prvHeapInit+0xac>)
 8003e24:	4413      	add	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <prvHeapInit+0xb0>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e32:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <prvHeapInit+0xb0>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e40:	2208      	movs	r2, #8
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0307 	bic.w	r3, r3, #7
 8003e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <prvHeapInit+0xb4>)
 8003e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003e56:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <prvHeapInit+0xb4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e5e:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <prvHeapInit+0xb4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	1ad2      	subs	r2, r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <prvHeapInit+0xb4>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <prvHeapInit+0xb8>)
 8003e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <prvHeapInit+0xbc>)
 8003e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e8c:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <prvHeapInit+0xc0>)
 8003e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e92:	601a      	str	r2, [r3, #0]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	20000288 	.word	0x20000288
 8003ea4:	20000e40 	.word	0x20000e40
 8003ea8:	20000e48 	.word	0x20000e48
 8003eac:	20000e50 	.word	0x20000e50
 8003eb0:	20000e4c 	.word	0x20000e4c
 8003eb4:	20000e5c 	.word	0x20000e5c

08003eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ec0:	4b28      	ldr	r3, [pc, #160]	; (8003f64 <prvInsertBlockIntoFreeList+0xac>)
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e002      	b.n	8003ecc <prvInsertBlockIntoFreeList+0x14>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d3f7      	bcc.n	8003ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	441a      	add	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d108      	bne.n	8003efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	441a      	add	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	441a      	add	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d118      	bne.n	8003f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <prvInsertBlockIntoFreeList+0xb0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d00d      	beq.n	8003f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	441a      	add	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	e008      	b.n	8003f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f36:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <prvInsertBlockIntoFreeList+0xb0>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e003      	b.n	8003f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d002      	beq.n	8003f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000e40 	.word	0x20000e40
 8003f68:	20000e48 	.word	0x20000e48

08003f6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08e      	sub	sp, #56	; 0x38
 8003f70:	af04      	add	r7, sp, #16
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d109      	bne.n	8003f94 <xTaskCreateStatic+0x28>
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	623b      	str	r3, [r7, #32]
 8003f92:	e7fe      	b.n	8003f92 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <xTaskCreateStatic+0x42>
 8003f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	e7fe      	b.n	8003fac <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fae:	2354      	movs	r3, #84	; 0x54
 8003fb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b54      	cmp	r3, #84	; 0x54
 8003fb6:	d009      	beq.n	8003fcc <xTaskCreateStatic+0x60>
 8003fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	e7fe      	b.n	8003fca <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003fcc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01e      	beq.n	8004012 <xTaskCreateStatic+0xa6>
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01b      	beq.n	8004012 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fec:	2300      	movs	r3, #0
 8003fee:	9303      	str	r3, [sp, #12]
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	9302      	str	r3, [sp, #8]
 8003ff4:	f107 0314 	add.w	r3, r7, #20
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f850 	bl	80040aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800400a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800400c:	f000 f8d4 	bl	80041b8 <prvAddNewTaskToReadyList>
 8004010:	e001      	b.n	8004016 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004016:	697b      	ldr	r3, [r7, #20]
	}
 8004018:	4618      	mov	r0, r3
 800401a:	3728      	adds	r7, #40	; 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08c      	sub	sp, #48	; 0x30
 8004024:	af04      	add	r7, sp, #16
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	4613      	mov	r3, r2
 800402e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fdb5 	bl	8003ba4 <pvPortMalloc>
 800403a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00e      	beq.n	8004060 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004042:	2054      	movs	r0, #84	; 0x54
 8004044:	f7ff fdae 	bl	8003ba4 <pvPortMalloc>
 8004048:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	631a      	str	r2, [r3, #48]	; 0x30
 8004056:	e005      	b.n	8004064 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004058:	6978      	ldr	r0, [r7, #20]
 800405a:	f7ff fe6b 	bl	8003d34 <vPortFree>
 800405e:	e001      	b.n	8004064 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004060:	2300      	movs	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d017      	beq.n	800409a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004072:	88fa      	ldrh	r2, [r7, #6]
 8004074:	2300      	movs	r3, #0
 8004076:	9303      	str	r3, [sp, #12]
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	9302      	str	r3, [sp, #8]
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f80e 	bl	80040aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800408e:	69f8      	ldr	r0, [r7, #28]
 8004090:	f000 f892 	bl	80041b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004094:	2301      	movs	r3, #1
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	e002      	b.n	80040a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800409a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800409e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040a0:	69bb      	ldr	r3, [r7, #24]
	}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b088      	sub	sp, #32
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
 80040b6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040c2:	3b01      	subs	r3, #1
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f023 0307 	bic.w	r3, r3, #7
 80040d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d009      	beq.n	80040f0 <prvInitialiseNewTask+0x46>
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e7fe      	b.n	80040ee <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01f      	beq.n	8004136 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	e012      	b.n	8004122 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4413      	add	r3, r2
 8004102:	7819      	ldrb	r1, [r3, #0]
 8004104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	4413      	add	r3, r2
 800410a:	3334      	adds	r3, #52	; 0x34
 800410c:	460a      	mov	r2, r1
 800410e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	4413      	add	r3, r2
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d006      	beq.n	800412a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	3301      	adds	r3, #1
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	2b0f      	cmp	r3, #15
 8004126:	d9e9      	bls.n	80040fc <prvInitialiseNewTask+0x52>
 8004128:	e000      	b.n	800412c <prvInitialiseNewTask+0x82>
			{
				break;
 800412a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004134:	e003      	b.n	800413e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	2b06      	cmp	r3, #6
 8004142:	d901      	bls.n	8004148 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004144:	2306      	movs	r3, #6
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800414c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004152:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	2200      	movs	r2, #0
 8004158:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415c:	3304      	adds	r3, #4
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fa88 	bl	8003674 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	3318      	adds	r3, #24
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fa83 	bl	8003674 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004172:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	f1c3 0207 	rsb	r2, r3, #7
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004182:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	2200      	movs	r2, #0
 8004188:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	68f9      	ldr	r1, [r7, #12]
 8004196:	69b8      	ldr	r0, [r7, #24]
 8004198:	f7ff fb00 	bl	800379c <pxPortInitialiseStack>
 800419c:	4602      	mov	r2, r0
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041ae:	bf00      	nop
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041c0:	f7ff fc14 	bl	80039ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041c4:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <prvAddNewTaskToReadyList+0xb8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3301      	adds	r3, #1
 80041ca:	4a29      	ldr	r2, [pc, #164]	; (8004270 <prvAddNewTaskToReadyList+0xb8>)
 80041cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041ce:	4b29      	ldr	r3, [pc, #164]	; (8004274 <prvAddNewTaskToReadyList+0xbc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041d6:	4a27      	ldr	r2, [pc, #156]	; (8004274 <prvAddNewTaskToReadyList+0xbc>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041dc:	4b24      	ldr	r3, [pc, #144]	; (8004270 <prvAddNewTaskToReadyList+0xb8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d110      	bne.n	8004206 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041e4:	f000 fab8 	bl	8004758 <prvInitialiseTaskLists>
 80041e8:	e00d      	b.n	8004206 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041ea:	4b23      	ldr	r3, [pc, #140]	; (8004278 <prvAddNewTaskToReadyList+0xc0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041f2:	4b20      	ldr	r3, [pc, #128]	; (8004274 <prvAddNewTaskToReadyList+0xbc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d802      	bhi.n	8004206 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004200:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <prvAddNewTaskToReadyList+0xbc>)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004206:	4b1d      	ldr	r3, [pc, #116]	; (800427c <prvAddNewTaskToReadyList+0xc4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3301      	adds	r3, #1
 800420c:	4a1b      	ldr	r2, [pc, #108]	; (800427c <prvAddNewTaskToReadyList+0xc4>)
 800420e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	2201      	movs	r2, #1
 8004216:	409a      	lsls	r2, r3
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <prvAddNewTaskToReadyList+0xc8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4313      	orrs	r3, r2
 800421e:	4a18      	ldr	r2, [pc, #96]	; (8004280 <prvAddNewTaskToReadyList+0xc8>)
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4a15      	ldr	r2, [pc, #84]	; (8004284 <prvAddNewTaskToReadyList+0xcc>)
 8004230:	441a      	add	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	4619      	mov	r1, r3
 8004238:	4610      	mov	r0, r2
 800423a:	f7ff fa28 	bl	800368e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800423e:	f7ff fc03 	bl	8003a48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004242:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <prvAddNewTaskToReadyList+0xc0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00e      	beq.n	8004268 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <prvAddNewTaskToReadyList+0xbc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	429a      	cmp	r2, r3
 8004256:	d207      	bcs.n	8004268 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <prvAddNewTaskToReadyList+0xd0>)
 800425a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000f60 	.word	0x20000f60
 8004274:	20000e60 	.word	0x20000e60
 8004278:	20000f6c 	.word	0x20000f6c
 800427c:	20000f7c 	.word	0x20000f7c
 8004280:	20000f68 	.word	0x20000f68
 8004284:	20000e64 	.word	0x20000e64
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d016      	beq.n	80042cc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800429e:	4b13      	ldr	r3, [pc, #76]	; (80042ec <vTaskDelay+0x60>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <vTaskDelay+0x2e>
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	60bb      	str	r3, [r7, #8]
 80042b8:	e7fe      	b.n	80042b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80042ba:	f000 f879 	bl	80043b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042be:	2100      	movs	r1, #0
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fb03 	bl	80048cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042c6:	f000 f881 	bl	80043cc <xTaskResumeAll>
 80042ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <vTaskDelay+0x64>)
 80042d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000f88 	.word	0x20000f88
 80042f0:	e000ed04 	.word	0xe000ed04

080042f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	; 0x28
 80042f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004302:	463a      	mov	r2, r7
 8004304:	1d39      	adds	r1, r7, #4
 8004306:	f107 0308 	add.w	r3, r7, #8
 800430a:	4618      	mov	r0, r3
 800430c:	f7fc f8e8 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004310:	6839      	ldr	r1, [r7, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	9202      	str	r2, [sp, #8]
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	2300      	movs	r3, #0
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	2300      	movs	r3, #0
 8004320:	460a      	mov	r2, r1
 8004322:	491d      	ldr	r1, [pc, #116]	; (8004398 <vTaskStartScheduler+0xa4>)
 8004324:	481d      	ldr	r0, [pc, #116]	; (800439c <vTaskStartScheduler+0xa8>)
 8004326:	f7ff fe21 	bl	8003f6c <xTaskCreateStatic>
 800432a:	4602      	mov	r2, r0
 800432c:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <vTaskStartScheduler+0xac>)
 800432e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004330:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <vTaskStartScheduler+0xac>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004338:	2301      	movs	r3, #1
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e001      	b.n	8004342 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d115      	bne.n	8004374 <vTaskStartScheduler+0x80>
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	613b      	str	r3, [r7, #16]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800435a:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <vTaskStartScheduler+0xb0>)
 800435c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004360:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004362:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <vTaskStartScheduler+0xb4>)
 8004364:	2201      	movs	r2, #1
 8004366:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004368:	4b10      	ldr	r3, [pc, #64]	; (80043ac <vTaskStartScheduler+0xb8>)
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800436e:	f7ff fa9f 	bl	80038b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004372:	e00d      	b.n	8004390 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800437a:	d109      	bne.n	8004390 <vTaskStartScheduler+0x9c>
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	e7fe      	b.n	800438e <vTaskStartScheduler+0x9a>
}
 8004390:	bf00      	nop
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	08004b0c 	.word	0x08004b0c
 800439c:	08004729 	.word	0x08004729
 80043a0:	20000f84 	.word	0x20000f84
 80043a4:	20000f80 	.word	0x20000f80
 80043a8:	20000f6c 	.word	0x20000f6c
 80043ac:	20000f64 	.word	0x20000f64

080043b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <vTaskSuspendAll+0x18>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	4a03      	ldr	r2, [pc, #12]	; (80043c8 <vTaskSuspendAll+0x18>)
 80043bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043be:	bf00      	nop
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	20000f88 	.word	0x20000f88

080043cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043da:	4b41      	ldr	r3, [pc, #260]	; (80044e0 <xTaskResumeAll+0x114>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <xTaskResumeAll+0x2a>
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	e7fe      	b.n	80043f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043f6:	f7ff faf9 	bl	80039ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043fa:	4b39      	ldr	r3, [pc, #228]	; (80044e0 <xTaskResumeAll+0x114>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3b01      	subs	r3, #1
 8004400:	4a37      	ldr	r2, [pc, #220]	; (80044e0 <xTaskResumeAll+0x114>)
 8004402:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004404:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <xTaskResumeAll+0x114>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d161      	bne.n	80044d0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800440c:	4b35      	ldr	r3, [pc, #212]	; (80044e4 <xTaskResumeAll+0x118>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d05d      	beq.n	80044d0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004414:	e02e      	b.n	8004474 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004416:	4b34      	ldr	r3, [pc, #208]	; (80044e8 <xTaskResumeAll+0x11c>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3318      	adds	r3, #24
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff f990 	bl	8003748 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3304      	adds	r3, #4
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff f98b 	bl	8003748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	2201      	movs	r2, #1
 8004438:	409a      	lsls	r2, r3
 800443a:	4b2c      	ldr	r3, [pc, #176]	; (80044ec <xTaskResumeAll+0x120>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4313      	orrs	r3, r2
 8004440:	4a2a      	ldr	r2, [pc, #168]	; (80044ec <xTaskResumeAll+0x120>)
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4a27      	ldr	r2, [pc, #156]	; (80044f0 <xTaskResumeAll+0x124>)
 8004452:	441a      	add	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f7ff f917 	bl	800368e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004464:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <xTaskResumeAll+0x128>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	429a      	cmp	r2, r3
 800446c:	d302      	bcc.n	8004474 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800446e:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <xTaskResumeAll+0x12c>)
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004474:	4b1c      	ldr	r3, [pc, #112]	; (80044e8 <xTaskResumeAll+0x11c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1cc      	bne.n	8004416 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004482:	f000 fa03 	bl	800488c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004486:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <xTaskResumeAll+0x130>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d010      	beq.n	80044b4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004492:	f000 f837 	bl	8004504 <xTaskIncrementTick>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800449c:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <xTaskResumeAll+0x12c>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f1      	bne.n	8004492 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <xTaskResumeAll+0x130>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044b4:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <xTaskResumeAll+0x12c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044bc:	2301      	movs	r3, #1
 80044be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <xTaskResumeAll+0x134>)
 80044c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044d0:	f7ff faba 	bl	8003a48 <vPortExitCritical>

	return xAlreadyYielded;
 80044d4:	68bb      	ldr	r3, [r7, #8]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000f88 	.word	0x20000f88
 80044e4:	20000f60 	.word	0x20000f60
 80044e8:	20000f20 	.word	0x20000f20
 80044ec:	20000f68 	.word	0x20000f68
 80044f0:	20000e64 	.word	0x20000e64
 80044f4:	20000e60 	.word	0x20000e60
 80044f8:	20000f74 	.word	0x20000f74
 80044fc:	20000f70 	.word	0x20000f70
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800450e:	4b4e      	ldr	r3, [pc, #312]	; (8004648 <xTaskIncrementTick+0x144>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f040 808d 	bne.w	8004632 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004518:	4b4c      	ldr	r3, [pc, #304]	; (800464c <xTaskIncrementTick+0x148>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004520:	4a4a      	ldr	r2, [pc, #296]	; (800464c <xTaskIncrementTick+0x148>)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d11f      	bne.n	800456c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800452c:	4b48      	ldr	r3, [pc, #288]	; (8004650 <xTaskIncrementTick+0x14c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <xTaskIncrementTick+0x46>
 8004536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	e7fe      	b.n	8004548 <xTaskIncrementTick+0x44>
 800454a:	4b41      	ldr	r3, [pc, #260]	; (8004650 <xTaskIncrementTick+0x14c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	4b40      	ldr	r3, [pc, #256]	; (8004654 <xTaskIncrementTick+0x150>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a3e      	ldr	r2, [pc, #248]	; (8004650 <xTaskIncrementTick+0x14c>)
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4a3e      	ldr	r2, [pc, #248]	; (8004654 <xTaskIncrementTick+0x150>)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b3e      	ldr	r3, [pc, #248]	; (8004658 <xTaskIncrementTick+0x154>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	4a3c      	ldr	r2, [pc, #240]	; (8004658 <xTaskIncrementTick+0x154>)
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	f000 f990 	bl	800488c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800456c:	4b3b      	ldr	r3, [pc, #236]	; (800465c <xTaskIncrementTick+0x158>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	429a      	cmp	r2, r3
 8004574:	d348      	bcc.n	8004608 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004576:	4b36      	ldr	r3, [pc, #216]	; (8004650 <xTaskIncrementTick+0x14c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004580:	4b36      	ldr	r3, [pc, #216]	; (800465c <xTaskIncrementTick+0x158>)
 8004582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004586:	601a      	str	r2, [r3, #0]
					break;
 8004588:	e03e      	b.n	8004608 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800458a:	4b31      	ldr	r3, [pc, #196]	; (8004650 <xTaskIncrementTick+0x14c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d203      	bcs.n	80045aa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045a2:	4a2e      	ldr	r2, [pc, #184]	; (800465c <xTaskIncrementTick+0x158>)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045a8:	e02e      	b.n	8004608 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff f8ca 	bl	8003748 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d004      	beq.n	80045c6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	3318      	adds	r3, #24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff f8c1 	bl	8003748 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	2201      	movs	r2, #1
 80045cc:	409a      	lsls	r2, r3
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <xTaskIncrementTick+0x15c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	4a22      	ldr	r2, [pc, #136]	; (8004660 <xTaskIncrementTick+0x15c>)
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <xTaskIncrementTick+0x160>)
 80045e6:	441a      	add	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f7ff f84d 	bl	800368e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f8:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <xTaskIncrementTick+0x164>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	429a      	cmp	r2, r3
 8004600:	d3b9      	bcc.n	8004576 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004602:	2301      	movs	r3, #1
 8004604:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004606:	e7b6      	b.n	8004576 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004608:	4b17      	ldr	r3, [pc, #92]	; (8004668 <xTaskIncrementTick+0x164>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460e:	4915      	ldr	r1, [pc, #84]	; (8004664 <xTaskIncrementTick+0x160>)
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d901      	bls.n	8004624 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8004620:	2301      	movs	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <xTaskIncrementTick+0x168>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800462c:	2301      	movs	r3, #1
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	e004      	b.n	800463c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004632:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <xTaskIncrementTick+0x16c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3301      	adds	r3, #1
 8004638:	4a0d      	ldr	r2, [pc, #52]	; (8004670 <xTaskIncrementTick+0x16c>)
 800463a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800463c:	697b      	ldr	r3, [r7, #20]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000f88 	.word	0x20000f88
 800464c:	20000f64 	.word	0x20000f64
 8004650:	20000f18 	.word	0x20000f18
 8004654:	20000f1c 	.word	0x20000f1c
 8004658:	20000f78 	.word	0x20000f78
 800465c:	20000f80 	.word	0x20000f80
 8004660:	20000f68 	.word	0x20000f68
 8004664:	20000e64 	.word	0x20000e64
 8004668:	20000e60 	.word	0x20000e60
 800466c:	20000f74 	.word	0x20000f74
 8004670:	20000f70 	.word	0x20000f70

08004674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800467a:	4b26      	ldr	r3, [pc, #152]	; (8004714 <vTaskSwitchContext+0xa0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004682:	4b25      	ldr	r3, [pc, #148]	; (8004718 <vTaskSwitchContext+0xa4>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004688:	e03e      	b.n	8004708 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800468a:	4b23      	ldr	r3, [pc, #140]	; (8004718 <vTaskSwitchContext+0xa4>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004690:	4b22      	ldr	r3, [pc, #136]	; (800471c <vTaskSwitchContext+0xa8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	fab3 f383 	clz	r3, r3
 800469c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800469e:	7afb      	ldrb	r3, [r7, #11]
 80046a0:	f1c3 031f 	rsb	r3, r3, #31
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	491e      	ldr	r1, [pc, #120]	; (8004720 <vTaskSwitchContext+0xac>)
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <vTaskSwitchContext+0x5a>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	607b      	str	r3, [r7, #4]
 80046cc:	e7fe      	b.n	80046cc <vTaskSwitchContext+0x58>
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4a11      	ldr	r2, [pc, #68]	; (8004720 <vTaskSwitchContext+0xac>)
 80046da:	4413      	add	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	3308      	adds	r3, #8
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d104      	bne.n	80046fe <vTaskSwitchContext+0x8a>
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4a07      	ldr	r2, [pc, #28]	; (8004724 <vTaskSwitchContext+0xb0>)
 8004706:	6013      	str	r3, [r2, #0]
}
 8004708:	bf00      	nop
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	20000f88 	.word	0x20000f88
 8004718:	20000f74 	.word	0x20000f74
 800471c:	20000f68 	.word	0x20000f68
 8004720:	20000e64 	.word	0x20000e64
 8004724:	20000e60 	.word	0x20000e60

08004728 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004730:	f000 f852 	bl	80047d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004734:	4b06      	ldr	r3, [pc, #24]	; (8004750 <prvIdleTask+0x28>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d9f9      	bls.n	8004730 <prvIdleTask+0x8>
			{
				taskYIELD();
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <prvIdleTask+0x2c>)
 800473e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800474c:	e7f0      	b.n	8004730 <prvIdleTask+0x8>
 800474e:	bf00      	nop
 8004750:	20000e64 	.word	0x20000e64
 8004754:	e000ed04 	.word	0xe000ed04

08004758 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800475e:	2300      	movs	r3, #0
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	e00c      	b.n	800477e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4a12      	ldr	r2, [pc, #72]	; (80047b8 <prvInitialiseTaskLists+0x60>)
 8004770:	4413      	add	r3, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe ff5e 	bl	8003634 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3301      	adds	r3, #1
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b06      	cmp	r3, #6
 8004782:	d9ef      	bls.n	8004764 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004784:	480d      	ldr	r0, [pc, #52]	; (80047bc <prvInitialiseTaskLists+0x64>)
 8004786:	f7fe ff55 	bl	8003634 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800478a:	480d      	ldr	r0, [pc, #52]	; (80047c0 <prvInitialiseTaskLists+0x68>)
 800478c:	f7fe ff52 	bl	8003634 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004790:	480c      	ldr	r0, [pc, #48]	; (80047c4 <prvInitialiseTaskLists+0x6c>)
 8004792:	f7fe ff4f 	bl	8003634 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004796:	480c      	ldr	r0, [pc, #48]	; (80047c8 <prvInitialiseTaskLists+0x70>)
 8004798:	f7fe ff4c 	bl	8003634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800479c:	480b      	ldr	r0, [pc, #44]	; (80047cc <prvInitialiseTaskLists+0x74>)
 800479e:	f7fe ff49 	bl	8003634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <prvInitialiseTaskLists+0x78>)
 80047a4:	4a05      	ldr	r2, [pc, #20]	; (80047bc <prvInitialiseTaskLists+0x64>)
 80047a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <prvInitialiseTaskLists+0x7c>)
 80047aa:	4a05      	ldr	r2, [pc, #20]	; (80047c0 <prvInitialiseTaskLists+0x68>)
 80047ac:	601a      	str	r2, [r3, #0]
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000e64 	.word	0x20000e64
 80047bc:	20000ef0 	.word	0x20000ef0
 80047c0:	20000f04 	.word	0x20000f04
 80047c4:	20000f20 	.word	0x20000f20
 80047c8:	20000f34 	.word	0x20000f34
 80047cc:	20000f4c 	.word	0x20000f4c
 80047d0:	20000f18 	.word	0x20000f18
 80047d4:	20000f1c 	.word	0x20000f1c

080047d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047de:	e019      	b.n	8004814 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047e0:	f7ff f904 	bl	80039ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e4:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <prvCheckTasksWaitingTermination+0x4c>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fe ffa9 	bl	8003748 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047f6:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <prvCheckTasksWaitingTermination+0x50>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	4a0a      	ldr	r2, [pc, #40]	; (8004828 <prvCheckTasksWaitingTermination+0x50>)
 80047fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004800:	4b0a      	ldr	r3, [pc, #40]	; (800482c <prvCheckTasksWaitingTermination+0x54>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3b01      	subs	r3, #1
 8004806:	4a09      	ldr	r2, [pc, #36]	; (800482c <prvCheckTasksWaitingTermination+0x54>)
 8004808:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800480a:	f7ff f91d 	bl	8003a48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f80e 	bl	8004830 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004814:	4b05      	ldr	r3, [pc, #20]	; (800482c <prvCheckTasksWaitingTermination+0x54>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e1      	bne.n	80047e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800481c:	bf00      	nop
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20000f34 	.word	0x20000f34
 8004828:	20000f60 	.word	0x20000f60
 800482c:	20000f48 	.word	0x20000f48

08004830 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800483e:	2b00      	cmp	r3, #0
 8004840:	d108      	bne.n	8004854 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fa74 	bl	8003d34 <vPortFree>
				vPortFree( pxTCB );
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff fa71 	bl	8003d34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004852:	e017      	b.n	8004884 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800485a:	2b01      	cmp	r3, #1
 800485c:	d103      	bne.n	8004866 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7ff fa68 	bl	8003d34 <vPortFree>
	}
 8004864:	e00e      	b.n	8004884 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800486c:	2b02      	cmp	r3, #2
 800486e:	d009      	beq.n	8004884 <prvDeleteTCB+0x54>
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	e7fe      	b.n	8004882 <prvDeleteTCB+0x52>
	}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004892:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <prvResetNextTaskUnblockTime+0x38>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d104      	bne.n	80048a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <prvResetNextTaskUnblockTime+0x3c>)
 800489e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048a4:	e008      	b.n	80048b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a6:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <prvResetNextTaskUnblockTime+0x38>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <prvResetNextTaskUnblockTime+0x3c>)
 80048b6:	6013      	str	r3, [r2, #0]
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	20000f18 	.word	0x20000f18
 80048c8:	20000f80 	.word	0x20000f80

080048cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048d6:	4b29      	ldr	r3, [pc, #164]	; (800497c <prvAddCurrentTaskToDelayedList+0xb0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048dc:	4b28      	ldr	r3, [pc, #160]	; (8004980 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fe ff30 	bl	8003748 <uxListRemove>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10b      	bne.n	8004906 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	2201      	movs	r2, #1
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43da      	mvns	r2, r3
 80048fc:	4b21      	ldr	r3, [pc, #132]	; (8004984 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4013      	ands	r3, r2
 8004902:	4a20      	ldr	r2, [pc, #128]	; (8004984 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004904:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800490c:	d10a      	bne.n	8004924 <prvAddCurrentTaskToDelayedList+0x58>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004914:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3304      	adds	r3, #4
 800491a:	4619      	mov	r1, r3
 800491c:	481a      	ldr	r0, [pc, #104]	; (8004988 <prvAddCurrentTaskToDelayedList+0xbc>)
 800491e:	f7fe feb6 	bl	800368e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004922:	e026      	b.n	8004972 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4413      	add	r3, r2
 800492a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800492c:	4b14      	ldr	r3, [pc, #80]	; (8004980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	429a      	cmp	r2, r3
 800493a:	d209      	bcs.n	8004950 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800493c:	4b13      	ldr	r3, [pc, #76]	; (800498c <prvAddCurrentTaskToDelayedList+0xc0>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3304      	adds	r3, #4
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f7fe fec4 	bl	80036d6 <vListInsert>
}
 800494e:	e010      	b.n	8004972 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3304      	adds	r3, #4
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f7fe feba 	bl	80036d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004962:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	429a      	cmp	r2, r3
 800496a:	d202      	bcs.n	8004972 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800496c:	4a09      	ldr	r2, [pc, #36]	; (8004994 <prvAddCurrentTaskToDelayedList+0xc8>)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	6013      	str	r3, [r2, #0]
}
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000f64 	.word	0x20000f64
 8004980:	20000e60 	.word	0x20000e60
 8004984:	20000f68 	.word	0x20000f68
 8004988:	20000f4c 	.word	0x20000f4c
 800498c:	20000f1c 	.word	0x20000f1c
 8004990:	20000f18 	.word	0x20000f18
 8004994:	20000f80 	.word	0x20000f80

08004998 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800499c:	f7fc f80a 	bl	80009b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80049a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80049a2:	e003      	b.n	80049ac <LoopCopyDataInit>

080049a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80049a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80049a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80049aa:	3104      	adds	r1, #4

080049ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80049ac:	480a      	ldr	r0, [pc, #40]	; (80049d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80049ae:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80049b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80049b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80049b4:	d3f6      	bcc.n	80049a4 <CopyDataInit>
	ldr	r2, =_sbss
 80049b6:	4a0a      	ldr	r2, [pc, #40]	; (80049e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80049b8:	e002      	b.n	80049c0 <LoopFillZerobss>

080049ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80049ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80049bc:	f842 3b04 	str.w	r3, [r2], #4

080049c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80049c0:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <LoopForever+0x16>)
	cmp	r2, r3
 80049c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80049c4:	d3f9      	bcc.n	80049ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049c6:	f000 f811 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80049ca:	f7fb fddd 	bl	8000588 <main>

080049ce <LoopForever>:

LoopForever:
    b LoopForever
 80049ce:	e7fe      	b.n	80049ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80049d0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80049d4:	08004b6c 	.word	0x08004b6c
	ldr	r0, =_sdata
 80049d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80049dc:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80049e0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80049e4:	2000106c 	.word	0x2000106c

080049e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80049e8:	e7fe      	b.n	80049e8 <ADC1_2_IRQHandler>
	...

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4e0d      	ldr	r6, [pc, #52]	; (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1ba4      	subs	r4, r4, r6
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2500      	movs	r5, #0
 80049f8:	42a5      	cmp	r5, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4e0b      	ldr	r6, [pc, #44]	; (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	; (8004a30 <__libc_init_array+0x44>)
 8004a00:	f000 f820 	bl	8004a44 <_init>
 8004a04:	1ba4      	subs	r4, r4, r6
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2500      	movs	r5, #0
 8004a0a:	42a5      	cmp	r5, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a14:	4798      	blx	r3
 8004a16:	3501      	adds	r5, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a1e:	4798      	blx	r3
 8004a20:	3501      	adds	r5, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08004b64 	.word	0x08004b64
 8004a28:	08004b64 	.word	0x08004b64
 8004a2c:	08004b64 	.word	0x08004b64
 8004a30:	08004b68 	.word	0x08004b68

08004a34 <memset>:
 8004a34:	4402      	add	r2, r0
 8004a36:	4603      	mov	r3, r0
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d100      	bne.n	8004a3e <memset+0xa>
 8004a3c:	4770      	bx	lr
 8004a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a42:	e7f9      	b.n	8004a38 <memset+0x4>

08004a44 <_init>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	bf00      	nop
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr

08004a50 <_fini>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	bf00      	nop
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr
