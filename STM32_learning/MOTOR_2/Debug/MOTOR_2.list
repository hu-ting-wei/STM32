
MOTOR_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006f9c  08006f9c  00016f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08006fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001ca4  20000074  08007018  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001d18  08007018  00021d18  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017a06  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e15  00000000  00000000  00037aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001330  00000000  00000000  0003a8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011d8  00000000  00000000  0003bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009a64  00000000  00000000  0003cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006b92  00000000  00000000  0004682c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004d3be  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004fa4  00000000  00000000  0004d43c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ecc 	.word	0x08006ecc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006ecc 	.word	0x08006ecc

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000090 	.word	0x20000090
 8000200:	200000e4 	.word	0x200000e4

08000204 <HAL_CAN_RxFifo0MsgPendingCallback>:
int datacheck = 0;
int CAN_Neopixel = 0;
int CAN_Motor = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800020c:	4b52      	ldr	r3, [pc, #328]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 800020e:	4a53      	ldr	r2, [pc, #332]	; (800035c <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8000210:	2100      	movs	r1, #0
 8000212:	6878      	ldr	r0, [r7, #4]
 8000214:	f001 fa87 	bl	8001726 <HAL_CAN_GetRxMessage>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		  {
			  //HAL_UART_Transmit(&huart2, (uint8_t *)"Receiving Data Failed\r\n\r\n", 24, 1000);
		      Error_Handler();
 800021e:	f000 fda1 	bl	8000d64 <Error_Handler>
		  }
	 int error_message = 0;
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
		  if (RxHeader.StdId == CAN_ID && RxData[1] == 0x1A) //接收到資料(一對一)
 8000226:	4b4d      	ldr	r3, [pc, #308]	; (800035c <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a4d      	ldr	r2, [pc, #308]	; (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 800022c:	8812      	ldrh	r2, [r2, #0]
 800022e:	4293      	cmp	r3, r2
 8000230:	f040 808d 	bne.w	800034e <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>
 8000234:	4b48      	ldr	r3, [pc, #288]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000236:	785b      	ldrb	r3, [r3, #1]
 8000238:	2b1a      	cmp	r3, #26
 800023a:	f040 8088 	bne.w	800034e <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>
		  {
			  if(RxData[2] == 0x03 && RxData[3] >= 0x00 && RxData[3] <= 0x03 && RxData[4] >= 0x00 && RxData[4] <= 0x07)//檢查第一組資料是否正確
 800023e:	4b46      	ldr	r3, [pc, #280]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000240:	789b      	ldrb	r3, [r3, #2]
 8000242:	2b03      	cmp	r3, #3
 8000244:	d10b      	bne.n	800025e <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 8000246:	4b44      	ldr	r3, [pc, #272]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000248:	78db      	ldrb	r3, [r3, #3]
 800024a:	2b03      	cmp	r3, #3
 800024c:	d807      	bhi.n	800025e <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 800024e:	4b42      	ldr	r3, [pc, #264]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000250:	791b      	ldrb	r3, [r3, #4]
 8000252:	2b07      	cmp	r3, #7
 8000254:	d803      	bhi.n	800025e <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
			  {
				  CAN_Neopixel = 1;
 8000256:	4b43      	ldr	r3, [pc, #268]	; (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000258:	2201      	movs	r2, #1
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	e01e      	b.n	800029c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
			  }
			  else if(RxData[2] == 0x02 && RxData[3] == 0x00 && RxData[4] >= 0x00 && RxData[4] <= 0x01)//檢查第一組資料(抽屜門)
 800025e:	4b3e      	ldr	r3, [pc, #248]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000260:	789b      	ldrb	r3, [r3, #2]
 8000262:	2b02      	cmp	r3, #2
 8000264:	d10b      	bne.n	800027e <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
 8000266:	4b3c      	ldr	r3, [pc, #240]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000268:	78db      	ldrb	r3, [r3, #3]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d107      	bne.n	800027e <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
 800026e:	4b3a      	ldr	r3, [pc, #232]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000270:	791b      	ldrb	r3, [r3, #4]
 8000272:	2b01      	cmp	r3, #1
 8000274:	d803      	bhi.n	800027e <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
			  {
				  CAN_Motor = 1;
 8000276:	4b3c      	ldr	r3, [pc, #240]	; (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 8000278:	2201      	movs	r2, #1
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	e00e      	b.n	800029c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
			  }
			  else if(RxData[2] == 0x00 && RxData[3] == 0x00 && RxData[4] == 0x00)
 800027e:	4b36      	ldr	r3, [pc, #216]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000280:	789b      	ldrb	r3, [r3, #2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d107      	bne.n	8000296 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
 8000286:	4b34      	ldr	r3, [pc, #208]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000288:	78db      	ldrb	r3, [r3, #3]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d103      	bne.n	8000296 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
 800028e:	4b32      	ldr	r3, [pc, #200]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d002      	beq.n	800029c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
			  {
			  }
			  else
			  {
				  error_message++;
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	3301      	adds	r3, #1
 800029a:	60fb      	str	r3, [r7, #12]
			  }
			  if(RxData[5] == 0x03 && RxData[6] >= 0x00 && RxData[6] <= 0x03 && RxData[7] >= 0x00 && RxData[7] <= 0x07)//檢查第一組資料是否正確
 800029c:	4b2e      	ldr	r3, [pc, #184]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 800029e:	795b      	ldrb	r3, [r3, #5]
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	d10b      	bne.n	80002bc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
 80002a4:	4b2c      	ldr	r3, [pc, #176]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80002a6:	799b      	ldrb	r3, [r3, #6]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d807      	bhi.n	80002bc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
 80002ac:	4b2a      	ldr	r3, [pc, #168]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80002ae:	79db      	ldrb	r3, [r3, #7]
 80002b0:	2b07      	cmp	r3, #7
 80002b2:	d803      	bhi.n	80002bc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
			  {
				  CAN_Neopixel = 2;
 80002b4:	4b2b      	ldr	r3, [pc, #172]	; (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	e01e      	b.n	80002fa <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
			  }
			  else if(RxData[5] == 0x02 && RxData[6] == 0x00 && RxData[7] >= 0x00 && RxData[7] <= 0x01)//檢查第一組資料(抽屜門)
 80002bc:	4b26      	ldr	r3, [pc, #152]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80002be:	795b      	ldrb	r3, [r3, #5]
 80002c0:	2b02      	cmp	r3, #2
 80002c2:	d10b      	bne.n	80002dc <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
 80002c4:	4b24      	ldr	r3, [pc, #144]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80002c6:	799b      	ldrb	r3, [r3, #6]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d107      	bne.n	80002dc <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
 80002cc:	4b22      	ldr	r3, [pc, #136]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80002ce:	79db      	ldrb	r3, [r3, #7]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d803      	bhi.n	80002dc <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
			  {
				  CAN_Motor = 2;
 80002d4:	4b24      	ldr	r3, [pc, #144]	; (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 80002d6:	2202      	movs	r2, #2
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	e00e      	b.n	80002fa <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
			  }
			  else if(RxData[5] == 0x00 && RxData[6] == 0x00 && RxData[7] == 0x00)
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80002de:	795b      	ldrb	r3, [r3, #5]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d107      	bne.n	80002f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
 80002e4:	4b1c      	ldr	r3, [pc, #112]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80002e6:	799b      	ldrb	r3, [r3, #6]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d103      	bne.n	80002f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
 80002ec:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80002ee:	79db      	ldrb	r3, [r3, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d002      	beq.n	80002fa <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
			  {
			  }
			  else
			  {
				  error_message++;
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	3301      	adds	r3, #1
 80002f8:	60fb      	str	r3, [r7, #12]
			  }
			  TxHeader.StdId = 0x010;
 80002fa:	4b1c      	ldr	r3, [pc, #112]	; (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80002fc:	2210      	movs	r2, #16
 80002fe:	601a      	str	r2, [r3, #0]
			  for(int i=0; i<8; i++)
 8000300:	2300      	movs	r3, #0
 8000302:	60bb      	str	r3, [r7, #8]
 8000304:	e00b      	b.n	800031e <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
			  {
				  TxData[i]=RxData[i];
 8000306:	4a14      	ldr	r2, [pc, #80]	; (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	4413      	add	r3, r2
 800030c:	7819      	ldrb	r1, [r3, #0]
 800030e:	4a18      	ldr	r2, [pc, #96]	; (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	4413      	add	r3, r2
 8000314:	460a      	mov	r2, r1
 8000316:	701a      	strb	r2, [r3, #0]
			  for(int i=0; i<8; i++)
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	3301      	adds	r3, #1
 800031c:	60bb      	str	r3, [r7, #8]
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	2b07      	cmp	r3, #7
 8000322:	ddf0      	ble.n	8000306 <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
			  }
			  if(error_message>0){
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	2b00      	cmp	r3, #0
 8000328:	dd03      	ble.n	8000332 <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
				  TxData[1]=0x1C;
 800032a:	4b11      	ldr	r3, [pc, #68]	; (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 800032c:	221c      	movs	r2, #28
 800032e:	705a      	strb	r2, [r3, #1]
 8000330:	e002      	b.n	8000338 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
			  }
			  else
			  {
				  TxData[1]=0x1B;
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8000334:	221b      	movs	r2, #27
 8000336:	705a      	strb	r2, [r3, #1]
			  }
			  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 800033a:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 800033c:	490b      	ldr	r1, [pc, #44]	; (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 800033e:	480e      	ldr	r0, [pc, #56]	; (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8000340:	f001 f91a 	bl	8001578 <HAL_CAN_AddTxMessage>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>
			  {
				 // HAL_UART_Transmit(&huart2, (uint8_t *)"TxBackError\r\n\r\n", 15, 1000);
			     Error_Handler ();
 800034a:	f000 fd0b 	bl	8000d64 <Error_Handler>
			  }
		  }

}
 800034e:	bf00      	nop
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20001c60 	.word	0x20001c60
 800035c:	20001cac 	.word	0x20001cac
 8000360:	20000000 	.word	0x20000000
 8000364:	200002e4 	.word	0x200002e4
 8000368:	200002e8 	.word	0x200002e8
 800036c:	20001c90 	.word	0x20001c90
 8000370:	20001c04 	.word	0x20001c04
 8000374:	20001c5c 	.word	0x20001c5c
 8000378:	20001c68 	.word	0x20001c68

0800037c <weidelay>:




void weidelay(int index)
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	for (int i=0;i<index;i++)
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	e002      	b.n	8000390 <weidelay+0x14>
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	3301      	adds	r3, #1
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	68fa      	ldr	r2, [r7, #12]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	429a      	cmp	r2, r3
 8000396:	dbf8      	blt.n	800038a <weidelay+0xe>
	{

	}
}
 8000398:	bf00      	nop
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <Set_LED>:
int ledcolor=0;
int ledcolor_buffer=0;
int ledcolor_table[8][3]={{0,0,0},{255,255,255},{255,0,0},{0,255,0},{0,0,255},{255,0,255},{255,255,0},{0,255,255}};
int ledmode=0;
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	b2d8      	uxtb	r0, r3
 80003b6:	491c      	ldr	r1, [pc, #112]	; (8000428 <Set_LED+0x84>)
 80003b8:	68fa      	ldr	r2, [r7, #12]
 80003ba:	4613      	mov	r3, r2
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	4413      	add	r3, r2
 80003c0:	440b      	add	r3, r1
 80003c2:	4602      	mov	r2, r0
 80003c4:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][1] = Green;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	b2d8      	uxtb	r0, r3
 80003ca:	4917      	ldr	r1, [pc, #92]	; (8000428 <Set_LED+0x84>)
 80003cc:	68fa      	ldr	r2, [r7, #12]
 80003ce:	4613      	mov	r3, r2
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	4413      	add	r3, r2
 80003d4:	440b      	add	r3, r1
 80003d6:	3301      	adds	r3, #1
 80003d8:	4602      	mov	r2, r0
 80003da:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][2] = Red;
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	b2d8      	uxtb	r0, r3
 80003e0:	4911      	ldr	r1, [pc, #68]	; (8000428 <Set_LED+0x84>)
 80003e2:	68fa      	ldr	r2, [r7, #12]
 80003e4:	4613      	mov	r3, r2
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	4413      	add	r3, r2
 80003ea:	440b      	add	r3, r1
 80003ec:	3302      	adds	r3, #2
 80003ee:	4602      	mov	r2, r0
 80003f0:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][3] = Blue;
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	b2d8      	uxtb	r0, r3
 80003f6:	490c      	ldr	r1, [pc, #48]	; (8000428 <Set_LED+0x84>)
 80003f8:	68fa      	ldr	r2, [r7, #12]
 80003fa:	4613      	mov	r3, r2
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	4413      	add	r3, r2
 8000400:	440b      	add	r3, r1
 8000402:	3303      	adds	r3, #3
 8000404:	4602      	mov	r2, r0
 8000406:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][4] = 0;
 8000408:	4907      	ldr	r1, [pc, #28]	; (8000428 <Set_LED+0x84>)
 800040a:	68fa      	ldr	r2, [r7, #12]
 800040c:	4613      	mov	r3, r2
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	4413      	add	r3, r2
 8000412:	440b      	add	r3, r1
 8000414:	3304      	adds	r3, #4
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	20001058 	.word	0x20001058

0800042c <Set_Brightness>:
void Set_Brightness (int brightness)  // 0-45
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
	if (brightness > 45) brightness = 45;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b2d      	cmp	r3, #45	; 0x2d
 8000438:	dd01      	ble.n	800043e <Set_Brightness+0x12>
 800043a:	232d      	movs	r3, #45	; 0x2d
 800043c:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	e045      	b.n	80004d0 <Set_Brightness+0xa4>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8000444:	4927      	ldr	r1, [pc, #156]	; (80004e4 <Set_Brightness+0xb8>)
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	4613      	mov	r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4413      	add	r3, r2
 800044e:	440b      	add	r3, r1
 8000450:	7818      	ldrb	r0, [r3, #0]
 8000452:	4925      	ldr	r1, [pc, #148]	; (80004e8 <Set_Brightness+0xbc>)
 8000454:	68fa      	ldr	r2, [r7, #12]
 8000456:	4613      	mov	r3, r2
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	4413      	add	r3, r2
 800045c:	440b      	add	r3, r1
 800045e:	4602      	mov	r2, r0
 8000460:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<5; j++)
 8000462:	2301      	movs	r3, #1
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	e02d      	b.n	80004c4 <Set_Brightness+0x98>
		{
			LED_Mod[i][j] = brightness!=45?LED_Data[i][j]*brightness/45:LED_Data[i][j];
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2b2d      	cmp	r3, #45	; 0x2d
 800046c:	d015      	beq.n	800049a <Set_Brightness+0x6e>
 800046e:	491d      	ldr	r1, [pc, #116]	; (80004e4 <Set_Brightness+0xb8>)
 8000470:	68fa      	ldr	r2, [r7, #12]
 8000472:	4613      	mov	r3, r2
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	4413      	add	r3, r2
 8000478:	18ca      	adds	r2, r1, r3
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	4413      	add	r3, r2
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	461a      	mov	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	fb03 f302 	mul.w	r3, r3, r2
 8000488:	4a18      	ldr	r2, [pc, #96]	; (80004ec <Set_Brightness+0xc0>)
 800048a:	fb82 1203 	smull	r1, r2, r2, r3
 800048e:	441a      	add	r2, r3
 8000490:	1152      	asrs	r2, r2, #5
 8000492:	17db      	asrs	r3, r3, #31
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	b2da      	uxtb	r2, r3
 8000498:	e008      	b.n	80004ac <Set_Brightness+0x80>
 800049a:	4912      	ldr	r1, [pc, #72]	; (80004e4 <Set_Brightness+0xb8>)
 800049c:	68fa      	ldr	r2, [r7, #12]
 800049e:	4613      	mov	r3, r2
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	4413      	add	r3, r2
 80004a4:	18ca      	adds	r2, r1, r3
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	4413      	add	r3, r2
 80004aa:	781a      	ldrb	r2, [r3, #0]
 80004ac:	480e      	ldr	r0, [pc, #56]	; (80004e8 <Set_Brightness+0xbc>)
 80004ae:	68f9      	ldr	r1, [r7, #12]
 80004b0:	460b      	mov	r3, r1
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	440b      	add	r3, r1
 80004b6:	18c1      	adds	r1, r0, r3
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	440b      	add	r3, r1
 80004bc:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<5; j++)
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	3301      	adds	r3, #1
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	2b04      	cmp	r3, #4
 80004c8:	ddce      	ble.n	8000468 <Set_Brightness+0x3c>
	for (int i=0; i<MAX_LED; i++)
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	3301      	adds	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	2b26      	cmp	r3, #38	; 0x26
 80004d4:	ddb6      	ble.n	8000444 <Set_Brightness+0x18>
		}
	}
#endif
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	20001058 	.word	0x20001058
 80004e8:	2000111c 	.word	0x2000111c
 80004ec:	b60b60b7 	.word	0xb60b60b7

080004f0 <WS2812_Send>:
void WS2812_Send (void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
	uint32_t color;
	for (int i= 0; i<MAX_LED; i++)
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
 80004fe:	e040      	b.n	8000582 <WS2812_Send+0x92>
	{
		#if USE_BRIGHTNESS
				color = ((LED_Mod[i][1]<<24) | (LED_Mod[i][2]<<16) | (LED_Mod[i][3]<<8));
 8000500:	4933      	ldr	r1, [pc, #204]	; (80005d0 <WS2812_Send+0xe0>)
 8000502:	693a      	ldr	r2, [r7, #16]
 8000504:	4613      	mov	r3, r2
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	4413      	add	r3, r2
 800050a:	440b      	add	r3, r1
 800050c:	3301      	adds	r3, #1
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	0619      	lsls	r1, r3, #24
 8000512:	482f      	ldr	r0, [pc, #188]	; (80005d0 <WS2812_Send+0xe0>)
 8000514:	693a      	ldr	r2, [r7, #16]
 8000516:	4613      	mov	r3, r2
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	4413      	add	r3, r2
 800051c:	4403      	add	r3, r0
 800051e:	3302      	adds	r3, #2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	041b      	lsls	r3, r3, #16
 8000524:	4319      	orrs	r1, r3
 8000526:	482a      	ldr	r0, [pc, #168]	; (80005d0 <WS2812_Send+0xe0>)
 8000528:	693a      	ldr	r2, [r7, #16]
 800052a:	4613      	mov	r3, r2
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	4413      	add	r3, r2
 8000530:	4403      	add	r3, r0
 8000532:	3303      	adds	r3, #3
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	021b      	lsls	r3, r3, #8
 8000538:	430b      	orrs	r3, r1
 800053a:	607b      	str	r3, [r7, #4]
		#else
				color = ((LED_Data[i][1]<<24) | (LED_Data[i][2]<<16) | (LED_Data[i][3]<<8));
		#endif
		for (int j=31; j>=0; j--)
 800053c:	231f      	movs	r3, #31
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e019      	b.n	8000576 <WS2812_Send+0x86>
		{
			if (color&(1<<j))pwmData[indx] = 64;//    64/100
 8000542:	2201      	movs	r2, #1
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	461a      	mov	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4013      	ands	r3, r2
 8000550:	2b00      	cmp	r3, #0
 8000552:	d005      	beq.n	8000560 <WS2812_Send+0x70>
 8000554:	4a1f      	ldr	r2, [pc, #124]	; (80005d4 <WS2812_Send+0xe4>)
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	2140      	movs	r1, #64	; 0x40
 800055a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800055e:	e004      	b.n	800056a <WS2812_Send+0x7a>
			else pwmData[indx] = 32;//   32/100
 8000560:	4a1c      	ldr	r2, [pc, #112]	; (80005d4 <WS2812_Send+0xe4>)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	2120      	movs	r1, #32
 8000566:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
		for (int j=31; j>=0; j--)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	3b01      	subs	r3, #1
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2b00      	cmp	r3, #0
 800057a:	dae2      	bge.n	8000542 <WS2812_Send+0x52>
	for (int i= 0; i<MAX_LED; i++)
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	3301      	adds	r3, #1
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	2b26      	cmp	r3, #38	; 0x26
 8000586:	ddbb      	ble.n	8000500 <WS2812_Send+0x10>
		}
	}
	for (int i=0; i<50; i++)
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	e00a      	b.n	80005a4 <WS2812_Send+0xb4>
	{
		pwmData[indx] = 0;
 800058e:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <WS2812_Send+0xe4>)
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	2100      	movs	r1, #0
 8000594:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3301      	adds	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	3301      	adds	r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	2b31      	cmp	r3, #49	; 0x31
 80005a8:	ddf1      	ble.n	800058e <WS2812_Send+0x9e>
	}
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <WS2812_Send+0xe4>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	4809      	ldr	r0, [pc, #36]	; (80005d8 <WS2812_Send+0xe8>)
 80005b4:	f003 f89c 	bl	80036f0 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 80005b8:	bf00      	nop
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <WS2812_Send+0xec>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0fb      	beq.n	80005ba <WS2812_Send+0xca>
	datasentflag = 0;
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <WS2812_Send+0xec>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
}
 80005c8:	bf00      	nop
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2000111c 	.word	0x2000111c
 80005d4:	200011e0 	.word	0x200011e0
 80005d8:	20001c0c 	.word	0x20001c0c
 80005dc:	200002ec 	.word	0x200002ec

080005e0 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80005e8:	2100      	movs	r1, #0
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80005ec:	f003 fa98 	bl	8003b20 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	601a      	str	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20001c0c 	.word	0x20001c0c
 8000604:	200002ec 	.word	0x200002ec

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b098      	sub	sp, #96	; 0x60
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fd73 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f87f 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f9eb 	bl	80009f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800061a:	f000 f9cb 	bl	80009b4 <MX_DMA_Init>
  MX_CAN1_Init();
 800061e:	f000 f8cb 	bl	80007b8 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000622:	f000 f91b 	bl	800085c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  HAL_CAN_Start(&hcan1);
 8000626:	4831      	ldr	r0, [pc, #196]	; (80006ec <main+0xe4>)
 8000628:	f000 ff62 	bl	80014f0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800062c:	2102      	movs	r1, #2
 800062e:	482f      	ldr	r0, [pc, #188]	; (80006ec <main+0xe4>)
 8000630:	f001 f98b 	bl	800194a <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 1;
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <main+0xe8>)
 8000636:	2201      	movs	r2, #1
 8000638:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <main+0xe8>)
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <main+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <main+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <main+0xe8>)
 800064e:	f240 1203 	movw	r2, #259	; 0x103
 8000652:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000654:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <main+0xe8>)
 8000656:	2200      	movs	r2, #0
 8000658:	751a      	strb	r2, [r3, #20]
  TxData[0] = 0xf3;
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <main+0xec>)
 800065c:	22f3      	movs	r2, #243	; 0xf3
 800065e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of SimpMUTEX */
  osMutexDef(SimpMUTEX);
 8000660:	2300      	movs	r3, #0
 8000662:	65bb      	str	r3, [r7, #88]	; 0x58
 8000664:	2300      	movs	r3, #0
 8000666:	65fb      	str	r3, [r7, #92]	; 0x5c
  SimpMUTEXHandle = osMutexCreate(osMutex(SimpMUTEX));
 8000668:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800066c:	4618      	mov	r0, r3
 800066e:	f004 fd06 	bl	800507e <osMutexCreate>
 8000672:	4602      	mov	r2, r0
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <main+0xf0>)
 8000676:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <main+0xf4>)
 800067a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800067e:	461d      	mov	r5, r3
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800068c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f004 fc93 	bl	8004fbe <osThreadCreate>
 8000698:	4602      	mov	r2, r0
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <main+0xf8>)
 800069c:	601a      	str	r2, [r3, #0]

  /* definition and creation of LPT */
  osThreadDef(LPT, StartLPT, osPriorityBelowNormal, 0, 128);
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <main+0xfc>)
 80006a0:	f107 0420 	add.w	r4, r7, #32
 80006a4:	461d      	mov	r5, r3
 80006a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LPTHandle = osThreadCreate(osThread(LPT), NULL);
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f004 fc80 	bl	8004fbe <osThreadCreate>
 80006be:	4602      	mov	r2, r0
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <main+0x100>)
 80006c2:	601a      	str	r2, [r3, #0]

  /* definition and creation of HPT */
  osThreadDef(HPT, StartHPT, osPriorityAboveNormal, 0, 128);
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <main+0x104>)
 80006c6:	1d3c      	adds	r4, r7, #4
 80006c8:	461d      	mov	r5, r3
 80006ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HPTHandle = osThreadCreate(osThread(HPT), NULL);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 fc6f 	bl	8004fbe <osThreadCreate>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <main+0x108>)
 80006e4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006e6:	f004 fc63 	bl	8004fb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <main+0xe2>
 80006ec:	20001c68 	.word	0x20001c68
 80006f0:	20001c90 	.word	0x20001c90
 80006f4:	20001c04 	.word	0x20001c04
 80006f8:	20001ca8 	.word	0x20001ca8
 80006fc:	08006ef0 	.word	0x08006ef0
 8000700:	20001050 	.word	0x20001050
 8000704:	08006f10 	.word	0x08006f10
 8000708:	20001054 	.word	0x20001054
 800070c:	08006f30 	.word	0x08006f30
 8000710:	20001c58 	.word	0x20001c58

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b096      	sub	sp, #88	; 0x58
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2244      	movs	r2, #68	; 0x44
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f006 fbc9 	bl	8006eba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000736:	2302      	movs	r3, #2
 8000738:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800074c:	2301      	movs	r3, #1
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000750:	230a      	movs	r3, #10
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000754:	2307      	movs	r3, #7
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4618      	mov	r0, r3
 8000766:	f002 f893 	bl	8002890 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000770:	f000 faf8 	bl	8000d64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2303      	movs	r3, #3
 800077a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	2104      	movs	r1, #4
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fc65 	bl	800305c <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000798:	f000 fae4 	bl	8000d64 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800079c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007a0:	f002 f820 	bl	80027e4 <HAL_PWREx_ControlVoltageScaling>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007aa:	f000 fadb 	bl	8000d64 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3758      	adds	r7, #88	; 0x58
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_CAN1_Init+0x9c>)
 80007c0:	4a25      	ldr	r2, [pc, #148]	; (8000858 <MX_CAN1_Init+0xa0>)
 80007c2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_CAN1_Init+0x9c>)
 80007c6:	2228      	movs	r2, #40	; 0x28
 80007c8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_CAN1_Init+0x9c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_CAN1_Init+0x9c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_CAN1_Init+0x9c>)
 80007d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007dc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_CAN1_Init+0x9c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_CAN1_Init+0x9c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_CAN1_Init+0x9c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_CAN1_Init+0x9c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_CAN1_Init+0x9c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_CAN1_Init+0x9c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_CAN1_Init+0x9c>)
 8000804:	2200      	movs	r2, #0
 8000806:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000808:	4812      	ldr	r0, [pc, #72]	; (8000854 <MX_CAN1_Init+0x9c>)
 800080a:	f000 fcad 	bl	8001168 <HAL_CAN_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000814:	f000 faa6 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000818:	2301      	movs	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 800081c:	230a      	movs	r3, #10
 800081e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x001<<5;
 8000824:	2320      	movs	r3, #32
 8000826:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x001<<5;
 800082c:	2320      	movs	r3, #32
 800082e:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000840:	463b      	mov	r3, r7
 8000842:	4619      	mov	r1, r3
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <MX_CAN1_Init+0x9c>)
 8000846:	f000 fd89 	bl	800135c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	; 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20001c68 	.word	0x20001c68
 8000858:	40006400 	.word	0x40006400

0800085c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b09a      	sub	sp, #104	; 0x68
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	222c      	movs	r2, #44	; 0x2c
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f006 fb0f 	bl	8006eba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800089c:	4b43      	ldr	r3, [pc, #268]	; (80009ac <MX_TIM1_Init+0x150>)
 800089e:	4a44      	ldr	r2, [pc, #272]	; (80009b0 <MX_TIM1_Init+0x154>)
 80008a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008a2:	4b42      	ldr	r3, [pc, #264]	; (80009ac <MX_TIM1_Init+0x150>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b40      	ldr	r3, [pc, #256]	; (80009ac <MX_TIM1_Init+0x150>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80008ae:	4b3f      	ldr	r3, [pc, #252]	; (80009ac <MX_TIM1_Init+0x150>)
 80008b0:	2263      	movs	r2, #99	; 0x63
 80008b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <MX_TIM1_Init+0x150>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ba:	4b3c      	ldr	r3, [pc, #240]	; (80009ac <MX_TIM1_Init+0x150>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <MX_TIM1_Init+0x150>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c6:	4839      	ldr	r0, [pc, #228]	; (80009ac <MX_TIM1_Init+0x150>)
 80008c8:	f002 fde8 	bl	800349c <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008d2:	f000 fa47 	bl	8000d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008da:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008e0:	4619      	mov	r1, r3
 80008e2:	4832      	ldr	r0, [pc, #200]	; (80009ac <MX_TIM1_Init+0x150>)
 80008e4:	f003 fc3c 	bl	8004160 <HAL_TIM_ConfigClockSource>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008ee:	f000 fa39 	bl	8000d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008f2:	482e      	ldr	r0, [pc, #184]	; (80009ac <MX_TIM1_Init+0x150>)
 80008f4:	f002 fe9a 	bl	800362c <HAL_TIM_PWM_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008fe:	f000 fa31 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800090e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000912:	4619      	mov	r1, r3
 8000914:	4825      	ldr	r0, [pc, #148]	; (80009ac <MX_TIM1_Init+0x150>)
 8000916:	f004 fa0f 	bl	8004d38 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000920:	f000 fa20 	bl	8000d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000924:	2360      	movs	r3, #96	; 0x60
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000944:	2200      	movs	r2, #0
 8000946:	4619      	mov	r1, r3
 8000948:	4818      	ldr	r0, [pc, #96]	; (80009ac <MX_TIM1_Init+0x150>)
 800094a:	f003 faf9 	bl	8003f40 <HAL_TIM_PWM_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000954:	f000 fa06 	bl	8000d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000970:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800097a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4619      	mov	r1, r3
 800098c:	4807      	ldr	r0, [pc, #28]	; (80009ac <MX_TIM1_Init+0x150>)
 800098e:	f004 fa5b 	bl	8004e48 <HAL_TIMEx_ConfigBreakDeadTime>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000998:	f000 f9e4 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <MX_TIM1_Init+0x150>)
 800099e:	f000 faad 	bl	8000efc <HAL_TIM_MspPostInit>

}
 80009a2:	bf00      	nop
 80009a4:	3768      	adds	r7, #104	; 0x68
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20001c0c 	.word	0x20001c0c
 80009b0:	40012c00 	.word	0x40012c00

080009b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ba:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <MX_DMA_Init+0x38>)
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_DMA_Init+0x38>)
 80009be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6493      	str	r3, [r2, #72]	; 0x48
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_DMA_Init+0x38>)
 80009c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2105      	movs	r1, #5
 80009d6:	200c      	movs	r0, #12
 80009d8:	f001 fabc 	bl	8001f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009dc:	200c      	movs	r0, #12
 80009de:	f001 fad5 	bl	8001f8c <HAL_NVIC_EnableIRQ>

}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4a2a      	ldr	r2, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0xc0>)
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <MX_GPIO_Init+0xc0>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0xc0>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4a24      	ldr	r2, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0xc0>)
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <MX_GPIO_Init+0xc0>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <MX_GPIO_Init+0xc0>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <MX_GPIO_Init+0xc0>)
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_GPIO_Init+0xc0>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_GPIO_Init+0xc0>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2118      	movs	r1, #24
 8000a52:	4818      	ldr	r0, [pc, #96]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000a54:	f001 fea0 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4812      	ldr	r0, [pc, #72]	; (8000ab8 <MX_GPIO_Init+0xc8>)
 8000a6e:	f001 fcd3 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000a72:	2318      	movs	r3, #24
 8000a74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4619      	mov	r1, r3
 8000a88:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000a8a:	f001 fcc5 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000aa2:	f001 fcb9 	bl	8002418 <HAL_GPIO_Init>

}
 8000aa6:	bf00      	nop
 8000aa8:	3720      	adds	r7, #32
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000400 	.word	0x48000400
 8000ab8:	48000800 	.word	0x48000800

08000abc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  if (CAN_Motor==1 || CAN_Motor==2)
 8000ac4:	4b32      	ldr	r3, [pc, #200]	; (8000b90 <StartDefaultTask+0xd4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d003      	beq.n	8000ad4 <StartDefaultTask+0x18>
 8000acc:	4b30      	ldr	r3, [pc, #192]	; (8000b90 <StartDefaultTask+0xd4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d158      	bne.n	8000b86 <StartDefaultTask+0xca>
	  {
		  if (RxData[4] == 0x01)		//open door
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <StartDefaultTask+0xd8>)
 8000ad6:	791b      	ldrb	r3, [r3, #4]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d125      	bne.n	8000b28 <StartDefaultTask+0x6c>
		  {
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2110      	movs	r1, #16
 8000ae0:	482d      	ldr	r0, [pc, #180]	; (8000b98 <StartDefaultTask+0xdc>)
 8000ae2:	f001 fe59 	bl	8002798 <HAL_GPIO_WritePin>
			  		  for (int i=0;i<30000;i++)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	e014      	b.n	8000b16 <StartDefaultTask+0x5a>
			  		  {
			  		  	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2108      	movs	r1, #8
 8000af0:	4829      	ldr	r0, [pc, #164]	; (8000b98 <StartDefaultTask+0xdc>)
 8000af2:	f001 fe51 	bl	8002798 <HAL_GPIO_WritePin>
			  		  	//HAL_Delay(0.0001);
			  		  	weidelay(500);
 8000af6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000afa:	f7ff fc3f 	bl	800037c <weidelay>
			  		  	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2108      	movs	r1, #8
 8000b02:	4825      	ldr	r0, [pc, #148]	; (8000b98 <StartDefaultTask+0xdc>)
 8000b04:	f001 fe48 	bl	8002798 <HAL_GPIO_WritePin>
			  		  	//HAL_Delay(0.0001);
			  		  	weidelay(500);
 8000b08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b0c:	f7ff fc36 	bl	800037c <weidelay>
			  		  for (int i=0;i<30000;i++)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3301      	adds	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f247 522f 	movw	r2, #29999	; 0x752f
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	dde5      	ble.n	8000aec <StartDefaultTask+0x30>
			  		  }
			  CAN_Motor=69;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <StartDefaultTask+0xd4>)
 8000b22:	2245      	movs	r2, #69	; 0x45
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	e02e      	b.n	8000b86 <StartDefaultTask+0xca>
		  }
		  else if (RxData[4] == 0x00)		//close door
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <StartDefaultTask+0xd8>)
 8000b2a:	791b      	ldrb	r3, [r3, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d12a      	bne.n	8000b86 <StartDefaultTask+0xca>
		  {

			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	2110      	movs	r1, #16
 8000b34:	4818      	ldr	r0, [pc, #96]	; (8000b98 <StartDefaultTask+0xdc>)
 8000b36:	f001 fe2f 	bl	8002798 <HAL_GPIO_WritePin>
			  	    while (!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5))
 8000b3a:	e018      	b.n	8000b6e <StartDefaultTask+0xb2>
			  	    {
			  	    	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2108      	movs	r1, #8
 8000b40:	4815      	ldr	r0, [pc, #84]	; (8000b98 <StartDefaultTask+0xdc>)
 8000b42:	f001 fe29 	bl	8002798 <HAL_GPIO_WritePin>
			  	    	//HAL_Delay(1);
			  			weidelay(500);
 8000b46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b4a:	f7ff fc17 	bl	800037c <weidelay>
			  	    	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2108      	movs	r1, #8
 8000b52:	4811      	ldr	r0, [pc, #68]	; (8000b98 <StartDefaultTask+0xdc>)
 8000b54:	f001 fe20 	bl	8002798 <HAL_GPIO_WritePin>
			  	    	//HAL_Delay(1);
			  			weidelay(500);
 8000b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5c:	f7ff fc0e 	bl	800037c <weidelay>
			  	    	if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5))
 8000b60:	2120      	movs	r1, #32
 8000b62:	480d      	ldr	r0, [pc, #52]	; (8000b98 <StartDefaultTask+0xdc>)
 8000b64:	f001 fe00 	bl	8002768 <HAL_GPIO_ReadPin>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d107      	bne.n	8000b7e <StartDefaultTask+0xc2>
			  	    while (!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5))
 8000b6e:	2120      	movs	r1, #32
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <StartDefaultTask+0xdc>)
 8000b72:	f001 fdf9 	bl	8002768 <HAL_GPIO_ReadPin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d0df      	beq.n	8000b3c <StartDefaultTask+0x80>
 8000b7c:	e000      	b.n	8000b80 <StartDefaultTask+0xc4>
			  	    	{
			  	    		break;
 8000b7e:	bf00      	nop
			  	    	}
			  	    }
			  	  CAN_Motor=69;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <StartDefaultTask+0xd4>)
 8000b82:	2245      	movs	r2, #69	; 0x45
 8000b84:	601a      	str	r2, [r3, #0]
		  }

	  }


    osDelay(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f004 fa65 	bl	8005056 <osDelay>
	  if (CAN_Motor==1 || CAN_Motor==2)
 8000b8c:	e79a      	b.n	8000ac4 <StartDefaultTask+0x8>
 8000b8e:	bf00      	nop
 8000b90:	200002e8 	.word	0x200002e8
 8000b94:	20001c60 	.word	0x20001c60
 8000b98:	48000400 	.word	0x48000400

08000b9c <StartLPT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLPT */
void StartLPT(void const * argument)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLPT */
	/* Infinite loop */
		  for(;;)
		  {
			  if(ledcolor_buffer!=ledcolor)
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <StartLPT+0xb4>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <StartLPT+0xb8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d02e      	beq.n	8000c0e <StartLPT+0x72>
			  {
				  ledcolor_buffer=ledcolor;
 8000bb0:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <StartLPT+0xb8>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <StartLPT+0xb4>)
 8000bb6:	6013      	str	r3, [r2, #0]
				  for(int i=0;i<MAX_LED;i++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	e024      	b.n	8000c08 <StartLPT+0x6c>
				  {
					  Set_LED(i, ledcolor_table[ledcolor_buffer][0], ledcolor_table[ledcolor_buffer][1], ledcolor_table[ledcolor_buffer][2]);
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <StartLPT+0xb4>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4925      	ldr	r1, [pc, #148]	; (8000c58 <StartLPT+0xbc>)
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	440b      	add	r3, r1
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <StartLPT+0xb4>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4920      	ldr	r1, [pc, #128]	; (8000c58 <StartLPT+0xbc>)
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	440b      	add	r3, r1
 8000be0:	3304      	adds	r3, #4
 8000be2:	681c      	ldr	r4, [r3, #0]
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <StartLPT+0xb4>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	491b      	ldr	r1, [pc, #108]	; (8000c58 <StartLPT+0xbc>)
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	3308      	adds	r3, #8
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4622      	mov	r2, r4
 8000bfa:	4601      	mov	r1, r0
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f7ff fbd1 	bl	80003a4 <Set_LED>
				  for(int i=0;i<MAX_LED;i++)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	3301      	adds	r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b26      	cmp	r3, #38	; 0x26
 8000c0c:	ddd7      	ble.n	8000bbe <StartLPT+0x22>
				  }
			  }
			  if(CAN_Neopixel)
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <StartLPT+0xc0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d017      	beq.n	8000c46 <StartLPT+0xaa>
			  {
//				  char *str1 = "Receive the data\r\n";
//				  HAL_UART_Transmit(&huart2,(uint8_t *) str1, strlen (str1), 100);
				  ledmode=RxData[3*CAN_Neopixel];//3 or 6
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <StartLPT+0xc0>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <StartLPT+0xc4>)
 8000c22:	5cd3      	ldrb	r3, [r2, r3]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <StartLPT+0xc8>)
 8000c28:	601a      	str	r2, [r3, #0]
				  ledcolor=RxData[3*CAN_Neopixel+1];//4 or 7
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <StartLPT+0xc0>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	4413      	add	r3, r2
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <StartLPT+0xc4>)
 8000c38:	5cd3      	ldrb	r3, [r2, r3]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <StartLPT+0xb8>)
 8000c3e:	601a      	str	r2, [r3, #0]
				  CAN_Neopixel = 0;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <StartLPT+0xc0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
			  }
		    osDelay(10);
 8000c46:	200a      	movs	r0, #10
 8000c48:	f004 fa05 	bl	8005056 <osDelay>
			  if(ledcolor_buffer!=ledcolor)
 8000c4c:	e7aa      	b.n	8000ba4 <StartLPT+0x8>
 8000c4e:	bf00      	nop
 8000c50:	200002f4 	.word	0x200002f4
 8000c54:	200002f0 	.word	0x200002f0
 8000c58:	20000004 	.word	0x20000004
 8000c5c:	200002e4 	.word	0x200002e4
 8000c60:	20001c60 	.word	0x20001c60
 8000c64:	200002f8 	.word	0x200002f8

08000c68 <StartHPT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHPT */
void StartHPT(void const * argument)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHPT */

	  /* USER CODE BEGIN 5 */
		int breath_bright = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
		int breath_u1d0 = 1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
		  for(int i=0;i<MAX_LED;i++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	e024      	b.n	8000cc8 <StartHPT+0x60>
		  {
			  Set_LED(i, ledcolor_table[ledcolor_buffer][0], ledcolor_table[ledcolor_buffer][1], ledcolor_table[ledcolor_buffer][2]);
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <StartHPT+0xcc>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	492d      	ldr	r1, [pc, #180]	; (8000d38 <StartHPT+0xd0>)
 8000c84:	4613      	mov	r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	4413      	add	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	6818      	ldr	r0, [r3, #0]
 8000c90:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <StartHPT+0xcc>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4928      	ldr	r1, [pc, #160]	; (8000d38 <StartHPT+0xd0>)
 8000c96:	4613      	mov	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	4413      	add	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	681c      	ldr	r4, [r3, #0]
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <StartHPT+0xcc>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4923      	ldr	r1, [pc, #140]	; (8000d38 <StartHPT+0xd0>)
 8000caa:	4613      	mov	r3, r2
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	4413      	add	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	3308      	adds	r3, #8
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4622      	mov	r2, r4
 8000cba:	4601      	mov	r1, r0
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f7ff fb71 	bl	80003a4 <Set_LED>
		  for(int i=0;i<MAX_LED;i++)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b26      	cmp	r3, #38	; 0x26
 8000ccc:	ddd7      	ble.n	8000c7e <StartHPT+0x16>
		  }
		/* Infinite loop */
		for(;;)
		{
			if(ledmode <= 0x02)
 8000cce:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <StartHPT+0xd4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	dc09      	bgt.n	8000cea <StartHPT+0x82>
			{
				  Set_Brightness(ledmode*10);//正常要20但亮度不明顯
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <StartHPT+0xd4>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fba2 	bl	800042c <Set_Brightness>
 8000ce8:	e01e      	b.n	8000d28 <StartHPT+0xc0>
			}
			else if(ledmode == 0x03)
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <StartHPT+0xd4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d11a      	bne.n	8000d28 <StartHPT+0xc0>
			{
				if(breath_u1d0)
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d00a      	beq.n	8000d0e <StartHPT+0xa6>
				{
					breath_bright++;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
					breath_u1d0=breath_bright<20;
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	2b13      	cmp	r3, #19
 8000d02:	bfd4      	ite	le
 8000d04:	2301      	movle	r3, #1
 8000d06:	2300      	movgt	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	e009      	b.n	8000d22 <StartHPT+0xba>
				}
				else
				{
					breath_bright--;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
					breath_u1d0=!(breath_bright>0);
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	bfd4      	ite	le
 8000d1a:	2301      	movle	r3, #1
 8000d1c:	2300      	movgt	r3, #0
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	613b      	str	r3, [r7, #16]
				}
				Set_Brightness(breath_bright);
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff fb82 	bl	800042c <Set_Brightness>
			}
				WS2812_Send();
 8000d28:	f7ff fbe2 	bl	80004f0 <WS2812_Send>
				osDelay (200);
 8000d2c:	20c8      	movs	r0, #200	; 0xc8
 8000d2e:	f004 f992 	bl	8005056 <osDelay>
			if(ledmode <= 0x02)
 8000d32:	e7cc      	b.n	8000cce <StartHPT+0x66>
 8000d34:	200002f4 	.word	0x200002f4
 8000d38:	20000004 	.word	0x20000004
 8000d3c:	200002f8 	.word	0x200002f8

08000d40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d101      	bne.n	8000d56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d52:	f000 f9e9 	bl	8001128 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40001000 	.word	0x40001000

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <Error_Handler+0x6>

08000d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6593      	str	r3, [r2, #88]	; 0x58
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	210f      	movs	r1, #15
 8000da6:	f06f 0001 	mvn.w	r0, #1
 8000daa:	f001 f8d3 	bl	8001f54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a20      	ldr	r2, [pc, #128]	; (8000e5c <HAL_CAN_MspInit+0xa0>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d139      	bne.n	8000e52 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dde:	4a20      	ldr	r2, [pc, #128]	; (8000e60 <HAL_CAN_MspInit+0xa4>)
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <HAL_CAN_MspInit+0xa4>)
 8000de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <HAL_CAN_MspInit+0xa4>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4a1a      	ldr	r2, [pc, #104]	; (8000e60 <HAL_CAN_MspInit+0xa4>)
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_CAN_MspInit+0xa4>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_CAN_MspInit+0xa4>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e20:	2309      	movs	r3, #9
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f001 faf3 	bl	8002418 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2105      	movs	r1, #5
 8000e36:	2014      	movs	r0, #20
 8000e38:	f001 f88c 	bl	8001f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e3c:	2014      	movs	r0, #20
 8000e3e:	f001 f8a5 	bl	8001f8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2105      	movs	r1, #5
 8000e46:	2015      	movs	r0, #21
 8000e48:	f001 f884 	bl	8001f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e4c:	2015      	movs	r0, #21
 8000e4e:	f001 f89d 	bl	8001f8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40006400 	.word	0x40006400
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a1e      	ldr	r2, [pc, #120]	; (8000eec <HAL_TIM_Base_MspInit+0x88>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d136      	bne.n	8000ee4 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e76:	4a1e      	ldr	r2, [pc, #120]	; (8000ef0 <HAL_TIM_Base_MspInit+0x8c>)
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <HAL_TIM_Base_MspInit+0x8c>)
 8000e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e80:	6613      	str	r3, [r2, #96]	; 0x60
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <HAL_TIM_Base_MspInit+0x8c>)
 8000e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_TIM_Base_MspInit+0x90>)
 8000e90:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <HAL_TIM_Base_MspInit+0x94>)
 8000e92:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_TIM_Base_MspInit+0x90>)
 8000e96:	2207      	movs	r2, #7
 8000e98:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_TIM_Base_MspInit+0x90>)
 8000e9c:	2210      	movs	r2, #16
 8000e9e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_TIM_Base_MspInit+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_TIM_Base_MspInit+0x90>)
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_TIM_Base_MspInit+0x90>)
 8000eae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_TIM_Base_MspInit+0x90>)
 8000eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eba:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_TIM_Base_MspInit+0x90>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_TIM_Base_MspInit+0x90>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000ec8:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <HAL_TIM_Base_MspInit+0x90>)
 8000eca:	f001 f86d 	bl	8001fa8 <HAL_DMA_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000ed4:	f7ff ff46 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_TIM_Base_MspInit+0x90>)
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <HAL_TIM_Base_MspInit+0x90>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40012c00 	.word	0x40012c00
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	20001008 	.word	0x20001008
 8000ef8:	4002001c 	.word	0x4002001c

08000efc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <HAL_TIM_MspPostInit+0x68>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d11d      	bne.n	8000f5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <HAL_TIM_MspPostInit+0x6c>)
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_TIM_MspPostInit+0x6c>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_TIM_MspPostInit+0x6c>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f001 fa5f 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40012c00 	.word	0x40012c00
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	2036      	movs	r0, #54	; 0x36
 8000f82:	f000 ffe7 	bl	8001f54 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f86:	2036      	movs	r0, #54	; 0x36
 8000f88:	f001 f800 	bl	8001f8c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f8c:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <HAL_InitTick+0x9c>)
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <HAL_InitTick+0x9c>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	6593      	str	r3, [r2, #88]	; 0x58
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <HAL_InitTick+0x9c>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fa4:	f107 0210 	add.w	r2, r7, #16
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 f9e2 	bl	8003378 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fb4:	f002 f9ca 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8000fb8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbc:	4a13      	ldr	r2, [pc, #76]	; (800100c <HAL_InitTick+0xa0>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	0c9b      	lsrs	r3, r3, #18
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_InitTick+0xa4>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <HAL_InitTick+0xa8>)
 8000fcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_InitTick+0xa4>)
 8000fd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_InitTick+0xa4>)
 8000fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fda:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_InitTick+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_InitTick+0xa4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <HAL_InitTick+0xa4>)
 8000fea:	f002 fa57 	bl	800349c <HAL_TIM_Base_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d104      	bne.n	8000ffe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ff4:	4806      	ldr	r0, [pc, #24]	; (8001010 <HAL_InitTick+0xa4>)
 8000ff6:	f002 faa9 	bl	800354c <HAL_TIM_Base_Start_IT>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	e000      	b.n	8001000 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
}
 8001000:	4618      	mov	r0, r3
 8001002:	3730      	adds	r7, #48	; 0x30
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	431bde83 	.word	0x431bde83
 8001010:	20001cc8 	.word	0x20001cc8
 8001014:	40001000 	.word	0x40001000

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800101c:	e7fe      	b.n	800101c <NMI_Handler+0x4>

0800101e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <HardFault_Handler+0x4>

08001024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <MemManage_Handler+0x4>

0800102a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <BusFault_Handler+0x4>

08001030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <UsageFault_Handler+0x4>

08001036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <DMA1_Channel2_IRQHandler+0x10>)
 800104a:	f001 f906 	bl	800225a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20001008 	.word	0x20001008

08001058 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <CAN1_RX0_IRQHandler+0x10>)
 800105e:	f000 fc9a 	bl	8001996 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20001c68 	.word	0x20001c68

0800106c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <CAN1_RX1_IRQHandler+0x10>)
 8001072:	f000 fc90 	bl	8001996 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20001c68 	.word	0x20001c68

08001080 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <TIM6_DAC_IRQHandler+0x10>)
 8001086:	f002 fe3b 	bl	8003d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20001cc8 	.word	0x20001cc8

08001094 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001098:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <SystemInit+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <SystemInit+0x5c>)
 800109c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <SystemInit+0x60>)
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <SystemInit+0x60>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <SystemInit+0x60>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <SystemInit+0x60>)
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <SystemInit+0x60>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <SystemInit+0x60>)
 80010cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <SystemInit+0x60>)
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <SystemInit+0x60>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <SystemInit+0x60>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001102:	2003      	movs	r0, #3
 8001104:	f000 ff1b 	bl	8001f3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff ff2f 	bl	8000f6c <HAL_InitTick>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	71fb      	strb	r3, [r7, #7]
 8001118:	e001      	b.n	800111e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800111a:	f7ff fe27 	bl	8000d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800111e:	79fb      	ldrb	r3, [r7, #7]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x20>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_IncTick+0x24>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <HAL_IncTick+0x24>)
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	2000006c 	.word	0x2000006c
 800114c:	20001d14 	.word	0x20001d14

08001150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return uwTick;
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <HAL_GetTick+0x14>)
 8001156:	681b      	ldr	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20001d14 	.word	0x20001d14

08001168 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e0ec      	b.n	8001354 <HAL_CAN_Init+0x1ec>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fe18 	bl	8000dbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	f022 0202 	bic.w	r2, r2, #2
 800119a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800119c:	f7ff ffd8 	bl	8001150 <HAL_GetTick>
 80011a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011a2:	e012      	b.n	80011ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011a4:	f7ff ffd4 	bl	8001150 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b0a      	cmp	r3, #10
 80011b0:	d90b      	bls.n	80011ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2205      	movs	r2, #5
 80011c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0c4      	b.n	8001354 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1e5      	bne.n	80011a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	f042 0201 	orr.w	r2, r2, #1
 80011e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e8:	f7ff ffb2 	bl	8001150 <HAL_GetTick>
 80011ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ee:	e012      	b.n	8001216 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f0:	f7ff ffae 	bl	8001150 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b0a      	cmp	r3, #10
 80011fc:	d90b      	bls.n	8001216 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2205      	movs	r2, #5
 800120e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e09e      	b.n	8001354 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0e5      	beq.n	80011f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7e1b      	ldrb	r3, [r3, #24]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d108      	bne.n	800123e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e007      	b.n	800124e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	6812      	ldr	r2, [r2, #0]
 8001248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7e5b      	ldrb	r3, [r3, #25]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d108      	bne.n	8001268 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	6812      	ldr	r2, [r2, #0]
 8001260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e007      	b.n	8001278 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001276:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7e9b      	ldrb	r3, [r3, #26]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d108      	bne.n	8001292 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	f042 0220 	orr.w	r2, r2, #32
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e007      	b.n	80012a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	f022 0220 	bic.w	r2, r2, #32
 80012a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7edb      	ldrb	r3, [r3, #27]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d108      	bne.n	80012bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	f022 0210 	bic.w	r2, r2, #16
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	e007      	b.n	80012cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	f042 0210 	orr.w	r2, r2, #16
 80012ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7f1b      	ldrb	r3, [r3, #28]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d108      	bne.n	80012e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	f042 0208 	orr.w	r2, r2, #8
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e007      	b.n	80012f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	f022 0208 	bic.w	r2, r2, #8
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7f5b      	ldrb	r3, [r3, #29]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d108      	bne.n	8001310 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	f042 0204 	orr.w	r2, r2, #4
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	e007      	b.n	8001320 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	f022 0204 	bic.w	r2, r2, #4
 800131e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6891      	ldr	r1, [r2, #8]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	68d2      	ldr	r2, [r2, #12]
 800132c:	4311      	orrs	r1, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6912      	ldr	r2, [r2, #16]
 8001332:	4311      	orrs	r1, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6952      	ldr	r2, [r2, #20]
 8001338:	4311      	orrs	r1, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6852      	ldr	r2, [r2, #4]
 800133e:	3a01      	subs	r2, #1
 8001340:	430a      	orrs	r2, r1
 8001342:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001372:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001374:	7cfb      	ldrb	r3, [r7, #19]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d003      	beq.n	8001382 <HAL_CAN_ConfigFilter+0x26>
 800137a:	7cfb      	ldrb	r3, [r7, #19]
 800137c:	2b02      	cmp	r3, #2
 800137e:	f040 80aa 	bne.w	80014d6 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001388:	f043 0201 	orr.w	r2, r3, #1
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	2201      	movs	r2, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	401a      	ands	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d123      	bne.n	8001404 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3248      	adds	r2, #72	; 0x48
 80013e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	6892      	ldr	r2, [r2, #8]
 80013f0:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013fa:	6979      	ldr	r1, [r7, #20]
 80013fc:	3348      	adds	r3, #72	; 0x48
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d122      	bne.n	8001452 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	431a      	orrs	r2, r3
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800142c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3248      	adds	r2, #72	; 0x48
 8001432:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	6892      	ldr	r2, [r2, #8]
 800143e:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	68d2      	ldr	r2, [r2, #12]
 8001444:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001446:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001448:	6979      	ldr	r1, [r7, #20]
 800144a:	3348      	adds	r3, #72	; 0x48
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	401a      	ands	r2, r3
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800146c:	e007      	b.n	800147e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	431a      	orrs	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43db      	mvns	r3, r3
 8001490:	401a      	ands	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001498:	e007      	b.n	80014aa <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d107      	bne.n	80014c2 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014c8:	f023 0201 	bic.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e006      	b.n	80014e4 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
  }
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	371c      	adds	r7, #28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d12e      	bne.n	8001562 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2202      	movs	r2, #2
 8001508:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800151c:	f7ff fe18 	bl	8001150 <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001522:	e012      	b.n	800154a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001524:	f7ff fe14 	bl	8001150 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b0a      	cmp	r3, #10
 8001530:	d90b      	bls.n	800154a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2205      	movs	r2, #5
 8001542:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e012      	b.n	8001570 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e5      	bne.n	8001524 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e006      	b.n	8001570 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
  }
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001596:	7ffb      	ldrb	r3, [r7, #31]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d003      	beq.n	80015a4 <HAL_CAN_AddTxMessage+0x2c>
 800159c:	7ffb      	ldrb	r3, [r7, #31]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	f040 80b4 	bne.w	800170c <HAL_CAN_AddTxMessage+0x194>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10a      	bne.n	80015c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d105      	bne.n	80015c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 809c 	beq.w	80016fc <HAL_CAN_AddTxMessage+0x184>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	0e1b      	lsrs	r3, r3, #24
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d907      	bls.n	80015e4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e09a      	b.n	800171a <HAL_CAN_AddTxMessage+0x1a2>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015e4:	2201      	movs	r2, #1
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	409a      	lsls	r2, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10d      	bne.n	8001612 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6819      	ldr	r1, [r3, #0]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3318      	adds	r3, #24
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	440b      	add	r3, r1
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e00f      	b.n	8001632 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6819      	ldr	r1, [r3, #0]
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001620:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 8001626:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3318      	adds	r3, #24
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	440b      	add	r3, r1
 8001630:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3318      	adds	r3, #24
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	440b      	add	r3, r1
 8001642:	3304      	adds	r3, #4
 8001644:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	7d1b      	ldrb	r3, [r3, #20]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d111      	bne.n	8001672 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6819      	ldr	r1, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3318      	adds	r3, #24
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	4413      	add	r3, r2
 800165e:	3304      	adds	r3, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3318      	adds	r3, #24
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	440b      	add	r3, r1
 800166e:	3304      	adds	r3, #4
 8001670:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6819      	ldr	r1, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3307      	adds	r3, #7
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	061a      	lsls	r2, r3, #24
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3306      	adds	r3, #6
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3305      	adds	r3, #5
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	4313      	orrs	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	3204      	adds	r2, #4
 8001696:	7812      	ldrb	r2, [r2, #0]
 8001698:	431a      	orrs	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	440b      	add	r3, r1
 80016a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80016a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6819      	ldr	r1, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3303      	adds	r3, #3
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	061a      	lsls	r2, r3, #24
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3302      	adds	r3, #2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3301      	adds	r3, #1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	4313      	orrs	r3, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	7812      	ldrb	r2, [r2, #0]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	440b      	add	r3, r1
 80016d2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80016d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3318      	adds	r3, #24
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	4413      	add	r3, r2
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f043 0201 	orr.w	r2, r3, #1
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3318      	adds	r3, #24
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	440b      	add	r3, r1
 80016f6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e00e      	b.n	800171a <HAL_CAN_AddTxMessage+0x1a2>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e006      	b.n	800171a <HAL_CAN_AddTxMessage+0x1a2>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
  }
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001726:	b480      	push	{r7}
 8001728:	b087      	sub	sp, #28
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d003      	beq.n	800174a <HAL_CAN_GetRxMessage+0x24>
 8001742:	7dfb      	ldrb	r3, [r7, #23]
 8001744:	2b02      	cmp	r3, #2
 8001746:	f040 80f3 	bne.w	8001930 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10e      	bne.n	800176e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d116      	bne.n	800178c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e0e7      	b.n	800193e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d107      	bne.n	800178c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0d8      	b.n	800193e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	331b      	adds	r3, #27
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	4413      	add	r3, r2
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0204 	and.w	r2, r3, #4
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10c      	bne.n	80017c4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	331b      	adds	r3, #27
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	4413      	add	r3, r2
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0d5b      	lsrs	r3, r3, #21
 80017ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e00b      	b.n	80017dc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	331b      	adds	r3, #27
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	4413      	add	r3, r2
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	08db      	lsrs	r3, r3, #3
 80017d4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	331b      	adds	r3, #27
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	4413      	add	r3, r2
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0202 	and.w	r2, r3, #2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	331b      	adds	r3, #27
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	4413      	add	r3, r2
 80017fe:	3304      	adds	r3, #4
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 020f 	and.w	r2, r3, #15
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	331b      	adds	r3, #27
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	4413      	add	r3, r2
 8001816:	3304      	adds	r3, #4
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	b2da      	uxtb	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	331b      	adds	r3, #27
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	4413      	add	r3, r2
 800182e:	3304      	adds	r3, #4
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	0c1b      	lsrs	r3, r3, #16
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	4413      	add	r3, r2
 8001844:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	6811      	ldr	r1, [r2, #0]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	440a      	add	r2, r1
 800185e:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	0a12      	lsrs	r2, r2, #8
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	3302      	adds	r3, #2
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	6811      	ldr	r1, [r2, #0]
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	440a      	add	r2, r1
 8001878:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	0c12      	lsrs	r2, r2, #16
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	3303      	adds	r3, #3
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	6811      	ldr	r1, [r2, #0]
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	440a      	add	r2, r1
 8001892:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	0e12      	lsrs	r2, r2, #24
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	3304      	adds	r3, #4
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	6811      	ldr	r1, [r2, #0]
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	440a      	add	r2, r1
 80018ac:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	3305      	adds	r3, #5
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	6811      	ldr	r1, [r2, #0]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	440a      	add	r2, r1
 80018c4:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	0a12      	lsrs	r2, r2, #8
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	3306      	adds	r3, #6
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	6811      	ldr	r1, [r2, #0]
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	440a      	add	r2, r1
 80018de:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	0c12      	lsrs	r2, r2, #16
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	3307      	adds	r3, #7
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	6811      	ldr	r1, [r2, #0]
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	440a      	add	r2, r1
 80018f8:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	0e12      	lsrs	r2, r2, #24
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d108      	bne.n	800191c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	68d2      	ldr	r2, [r2, #12]
 8001914:	f042 0220 	orr.w	r2, r2, #32
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	e007      	b.n	800192c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	6912      	ldr	r2, [r2, #16]
 8001926:	f042 0220 	orr.w	r2, r2, #32
 800192a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	e006      	b.n	800193e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
  }
}
 800193e:	4618      	mov	r0, r3
 8001940:	371c      	adds	r7, #28
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800195a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d002      	beq.n	8001968 <HAL_CAN_ActivateNotification+0x1e>
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d109      	bne.n	800197c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	6951      	ldr	r1, [r2, #20]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	e006      	b.n	800198a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
  }
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b08a      	sub	sp, #40	; 0x28
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d07c      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d023      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2201      	movs	r2, #1
 80019ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f97d 	bl	8001cf8 <HAL_CAN_TxMailbox0CompleteCallback>
 80019fe:	e016      	b.n	8001a2e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d004      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	e00c      	b.n	8001a2e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
 8001a26:	e002      	b.n	8001a2e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f983 	bl	8001d34 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d024      	beq.n	8001a82 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f95d 	bl	8001d0c <HAL_CAN_TxMailbox1CompleteCallback>
 8001a52:	e016      	b.n	8001a82 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d004      	beq.n	8001a68 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
 8001a66:	e00c      	b.n	8001a82 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d004      	beq.n	8001a7c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7a:	e002      	b.n	8001a82 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f963 	bl	8001d48 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d024      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f93d 	bl	8001d20 <HAL_CAN_TxMailbox2CompleteCallback>
 8001aa6:	e016      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aba:	e00c      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ace:	e002      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f943 	bl	8001d5c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00c      	beq.n	8001afa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2210      	movs	r2, #16
 8001af8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00b      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d006      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2208      	movs	r2, #8
 8001b14:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f92a 	bl	8001d70 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7fe fb65 	bl	8000204 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00c      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2210      	movs	r2, #16
 8001b5c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00b      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2208      	movs	r2, #8
 8001b78:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f90c 	bl	8001d98 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f8f3 	bl	8001d84 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00b      	beq.n	8001bc0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f8f6 	bl	8001dac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2208      	movs	r2, #8
 8001bda:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f8ef 	bl	8001dc0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d075      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d06c      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d03d      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d038      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c64:	2b30      	cmp	r3, #48	; 0x30
 8001c66:	d017      	beq.n	8001c98 <HAL_CAN_IRQHandler+0x302>
 8001c68:	2b30      	cmp	r3, #48	; 0x30
 8001c6a:	d804      	bhi.n	8001c76 <HAL_CAN_IRQHandler+0x2e0>
 8001c6c:	2b10      	cmp	r3, #16
 8001c6e:	d009      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x2ee>
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d00c      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c74:	e024      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001c76:	2b50      	cmp	r3, #80	; 0x50
 8001c78:	d018      	beq.n	8001cac <HAL_CAN_IRQHandler+0x316>
 8001c7a:	2b60      	cmp	r3, #96	; 0x60
 8001c7c:	d01b      	beq.n	8001cb6 <HAL_CAN_IRQHandler+0x320>
 8001c7e:	2b40      	cmp	r3, #64	; 0x40
 8001c80:	d00f      	beq.n	8001ca2 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001c82:	e01d      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f043 0308 	orr.w	r3, r3, #8
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c8c:	e018      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f043 0310 	orr.w	r3, r3, #16
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c96:	e013      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	f043 0320 	orr.w	r3, r3, #32
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ca0:	e00e      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001caa:	e009      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cb4:	e004      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cbe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	6992      	ldr	r2, [r2, #24]
 8001cca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f872 	bl	8001dd4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3728      	adds	r7, #40	; 0x28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e04:	4013      	ands	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1a:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	60d3      	str	r3, [r2, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <__NVIC_GetPriorityGrouping+0x18>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 0307 	and.w	r3, r3, #7
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	db0b      	blt.n	8001e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5e:	4909      	ldr	r1, [pc, #36]	; (8001e84 <__NVIC_EnableIRQ+0x38>)
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	79fa      	ldrb	r2, [r7, #7]
 8001e68:	f002 021f 	and.w	r2, r2, #31
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100

08001e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db0a      	blt.n	8001eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	490d      	ldr	r1, [pc, #52]	; (8001ed4 <__NVIC_SetPriority+0x4c>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb0:	e00a      	b.n	8001ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb2:	4909      	ldr	r1, [pc, #36]	; (8001ed8 <__NVIC_SetPriority+0x50>)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3b04      	subs	r3, #4
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	761a      	strb	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e100 	.word	0xe000e100
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f1c3 0307 	rsb	r3, r3, #7
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	bf28      	it	cs
 8001efa:	2304      	movcs	r3, #4
 8001efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d902      	bls.n	8001f0c <NVIC_EncodePriority+0x30>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3b03      	subs	r3, #3
 8001f0a:	e000      	b.n	8001f0e <NVIC_EncodePriority+0x32>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	2201      	movs	r2, #1
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f22:	2101      	movs	r1, #1
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	1e59      	subs	r1, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	4313      	orrs	r3, r2
         );
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff4e 	bl	8001de8 <__NVIC_SetPriorityGrouping>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f66:	f7ff ff63 	bl	8001e30 <__NVIC_GetPriorityGrouping>
 8001f6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	6978      	ldr	r0, [r7, #20]
 8001f72:	f7ff ffb3 	bl	8001edc <NVIC_EncodePriority>
 8001f76:	4602      	mov	r2, r0
 8001f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff82 	bl	8001e88 <__NVIC_SetPriority>
}
 8001f84:	bf00      	nop
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff56 	bl	8001e4c <__NVIC_EnableIRQ>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e098      	b.n	80020ec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b4d      	ldr	r3, [pc, #308]	; (80020f8 <HAL_DMA_Init+0x150>)
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d80f      	bhi.n	8001fe6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b4b      	ldr	r3, [pc, #300]	; (80020fc <HAL_DMA_Init+0x154>)
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a4b      	ldr	r2, [pc, #300]	; (8002100 <HAL_DMA_Init+0x158>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	091b      	lsrs	r3, r3, #4
 8001fd8:	009a      	lsls	r2, r3, #2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a48      	ldr	r2, [pc, #288]	; (8002104 <HAL_DMA_Init+0x15c>)
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40
 8001fe4:	e00e      	b.n	8002004 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b46      	ldr	r3, [pc, #280]	; (8002108 <HAL_DMA_Init+0x160>)
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a43      	ldr	r2, [pc, #268]	; (8002100 <HAL_DMA_Init+0x158>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	009a      	lsls	r2, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a42      	ldr	r2, [pc, #264]	; (800210c <HAL_DMA_Init+0x164>)
 8002002:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800201a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002028:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002034:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002040:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800205e:	d039      	beq.n	80020d4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	4a27      	ldr	r2, [pc, #156]	; (8002104 <HAL_DMA_Init+0x15c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d11a      	bne.n	80020a0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800206a:	4929      	ldr	r1, [pc, #164]	; (8002110 <HAL_DMA_Init+0x168>)
 800206c:	4b28      	ldr	r3, [pc, #160]	; (8002110 <HAL_DMA_Init+0x168>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	f003 031c 	and.w	r3, r3, #28
 8002078:	200f      	movs	r0, #15
 800207a:	fa00 f303 	lsl.w	r3, r0, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	4013      	ands	r3, r2
 8002082:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002084:	4822      	ldr	r0, [pc, #136]	; (8002110 <HAL_DMA_Init+0x168>)
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_DMA_Init+0x168>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6859      	ldr	r1, [r3, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f003 031c 	and.w	r3, r3, #28
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	4313      	orrs	r3, r2
 800209c:	6003      	str	r3, [r0, #0]
 800209e:	e019      	b.n	80020d4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020a0:	491c      	ldr	r1, [pc, #112]	; (8002114 <HAL_DMA_Init+0x16c>)
 80020a2:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <HAL_DMA_Init+0x16c>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f003 031c 	and.w	r3, r3, #28
 80020ae:	200f      	movs	r0, #15
 80020b0:	fa00 f303 	lsl.w	r3, r0, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	4013      	ands	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020ba:	4816      	ldr	r0, [pc, #88]	; (8002114 <HAL_DMA_Init+0x16c>)
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_DMA_Init+0x16c>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c8:	f003 031c 	and.w	r3, r3, #28
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40020407 	.word	0x40020407
 80020fc:	bffdfff8 	.word	0xbffdfff8
 8002100:	cccccccd 	.word	0xcccccccd
 8002104:	40020000 	.word	0x40020000
 8002108:	bffdfbf8 	.word	0xbffdfbf8
 800210c:	40020400 	.word	0x40020400
 8002110:	400200a8 	.word	0x400200a8
 8002114:	400204a8 	.word	0x400204a8

08002118 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_DMA_Start_IT+0x20>
 8002134:	2302      	movs	r3, #2
 8002136:	e04b      	b.n	80021d0 <HAL_DMA_Start_IT+0xb8>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	d13a      	bne.n	80021c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f921 	bl	80023b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	2b00      	cmp	r3, #0
 800217c:	d008      	beq.n	8002190 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	f042 020e 	orr.w	r2, r2, #14
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e00f      	b.n	80021b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	f022 0204 	bic.w	r2, r2, #4
 800219e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	f042 020a 	orr.w	r2, r2, #10
 80021ae:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e005      	b.n	80021ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80021ca:	2302      	movs	r3, #2
 80021cc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d005      	beq.n	80021fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2204      	movs	r2, #4
 80021f4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
 80021fa:	e029      	b.n	8002250 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	f022 020e 	bic.w	r2, r2, #14
 800220a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002224:	f002 021c 	and.w	r2, r2, #28
 8002228:	2101      	movs	r1, #1
 800222a:	fa01 f202 	lsl.w	r2, r1, r2
 800222e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
    }
  }
  return status;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f003 031c 	and.w	r3, r3, #28
 800227a:	2204      	movs	r2, #4
 800227c:	409a      	lsls	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d026      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x7a>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d021      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d107      	bne.n	80022ae <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	f022 0204 	bic.w	r2, r2, #4
 80022ac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022b6:	f002 021c 	and.w	r2, r2, #28
 80022ba:	2104      	movs	r1, #4
 80022bc:	fa01 f202 	lsl.w	r2, r1, r2
 80022c0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d071      	beq.n	80023ae <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80022d2:	e06c      	b.n	80023ae <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d8:	f003 031c 	and.w	r3, r3, #28
 80022dc:	2202      	movs	r2, #2
 80022de:	409a      	lsls	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d02e      	beq.n	8002346 <HAL_DMA_IRQHandler+0xec>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d029      	beq.n	8002346 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10b      	bne.n	8002318 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	f022 020a 	bic.w	r2, r2, #10
 800230e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002320:	f002 021c 	and.w	r2, r2, #28
 8002324:	2102      	movs	r1, #2
 8002326:	fa01 f202 	lsl.w	r2, r1, r2
 800232a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	2b00      	cmp	r3, #0
 800233a:	d038      	beq.n	80023ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002344:	e033      	b.n	80023ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f003 031c 	and.w	r3, r3, #28
 800234e:	2208      	movs	r2, #8
 8002350:	409a      	lsls	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d02a      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x156>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d025      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	f022 020e 	bic.w	r2, r2, #14
 8002372:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800237c:	f002 021c 	and.w	r2, r2, #28
 8002380:	2101      	movs	r1, #1
 8002382:	fa01 f202 	lsl.w	r2, r1, r2
 8002386:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d004      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023ae:	bf00      	nop
 80023b0:	bf00      	nop
}
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023ce:	f002 021c 	and.w	r2, r2, #28
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f202 	lsl.w	r2, r1, r2
 80023d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d108      	bne.n	80023fc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023fa:	e007      	b.n	800240c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	60da      	str	r2, [r3, #12]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002426:	e17f      	b.n	8002728 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	4013      	ands	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8171 	beq.w	8002722 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d00b      	beq.n	8002460 <HAL_GPIO_Init+0x48>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d007      	beq.n	8002460 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002454:	2b11      	cmp	r3, #17
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b12      	cmp	r3, #18
 800245e:	d130      	bne.n	80024c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002496:	2201      	movs	r2, #1
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	091b      	lsrs	r3, r3, #4
 80024ac:	f003 0201 	and.w	r2, r3, #1
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d118      	bne.n	8002500 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024d4:	2201      	movs	r2, #1
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	08db      	lsrs	r3, r3, #3
 80024ea:	f003 0201 	and.w	r2, r3, #1
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x128>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b12      	cmp	r3, #18
 800253e:	d123      	bne.n	8002588 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	220f      	movs	r2, #15
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	08da      	lsrs	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3208      	adds	r2, #8
 8002582:	6939      	ldr	r1, [r7, #16]
 8002584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0203 	and.w	r2, r3, #3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80ac 	beq.w	8002722 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	4a5e      	ldr	r2, [pc, #376]	; (8002744 <HAL_GPIO_Init+0x32c>)
 80025cc:	4b5d      	ldr	r3, [pc, #372]	; (8002744 <HAL_GPIO_Init+0x32c>)
 80025ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6613      	str	r3, [r2, #96]	; 0x60
 80025d6:	4b5b      	ldr	r3, [pc, #364]	; (8002744 <HAL_GPIO_Init+0x32c>)
 80025d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025e2:	4a59      	ldr	r2, [pc, #356]	; (8002748 <HAL_GPIO_Init+0x330>)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	220f      	movs	r2, #15
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800260c:	d025      	beq.n	800265a <HAL_GPIO_Init+0x242>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4e      	ldr	r2, [pc, #312]	; (800274c <HAL_GPIO_Init+0x334>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01f      	beq.n	8002656 <HAL_GPIO_Init+0x23e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4d      	ldr	r2, [pc, #308]	; (8002750 <HAL_GPIO_Init+0x338>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d019      	beq.n	8002652 <HAL_GPIO_Init+0x23a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4c      	ldr	r2, [pc, #304]	; (8002754 <HAL_GPIO_Init+0x33c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d013      	beq.n	800264e <HAL_GPIO_Init+0x236>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4b      	ldr	r2, [pc, #300]	; (8002758 <HAL_GPIO_Init+0x340>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00d      	beq.n	800264a <HAL_GPIO_Init+0x232>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4a      	ldr	r2, [pc, #296]	; (800275c <HAL_GPIO_Init+0x344>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <HAL_GPIO_Init+0x22e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a49      	ldr	r2, [pc, #292]	; (8002760 <HAL_GPIO_Init+0x348>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d101      	bne.n	8002642 <HAL_GPIO_Init+0x22a>
 800263e:	2306      	movs	r3, #6
 8002640:	e00c      	b.n	800265c <HAL_GPIO_Init+0x244>
 8002642:	2307      	movs	r3, #7
 8002644:	e00a      	b.n	800265c <HAL_GPIO_Init+0x244>
 8002646:	2305      	movs	r3, #5
 8002648:	e008      	b.n	800265c <HAL_GPIO_Init+0x244>
 800264a:	2304      	movs	r3, #4
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x244>
 800264e:	2303      	movs	r3, #3
 8002650:	e004      	b.n	800265c <HAL_GPIO_Init+0x244>
 8002652:	2302      	movs	r3, #2
 8002654:	e002      	b.n	800265c <HAL_GPIO_Init+0x244>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x244>
 800265a:	2300      	movs	r3, #0
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	f002 0203 	and.w	r2, r2, #3
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	4093      	lsls	r3, r2
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800266c:	4936      	ldr	r1, [pc, #216]	; (8002748 <HAL_GPIO_Init+0x330>)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_GPIO_Init+0x34c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800269e:	4a31      	ldr	r2, [pc, #196]	; (8002764 <HAL_GPIO_Init+0x34c>)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026a4:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <HAL_GPIO_Init+0x34c>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026c8:	4a26      	ldr	r2, [pc, #152]	; (8002764 <HAL_GPIO_Init+0x34c>)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ce:	4b25      	ldr	r3, [pc, #148]	; (8002764 <HAL_GPIO_Init+0x34c>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4013      	ands	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026f2:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <HAL_GPIO_Init+0x34c>)
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026f8:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <HAL_GPIO_Init+0x34c>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	43db      	mvns	r3, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800271c:	4a11      	ldr	r2, [pc, #68]	; (8002764 <HAL_GPIO_Init+0x34c>)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3301      	adds	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa22 f303 	lsr.w	r3, r2, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	f47f ae78 	bne.w	8002428 <HAL_GPIO_Init+0x10>
  }
}
 8002738:	bf00      	nop
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	40021000 	.word	0x40021000
 8002748:	40010000 	.word	0x40010000
 800274c:	48000400 	.word	0x48000400
 8002750:	48000800 	.word	0x48000800
 8002754:	48000c00 	.word	0x48000c00
 8002758:	48001000 	.word	0x48001000
 800275c:	48001400 	.word	0x48001400
 8002760:	48001800 	.word	0x48001800
 8002764:	40010400 	.word	0x40010400

08002768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	887b      	ldrh	r3, [r7, #2]
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	e001      	b.n	800278a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	807b      	strh	r3, [r7, #2]
 80027a4:	4613      	mov	r3, r2
 80027a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027a8:	787b      	ldrb	r3, [r7, #1]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027b4:	e002      	b.n	80027bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40007000 	.word	0x40007000

080027e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f2:	d130      	bne.n	8002856 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027f4:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002800:	d038      	beq.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002802:	4a20      	ldr	r2, [pc, #128]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800280c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002810:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2232      	movs	r2, #50	; 0x32
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	4a1b      	ldr	r2, [pc, #108]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	0c9b      	lsrs	r3, r3, #18
 8002824:	3301      	adds	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002828:	e002      	b.n	8002830 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3b01      	subs	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283c:	d102      	bne.n	8002844 <HAL_PWREx_ControlVoltageScaling+0x60>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f2      	bne.n	800282a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002850:	d110      	bne.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e00f      	b.n	8002876 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002862:	d007      	beq.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002864:	4a07      	ldr	r2, [pc, #28]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800286e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002872:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40007000 	.word	0x40007000
 8002888:	20000064 	.word	0x20000064
 800288c:	431bde83 	.word	0x431bde83

08002890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e3d4      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a2:	4ba1      	ldr	r3, [pc, #644]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ac:	4b9e      	ldr	r3, [pc, #632]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80e4 	beq.w	8002a8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <HAL_RCC_OscConfig+0x4a>
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b0c      	cmp	r3, #12
 80028ce:	f040 808b 	bne.w	80029e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	f040 8087 	bne.w	80029e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028da:	4b93      	ldr	r3, [pc, #588]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_RCC_OscConfig+0x62>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e3ac      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1a      	ldr	r2, [r3, #32]
 80028f6:	4b8c      	ldr	r3, [pc, #560]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <HAL_RCC_OscConfig+0x7c>
 8002902:	4b89      	ldr	r3, [pc, #548]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290a:	e005      	b.n	8002918 <HAL_RCC_OscConfig+0x88>
 800290c:	4b86      	ldr	r3, [pc, #536]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002918:	429a      	cmp	r2, r3
 800291a:	d923      	bls.n	8002964 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fd5b 	bl	80033dc <RCC_SetFlashLatencyFromMSIRange>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e38d      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002930:	4a7d      	ldr	r2, [pc, #500]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002932:	4b7d      	ldr	r3, [pc, #500]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	497a      	ldr	r1, [pc, #488]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 800293e:	4b7a      	ldr	r3, [pc, #488]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800294e:	4976      	ldr	r1, [pc, #472]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002950:	4b75      	ldr	r3, [pc, #468]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	021b      	lsls	r3, r3, #8
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
 8002962:	e025      	b.n	80029b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002964:	4a70      	ldr	r2, [pc, #448]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002966:	4b70      	ldr	r3, [pc, #448]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f043 0308 	orr.w	r3, r3, #8
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	496d      	ldr	r1, [pc, #436]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002972:	4b6d      	ldr	r3, [pc, #436]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002982:	4969      	ldr	r1, [pc, #420]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002984:	4b68      	ldr	r3, [pc, #416]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fd1b 	bl	80033dc <RCC_SetFlashLatencyFromMSIRange>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e34d      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b0:	f000 fc36 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80029b4:	4601      	mov	r1, r0
 80029b6:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	4a5a      	ldr	r2, [pc, #360]	; (8002b2c <HAL_RCC_OscConfig+0x29c>)
 80029c2:	5cd3      	ldrb	r3, [r2, r3]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	fa21 f303 	lsr.w	r3, r1, r3
 80029cc:	4a58      	ldr	r2, [pc, #352]	; (8002b30 <HAL_RCC_OscConfig+0x2a0>)
 80029ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029d0:	4b58      	ldr	r3, [pc, #352]	; (8002b34 <HAL_RCC_OscConfig+0x2a4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fac9 	bl	8000f6c <HAL_InitTick>
 80029da:	4603      	mov	r3, r0
 80029dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d052      	beq.n	8002a8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	e331      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d032      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029f0:	4a4d      	ldr	r2, [pc, #308]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80029f2:	4b4d      	ldr	r3, [pc, #308]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029fc:	f7fe fba8 	bl	8001150 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a04:	f7fe fba4 	bl	8001150 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e31a      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a16:	4b44      	ldr	r3, [pc, #272]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a22:	4a41      	ldr	r2, [pc, #260]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a24:	4b40      	ldr	r3, [pc, #256]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f043 0308 	orr.w	r3, r3, #8
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	493e      	ldr	r1, [pc, #248]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a30:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a40:	4939      	ldr	r1, [pc, #228]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a42:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
 8002a54:	e01a      	b.n	8002a8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a56:	4a34      	ldr	r2, [pc, #208]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a58:	4b33      	ldr	r3, [pc, #204]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a62:	f7fe fb75 	bl	8001150 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a6a:	f7fe fb71 	bl	8001150 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e2e7      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a7c:	4b2a      	ldr	r3, [pc, #168]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x1da>
 8002a88:	e000      	b.n	8002a8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d074      	beq.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d005      	beq.n	8002aaa <HAL_RCC_OscConfig+0x21a>
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	2b0c      	cmp	r3, #12
 8002aa2:	d10e      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d10b      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d064      	beq.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d160      	bne.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e2c4      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x24a>
 8002acc:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	e01d      	b.n	8002b16 <HAL_RCC_OscConfig+0x286>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae2:	d10c      	bne.n	8002afe <HAL_RCC_OscConfig+0x26e>
 8002ae4:	4a10      	ldr	r2, [pc, #64]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	e00b      	b.n	8002b16 <HAL_RCC_OscConfig+0x286>
 8002afe:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fb17 	bl	8001150 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b24:	e011      	b.n	8002b4a <HAL_RCC_OscConfig+0x2ba>
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	08006f54 	.word	0x08006f54
 8002b30:	20000064 	.word	0x20000064
 8002b34:	20000068 	.word	0x20000068
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fb0a 	bl	8001150 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e280      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b4a:	4baf      	ldr	r3, [pc, #700]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x2a8>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fafa 	bl	8001150 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe faf6 	bl	8001150 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e26c      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b72:	4ba5      	ldr	r3, [pc, #660]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2d0>
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d060      	beq.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x310>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d119      	bne.n	8002bce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d116      	bne.n	8002bce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba0:	4b99      	ldr	r3, [pc, #612]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x328>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e249      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb8:	4993      	ldr	r1, [pc, #588]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bba:	4b93      	ldr	r3, [pc, #588]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	061b      	lsls	r3, r3, #24
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bcc:	e040      	b.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d023      	beq.n	8002c1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd6:	4a8c      	ldr	r2, [pc, #560]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bd8:	4b8b      	ldr	r3, [pc, #556]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe fab5 	bl	8001150 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bea:	f7fe fab1 	bl	8001150 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e227      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bfc:	4b82      	ldr	r3, [pc, #520]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	497f      	ldr	r1, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c0a:	4b7f      	ldr	r3, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	061b      	lsls	r3, r3, #24
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	e018      	b.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1e:	4a7a      	ldr	r2, [pc, #488]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c20:	4b79      	ldr	r3, [pc, #484]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fa91 	bl	8001150 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c32:	f7fe fa8d 	bl	8001150 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e203      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c44:	4b70      	ldr	r3, [pc, #448]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d03c      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01c      	beq.n	8002c9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c64:	4a68      	ldr	r2, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c66:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe fa6c 	bl	8001150 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fa68 	bl	8001150 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1de      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c8e:	4b5e      	ldr	r3, [pc, #376]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ef      	beq.n	8002c7c <HAL_RCC_OscConfig+0x3ec>
 8002c9c:	e01b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9e:	4a5a      	ldr	r2, [pc, #360]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002ca0:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7fe fa4f 	bl	8001150 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7fe fa4b 	bl	8001150 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1c1      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc8:	4b4f      	ldr	r3, [pc, #316]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1ef      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80a6 	beq.w	8002e30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ce8:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10d      	bne.n	8002d10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf4:	4a44      	ldr	r2, [pc, #272]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002cf6:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	6593      	str	r3, [r2, #88]	; 0x58
 8002d00:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d10:	4b3e      	ldr	r3, [pc, #248]	; (8002e0c <HAL_RCC_OscConfig+0x57c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d118      	bne.n	8002d4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1c:	4a3b      	ldr	r2, [pc, #236]	; (8002e0c <HAL_RCC_OscConfig+0x57c>)
 8002d1e:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <HAL_RCC_OscConfig+0x57c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d28:	f7fe fa12 	bl	8001150 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d30:	f7fe fa0e 	bl	8001150 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e184      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d42:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <HAL_RCC_OscConfig+0x57c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d108      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4d8>
 8002d56:	4a2c      	ldr	r2, [pc, #176]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d66:	e024      	b.n	8002db2 <HAL_RCC_OscConfig+0x522>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d110      	bne.n	8002d92 <HAL_RCC_OscConfig+0x502>
 8002d70:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d72:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	f043 0304 	orr.w	r3, r3, #4
 8002d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d80:	4a21      	ldr	r2, [pc, #132]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d82:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d90:	e00f      	b.n	8002db2 <HAL_RCC_OscConfig+0x522>
 8002d92:	4a1d      	ldr	r2, [pc, #116]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d94:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002da2:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002da4:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f023 0304 	bic.w	r3, r3, #4
 8002dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fe f9c9 	bl	8001150 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fe f9c5 	bl	8001150 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e139      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0ed      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x532>
 8002de6:	e01a      	b.n	8002e1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fe f9b2 	bl	8001150 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dee:	e00f      	b.n	8002e10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7fe f9ae 	bl	8001150 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d906      	bls.n	8002e10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e122      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e10:	4b90      	ldr	r3, [pc, #576]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e8      	bne.n	8002df0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d105      	bne.n	8002e30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e24:	4a8b      	ldr	r2, [pc, #556]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002e26:	4b8b      	ldr	r3, [pc, #556]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8108 	beq.w	800304a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	f040 80d0 	bne.w	8002fe4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e44:	4b83      	ldr	r3, [pc, #524]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0203 	and.w	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d130      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	3b01      	subs	r3, #1
 8002e64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d127      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d11f      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e84:	2a07      	cmp	r2, #7
 8002e86:	bf14      	ite	ne
 8002e88:	2201      	movne	r2, #1
 8002e8a:	2200      	moveq	r2, #0
 8002e8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d113      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d109      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d06e      	beq.n	8002f98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d069      	beq.n	8002f94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ec0:	4b64      	ldr	r3, [pc, #400]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ecc:	4b61      	ldr	r3, [pc, #388]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0b7      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002edc:	4a5d      	ldr	r2, [pc, #372]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ede:	4b5d      	ldr	r3, [pc, #372]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ee8:	f7fe f932 	bl	8001150 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fe f92e 	bl	8001150 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e0a4      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f02:	4b54      	ldr	r3, [pc, #336]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f0e:	4851      	ldr	r0, [pc, #324]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f10:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	4b50      	ldr	r3, [pc, #320]	; (8003058 <HAL_RCC_OscConfig+0x7c8>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f20:	3a01      	subs	r2, #1
 8002f22:	0112      	lsls	r2, r2, #4
 8002f24:	4311      	orrs	r1, r2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f2a:	0212      	lsls	r2, r2, #8
 8002f2c:	4311      	orrs	r1, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f32:	0852      	lsrs	r2, r2, #1
 8002f34:	3a01      	subs	r2, #1
 8002f36:	0552      	lsls	r2, r2, #21
 8002f38:	4311      	orrs	r1, r2
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f3e:	0852      	lsrs	r2, r2, #1
 8002f40:	3a01      	subs	r2, #1
 8002f42:	0652      	lsls	r2, r2, #25
 8002f44:	4311      	orrs	r1, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f4a:	0912      	lsrs	r2, r2, #4
 8002f4c:	0452      	lsls	r2, r2, #17
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f54:	4a3f      	ldr	r2, [pc, #252]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f56:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f60:	4a3c      	ldr	r2, [pc, #240]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f62:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f6c:	f7fe f8f0 	bl	8001150 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fe f8ec 	bl	8001150 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e062      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f86:	4b33      	ldr	r3, [pc, #204]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f92:	e05a      	b.n	800304a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e059      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f98:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d152      	bne.n	800304a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fa4:	4a2b      	ldr	r2, [pc, #172]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb0:	4a28      	ldr	r2, [pc, #160]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fb2:	4b28      	ldr	r3, [pc, #160]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fbc:	f7fe f8c8 	bl	8001150 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fe f8c4 	bl	8001150 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e03a      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd6:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x734>
 8002fe2:	e032      	b.n	800304a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d02d      	beq.n	8003046 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fea:	4a1a      	ldr	r2, [pc, #104]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ff6:	4b17      	ldr	r3, [pc, #92]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d105      	bne.n	800300e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003002:	4a14      	ldr	r2, [pc, #80]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8003004:	4b13      	ldr	r3, [pc, #76]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f023 0303 	bic.w	r3, r3, #3
 800300c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800300e:	4a11      	ldr	r2, [pc, #68]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fe f897 	bl	8001150 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe f893 	bl	8001150 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e009      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x796>
 8003044:	e001      	b.n	800304a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3720      	adds	r7, #32
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	f99d808c 	.word	0xf99d808c

0800305c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0c8      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003070:	4b66      	ldr	r3, [pc, #408]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0207 	and.w	r2, r3, #7
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d210      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4963      	ldr	r1, [pc, #396]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003080:	4b62      	ldr	r3, [pc, #392]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 0207 	bic.w	r2, r3, #7
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b5f      	ldr	r3, [pc, #380]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0207 	and.w	r2, r3, #7
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0b0      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d04c      	beq.n	8003146 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b4:	4b56      	ldr	r3, [pc, #344]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d121      	bne.n	8003104 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e09e      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d115      	bne.n	8003104 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e092      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030e4:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e086      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f4:	4b46      	ldr	r3, [pc, #280]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e07e      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003104:	4942      	ldr	r1, [pc, #264]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003106:	4b42      	ldr	r3, [pc, #264]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f023 0203 	bic.w	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003116:	f7fe f81b 	bl	8001150 <HAL_GetTick>
 800311a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311c:	e00a      	b.n	8003134 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311e:	f7fe f817 	bl	8001150 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e066      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003134:	4b36      	ldr	r3, [pc, #216]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 020c 	and.w	r2, r3, #12
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	429a      	cmp	r2, r3
 8003144:	d1eb      	bne.n	800311e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003152:	492f      	ldr	r1, [pc, #188]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003154:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b29      	ldr	r3, [pc, #164]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0207 	and.w	r2, r3, #7
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d910      	bls.n	8003194 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4926      	ldr	r1, [pc, #152]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f023 0207 	bic.w	r2, r3, #7
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0207 	and.w	r2, r3, #7
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e036      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a0:	491b      	ldr	r1, [pc, #108]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031a2:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031be:	4914      	ldr	r1, [pc, #80]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031c0:	4b13      	ldr	r3, [pc, #76]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031d2:	f000 f825 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80031d6:	4601      	mov	r1, r0
 80031d8:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	5cd3      	ldrb	r3, [r2, r3]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	fa21 f303 	lsr.w	r3, r1, r3
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd feb8 	bl	8000f6c <HAL_InitTick>
 80031fc:	4603      	mov	r3, r0
 80031fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8003200:	7afb      	ldrb	r3, [r7, #11]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40022000 	.word	0x40022000
 8003210:	40021000 	.word	0x40021000
 8003214:	08006f54 	.word	0x08006f54
 8003218:	20000064 	.word	0x20000064
 800321c:	20000068 	.word	0x20000068

08003220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	; 0x24
 8003224:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800322e:	4b3d      	ldr	r3, [pc, #244]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003238:	4b3a      	ldr	r3, [pc, #232]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x34>
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b0c      	cmp	r3, #12
 800324c:	d121      	bne.n	8003292 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d11e      	bne.n	8003292 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003254:	4b33      	ldr	r3, [pc, #204]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d107      	bne.n	8003270 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003260:	4b30      	ldr	r3, [pc, #192]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 8003262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	e005      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003270:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800327c:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <HAL_RCC_GetSysClockFreq+0x108>)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003284:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d102      	bne.n	800329e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003298:	4b24      	ldr	r3, [pc, #144]	; (800332c <HAL_RCC_GetSysClockFreq+0x10c>)
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	e004      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032a4:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_RCC_GetSysClockFreq+0x110>)
 80032a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d133      	bne.n	8003316 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ae:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d002      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0xa4>
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d003      	beq.n	80032ca <HAL_RCC_GetSysClockFreq+0xaa>
 80032c2:	e005      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_RCC_GetSysClockFreq+0x10c>)
 80032c6:	617b      	str	r3, [r7, #20]
      break;
 80032c8:	e005      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032ca:	4b19      	ldr	r3, [pc, #100]	; (8003330 <HAL_RCC_GetSysClockFreq+0x110>)
 80032cc:	617b      	str	r3, [r7, #20]
      break;
 80032ce:	e002      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	617b      	str	r3, [r7, #20]
      break;
 80032d4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032d6:	4b13      	ldr	r3, [pc, #76]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	3301      	adds	r3, #1
 80032e2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	fb02 f203 	mul.w	r2, r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	0e5b      	lsrs	r3, r3, #25
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	3301      	adds	r3, #1
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003316:	69bb      	ldr	r3, [r7, #24]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3724      	adds	r7, #36	; 0x24
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40021000 	.word	0x40021000
 8003328:	08006f6c 	.word	0x08006f6c
 800332c:	00f42400 	.word	0x00f42400
 8003330:	007a1200 	.word	0x007a1200

08003334 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003338:	4b03      	ldr	r3, [pc, #12]	; (8003348 <HAL_RCC_GetHCLKFreq+0x14>)
 800333a:	681b      	ldr	r3, [r3, #0]
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000064 	.word	0x20000064

0800334c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003350:	f7ff fff0 	bl	8003334 <HAL_RCC_GetHCLKFreq>
 8003354:	4601      	mov	r1, r0
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4a04      	ldr	r2, [pc, #16]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003362:	5cd3      	ldrb	r3, [r2, r3]
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	08006f64 	.word	0x08006f64

08003378 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	220f      	movs	r2, #15
 8003386:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003388:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_RCC_GetClockConfig+0x5c>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0203 	and.w	r2, r3, #3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003394:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <HAL_RCC_GetClockConfig+0x5c>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <HAL_RCC_GetClockConfig+0x5c>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_GetClockConfig+0x5c>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	08db      	lsrs	r3, r3, #3
 80033b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_RCC_GetClockConfig+0x60>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0207 	and.w	r2, r3, #7
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	601a      	str	r2, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40022000 	.word	0x40022000

080033dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033e4:	2300      	movs	r3, #0
 80033e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033e8:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033f4:	f7ff f9e8 	bl	80027c8 <HAL_PWREx_GetVoltageRange>
 80033f8:	6178      	str	r0, [r7, #20]
 80033fa:	e014      	b.n	8003426 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033fc:	4a25      	ldr	r2, [pc, #148]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033fe:	4b25      	ldr	r3, [pc, #148]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003406:	6593      	str	r3, [r2, #88]	; 0x58
 8003408:	4b22      	ldr	r3, [pc, #136]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003414:	f7ff f9d8 	bl	80027c8 <HAL_PWREx_GetVoltageRange>
 8003418:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800341a:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003424:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800342c:	d10b      	bne.n	8003446 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b80      	cmp	r3, #128	; 0x80
 8003432:	d919      	bls.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2ba0      	cmp	r3, #160	; 0xa0
 8003438:	d902      	bls.n	8003440 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800343a:	2302      	movs	r3, #2
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	e013      	b.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003440:	2301      	movs	r3, #1
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	e010      	b.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b80      	cmp	r3, #128	; 0x80
 800344a:	d902      	bls.n	8003452 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800344c:	2303      	movs	r3, #3
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	e00a      	b.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b80      	cmp	r3, #128	; 0x80
 8003456:	d102      	bne.n	800345e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003458:	2302      	movs	r3, #2
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	e004      	b.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b70      	cmp	r3, #112	; 0x70
 8003462:	d101      	bne.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003464:	2301      	movs	r3, #1
 8003466:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003468:	490b      	ldr	r1, [pc, #44]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 0207 	bic.w	r2, r3, #7
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0207 	and.w	r2, r3, #7
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	429a      	cmp	r2, r3
 8003484:	d001      	beq.n	800348a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021000 	.word	0x40021000
 8003498:	40022000 	.word	0x40022000

0800349c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e049      	b.n	8003542 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fd fcce 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f000 fffc 	bl	80044d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d001      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e04f      	b.n	8003604 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	68d2      	ldr	r2, [r2, #12]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a23      	ldr	r2, [pc, #140]	; (8003610 <HAL_TIM_Base_Start_IT+0xc4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01d      	beq.n	80035c2 <HAL_TIM_Base_Start_IT+0x76>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358e:	d018      	beq.n	80035c2 <HAL_TIM_Base_Start_IT+0x76>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1f      	ldr	r2, [pc, #124]	; (8003614 <HAL_TIM_Base_Start_IT+0xc8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_TIM_Base_Start_IT+0x76>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1e      	ldr	r2, [pc, #120]	; (8003618 <HAL_TIM_Base_Start_IT+0xcc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00e      	beq.n	80035c2 <HAL_TIM_Base_Start_IT+0x76>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1c      	ldr	r2, [pc, #112]	; (800361c <HAL_TIM_Base_Start_IT+0xd0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d009      	beq.n	80035c2 <HAL_TIM_Base_Start_IT+0x76>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1b      	ldr	r2, [pc, #108]	; (8003620 <HAL_TIM_Base_Start_IT+0xd4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d004      	beq.n	80035c2 <HAL_TIM_Base_Start_IT+0x76>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a19      	ldr	r2, [pc, #100]	; (8003624 <HAL_TIM_Base_Start_IT+0xd8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d115      	bne.n	80035ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	4b17      	ldr	r3, [pc, #92]	; (8003628 <HAL_TIM_Base_Start_IT+0xdc>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b06      	cmp	r3, #6
 80035d2:	d015      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0xb4>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035da:	d011      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ec:	e008      	b.n	8003600 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e000      	b.n	8003602 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003600:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40013400 	.word	0x40013400
 8003624:	40014000 	.word	0x40014000
 8003628:	00010007 	.word	0x00010007

0800362c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e049      	b.n	80036d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f841 	bl	80036da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3304      	adds	r3, #4
 8003668:	4619      	mov	r1, r3
 800366a:	4610      	mov	r0, r2
 800366c:	f000 ff34 	bl	80044d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d109      	bne.n	8003718 <HAL_TIM_PWM_Start_DMA+0x28>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	e03c      	b.n	8003792 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b04      	cmp	r3, #4
 800371c:	d109      	bne.n	8003732 <HAL_TIM_PWM_Start_DMA+0x42>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	bf0c      	ite	eq
 800372a:	2301      	moveq	r3, #1
 800372c:	2300      	movne	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	e02f      	b.n	8003792 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b08      	cmp	r3, #8
 8003736:	d109      	bne.n	800374c <HAL_TIM_PWM_Start_DMA+0x5c>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	e022      	b.n	8003792 <HAL_TIM_PWM_Start_DMA+0xa2>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d109      	bne.n	8003766 <HAL_TIM_PWM_Start_DMA+0x76>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	bf0c      	ite	eq
 800375e:	2301      	moveq	r3, #1
 8003760:	2300      	movne	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	e015      	b.n	8003792 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b10      	cmp	r3, #16
 800376a:	d109      	bne.n	8003780 <HAL_TIM_PWM_Start_DMA+0x90>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e008      	b.n	8003792 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8003796:	2302      	movs	r3, #2
 8003798:	e1a6      	b.n	8003ae8 <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d109      	bne.n	80037b4 <HAL_TIM_PWM_Start_DMA+0xc4>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e03c      	b.n	800382e <HAL_TIM_PWM_Start_DMA+0x13e>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d109      	bne.n	80037ce <HAL_TIM_PWM_Start_DMA+0xde>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	bf0c      	ite	eq
 80037c6:	2301      	moveq	r3, #1
 80037c8:	2300      	movne	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	e02f      	b.n	800382e <HAL_TIM_PWM_Start_DMA+0x13e>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d109      	bne.n	80037e8 <HAL_TIM_PWM_Start_DMA+0xf8>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e022      	b.n	800382e <HAL_TIM_PWM_Start_DMA+0x13e>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b0c      	cmp	r3, #12
 80037ec:	d109      	bne.n	8003802 <HAL_TIM_PWM_Start_DMA+0x112>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	e015      	b.n	800382e <HAL_TIM_PWM_Start_DMA+0x13e>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b10      	cmp	r3, #16
 8003806:	d109      	bne.n	800381c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e008      	b.n	800382e <HAL_TIM_PWM_Start_DMA+0x13e>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d034      	beq.n	800389c <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <HAL_TIM_PWM_Start_DMA+0x152>
 8003838:	887b      	ldrh	r3, [r7, #2]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e152      	b.n	8003ae8 <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d104      	bne.n	8003852 <HAL_TIM_PWM_Start_DMA+0x162>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003850:	e026      	b.n	80038a0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d104      	bne.n	8003862 <HAL_TIM_PWM_Start_DMA+0x172>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003860:	e01e      	b.n	80038a0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b08      	cmp	r3, #8
 8003866:	d104      	bne.n	8003872 <HAL_TIM_PWM_Start_DMA+0x182>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003870:	e016      	b.n	80038a0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	d104      	bne.n	8003882 <HAL_TIM_PWM_Start_DMA+0x192>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003880:	e00e      	b.n	80038a0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b10      	cmp	r3, #16
 8003886:	d104      	bne.n	8003892 <HAL_TIM_PWM_Start_DMA+0x1a2>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003890:	e006      	b.n	80038a0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2202      	movs	r2, #2
 8003896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800389a:	e001      	b.n	80038a0 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e123      	b.n	8003ae8 <HAL_TIM_PWM_Start_DMA+0x3f8>
  }

  switch (Channel)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b0c      	cmp	r3, #12
 80038a4:	f200 80ae 	bhi.w	8003a04 <HAL_TIM_PWM_Start_DMA+0x314>
 80038a8:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	080038e5 	.word	0x080038e5
 80038b4:	08003a05 	.word	0x08003a05
 80038b8:	08003a05 	.word	0x08003a05
 80038bc:	08003a05 	.word	0x08003a05
 80038c0:	0800392d 	.word	0x0800392d
 80038c4:	08003a05 	.word	0x08003a05
 80038c8:	08003a05 	.word	0x08003a05
 80038cc:	08003a05 	.word	0x08003a05
 80038d0:	08003975 	.word	0x08003975
 80038d4:	08003a05 	.word	0x08003a05
 80038d8:	08003a05 	.word	0x08003a05
 80038dc:	08003a05 	.word	0x08003a05
 80038e0:	080039bd 	.word	0x080039bd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	4a81      	ldr	r2, [pc, #516]	; (8003af0 <HAL_TIM_PWM_Start_DMA+0x400>)
 80038ea:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	4a80      	ldr	r2, [pc, #512]	; (8003af4 <HAL_TIM_PWM_Start_DMA+0x404>)
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	4a7f      	ldr	r2, [pc, #508]	; (8003af8 <HAL_TIM_PWM_Start_DMA+0x408>)
 80038fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3334      	adds	r3, #52	; 0x34
 8003908:	461a      	mov	r2, r3
 800390a:	887b      	ldrh	r3, [r7, #2]
 800390c:	f7fe fc04 	bl	8002118 <HAL_DMA_Start_IT>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0e6      	b.n	8003ae8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	68d2      	ldr	r2, [r2, #12]
 8003924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003928:	60da      	str	r2, [r3, #12]
      break;
 800392a:	e06c      	b.n	8003a06 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	4a6f      	ldr	r2, [pc, #444]	; (8003af0 <HAL_TIM_PWM_Start_DMA+0x400>)
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	4a6e      	ldr	r2, [pc, #440]	; (8003af4 <HAL_TIM_PWM_Start_DMA+0x404>)
 800393a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	4a6d      	ldr	r2, [pc, #436]	; (8003af8 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003942:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3338      	adds	r3, #56	; 0x38
 8003950:	461a      	mov	r2, r3
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	f7fe fbe0 	bl	8002118 <HAL_DMA_Start_IT>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0c2      	b.n	8003ae8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	68d2      	ldr	r2, [r2, #12]
 800396c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003970:	60da      	str	r2, [r3, #12]
      break;
 8003972:	e048      	b.n	8003a06 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	4a5d      	ldr	r2, [pc, #372]	; (8003af0 <HAL_TIM_PWM_Start_DMA+0x400>)
 800397a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	4a5c      	ldr	r2, [pc, #368]	; (8003af4 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003982:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	4a5b      	ldr	r2, [pc, #364]	; (8003af8 <HAL_TIM_PWM_Start_DMA+0x408>)
 800398a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	333c      	adds	r3, #60	; 0x3c
 8003998:	461a      	mov	r2, r3
 800399a:	887b      	ldrh	r3, [r7, #2]
 800399c:	f7fe fbbc 	bl	8002118 <HAL_DMA_Start_IT>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e09e      	b.n	8003ae8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	68d2      	ldr	r2, [r2, #12]
 80039b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b8:	60da      	str	r2, [r3, #12]
      break;
 80039ba:	e024      	b.n	8003a06 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	4a4b      	ldr	r2, [pc, #300]	; (8003af0 <HAL_TIM_PWM_Start_DMA+0x400>)
 80039c2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	4a4a      	ldr	r2, [pc, #296]	; (8003af4 <HAL_TIM_PWM_Start_DMA+0x404>)
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	4a49      	ldr	r2, [pc, #292]	; (8003af8 <HAL_TIM_PWM_Start_DMA+0x408>)
 80039d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3340      	adds	r3, #64	; 0x40
 80039e0:	461a      	mov	r2, r3
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	f7fe fb98 	bl	8002118 <HAL_DMA_Start_IT>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e07a      	b.n	8003ae8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	68d2      	ldr	r2, [r2, #12]
 80039fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a00:	60da      	str	r2, [r3, #12]
      break;
 8003a02:	e000      	b.n	8003a06 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8003a04:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 f96c 	bl	8004cec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a38      	ldr	r2, [pc, #224]	; (8003afc <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <HAL_TIM_PWM_Start_DMA+0x356>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a37      	ldr	r2, [pc, #220]	; (8003b00 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00e      	beq.n	8003a46 <HAL_TIM_PWM_Start_DMA+0x356>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a35      	ldr	r2, [pc, #212]	; (8003b04 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_TIM_PWM_Start_DMA+0x356>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a34      	ldr	r2, [pc, #208]	; (8003b08 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_TIM_PWM_Start_DMA+0x356>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a32      	ldr	r2, [pc, #200]	; (8003b0c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x35a>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_TIM_PWM_Start_DMA+0x35c>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a25      	ldr	r2, [pc, #148]	; (8003afc <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01d      	beq.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a72:	d018      	beq.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a25      	ldr	r2, [pc, #148]	; (8003b10 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a24      	ldr	r2, [pc, #144]	; (8003b14 <HAL_TIM_PWM_Start_DMA+0x424>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00e      	beq.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a22      	ldr	r2, [pc, #136]	; (8003b18 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d115      	bne.n	8003ad2 <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b06      	cmp	r3, #6
 8003ab6:	d015      	beq.n	8003ae4 <HAL_TIM_PWM_Start_DMA+0x3f4>
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abe:	d011      	beq.n	8003ae4 <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad0:	e008      	b.n	8003ae4 <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e000      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	080043c9 	.word	0x080043c9
 8003af4:	08004471 	.word	0x08004471
 8003af8:	08004337 	.word	0x08004337
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40013400 	.word	0x40013400
 8003b04:	40014000 	.word	0x40014000
 8003b08:	40014400 	.word	0x40014400
 8003b0c:	40014800 	.word	0x40014800
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800
 8003b18:	40000c00 	.word	0x40000c00
 8003b1c:	00010007 	.word	0x00010007

08003b20 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	d855      	bhi.n	8003bdc <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003b30:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b36:	bf00      	nop
 8003b38:	08003b6d 	.word	0x08003b6d
 8003b3c:	08003bdd 	.word	0x08003bdd
 8003b40:	08003bdd 	.word	0x08003bdd
 8003b44:	08003bdd 	.word	0x08003bdd
 8003b48:	08003b89 	.word	0x08003b89
 8003b4c:	08003bdd 	.word	0x08003bdd
 8003b50:	08003bdd 	.word	0x08003bdd
 8003b54:	08003bdd 	.word	0x08003bdd
 8003b58:	08003ba5 	.word	0x08003ba5
 8003b5c:	08003bdd 	.word	0x08003bdd
 8003b60:	08003bdd 	.word	0x08003bdd
 8003b64:	08003bdd 	.word	0x08003bdd
 8003b68:	08003bc1 	.word	0x08003bc1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	68d2      	ldr	r2, [r2, #12]
 8003b76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fe fb29 	bl	80021d8 <HAL_DMA_Abort_IT>
      break;
 8003b86:	e02a      	b.n	8003bde <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe fb1b 	bl	80021d8 <HAL_DMA_Abort_IT>
      break;
 8003ba2:	e01c      	b.n	8003bde <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	68d2      	ldr	r2, [r2, #12]
 8003bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fe fb0d 	bl	80021d8 <HAL_DMA_Abort_IT>
      break;
 8003bbe:	e00e      	b.n	8003bde <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	68d2      	ldr	r2, [r2, #12]
 8003bca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fe faff 	bl	80021d8 <HAL_DMA_Abort_IT>
      break;
 8003bda:	e000      	b.n	8003bde <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8003bdc:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2200      	movs	r2, #0
 8003be4:	6839      	ldr	r1, [r7, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f001 f880 	bl	8004cec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a3e      	ldr	r2, [pc, #248]	; (8003cec <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <HAL_TIM_PWM_Stop_DMA+0xfe>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a3d      	ldr	r2, [pc, #244]	; (8003cf0 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <HAL_TIM_PWM_Stop_DMA+0xfe>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a3b      	ldr	r2, [pc, #236]	; (8003cf4 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_TIM_PWM_Stop_DMA+0xfe>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a3a      	ldr	r2, [pc, #232]	; (8003cf8 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <HAL_TIM_PWM_Stop_DMA+0xfe>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a38      	ldr	r2, [pc, #224]	; (8003cfc <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d101      	bne.n	8003c22 <HAL_TIM_PWM_Stop_DMA+0x102>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <HAL_TIM_PWM_Stop_DMA+0x104>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d017      	beq.n	8003c58 <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6a1a      	ldr	r2, [r3, #32]
 8003c2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10f      	bne.n	8003c58 <HAL_TIM_PWM_Stop_DMA+0x138>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6a1a      	ldr	r2, [r3, #32]
 8003c3e:	f240 4344 	movw	r3, #1092	; 0x444
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_PWM_Stop_DMA+0x138>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6a1a      	ldr	r2, [r3, #32]
 8003c5e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10f      	bne.n	8003c88 <HAL_TIM_PWM_Stop_DMA+0x168>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6a1a      	ldr	r2, [r3, #32]
 8003c6e:	f240 4344 	movw	r3, #1092	; 0x444
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_PWM_Stop_DMA+0x168>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	f022 0201 	bic.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d104      	bne.n	8003c98 <HAL_TIM_PWM_Stop_DMA+0x178>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c96:	e023      	b.n	8003ce0 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d104      	bne.n	8003ca8 <HAL_TIM_PWM_Stop_DMA+0x188>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca6:	e01b      	b.n	8003ce0 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d104      	bne.n	8003cb8 <HAL_TIM_PWM_Stop_DMA+0x198>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb6:	e013      	b.n	8003ce0 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b0c      	cmp	r3, #12
 8003cbc:	d104      	bne.n	8003cc8 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cc6:	e00b      	b.n	8003ce0 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d104      	bne.n	8003cd8 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cd6:	e003      	b.n	8003ce0 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40013400 	.word	0x40013400
 8003cf4:	40014000 	.word	0x40014000
 8003cf8:	40014400 	.word	0x40014400
 8003cfc:	40014800 	.word	0x40014800

08003d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d122      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d11b      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0202 	mvn.w	r2, #2
 8003d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 facf 	bl	80042e6 <HAL_TIM_IC_CaptureCallback>
 8003d48:	e005      	b.n	8003d56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fac1 	bl	80042d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fc fc45 	bl	80005e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d122      	bne.n	8003db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d11b      	bne.n	8003db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0204 	mvn.w	r2, #4
 8003d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2202      	movs	r2, #2
 8003d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 faa5 	bl	80042e6 <HAL_TIM_IC_CaptureCallback>
 8003d9c:	e005      	b.n	8003daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa97 	bl	80042d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7fc fc1b 	bl	80005e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d122      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d11b      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0208 	mvn.w	r2, #8
 8003dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2204      	movs	r2, #4
 8003dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa7b 	bl	80042e6 <HAL_TIM_IC_CaptureCallback>
 8003df0:	e005      	b.n	8003dfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa6d 	bl	80042d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fc fbf1 	bl	80005e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d122      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d11b      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0210 	mvn.w	r2, #16
 8003e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fa51 	bl	80042e6 <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fa43 	bl	80042d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fc fbc7 	bl	80005e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d10e      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d107      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0201 	mvn.w	r2, #1
 8003e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fc ff5e 	bl	8000d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8e:	2b80      	cmp	r3, #128	; 0x80
 8003e90:	d10e      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9c:	2b80      	cmp	r3, #128	; 0x80
 8003e9e:	d107      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f001 f854 	bl	8004f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ebe:	d10e      	bne.n	8003ede <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b80      	cmp	r3, #128	; 0x80
 8003ecc:	d107      	bne.n	8003ede <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f001 f847 	bl	8004f6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	d10e      	bne.n	8003f0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b40      	cmp	r3, #64	; 0x40
 8003ef8:	d107      	bne.n	8003f0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fa02 	bl	800430e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d10e      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d107      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f06f 0220 	mvn.w	r2, #32
 8003f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f001 f807 	bl	8004f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e0fd      	b.n	8004156 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b14      	cmp	r3, #20
 8003f66:	f200 80f0 	bhi.w	800414a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003fc5 	.word	0x08003fc5
 8003f74:	0800414b 	.word	0x0800414b
 8003f78:	0800414b 	.word	0x0800414b
 8003f7c:	0800414b 	.word	0x0800414b
 8003f80:	08004005 	.word	0x08004005
 8003f84:	0800414b 	.word	0x0800414b
 8003f88:	0800414b 	.word	0x0800414b
 8003f8c:	0800414b 	.word	0x0800414b
 8003f90:	08004047 	.word	0x08004047
 8003f94:	0800414b 	.word	0x0800414b
 8003f98:	0800414b 	.word	0x0800414b
 8003f9c:	0800414b 	.word	0x0800414b
 8003fa0:	08004087 	.word	0x08004087
 8003fa4:	0800414b 	.word	0x0800414b
 8003fa8:	0800414b 	.word	0x0800414b
 8003fac:	0800414b 	.word	0x0800414b
 8003fb0:	080040c9 	.word	0x080040c9
 8003fb4:	0800414b 	.word	0x0800414b
 8003fb8:	0800414b 	.word	0x0800414b
 8003fbc:	0800414b 	.word	0x0800414b
 8003fc0:	08004109 	.word	0x08004109
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fb1e 	bl	800460c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	6992      	ldr	r2, [r2, #24]
 8003fda:	f042 0208 	orr.w	r2, r2, #8
 8003fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	6992      	ldr	r2, [r2, #24]
 8003fea:	f022 0204 	bic.w	r2, r2, #4
 8003fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	6991      	ldr	r1, [r2, #24]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	6912      	ldr	r2, [r2, #16]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	619a      	str	r2, [r3, #24]
      break;
 8004002:	e0a3      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fb8e 	bl	800472c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	6992      	ldr	r2, [r2, #24]
 800401a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800401e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	6992      	ldr	r2, [r2, #24]
 800402a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800402e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	6991      	ldr	r1, [r2, #24]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	6912      	ldr	r2, [r2, #16]
 800403e:	0212      	lsls	r2, r2, #8
 8004040:	430a      	orrs	r2, r1
 8004042:	619a      	str	r2, [r3, #24]
      break;
 8004044:	e082      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fbf7 	bl	8004840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	69d2      	ldr	r2, [r2, #28]
 800405c:	f042 0208 	orr.w	r2, r2, #8
 8004060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	69d2      	ldr	r2, [r2, #28]
 800406c:	f022 0204 	bic.w	r2, r2, #4
 8004070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	69d1      	ldr	r1, [r2, #28]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	6912      	ldr	r2, [r2, #16]
 8004080:	430a      	orrs	r2, r1
 8004082:	61da      	str	r2, [r3, #28]
      break;
 8004084:	e062      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68b9      	ldr	r1, [r7, #8]
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fc5f 	bl	8004950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	69d2      	ldr	r2, [r2, #28]
 800409c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	69d2      	ldr	r2, [r2, #28]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	69d1      	ldr	r1, [r2, #28]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	6912      	ldr	r2, [r2, #16]
 80040c0:	0212      	lsls	r2, r2, #8
 80040c2:	430a      	orrs	r2, r1
 80040c4:	61da      	str	r2, [r3, #28]
      break;
 80040c6:	e041      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fca8 	bl	8004a24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80040de:	f042 0208 	orr.w	r2, r2, #8
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80040ee:	f022 0204 	bic.w	r2, r2, #4
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	6912      	ldr	r2, [r2, #16]
 8004102:	430a      	orrs	r2, r1
 8004104:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004106:	e021      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fcec 	bl	8004aec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800411e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004122:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800412e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004132:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	6912      	ldr	r2, [r2, #16]
 8004142:	0212      	lsls	r2, r2, #8
 8004144:	430a      	orrs	r2, r1
 8004146:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004148:	e000      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800414a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop

08004160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_TIM_ConfigClockSource+0x18>
 8004174:	2302      	movs	r3, #2
 8004176:	e0a8      	b.n	80042ca <HAL_TIM_ConfigClockSource+0x16a>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800419a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d067      	beq.n	8004284 <HAL_TIM_ConfigClockSource+0x124>
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	d80b      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x70>
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d073      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0x144>
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d802      	bhi.n	80041c6 <HAL_TIM_ConfigClockSource+0x66>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d06f      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041c4:	e078      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d06c      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0x144>
 80041ca:	2b30      	cmp	r3, #48	; 0x30
 80041cc:	d06a      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80041ce:	e073      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80041d0:	2b70      	cmp	r3, #112	; 0x70
 80041d2:	d00d      	beq.n	80041f0 <HAL_TIM_ConfigClockSource+0x90>
 80041d4:	2b70      	cmp	r3, #112	; 0x70
 80041d6:	d804      	bhi.n	80041e2 <HAL_TIM_ConfigClockSource+0x82>
 80041d8:	2b50      	cmp	r3, #80	; 0x50
 80041da:	d033      	beq.n	8004244 <HAL_TIM_ConfigClockSource+0xe4>
 80041dc:	2b60      	cmp	r3, #96	; 0x60
 80041de:	d041      	beq.n	8004264 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80041e0:	e06a      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80041e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e6:	d066      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0x156>
 80041e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ec:	d017      	beq.n	800421e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80041ee:	e063      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	6899      	ldr	r1, [r3, #8]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f000 fd54 	bl	8004cac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004212:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	609a      	str	r2, [r3, #8]
      break;
 800421c:	e04c      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6899      	ldr	r1, [r3, #8]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f000 fd3d 	bl	8004cac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	6892      	ldr	r2, [r2, #8]
 800423c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004240:	609a      	str	r2, [r3, #8]
      break;
 8004242:	e039      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	6859      	ldr	r1, [r3, #4]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	461a      	mov	r2, r3
 8004252:	f000 fcb1 	bl	8004bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2150      	movs	r1, #80	; 0x50
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fd0a 	bl	8004c76 <TIM_ITRx_SetConfig>
      break;
 8004262:	e029      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6859      	ldr	r1, [r3, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	461a      	mov	r2, r3
 8004272:	f000 fcd0 	bl	8004c16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2160      	movs	r1, #96	; 0x60
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fcfa 	bl	8004c76 <TIM_ITRx_SetConfig>
      break;
 8004282:	e019      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	461a      	mov	r2, r3
 8004292:	f000 fc91 	bl	8004bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2140      	movs	r1, #64	; 0x40
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fcea 	bl	8004c76 <TIM_ITRx_SetConfig>
      break;
 80042a2:	e009      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f000 fce1 	bl	8004c76 <TIM_ITRx_SetConfig>
        break;
 80042b4:	e000      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80042b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	d107      	bne.n	800435e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800435c:	e02a      	b.n	80043b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	d107      	bne.n	8004378 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2202      	movs	r2, #2
 800436c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004376:	e01d      	b.n	80043b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	429a      	cmp	r2, r3
 8004380:	d107      	bne.n	8004392 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2204      	movs	r2, #4
 8004386:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004390:	e010      	b.n	80043b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	429a      	cmp	r2, r3
 800439a:	d107      	bne.n	80043ac <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2208      	movs	r2, #8
 80043a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043aa:	e003      	b.n	80043b4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7ff ffb4 	bl	8004322 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	771a      	strb	r2, [r3, #28]
}
 80043c0:	bf00      	nop
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d10b      	bne.n	80043f8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d136      	bne.n	800445c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f6:	e031      	b.n	800445c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d10b      	bne.n	800441a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2202      	movs	r2, #2
 8004406:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d125      	bne.n	800445c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004418:	e020      	b.n	800445c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	429a      	cmp	r2, r3
 8004422:	d10b      	bne.n	800443c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2204      	movs	r2, #4
 8004428:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d114      	bne.n	800445c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800443a:	e00f      	b.n	800445c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	429a      	cmp	r2, r3
 8004444:	d10a      	bne.n	800445c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2208      	movs	r2, #8
 800444a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d103      	bne.n	800445c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7fc f8bf 	bl	80005e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	429a      	cmp	r2, r3
 8004486:	d103      	bne.n	8004490 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	771a      	strb	r2, [r3, #28]
 800448e:	e019      	b.n	80044c4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	429a      	cmp	r2, r3
 8004498:	d103      	bne.n	80044a2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2202      	movs	r2, #2
 800449e:	771a      	strb	r2, [r3, #28]
 80044a0:	e010      	b.n	80044c4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d103      	bne.n	80044b4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2204      	movs	r2, #4
 80044b0:	771a      	strb	r2, [r3, #28]
 80044b2:	e007      	b.n	80044c4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d102      	bne.n	80044c4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2208      	movs	r2, #8
 80044c2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7ff ff18 	bl	80042fa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
}
 80044d0:	bf00      	nop
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a40      	ldr	r2, [pc, #256]	; (80045ec <TIM_Base_SetConfig+0x114>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d013      	beq.n	8004518 <TIM_Base_SetConfig+0x40>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f6:	d00f      	beq.n	8004518 <TIM_Base_SetConfig+0x40>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a3d      	ldr	r2, [pc, #244]	; (80045f0 <TIM_Base_SetConfig+0x118>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00b      	beq.n	8004518 <TIM_Base_SetConfig+0x40>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a3c      	ldr	r2, [pc, #240]	; (80045f4 <TIM_Base_SetConfig+0x11c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d007      	beq.n	8004518 <TIM_Base_SetConfig+0x40>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a3b      	ldr	r2, [pc, #236]	; (80045f8 <TIM_Base_SetConfig+0x120>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_Base_SetConfig+0x40>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a3a      	ldr	r2, [pc, #232]	; (80045fc <TIM_Base_SetConfig+0x124>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d108      	bne.n	800452a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a2f      	ldr	r2, [pc, #188]	; (80045ec <TIM_Base_SetConfig+0x114>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d01f      	beq.n	8004572 <TIM_Base_SetConfig+0x9a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004538:	d01b      	beq.n	8004572 <TIM_Base_SetConfig+0x9a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a2c      	ldr	r2, [pc, #176]	; (80045f0 <TIM_Base_SetConfig+0x118>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d017      	beq.n	8004572 <TIM_Base_SetConfig+0x9a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2b      	ldr	r2, [pc, #172]	; (80045f4 <TIM_Base_SetConfig+0x11c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <TIM_Base_SetConfig+0x9a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2a      	ldr	r2, [pc, #168]	; (80045f8 <TIM_Base_SetConfig+0x120>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00f      	beq.n	8004572 <TIM_Base_SetConfig+0x9a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a29      	ldr	r2, [pc, #164]	; (80045fc <TIM_Base_SetConfig+0x124>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00b      	beq.n	8004572 <TIM_Base_SetConfig+0x9a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a28      	ldr	r2, [pc, #160]	; (8004600 <TIM_Base_SetConfig+0x128>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <TIM_Base_SetConfig+0x9a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a27      	ldr	r2, [pc, #156]	; (8004604 <TIM_Base_SetConfig+0x12c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d003      	beq.n	8004572 <TIM_Base_SetConfig+0x9a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a26      	ldr	r2, [pc, #152]	; (8004608 <TIM_Base_SetConfig+0x130>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d108      	bne.n	8004584 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a10      	ldr	r2, [pc, #64]	; (80045ec <TIM_Base_SetConfig+0x114>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00f      	beq.n	80045d0 <TIM_Base_SetConfig+0xf8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a12      	ldr	r2, [pc, #72]	; (80045fc <TIM_Base_SetConfig+0x124>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00b      	beq.n	80045d0 <TIM_Base_SetConfig+0xf8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a11      	ldr	r2, [pc, #68]	; (8004600 <TIM_Base_SetConfig+0x128>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d007      	beq.n	80045d0 <TIM_Base_SetConfig+0xf8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a10      	ldr	r2, [pc, #64]	; (8004604 <TIM_Base_SetConfig+0x12c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <TIM_Base_SetConfig+0xf8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a0f      	ldr	r2, [pc, #60]	; (8004608 <TIM_Base_SetConfig+0x130>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d103      	bne.n	80045d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	615a      	str	r2, [r3, #20]
}
 80045de:	bf00      	nop
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40012c00 	.word	0x40012c00
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40013400 	.word	0x40013400
 8004600:	40014000 	.word	0x40014000
 8004604:	40014400 	.word	0x40014400
 8004608:	40014800 	.word	0x40014800

0800460c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0201 	bic.w	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f023 0302 	bic.w	r3, r3, #2
 8004658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a2c      	ldr	r2, [pc, #176]	; (8004718 <TIM_OC1_SetConfig+0x10c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00f      	beq.n	800468c <TIM_OC1_SetConfig+0x80>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a2b      	ldr	r2, [pc, #172]	; (800471c <TIM_OC1_SetConfig+0x110>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00b      	beq.n	800468c <TIM_OC1_SetConfig+0x80>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <TIM_OC1_SetConfig+0x114>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <TIM_OC1_SetConfig+0x80>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a29      	ldr	r2, [pc, #164]	; (8004724 <TIM_OC1_SetConfig+0x118>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_OC1_SetConfig+0x80>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a28      	ldr	r2, [pc, #160]	; (8004728 <TIM_OC1_SetConfig+0x11c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d10c      	bne.n	80046a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f023 0308 	bic.w	r3, r3, #8
 8004692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f023 0304 	bic.w	r3, r3, #4
 80046a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1b      	ldr	r2, [pc, #108]	; (8004718 <TIM_OC1_SetConfig+0x10c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00f      	beq.n	80046ce <TIM_OC1_SetConfig+0xc2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1a      	ldr	r2, [pc, #104]	; (800471c <TIM_OC1_SetConfig+0x110>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00b      	beq.n	80046ce <TIM_OC1_SetConfig+0xc2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a19      	ldr	r2, [pc, #100]	; (8004720 <TIM_OC1_SetConfig+0x114>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <TIM_OC1_SetConfig+0xc2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a18      	ldr	r2, [pc, #96]	; (8004724 <TIM_OC1_SetConfig+0x118>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d003      	beq.n	80046ce <TIM_OC1_SetConfig+0xc2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a17      	ldr	r2, [pc, #92]	; (8004728 <TIM_OC1_SetConfig+0x11c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d111      	bne.n	80046f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40013400 	.word	0x40013400
 8004720:	40014000 	.word	0x40014000
 8004724:	40014400 	.word	0x40014400
 8004728:	40014800 	.word	0x40014800

0800472c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f023 0210 	bic.w	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f023 0320 	bic.w	r3, r3, #32
 800477a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a28      	ldr	r2, [pc, #160]	; (800482c <TIM_OC2_SetConfig+0x100>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d003      	beq.n	8004798 <TIM_OC2_SetConfig+0x6c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a27      	ldr	r2, [pc, #156]	; (8004830 <TIM_OC2_SetConfig+0x104>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10d      	bne.n	80047b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800479e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a1d      	ldr	r2, [pc, #116]	; (800482c <TIM_OC2_SetConfig+0x100>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00f      	beq.n	80047dc <TIM_OC2_SetConfig+0xb0>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a1c      	ldr	r2, [pc, #112]	; (8004830 <TIM_OC2_SetConfig+0x104>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00b      	beq.n	80047dc <TIM_OC2_SetConfig+0xb0>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <TIM_OC2_SetConfig+0x108>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d007      	beq.n	80047dc <TIM_OC2_SetConfig+0xb0>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <TIM_OC2_SetConfig+0x10c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_OC2_SetConfig+0xb0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a19      	ldr	r2, [pc, #100]	; (800483c <TIM_OC2_SetConfig+0x110>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d113      	bne.n	8004804 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	621a      	str	r2, [r3, #32]
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40013400 	.word	0x40013400
 8004834:	40014000 	.word	0x40014000
 8004838:	40014400 	.word	0x40014400
 800483c:	40014800 	.word	0x40014800

08004840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0303 	bic.w	r3, r3, #3
 800487a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800488c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a27      	ldr	r2, [pc, #156]	; (800493c <TIM_OC3_SetConfig+0xfc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d003      	beq.n	80048aa <TIM_OC3_SetConfig+0x6a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a26      	ldr	r2, [pc, #152]	; (8004940 <TIM_OC3_SetConfig+0x100>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d10d      	bne.n	80048c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	021b      	lsls	r3, r3, #8
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a1c      	ldr	r2, [pc, #112]	; (800493c <TIM_OC3_SetConfig+0xfc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00f      	beq.n	80048ee <TIM_OC3_SetConfig+0xae>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a1b      	ldr	r2, [pc, #108]	; (8004940 <TIM_OC3_SetConfig+0x100>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00b      	beq.n	80048ee <TIM_OC3_SetConfig+0xae>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a1a      	ldr	r2, [pc, #104]	; (8004944 <TIM_OC3_SetConfig+0x104>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d007      	beq.n	80048ee <TIM_OC3_SetConfig+0xae>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a19      	ldr	r2, [pc, #100]	; (8004948 <TIM_OC3_SetConfig+0x108>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d003      	beq.n	80048ee <TIM_OC3_SetConfig+0xae>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a18      	ldr	r2, [pc, #96]	; (800494c <TIM_OC3_SetConfig+0x10c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d113      	bne.n	8004916 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	621a      	str	r2, [r3, #32]
}
 8004930:	bf00      	nop
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40013400 	.word	0x40013400
 8004944:	40014000 	.word	0x40014000
 8004948:	40014400 	.word	0x40014400
 800494c:	40014800 	.word	0x40014800

08004950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800497e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800499e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	031b      	lsls	r3, r3, #12
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a18      	ldr	r2, [pc, #96]	; (8004a10 <TIM_OC4_SetConfig+0xc0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00f      	beq.n	80049d4 <TIM_OC4_SetConfig+0x84>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a17      	ldr	r2, [pc, #92]	; (8004a14 <TIM_OC4_SetConfig+0xc4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00b      	beq.n	80049d4 <TIM_OC4_SetConfig+0x84>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a16      	ldr	r2, [pc, #88]	; (8004a18 <TIM_OC4_SetConfig+0xc8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d007      	beq.n	80049d4 <TIM_OC4_SetConfig+0x84>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a15      	ldr	r2, [pc, #84]	; (8004a1c <TIM_OC4_SetConfig+0xcc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <TIM_OC4_SetConfig+0x84>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <TIM_OC4_SetConfig+0xd0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d109      	bne.n	80049e8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	019b      	lsls	r3, r3, #6
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40013400 	.word	0x40013400
 8004a18:	40014000 	.word	0x40014000
 8004a1c:	40014400 	.word	0x40014400
 8004a20:	40014800 	.word	0x40014800

08004a24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	041b      	lsls	r3, r3, #16
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <TIM_OC5_SetConfig+0xb4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00f      	beq.n	8004a9e <TIM_OC5_SetConfig+0x7a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a16      	ldr	r2, [pc, #88]	; (8004adc <TIM_OC5_SetConfig+0xb8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00b      	beq.n	8004a9e <TIM_OC5_SetConfig+0x7a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a15      	ldr	r2, [pc, #84]	; (8004ae0 <TIM_OC5_SetConfig+0xbc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <TIM_OC5_SetConfig+0x7a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a14      	ldr	r2, [pc, #80]	; (8004ae4 <TIM_OC5_SetConfig+0xc0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_OC5_SetConfig+0x7a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <TIM_OC5_SetConfig+0xc4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d109      	bne.n	8004ab2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	021b      	lsls	r3, r3, #8
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	621a      	str	r2, [r3, #32]
}
 8004acc:	bf00      	nop
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40013400 	.word	0x40013400
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40014400 	.word	0x40014400
 8004ae8:	40014800 	.word	0x40014800

08004aec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	051b      	lsls	r3, r3, #20
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a18      	ldr	r2, [pc, #96]	; (8004ba4 <TIM_OC6_SetConfig+0xb8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00f      	beq.n	8004b68 <TIM_OC6_SetConfig+0x7c>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <TIM_OC6_SetConfig+0xbc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00b      	beq.n	8004b68 <TIM_OC6_SetConfig+0x7c>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a16      	ldr	r2, [pc, #88]	; (8004bac <TIM_OC6_SetConfig+0xc0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d007      	beq.n	8004b68 <TIM_OC6_SetConfig+0x7c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <TIM_OC6_SetConfig+0xc4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d003      	beq.n	8004b68 <TIM_OC6_SetConfig+0x7c>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a14      	ldr	r2, [pc, #80]	; (8004bb4 <TIM_OC6_SetConfig+0xc8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d109      	bne.n	8004b7c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	029b      	lsls	r3, r3, #10
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	621a      	str	r2, [r3, #32]
}
 8004b96:	bf00      	nop
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	40012c00 	.word	0x40012c00
 8004ba8:	40013400 	.word	0x40013400
 8004bac:	40014000 	.word	0x40014000
 8004bb0:	40014400 	.word	0x40014400
 8004bb4:	40014800 	.word	0x40014800

08004bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f023 0201 	bic.w	r2, r3, #1
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f023 030a 	bic.w	r3, r3, #10
 8004bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b087      	sub	sp, #28
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f023 0210 	bic.w	r2, r3, #16
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	031b      	lsls	r3, r3, #12
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	621a      	str	r2, [r3, #32]
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b085      	sub	sp, #20
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f043 0307 	orr.w	r3, r3, #7
 8004c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	609a      	str	r2, [r3, #8]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	021a      	lsls	r2, r3, #8
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	609a      	str	r2, [r3, #8]
}
 8004ce0:	bf00      	nop
 8004ce2:	371c      	adds	r7, #28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 031f 	and.w	r3, r3, #31
 8004cfe:	2201      	movs	r2, #1
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a1a      	ldr	r2, [r3, #32]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	401a      	ands	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1a      	ldr	r2, [r3, #32]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f003 031f 	and.w	r3, r3, #31
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	fa01 f303 	lsl.w	r3, r1, r3
 8004d24:	431a      	orrs	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
	...

08004d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e068      	b.n	8004e22 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a2e      	ldr	r2, [pc, #184]	; (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d004      	beq.n	8004d84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a2d      	ldr	r2, [pc, #180]	; (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d108      	bne.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1e      	ldr	r2, [pc, #120]	; (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d01d      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc2:	d018      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1b      	ldr	r2, [pc, #108]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d013      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1a      	ldr	r2, [pc, #104]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00e      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a18      	ldr	r2, [pc, #96]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d009      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a13      	ldr	r2, [pc, #76]	; (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d004      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a14      	ldr	r2, [pc, #80]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10c      	bne.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	40013400 	.word	0x40013400
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	40000800 	.word	0x40000800
 8004e40:	40000c00 	.word	0x40000c00
 8004e44:	40014000 	.word	0x40014000

08004e48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e065      	b.n	8004f30 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a16      	ldr	r2, [pc, #88]	; (8004f3c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d004      	beq.n	8004ef2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a14      	ldr	r2, [pc, #80]	; (8004f40 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d115      	bne.n	8004f1e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	051b      	lsls	r3, r3, #20
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40013400 	.word	0x40013400

08004f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f92:	2b84      	cmp	r3, #132	; 0x84
 8004f94:	d005      	beq.n	8004fa2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	3303      	adds	r3, #3
 8004fa0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004fb4:	f001 fa2c 	bl	8006410 <vTaskStartScheduler>
  
  return osOK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc0:	b089      	sub	sp, #36	; 0x24
 8004fc2:	af04      	add	r7, sp, #16
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d020      	beq.n	8005012 <osThreadCreate+0x54>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01c      	beq.n	8005012 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685c      	ldr	r4, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681d      	ldr	r5, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691e      	ldr	r6, [r3, #16]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff ffc8 	bl	8004f80 <makeFreeRtosPriority>
 8004ff0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ffa:	9202      	str	r2, [sp, #8]
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	9100      	str	r1, [sp, #0]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	4632      	mov	r2, r6
 8005004:	4629      	mov	r1, r5
 8005006:	4620      	mov	r0, r4
 8005008:	f001 f83e 	bl	8006088 <xTaskCreateStatic>
 800500c:	4603      	mov	r3, r0
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e01c      	b.n	800504c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685c      	ldr	r4, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800501e:	b29e      	uxth	r6, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff ffaa 	bl	8004f80 <makeFreeRtosPriority>
 800502c:	4602      	mov	r2, r0
 800502e:	f107 030c 	add.w	r3, r7, #12
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	9200      	str	r2, [sp, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	4632      	mov	r2, r6
 800503a:	4629      	mov	r1, r5
 800503c:	4620      	mov	r0, r4
 800503e:	f001 f87d 	bl	800613c <xTaskCreate>
 8005042:	4603      	mov	r3, r0
 8005044:	2b01      	cmp	r3, #1
 8005046:	d001      	beq.n	800504c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005048:	2300      	movs	r3, #0
 800504a:	e000      	b.n	800504e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800504c:	68fb      	ldr	r3, [r7, #12]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005056 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <osDelay+0x16>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	e000      	b.n	800506e <osDelay+0x18>
 800506c:	2301      	movs	r3, #1
 800506e:	4618      	mov	r0, r3
 8005070:	f001 f99a 	bl	80063a8 <vTaskDelay>
  
  return osOK;
 8005074:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d007      	beq.n	800509e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	4619      	mov	r1, r3
 8005094:	2001      	movs	r0, #1
 8005096:	f000 fe0e 	bl	8005cb6 <xQueueCreateMutexStatic>
 800509a:	4603      	mov	r3, r0
 800509c:	e003      	b.n	80050a6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800509e:	2001      	movs	r0, #1
 80050a0:	f000 fdf1 	bl	8005c86 <xQueueCreateMutex>
 80050a4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f103 0208 	add.w	r2, r3, #8
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f103 0208 	add.w	r2, r3, #8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f103 0208 	add.w	r2, r3, #8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	601a      	str	r2, [r3, #0]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005166:	d103      	bne.n	8005170 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	e00c      	b.n	800518a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3308      	adds	r3, #8
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e002      	b.n	800517e <vListInsert+0x2e>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	429a      	cmp	r2, r3
 8005188:	d9f6      	bls.n	8005178 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	601a      	str	r2, [r3, #0]
}
 80051b6:	bf00      	nop
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6892      	ldr	r2, [r2, #8]
 80051d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6852      	ldr	r2, [r2, #4]
 80051e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d103      	bne.n	80051f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	1e5a      	subs	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3b04      	subs	r3, #4
 8005228:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005230:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3b04      	subs	r3, #4
 8005236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f023 0201 	bic.w	r2, r3, #1
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3b04      	subs	r3, #4
 8005246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005248:	4a0c      	ldr	r2, [pc, #48]	; (800527c <pxPortInitialiseStack+0x64>)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3b14      	subs	r3, #20
 8005252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3b04      	subs	r3, #4
 800525e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f06f 0202 	mvn.w	r2, #2
 8005266:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3b20      	subs	r3, #32
 800526c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800526e:	68fb      	ldr	r3, [r7, #12]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	08005281 	.word	0x08005281

08005280 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800528a:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <prvTaskExitError+0x50>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005292:	d009      	beq.n	80052a8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e7fe      	b.n	80052a6 <prvTaskExitError+0x26>
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052ba:	bf00      	nop
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0fc      	beq.n	80052bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000070 	.word	0x20000070
	...

080052e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052e0:	4b07      	ldr	r3, [pc, #28]	; (8005300 <pxCurrentTCBConst2>)
 80052e2:	6819      	ldr	r1, [r3, #0]
 80052e4:	6808      	ldr	r0, [r1, #0]
 80052e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ea:	f380 8809 	msr	PSP, r0
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f04f 0000 	mov.w	r0, #0
 80052f6:	f380 8811 	msr	BASEPRI, r0
 80052fa:	4770      	bx	lr
 80052fc:	f3af 8000 	nop.w

08005300 <pxCurrentTCBConst2>:
 8005300:	20000edc 	.word	0x20000edc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop

08005308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005308:	4808      	ldr	r0, [pc, #32]	; (800532c <prvPortStartFirstTask+0x24>)
 800530a:	6800      	ldr	r0, [r0, #0]
 800530c:	6800      	ldr	r0, [r0, #0]
 800530e:	f380 8808 	msr	MSP, r0
 8005312:	f04f 0000 	mov.w	r0, #0
 8005316:	f380 8814 	msr	CONTROL, r0
 800531a:	b662      	cpsie	i
 800531c:	b661      	cpsie	f
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	df00      	svc	0
 8005328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800532a:	bf00      	nop
 800532c:	e000ed08 	.word	0xe000ed08

08005330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005336:	4b44      	ldr	r3, [pc, #272]	; (8005448 <xPortStartScheduler+0x118>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a44      	ldr	r2, [pc, #272]	; (800544c <xPortStartScheduler+0x11c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d109      	bne.n	8005354 <xPortStartScheduler+0x24>
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	e7fe      	b.n	8005352 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005354:	4b3c      	ldr	r3, [pc, #240]	; (8005448 <xPortStartScheduler+0x118>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a3d      	ldr	r2, [pc, #244]	; (8005450 <xPortStartScheduler+0x120>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d109      	bne.n	8005372 <xPortStartScheduler+0x42>
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e7fe      	b.n	8005370 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005372:	4b38      	ldr	r3, [pc, #224]	; (8005454 <xPortStartScheduler+0x124>)
 8005374:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	22ff      	movs	r2, #255	; 0xff
 8005382:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	b2db      	uxtb	r3, r3
 800538a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005394:	b2da      	uxtb	r2, r3
 8005396:	4b30      	ldr	r3, [pc, #192]	; (8005458 <xPortStartScheduler+0x128>)
 8005398:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800539a:	4b30      	ldr	r3, [pc, #192]	; (800545c <xPortStartScheduler+0x12c>)
 800539c:	2207      	movs	r2, #7
 800539e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053a0:	e009      	b.n	80053b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80053a2:	4b2e      	ldr	r3, [pc, #184]	; (800545c <xPortStartScheduler+0x12c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	4a2c      	ldr	r2, [pc, #176]	; (800545c <xPortStartScheduler+0x12c>)
 80053aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053b6:	78fb      	ldrb	r3, [r7, #3]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b80      	cmp	r3, #128	; 0x80
 80053c0:	d0ef      	beq.n	80053a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053c2:	4b26      	ldr	r3, [pc, #152]	; (800545c <xPortStartScheduler+0x12c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f1c3 0307 	rsb	r3, r3, #7
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d009      	beq.n	80053e2 <xPortStartScheduler+0xb2>
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	60bb      	str	r3, [r7, #8]
 80053e0:	e7fe      	b.n	80053e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053e2:	4b1e      	ldr	r3, [pc, #120]	; (800545c <xPortStartScheduler+0x12c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	4a1c      	ldr	r2, [pc, #112]	; (800545c <xPortStartScheduler+0x12c>)
 80053ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053ec:	4b1b      	ldr	r3, [pc, #108]	; (800545c <xPortStartScheduler+0x12c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053f4:	4a19      	ldr	r2, [pc, #100]	; (800545c <xPortStartScheduler+0x12c>)
 80053f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005400:	4a17      	ldr	r2, [pc, #92]	; (8005460 <xPortStartScheduler+0x130>)
 8005402:	4b17      	ldr	r3, [pc, #92]	; (8005460 <xPortStartScheduler+0x130>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800540a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800540c:	4a14      	ldr	r2, [pc, #80]	; (8005460 <xPortStartScheduler+0x130>)
 800540e:	4b14      	ldr	r3, [pc, #80]	; (8005460 <xPortStartScheduler+0x130>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005416:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005418:	f000 f8d6 	bl	80055c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800541c:	4b11      	ldr	r3, [pc, #68]	; (8005464 <xPortStartScheduler+0x134>)
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005422:	f000 f8f5 	bl	8005610 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005426:	4a10      	ldr	r2, [pc, #64]	; (8005468 <xPortStartScheduler+0x138>)
 8005428:	4b0f      	ldr	r3, [pc, #60]	; (8005468 <xPortStartScheduler+0x138>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005430:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005432:	f7ff ff69 	bl	8005308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005436:	f001 f9ab 	bl	8006790 <vTaskSwitchContext>
	prvTaskExitError();
 800543a:	f7ff ff21 	bl	8005280 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	e000ed00 	.word	0xe000ed00
 800544c:	410fc271 	.word	0x410fc271
 8005450:	410fc270 	.word	0x410fc270
 8005454:	e000e400 	.word	0xe000e400
 8005458:	200002fc 	.word	0x200002fc
 800545c:	20000300 	.word	0x20000300
 8005460:	e000ed20 	.word	0xe000ed20
 8005464:	20000070 	.word	0x20000070
 8005468:	e000ef34 	.word	0xe000ef34

0800546c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <vPortEnterCritical+0x54>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3301      	adds	r3, #1
 800548a:	4a0d      	ldr	r2, [pc, #52]	; (80054c0 <vPortEnterCritical+0x54>)
 800548c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800548e:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <vPortEnterCritical+0x54>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d10e      	bne.n	80054b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005496:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <vPortEnterCritical+0x58>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <vPortEnterCritical+0x48>
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	603b      	str	r3, [r7, #0]
 80054b2:	e7fe      	b.n	80054b2 <vPortEnterCritical+0x46>
	}
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	20000070 	.word	0x20000070
 80054c4:	e000ed04 	.word	0xe000ed04

080054c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054ce:	4b11      	ldr	r3, [pc, #68]	; (8005514 <vPortExitCritical+0x4c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d109      	bne.n	80054ea <vPortExitCritical+0x22>
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	607b      	str	r3, [r7, #4]
 80054e8:	e7fe      	b.n	80054e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80054ea:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <vPortExitCritical+0x4c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	4a08      	ldr	r2, [pc, #32]	; (8005514 <vPortExitCritical+0x4c>)
 80054f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054f4:	4b07      	ldr	r3, [pc, #28]	; (8005514 <vPortExitCritical+0x4c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d104      	bne.n	8005506 <vPortExitCritical+0x3e>
 80054fc:	2300      	movs	r3, #0
 80054fe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20000070 	.word	0x20000070
	...

08005520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005520:	f3ef 8009 	mrs	r0, PSP
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	4b15      	ldr	r3, [pc, #84]	; (8005580 <pxCurrentTCBConst>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	f01e 0f10 	tst.w	lr, #16
 8005530:	bf08      	it	eq
 8005532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553a:	6010      	str	r0, [r2, #0]
 800553c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005544:	f380 8811 	msr	BASEPRI, r0
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f001 f91e 	bl	8006790 <vTaskSwitchContext>
 8005554:	f04f 0000 	mov.w	r0, #0
 8005558:	f380 8811 	msr	BASEPRI, r0
 800555c:	bc09      	pop	{r0, r3}
 800555e:	6819      	ldr	r1, [r3, #0]
 8005560:	6808      	ldr	r0, [r1, #0]
 8005562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005566:	f01e 0f10 	tst.w	lr, #16
 800556a:	bf08      	it	eq
 800556c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005570:	f380 8809 	msr	PSP, r0
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	f3af 8000 	nop.w

08005580 <pxCurrentTCBConst>:
 8005580:	20000edc 	.word	0x20000edc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop

08005588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055a0:	f001 f83e 	bl	8006620 <xTaskIncrementTick>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055aa:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <SysTick_Handler+0x3c>)
 80055ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	2300      	movs	r3, #0
 80055b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80055bc:	bf00      	nop
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	e000ed04 	.word	0xe000ed04

080055c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <vPortSetupTimerInterrupt+0x34>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055d2:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <vPortSetupTimerInterrupt+0x38>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055d8:	4a0a      	ldr	r2, [pc, #40]	; (8005604 <vPortSetupTimerInterrupt+0x3c>)
 80055da:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <vPortSetupTimerInterrupt+0x40>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	490b      	ldr	r1, [pc, #44]	; (800560c <vPortSetupTimerInterrupt+0x44>)
 80055e0:	fba1 1303 	umull	r1, r3, r1, r3
 80055e4:	099b      	lsrs	r3, r3, #6
 80055e6:	3b01      	subs	r3, #1
 80055e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055ea:	4b04      	ldr	r3, [pc, #16]	; (80055fc <vPortSetupTimerInterrupt+0x34>)
 80055ec:	2207      	movs	r2, #7
 80055ee:	601a      	str	r2, [r3, #0]
}
 80055f0:	bf00      	nop
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	e000e010 	.word	0xe000e010
 8005600:	e000e018 	.word	0xe000e018
 8005604:	e000e014 	.word	0xe000e014
 8005608:	20000064 	.word	0x20000064
 800560c:	10624dd3 	.word	0x10624dd3

08005610 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005610:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005620 <vPortEnableVFP+0x10>
 8005614:	6801      	ldr	r1, [r0, #0]
 8005616:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800561a:	6001      	str	r1, [r0, #0]
 800561c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800561e:	bf00      	nop
 8005620:	e000ed88 	.word	0xe000ed88

08005624 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	; 0x28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005630:	f000 ff4c 	bl	80064cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005634:	4b59      	ldr	r3, [pc, #356]	; (800579c <pvPortMalloc+0x178>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800563c:	f000 f91a 	bl	8005874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005640:	4b57      	ldr	r3, [pc, #348]	; (80057a0 <pvPortMalloc+0x17c>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4013      	ands	r3, r2
 8005648:	2b00      	cmp	r3, #0
 800564a:	f040 8091 	bne.w	8005770 <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d01c      	beq.n	800568e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005654:	2208      	movs	r2, #8
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4413      	add	r3, r2
 800565a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	2b00      	cmp	r3, #0
 8005664:	d013      	beq.n	800568e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f023 0307 	bic.w	r3, r3, #7
 800566c:	3308      	adds	r3, #8
 800566e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <pvPortMalloc+0x6a>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	e7fe      	b.n	800568c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d06d      	beq.n	8005770 <pvPortMalloc+0x14c>
 8005694:	4b43      	ldr	r3, [pc, #268]	; (80057a4 <pvPortMalloc+0x180>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d868      	bhi.n	8005770 <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800569e:	4b42      	ldr	r3, [pc, #264]	; (80057a8 <pvPortMalloc+0x184>)
 80056a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056a2:	4b41      	ldr	r3, [pc, #260]	; (80057a8 <pvPortMalloc+0x184>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056a8:	e004      	b.n	80056b4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d203      	bcs.n	80056c6 <pvPortMalloc+0xa2>
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f1      	bne.n	80056aa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056c6:	4b35      	ldr	r3, [pc, #212]	; (800579c <pvPortMalloc+0x178>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d04f      	beq.n	8005770 <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2208      	movs	r2, #8
 80056d6:	4413      	add	r3, r2
 80056d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	1ad2      	subs	r2, r2, r3
 80056ea:	2308      	movs	r3, #8
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d91e      	bls.n	8005730 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4413      	add	r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	2b00      	cmp	r3, #0
 8005702:	d009      	beq.n	8005718 <pvPortMalloc+0xf4>
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	e7fe      	b.n	8005716 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	1ad2      	subs	r2, r2, r3
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800572a:	69b8      	ldr	r0, [r7, #24]
 800572c:	f000 f904 	bl	8005938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005730:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <pvPortMalloc+0x180>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	4a1a      	ldr	r2, [pc, #104]	; (80057a4 <pvPortMalloc+0x180>)
 800573c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800573e:	4b19      	ldr	r3, [pc, #100]	; (80057a4 <pvPortMalloc+0x180>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b1a      	ldr	r3, [pc, #104]	; (80057ac <pvPortMalloc+0x188>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d203      	bcs.n	8005752 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800574a:	4b16      	ldr	r3, [pc, #88]	; (80057a4 <pvPortMalloc+0x180>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a17      	ldr	r2, [pc, #92]	; (80057ac <pvPortMalloc+0x188>)
 8005750:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <pvPortMalloc+0x17c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	431a      	orrs	r2, r3
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005766:	4b12      	ldr	r3, [pc, #72]	; (80057b0 <pvPortMalloc+0x18c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3301      	adds	r3, #1
 800576c:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <pvPortMalloc+0x18c>)
 800576e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005770:	f000 feba 	bl	80064e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <pvPortMalloc+0x16e>
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	e7fe      	b.n	8005790 <pvPortMalloc+0x16c>
	return pvReturn;
 8005792:	69fb      	ldr	r3, [r7, #28]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3728      	adds	r7, #40	; 0x28
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	20000ec4 	.word	0x20000ec4
 80057a0:	20000ed8 	.word	0x20000ed8
 80057a4:	20000ec8 	.word	0x20000ec8
 80057a8:	20000ebc 	.word	0x20000ebc
 80057ac:	20000ecc 	.word	0x20000ecc
 80057b0:	20000ed0 	.word	0x20000ed0

080057b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d04b      	beq.n	800585e <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057c6:	2308      	movs	r3, #8
 80057c8:	425b      	negs	r3, r3
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4413      	add	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	4b23      	ldr	r3, [pc, #140]	; (8005868 <vPortFree+0xb4>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4013      	ands	r3, r2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <vPortFree+0x42>
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	e7fe      	b.n	80057f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <vPortFree+0x5e>
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	60bb      	str	r3, [r7, #8]
 8005810:	e7fe      	b.n	8005810 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	4b14      	ldr	r3, [pc, #80]	; (8005868 <vPortFree+0xb4>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01e      	beq.n	800585e <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d11a      	bne.n	800585e <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <vPortFree+0xb4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	43db      	mvns	r3, r3
 8005832:	401a      	ands	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005838:	f000 fe48 	bl	80064cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	4b0a      	ldr	r3, [pc, #40]	; (800586c <vPortFree+0xb8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4413      	add	r3, r2
 8005846:	4a09      	ldr	r2, [pc, #36]	; (800586c <vPortFree+0xb8>)
 8005848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800584a:	6938      	ldr	r0, [r7, #16]
 800584c:	f000 f874 	bl	8005938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005850:	4b07      	ldr	r3, [pc, #28]	; (8005870 <vPortFree+0xbc>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3301      	adds	r3, #1
 8005856:	4a06      	ldr	r2, [pc, #24]	; (8005870 <vPortFree+0xbc>)
 8005858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800585a:	f000 fe45 	bl	80064e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800585e:	bf00      	nop
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000ed8 	.word	0x20000ed8
 800586c:	20000ec8 	.word	0x20000ec8
 8005870:	20000ed4 	.word	0x20000ed4

08005874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800587a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800587e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005880:	4b27      	ldr	r3, [pc, #156]	; (8005920 <prvHeapInit+0xac>)
 8005882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00c      	beq.n	80058a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3307      	adds	r3, #7
 8005892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0307 	bic.w	r3, r3, #7
 800589a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	4a1f      	ldr	r2, [pc, #124]	; (8005920 <prvHeapInit+0xac>)
 80058a4:	4413      	add	r3, r2
 80058a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058ac:	4a1d      	ldr	r2, [pc, #116]	; (8005924 <prvHeapInit+0xb0>)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058b2:	4b1c      	ldr	r3, [pc, #112]	; (8005924 <prvHeapInit+0xb0>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	4413      	add	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058c0:	2208      	movs	r2, #8
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0307 	bic.w	r3, r3, #7
 80058ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4a15      	ldr	r2, [pc, #84]	; (8005928 <prvHeapInit+0xb4>)
 80058d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058d6:	4b14      	ldr	r3, [pc, #80]	; (8005928 <prvHeapInit+0xb4>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2200      	movs	r2, #0
 80058dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058de:	4b12      	ldr	r3, [pc, #72]	; (8005928 <prvHeapInit+0xb4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	1ad2      	subs	r2, r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058f4:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <prvHeapInit+0xb4>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	4a0a      	ldr	r2, [pc, #40]	; (800592c <prvHeapInit+0xb8>)
 8005902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4a09      	ldr	r2, [pc, #36]	; (8005930 <prvHeapInit+0xbc>)
 800590a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800590c:	4b09      	ldr	r3, [pc, #36]	; (8005934 <prvHeapInit+0xc0>)
 800590e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005912:	601a      	str	r2, [r3, #0]
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	20000304 	.word	0x20000304
 8005924:	20000ebc 	.word	0x20000ebc
 8005928:	20000ec4 	.word	0x20000ec4
 800592c:	20000ecc 	.word	0x20000ecc
 8005930:	20000ec8 	.word	0x20000ec8
 8005934:	20000ed8 	.word	0x20000ed8

08005938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005940:	4b28      	ldr	r3, [pc, #160]	; (80059e4 <prvInsertBlockIntoFreeList+0xac>)
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	e002      	b.n	800594c <prvInsertBlockIntoFreeList+0x14>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	429a      	cmp	r2, r3
 8005954:	d3f7      	bcc.n	8005946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	441a      	add	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	429a      	cmp	r2, r3
 8005966:	d108      	bne.n	800597a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	441a      	add	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	441a      	add	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d118      	bne.n	80059c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d00d      	beq.n	80059b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	441a      	add	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	e008      	b.n	80059c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059b6:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <prvInsertBlockIntoFreeList+0xb0>)
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	e003      	b.n	80059c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d002      	beq.n	80059d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20000ebc 	.word	0x20000ebc
 80059e8:	20000ec4 	.word	0x20000ec4

080059ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <xQueueGenericReset+0x28>
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	e7fe      	b.n	8005a12 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005a14:	f7ff fd2a 	bl	800546c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	68f9      	ldr	r1, [r7, #12]
 8005a22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a24:	fb01 f303 	mul.w	r3, r1, r3
 8005a28:	441a      	add	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a44:	3b01      	subs	r3, #1
 8005a46:	68f9      	ldr	r1, [r7, #12]
 8005a48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a4a:	fb01 f303 	mul.w	r3, r1, r3
 8005a4e:	441a      	add	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	22ff      	movs	r2, #255	; 0xff
 8005a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	22ff      	movs	r2, #255	; 0xff
 8005a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d114      	bne.n	8005a94 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d01a      	beq.n	8005aa8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3310      	adds	r3, #16
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 ff08 	bl	800688c <xTaskRemoveFromEventList>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d012      	beq.n	8005aa8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a82:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <xQueueGenericReset+0xcc>)
 8005a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	e009      	b.n	8005aa8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3310      	adds	r3, #16
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff fb08 	bl	80050ae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3324      	adds	r3, #36	; 0x24
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff fb03 	bl	80050ae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005aa8:	f7ff fd0e 	bl	80054c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005aac:	2301      	movs	r3, #1
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08e      	sub	sp, #56	; 0x38
 8005ac0:	af02      	add	r7, sp, #8
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d109      	bne.n	8005ae4 <xQueueGenericCreateStatic+0x28>
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae2:	e7fe      	b.n	8005ae2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <xQueueGenericCreateStatic+0x42>
 8005aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
 8005afc:	e7fe      	b.n	8005afc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <xQueueGenericCreateStatic+0x4e>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <xQueueGenericCreateStatic+0x52>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <xQueueGenericCreateStatic+0x54>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d109      	bne.n	8005b28 <xQueueGenericCreateStatic+0x6c>
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	e7fe      	b.n	8005b26 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d102      	bne.n	8005b34 <xQueueGenericCreateStatic+0x78>
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <xQueueGenericCreateStatic+0x7c>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <xQueueGenericCreateStatic+0x7e>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <xQueueGenericCreateStatic+0x96>
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	61fb      	str	r3, [r7, #28]
 8005b50:	e7fe      	b.n	8005b50 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b52:	2348      	movs	r3, #72	; 0x48
 8005b54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b48      	cmp	r3, #72	; 0x48
 8005b5a:	d009      	beq.n	8005b70 <xQueueGenericCreateStatic+0xb4>
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	e7fe      	b.n	8005b6e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00d      	beq.n	8005b98 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b84:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f83e 	bl	8005c14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3730      	adds	r7, #48	; 0x30
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b08a      	sub	sp, #40	; 0x28
 8005ba6:	af02      	add	r7, sp, #8
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	4613      	mov	r3, r2
 8005bae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d109      	bne.n	8005bca <xQueueGenericCreate+0x28>
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	613b      	str	r3, [r7, #16]
 8005bc8:	e7fe      	b.n	8005bc8 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
 8005bd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	3348      	adds	r3, #72	; 0x48
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff fd23 	bl	8005624 <pvPortMalloc>
 8005bde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d011      	beq.n	8005c0a <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	3348      	adds	r3, #72	; 0x48
 8005bee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bf8:	79fa      	ldrb	r2, [r7, #7]
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f805 	bl	8005c14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
	}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3720      	adds	r7, #32
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d103      	bne.n	8005c30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	e002      	b.n	8005c36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c42:	2101      	movs	r1, #1
 8005c44:	69b8      	ldr	r0, [r7, #24]
 8005c46:	f7ff fed1 	bl	80059ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c4a:	bf00      	nop
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b082      	sub	sp, #8
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00e      	beq.n	8005c7e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005c72:	2300      	movs	r3, #0
 8005c74:	2200      	movs	r2, #0
 8005c76:	2100      	movs	r1, #0
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f837 	bl	8005cec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005c7e:	bf00      	nop
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c90:	2301      	movs	r3, #1
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	2300      	movs	r3, #0
 8005c96:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	6939      	ldr	r1, [r7, #16]
 8005c9e:	6978      	ldr	r0, [r7, #20]
 8005ca0:	f7ff ff7f 	bl	8005ba2 <xQueueGenericCreate>
 8005ca4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff ffd3 	bl	8005c52 <prvInitialiseMutex>

		return xNewQueue;
 8005cac:	68fb      	ldr	r3, [r7, #12]
	}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b088      	sub	sp, #32
 8005cba:	af02      	add	r7, sp, #8
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	6039      	str	r1, [r7, #0]
 8005cc0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	6939      	ldr	r1, [r7, #16]
 8005cd4:	6978      	ldr	r0, [r7, #20]
 8005cd6:	f7ff fef1 	bl	8005abc <xQueueGenericCreateStatic>
 8005cda:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f7ff ffb8 	bl	8005c52 <prvInitialiseMutex>

		return xNewQueue;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
	}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08e      	sub	sp, #56	; 0x38
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d109      	bne.n	8005d1c <xQueueGenericSend+0x30>
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d1a:	e7fe      	b.n	8005d1a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d103      	bne.n	8005d2a <xQueueGenericSend+0x3e>
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <xQueueGenericSend+0x42>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <xQueueGenericSend+0x44>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d109      	bne.n	8005d48 <xQueueGenericSend+0x5c>
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
 8005d46:	e7fe      	b.n	8005d46 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d103      	bne.n	8005d56 <xQueueGenericSend+0x6a>
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <xQueueGenericSend+0x6e>
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <xQueueGenericSend+0x70>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d109      	bne.n	8005d74 <xQueueGenericSend+0x88>
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	623b      	str	r3, [r7, #32]
 8005d72:	e7fe      	b.n	8005d72 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d74:	f000 ff40 	bl	8006bf8 <xTaskGetSchedulerState>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d102      	bne.n	8005d84 <xQueueGenericSend+0x98>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <xQueueGenericSend+0x9c>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <xQueueGenericSend+0x9e>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <xQueueGenericSend+0xb6>
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	e7fe      	b.n	8005da0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005da2:	f7ff fb63 	bl	800546c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d302      	bcc.n	8005db8 <xQueueGenericSend+0xcc>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d129      	bne.n	8005e0c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	68b9      	ldr	r1, [r7, #8]
 8005dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dbe:	f000 f88f 	bl	8005ee0 <prvCopyDataToQueue>
 8005dc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d010      	beq.n	8005dee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	3324      	adds	r3, #36	; 0x24
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fd5b 	bl	800688c <xTaskRemoveFromEventList>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d013      	beq.n	8005e04 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ddc:	4b3f      	ldr	r3, [pc, #252]	; (8005edc <xQueueGenericSend+0x1f0>)
 8005dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	e00a      	b.n	8005e04 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d007      	beq.n	8005e04 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005df4:	4b39      	ldr	r3, [pc, #228]	; (8005edc <xQueueGenericSend+0x1f0>)
 8005df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e04:	f7ff fb60 	bl	80054c8 <vPortExitCritical>
				return pdPASS;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e063      	b.n	8005ed4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d103      	bne.n	8005e1a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e12:	f7ff fb59 	bl	80054c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	e05c      	b.n	8005ed4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d106      	bne.n	8005e2e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e20:	f107 0314 	add.w	r3, r7, #20
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fd93 	bl	8006950 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e2e:	f7ff fb4b 	bl	80054c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e32:	f000 fb4b 	bl	80064cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e36:	f7ff fb19 	bl	800546c <vPortEnterCritical>
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e40:	b25b      	sxtb	r3, r3
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e46:	d103      	bne.n	8005e50 <xQueueGenericSend+0x164>
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e56:	b25b      	sxtb	r3, r3
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e5c:	d103      	bne.n	8005e66 <xQueueGenericSend+0x17a>
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e66:	f7ff fb2f 	bl	80054c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e6a:	1d3a      	adds	r2, r7, #4
 8005e6c:	f107 0314 	add.w	r3, r7, #20
 8005e70:	4611      	mov	r1, r2
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fd82 	bl	800697c <xTaskCheckForTimeOut>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d124      	bne.n	8005ec8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e80:	f000 f8ea 	bl	8006058 <prvIsQueueFull>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d018      	beq.n	8005ebc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	3310      	adds	r3, #16
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	4611      	mov	r1, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fcd6 	bl	8006844 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e9a:	f000 f88b 	bl	8005fb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e9e:	f000 fb23 	bl	80064e8 <xTaskResumeAll>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f47f af7c 	bne.w	8005da2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005eaa:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <xQueueGenericSend+0x1f0>)
 8005eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	e772      	b.n	8005da2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ebe:	f000 f879 	bl	8005fb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ec2:	f000 fb11 	bl	80064e8 <xTaskResumeAll>
 8005ec6:	e76c      	b.n	8005da2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eca:	f000 f873 	bl	8005fb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ece:	f000 fb0b 	bl	80064e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ed2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3738      	adds	r7, #56	; 0x38
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	e000ed04 	.word	0xe000ed04

08005ee0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10d      	bne.n	8005f1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d14d      	bne.n	8005fa2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fe92 	bl	8006c34 <xTaskPriorityDisinherit>
 8005f10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	609a      	str	r2, [r3, #8]
 8005f18:	e043      	b.n	8005fa2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d119      	bne.n	8005f54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6858      	ldr	r0, [r3, #4]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	461a      	mov	r2, r3
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	f000 ffba 	bl	8006ea4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	441a      	add	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d32b      	bcc.n	8005fa2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	605a      	str	r2, [r3, #4]
 8005f52:	e026      	b.n	8005fa2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	68d8      	ldr	r0, [r3, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	f000 ffa0 	bl	8006ea4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	425b      	negs	r3, r3
 8005f6e:	441a      	add	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d207      	bcs.n	8005f90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	425b      	negs	r3, r3
 8005f8a:	441a      	add	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d105      	bne.n	8005fa2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005faa:	697b      	ldr	r3, [r7, #20]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fbc:	f7ff fa56 	bl	800546c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fc8:	e011      	b.n	8005fee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d012      	beq.n	8005ff8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3324      	adds	r3, #36	; 0x24
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fc58 	bl	800688c <xTaskRemoveFromEventList>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fe2:	f000 fd2b 	bl	8006a3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	dce9      	bgt.n	8005fca <prvUnlockQueue+0x16>
 8005ff6:	e000      	b.n	8005ffa <prvUnlockQueue+0x46>
					break;
 8005ff8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	22ff      	movs	r2, #255	; 0xff
 8005ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006002:	f7ff fa61 	bl	80054c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006006:	f7ff fa31 	bl	800546c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006010:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006012:	e011      	b.n	8006038 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d012      	beq.n	8006042 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3310      	adds	r3, #16
 8006020:	4618      	mov	r0, r3
 8006022:	f000 fc33 	bl	800688c <xTaskRemoveFromEventList>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800602c:	f000 fd06 	bl	8006a3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	3b01      	subs	r3, #1
 8006034:	b2db      	uxtb	r3, r3
 8006036:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800603c:	2b00      	cmp	r3, #0
 800603e:	dce9      	bgt.n	8006014 <prvUnlockQueue+0x60>
 8006040:	e000      	b.n	8006044 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006042:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	22ff      	movs	r2, #255	; 0xff
 8006048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800604c:	f7ff fa3c 	bl	80054c8 <vPortExitCritical>
}
 8006050:	bf00      	nop
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006060:	f7ff fa04 	bl	800546c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606c:	429a      	cmp	r2, r3
 800606e:	d102      	bne.n	8006076 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006070:	2301      	movs	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	e001      	b.n	800607a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800607a:	f7ff fa25 	bl	80054c8 <vPortExitCritical>

	return xReturn;
 800607e:	68fb      	ldr	r3, [r7, #12]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08e      	sub	sp, #56	; 0x38
 800608c:	af04      	add	r7, sp, #16
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006098:	2b00      	cmp	r3, #0
 800609a:	d109      	bne.n	80060b0 <xTaskCreateStatic+0x28>
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	623b      	str	r3, [r7, #32]
 80060ae:	e7fe      	b.n	80060ae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80060b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d109      	bne.n	80060ca <xTaskCreateStatic+0x42>
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	61fb      	str	r3, [r7, #28]
 80060c8:	e7fe      	b.n	80060c8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060ca:	2354      	movs	r3, #84	; 0x54
 80060cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b54      	cmp	r3, #84	; 0x54
 80060d2:	d009      	beq.n	80060e8 <xTaskCreateStatic+0x60>
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	e7fe      	b.n	80060e6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01e      	beq.n	800612e <xTaskCreateStatic+0xa6>
 80060f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d01b      	beq.n	800612e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	2202      	movs	r2, #2
 8006104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006108:	2300      	movs	r3, #0
 800610a:	9303      	str	r3, [sp, #12]
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	9302      	str	r3, [sp, #8]
 8006110:	f107 0314 	add.w	r3, r7, #20
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f850 	bl	80061c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006128:	f000 f8d4 	bl	80062d4 <prvAddNewTaskToReadyList>
 800612c:	e001      	b.n	8006132 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006132:	697b      	ldr	r3, [r7, #20]
	}
 8006134:	4618      	mov	r0, r3
 8006136:	3728      	adds	r7, #40	; 0x28
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08c      	sub	sp, #48	; 0x30
 8006140:	af04      	add	r7, sp, #16
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	4613      	mov	r3, r2
 800614a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800614c:	88fb      	ldrh	r3, [r7, #6]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff fa67 	bl	8005624 <pvPortMalloc>
 8006156:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00e      	beq.n	800617c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800615e:	2054      	movs	r0, #84	; 0x54
 8006160:	f7ff fa60 	bl	8005624 <pvPortMalloc>
 8006164:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	631a      	str	r2, [r3, #48]	; 0x30
 8006172:	e005      	b.n	8006180 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006174:	6978      	ldr	r0, [r7, #20]
 8006176:	f7ff fb1d 	bl	80057b4 <vPortFree>
 800617a:	e001      	b.n	8006180 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800617c:	2300      	movs	r3, #0
 800617e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d017      	beq.n	80061b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800618e:	88fa      	ldrh	r2, [r7, #6]
 8006190:	2300      	movs	r3, #0
 8006192:	9303      	str	r3, [sp, #12]
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	9302      	str	r3, [sp, #8]
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 f80e 	bl	80061c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061aa:	69f8      	ldr	r0, [r7, #28]
 80061ac:	f000 f892 	bl	80062d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061b0:	2301      	movs	r3, #1
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	e002      	b.n	80061bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061bc:	69bb      	ldr	r3, [r7, #24]
	}
 80061be:	4618      	mov	r0, r3
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b088      	sub	sp, #32
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	607a      	str	r2, [r7, #4]
 80061d2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061de:	3b01      	subs	r3, #1
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	f023 0307 	bic.w	r3, r3, #7
 80061ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d009      	beq.n	800620c <prvInitialiseNewTask+0x46>
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	e7fe      	b.n	800620a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01f      	beq.n	8006252 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
 8006216:	e012      	b.n	800623e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	7819      	ldrb	r1, [r3, #0]
 8006220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	3334      	adds	r3, #52	; 0x34
 8006228:	460a      	mov	r2, r1
 800622a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d006      	beq.n	8006246 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3301      	adds	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	2b0f      	cmp	r3, #15
 8006242:	d9e9      	bls.n	8006218 <prvInitialiseNewTask+0x52>
 8006244:	e000      	b.n	8006248 <prvInitialiseNewTask+0x82>
			{
				break;
 8006246:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006250:	e003      	b.n	800625a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	2b06      	cmp	r3, #6
 800625e:	d901      	bls.n	8006264 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006260:	2306      	movs	r3, #6
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006268:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800626e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	2200      	movs	r2, #0
 8006274:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	3304      	adds	r3, #4
 800627a:	4618      	mov	r0, r3
 800627c:	f7fe ff37 	bl	80050ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	3318      	adds	r3, #24
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe ff32 	bl	80050ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	f1c3 0207 	rsb	r2, r3, #7
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800629e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	2200      	movs	r2, #0
 80062a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	68f9      	ldr	r1, [r7, #12]
 80062b2:	69b8      	ldr	r0, [r7, #24]
 80062b4:	f7fe ffb0 	bl	8005218 <pxPortInitialiseStack>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ca:	bf00      	nop
 80062cc:	3720      	adds	r7, #32
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
	...

080062d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062dc:	f7ff f8c6 	bl	800546c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062e0:	4b2a      	ldr	r3, [pc, #168]	; (800638c <prvAddNewTaskToReadyList+0xb8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3301      	adds	r3, #1
 80062e6:	4a29      	ldr	r2, [pc, #164]	; (800638c <prvAddNewTaskToReadyList+0xb8>)
 80062e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062ea:	4b29      	ldr	r3, [pc, #164]	; (8006390 <prvAddNewTaskToReadyList+0xbc>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d109      	bne.n	8006306 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062f2:	4a27      	ldr	r2, [pc, #156]	; (8006390 <prvAddNewTaskToReadyList+0xbc>)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062f8:	4b24      	ldr	r3, [pc, #144]	; (800638c <prvAddNewTaskToReadyList+0xb8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d110      	bne.n	8006322 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006300:	f000 fbc0 	bl	8006a84 <prvInitialiseTaskLists>
 8006304:	e00d      	b.n	8006322 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006306:	4b23      	ldr	r3, [pc, #140]	; (8006394 <prvAddNewTaskToReadyList+0xc0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d109      	bne.n	8006322 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800630e:	4b20      	ldr	r3, [pc, #128]	; (8006390 <prvAddNewTaskToReadyList+0xbc>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	429a      	cmp	r2, r3
 800631a:	d802      	bhi.n	8006322 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800631c:	4a1c      	ldr	r2, [pc, #112]	; (8006390 <prvAddNewTaskToReadyList+0xbc>)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006322:	4b1d      	ldr	r3, [pc, #116]	; (8006398 <prvAddNewTaskToReadyList+0xc4>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	4a1b      	ldr	r2, [pc, #108]	; (8006398 <prvAddNewTaskToReadyList+0xc4>)
 800632a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	2201      	movs	r2, #1
 8006332:	409a      	lsls	r2, r3
 8006334:	4b19      	ldr	r3, [pc, #100]	; (800639c <prvAddNewTaskToReadyList+0xc8>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4313      	orrs	r3, r2
 800633a:	4a18      	ldr	r2, [pc, #96]	; (800639c <prvAddNewTaskToReadyList+0xc8>)
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4a15      	ldr	r2, [pc, #84]	; (80063a0 <prvAddNewTaskToReadyList+0xcc>)
 800634c:	441a      	add	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3304      	adds	r3, #4
 8006352:	4619      	mov	r1, r3
 8006354:	4610      	mov	r0, r2
 8006356:	f7fe fed7 	bl	8005108 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800635a:	f7ff f8b5 	bl	80054c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800635e:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <prvAddNewTaskToReadyList+0xc0>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00e      	beq.n	8006384 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006366:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <prvAddNewTaskToReadyList+0xbc>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	429a      	cmp	r2, r3
 8006372:	d207      	bcs.n	8006384 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006374:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <prvAddNewTaskToReadyList+0xd0>)
 8006376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006384:	bf00      	nop
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000fdc 	.word	0x20000fdc
 8006390:	20000edc 	.word	0x20000edc
 8006394:	20000fe8 	.word	0x20000fe8
 8006398:	20000ff8 	.word	0x20000ff8
 800639c:	20000fe4 	.word	0x20000fe4
 80063a0:	20000ee0 	.word	0x20000ee0
 80063a4:	e000ed04 	.word	0xe000ed04

080063a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d016      	beq.n	80063e8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063ba:	4b13      	ldr	r3, [pc, #76]	; (8006408 <vTaskDelay+0x60>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d009      	beq.n	80063d6 <vTaskDelay+0x2e>
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	60bb      	str	r3, [r7, #8]
 80063d4:	e7fe      	b.n	80063d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80063d6:	f000 f879 	bl	80064cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063da:	2100      	movs	r1, #0
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fcad 	bl	8006d3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063e2:	f000 f881 	bl	80064e8 <xTaskResumeAll>
 80063e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d107      	bne.n	80063fe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80063ee:	4b07      	ldr	r3, [pc, #28]	; (800640c <vTaskDelay+0x64>)
 80063f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063fe:	bf00      	nop
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20001004 	.word	0x20001004
 800640c:	e000ed04 	.word	0xe000ed04

08006410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08a      	sub	sp, #40	; 0x28
 8006414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800641e:	463a      	mov	r2, r7
 8006420:	1d39      	adds	r1, r7, #4
 8006422:	f107 0308 	add.w	r3, r7, #8
 8006426:	4618      	mov	r0, r3
 8006428:	f7f9 fed2 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	9202      	str	r2, [sp, #8]
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	2300      	movs	r3, #0
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	2300      	movs	r3, #0
 800643c:	460a      	mov	r2, r1
 800643e:	491d      	ldr	r1, [pc, #116]	; (80064b4 <vTaskStartScheduler+0xa4>)
 8006440:	481d      	ldr	r0, [pc, #116]	; (80064b8 <vTaskStartScheduler+0xa8>)
 8006442:	f7ff fe21 	bl	8006088 <xTaskCreateStatic>
 8006446:	4602      	mov	r2, r0
 8006448:	4b1c      	ldr	r3, [pc, #112]	; (80064bc <vTaskStartScheduler+0xac>)
 800644a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800644c:	4b1b      	ldr	r3, [pc, #108]	; (80064bc <vTaskStartScheduler+0xac>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006454:	2301      	movs	r3, #1
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	e001      	b.n	800645e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d115      	bne.n	8006490 <vTaskStartScheduler+0x80>
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	613b      	str	r3, [r7, #16]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006476:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <vTaskStartScheduler+0xb0>)
 8006478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800647c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800647e:	4b11      	ldr	r3, [pc, #68]	; (80064c4 <vTaskStartScheduler+0xb4>)
 8006480:	2201      	movs	r2, #1
 8006482:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006484:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <vTaskStartScheduler+0xb8>)
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800648a:	f7fe ff51 	bl	8005330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800648e:	e00d      	b.n	80064ac <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006496:	d109      	bne.n	80064ac <vTaskStartScheduler+0x9c>
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	e7fe      	b.n	80064aa <vTaskStartScheduler+0x9a>
}
 80064ac:	bf00      	nop
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	08006f4c 	.word	0x08006f4c
 80064b8:	08006a55 	.word	0x08006a55
 80064bc:	20001000 	.word	0x20001000
 80064c0:	20000ffc 	.word	0x20000ffc
 80064c4:	20000fe8 	.word	0x20000fe8
 80064c8:	20000fe0 	.word	0x20000fe0

080064cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <vTaskSuspendAll+0x18>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	4a03      	ldr	r2, [pc, #12]	; (80064e4 <vTaskSuspendAll+0x18>)
 80064d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80064da:	bf00      	nop
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	20001004 	.word	0x20001004

080064e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064f6:	4b41      	ldr	r3, [pc, #260]	; (80065fc <xTaskResumeAll+0x114>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d109      	bne.n	8006512 <xTaskResumeAll+0x2a>
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	e7fe      	b.n	8006510 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006512:	f7fe ffab 	bl	800546c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006516:	4b39      	ldr	r3, [pc, #228]	; (80065fc <xTaskResumeAll+0x114>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3b01      	subs	r3, #1
 800651c:	4a37      	ldr	r2, [pc, #220]	; (80065fc <xTaskResumeAll+0x114>)
 800651e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006520:	4b36      	ldr	r3, [pc, #216]	; (80065fc <xTaskResumeAll+0x114>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d161      	bne.n	80065ec <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006528:	4b35      	ldr	r3, [pc, #212]	; (8006600 <xTaskResumeAll+0x118>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d05d      	beq.n	80065ec <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006530:	e02e      	b.n	8006590 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006532:	4b34      	ldr	r3, [pc, #208]	; (8006604 <xTaskResumeAll+0x11c>)
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3318      	adds	r3, #24
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fe3f 	bl	80051c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3304      	adds	r3, #4
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe fe3a 	bl	80051c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	2201      	movs	r2, #1
 8006554:	409a      	lsls	r2, r3
 8006556:	4b2c      	ldr	r3, [pc, #176]	; (8006608 <xTaskResumeAll+0x120>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4313      	orrs	r3, r2
 800655c:	4a2a      	ldr	r2, [pc, #168]	; (8006608 <xTaskResumeAll+0x120>)
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006564:	4613      	mov	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4a27      	ldr	r2, [pc, #156]	; (800660c <xTaskResumeAll+0x124>)
 800656e:	441a      	add	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3304      	adds	r3, #4
 8006574:	4619      	mov	r1, r3
 8006576:	4610      	mov	r0, r2
 8006578:	f7fe fdc6 	bl	8005108 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006580:	4b23      	ldr	r3, [pc, #140]	; (8006610 <xTaskResumeAll+0x128>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006586:	429a      	cmp	r2, r3
 8006588:	d302      	bcc.n	8006590 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800658a:	4b22      	ldr	r3, [pc, #136]	; (8006614 <xTaskResumeAll+0x12c>)
 800658c:	2201      	movs	r2, #1
 800658e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006590:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <xTaskResumeAll+0x11c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1cc      	bne.n	8006532 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800659e:	f000 fb0b 	bl	8006bb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065a2:	4b1d      	ldr	r3, [pc, #116]	; (8006618 <xTaskResumeAll+0x130>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d010      	beq.n	80065d0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065ae:	f000 f837 	bl	8006620 <xTaskIncrementTick>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80065b8:	4b16      	ldr	r3, [pc, #88]	; (8006614 <xTaskResumeAll+0x12c>)
 80065ba:	2201      	movs	r2, #1
 80065bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1f1      	bne.n	80065ae <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 80065ca:	4b13      	ldr	r3, [pc, #76]	; (8006618 <xTaskResumeAll+0x130>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065d0:	4b10      	ldr	r3, [pc, #64]	; (8006614 <xTaskResumeAll+0x12c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d009      	beq.n	80065ec <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065d8:	2301      	movs	r3, #1
 80065da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065dc:	4b0f      	ldr	r3, [pc, #60]	; (800661c <xTaskResumeAll+0x134>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065ec:	f7fe ff6c 	bl	80054c8 <vPortExitCritical>

	return xAlreadyYielded;
 80065f0:	68bb      	ldr	r3, [r7, #8]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20001004 	.word	0x20001004
 8006600:	20000fdc 	.word	0x20000fdc
 8006604:	20000f9c 	.word	0x20000f9c
 8006608:	20000fe4 	.word	0x20000fe4
 800660c:	20000ee0 	.word	0x20000ee0
 8006610:	20000edc 	.word	0x20000edc
 8006614:	20000ff0 	.word	0x20000ff0
 8006618:	20000fec 	.word	0x20000fec
 800661c:	e000ed04 	.word	0xe000ed04

08006620 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006626:	2300      	movs	r3, #0
 8006628:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800662a:	4b4e      	ldr	r3, [pc, #312]	; (8006764 <xTaskIncrementTick+0x144>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f040 808d 	bne.w	800674e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006634:	4b4c      	ldr	r3, [pc, #304]	; (8006768 <xTaskIncrementTick+0x148>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3301      	adds	r3, #1
 800663a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800663c:	4a4a      	ldr	r2, [pc, #296]	; (8006768 <xTaskIncrementTick+0x148>)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11f      	bne.n	8006688 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006648:	4b48      	ldr	r3, [pc, #288]	; (800676c <xTaskIncrementTick+0x14c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d009      	beq.n	8006666 <xTaskIncrementTick+0x46>
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	e7fe      	b.n	8006664 <xTaskIncrementTick+0x44>
 8006666:	4b41      	ldr	r3, [pc, #260]	; (800676c <xTaskIncrementTick+0x14c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	4b40      	ldr	r3, [pc, #256]	; (8006770 <xTaskIncrementTick+0x150>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a3e      	ldr	r2, [pc, #248]	; (800676c <xTaskIncrementTick+0x14c>)
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	4a3e      	ldr	r2, [pc, #248]	; (8006770 <xTaskIncrementTick+0x150>)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	4b3e      	ldr	r3, [pc, #248]	; (8006774 <xTaskIncrementTick+0x154>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3301      	adds	r3, #1
 8006680:	4a3c      	ldr	r2, [pc, #240]	; (8006774 <xTaskIncrementTick+0x154>)
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	f000 fa98 	bl	8006bb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006688:	4b3b      	ldr	r3, [pc, #236]	; (8006778 <xTaskIncrementTick+0x158>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	429a      	cmp	r2, r3
 8006690:	d348      	bcc.n	8006724 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006692:	4b36      	ldr	r3, [pc, #216]	; (800676c <xTaskIncrementTick+0x14c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d104      	bne.n	80066a6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800669c:	4b36      	ldr	r3, [pc, #216]	; (8006778 <xTaskIncrementTick+0x158>)
 800669e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066a2:	601a      	str	r2, [r3, #0]
					break;
 80066a4:	e03e      	b.n	8006724 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a6:	4b31      	ldr	r3, [pc, #196]	; (800676c <xTaskIncrementTick+0x14c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d203      	bcs.n	80066c6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066be:	4a2e      	ldr	r2, [pc, #184]	; (8006778 <xTaskIncrementTick+0x158>)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066c4:	e02e      	b.n	8006724 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe fd79 	bl	80051c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d004      	beq.n	80066e2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	3318      	adds	r3, #24
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe fd70 	bl	80051c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e6:	2201      	movs	r2, #1
 80066e8:	409a      	lsls	r2, r3
 80066ea:	4b24      	ldr	r3, [pc, #144]	; (800677c <xTaskIncrementTick+0x15c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	4a22      	ldr	r2, [pc, #136]	; (800677c <xTaskIncrementTick+0x15c>)
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f8:	4613      	mov	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4a1f      	ldr	r2, [pc, #124]	; (8006780 <xTaskIncrementTick+0x160>)
 8006702:	441a      	add	r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	3304      	adds	r3, #4
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f7fe fcfc 	bl	8005108 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006714:	4b1b      	ldr	r3, [pc, #108]	; (8006784 <xTaskIncrementTick+0x164>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	429a      	cmp	r2, r3
 800671c:	d3b9      	bcc.n	8006692 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800671e:	2301      	movs	r3, #1
 8006720:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006722:	e7b6      	b.n	8006692 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006724:	4b17      	ldr	r3, [pc, #92]	; (8006784 <xTaskIncrementTick+0x164>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672a:	4915      	ldr	r1, [pc, #84]	; (8006780 <xTaskIncrementTick+0x160>)
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d901      	bls.n	8006740 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 800673c:	2301      	movs	r3, #1
 800673e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006740:	4b11      	ldr	r3, [pc, #68]	; (8006788 <xTaskIncrementTick+0x168>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d007      	beq.n	8006758 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006748:	2301      	movs	r3, #1
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	e004      	b.n	8006758 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800674e:	4b0f      	ldr	r3, [pc, #60]	; (800678c <xTaskIncrementTick+0x16c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	4a0d      	ldr	r2, [pc, #52]	; (800678c <xTaskIncrementTick+0x16c>)
 8006756:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006758:	697b      	ldr	r3, [r7, #20]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20001004 	.word	0x20001004
 8006768:	20000fe0 	.word	0x20000fe0
 800676c:	20000f94 	.word	0x20000f94
 8006770:	20000f98 	.word	0x20000f98
 8006774:	20000ff4 	.word	0x20000ff4
 8006778:	20000ffc 	.word	0x20000ffc
 800677c:	20000fe4 	.word	0x20000fe4
 8006780:	20000ee0 	.word	0x20000ee0
 8006784:	20000edc 	.word	0x20000edc
 8006788:	20000ff0 	.word	0x20000ff0
 800678c:	20000fec 	.word	0x20000fec

08006790 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006796:	4b26      	ldr	r3, [pc, #152]	; (8006830 <vTaskSwitchContext+0xa0>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800679e:	4b25      	ldr	r3, [pc, #148]	; (8006834 <vTaskSwitchContext+0xa4>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067a4:	e03e      	b.n	8006824 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80067a6:	4b23      	ldr	r3, [pc, #140]	; (8006834 <vTaskSwitchContext+0xa4>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ac:	4b22      	ldr	r3, [pc, #136]	; (8006838 <vTaskSwitchContext+0xa8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	fab3 f383 	clz	r3, r3
 80067b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80067ba:	7afb      	ldrb	r3, [r7, #11]
 80067bc:	f1c3 031f 	rsb	r3, r3, #31
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	491e      	ldr	r1, [pc, #120]	; (800683c <vTaskSwitchContext+0xac>)
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4613      	mov	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d109      	bne.n	80067ea <vTaskSwitchContext+0x5a>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	607b      	str	r3, [r7, #4]
 80067e8:	e7fe      	b.n	80067e8 <vTaskSwitchContext+0x58>
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4a11      	ldr	r2, [pc, #68]	; (800683c <vTaskSwitchContext+0xac>)
 80067f6:	4413      	add	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	605a      	str	r2, [r3, #4]
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	3308      	adds	r3, #8
 800680c:	429a      	cmp	r2, r3
 800680e:	d104      	bne.n	800681a <vTaskSwitchContext+0x8a>
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	605a      	str	r2, [r3, #4]
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	4a07      	ldr	r2, [pc, #28]	; (8006840 <vTaskSwitchContext+0xb0>)
 8006822:	6013      	str	r3, [r2, #0]
}
 8006824:	bf00      	nop
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	20001004 	.word	0x20001004
 8006834:	20000ff0 	.word	0x20000ff0
 8006838:	20000fe4 	.word	0x20000fe4
 800683c:	20000ee0 	.word	0x20000ee0
 8006840:	20000edc 	.word	0x20000edc

08006844 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d109      	bne.n	8006868 <vTaskPlaceOnEventList+0x24>
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	e7fe      	b.n	8006866 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006868:	4b07      	ldr	r3, [pc, #28]	; (8006888 <vTaskPlaceOnEventList+0x44>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3318      	adds	r3, #24
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7fe fc6d 	bl	8005150 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006876:	2101      	movs	r1, #1
 8006878:	6838      	ldr	r0, [r7, #0]
 800687a:	f000 fa5f 	bl	8006d3c <prvAddCurrentTaskToDelayedList>
}
 800687e:	bf00      	nop
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000edc 	.word	0x20000edc

0800688c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <xTaskRemoveFromEventList+0x2a>
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	e7fe      	b.n	80068b4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	3318      	adds	r3, #24
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fc81 	bl	80051c2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068c0:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <xTaskRemoveFromEventList+0xac>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d11c      	bne.n	8006902 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	3304      	adds	r3, #4
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe fc78 	bl	80051c2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d6:	2201      	movs	r2, #1
 80068d8:	409a      	lsls	r2, r3
 80068da:	4b18      	ldr	r3, [pc, #96]	; (800693c <xTaskRemoveFromEventList+0xb0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4313      	orrs	r3, r2
 80068e0:	4a16      	ldr	r2, [pc, #88]	; (800693c <xTaskRemoveFromEventList+0xb0>)
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e8:	4613      	mov	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4a13      	ldr	r2, [pc, #76]	; (8006940 <xTaskRemoveFromEventList+0xb4>)
 80068f2:	441a      	add	r2, r3
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	3304      	adds	r3, #4
 80068f8:	4619      	mov	r1, r3
 80068fa:	4610      	mov	r0, r2
 80068fc:	f7fe fc04 	bl	8005108 <vListInsertEnd>
 8006900:	e005      	b.n	800690e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	3318      	adds	r3, #24
 8006906:	4619      	mov	r1, r3
 8006908:	480e      	ldr	r0, [pc, #56]	; (8006944 <xTaskRemoveFromEventList+0xb8>)
 800690a:	f7fe fbfd 	bl	8005108 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006912:	4b0d      	ldr	r3, [pc, #52]	; (8006948 <xTaskRemoveFromEventList+0xbc>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	429a      	cmp	r2, r3
 800691a:	d905      	bls.n	8006928 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800691c:	2301      	movs	r3, #1
 800691e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006920:	4b0a      	ldr	r3, [pc, #40]	; (800694c <xTaskRemoveFromEventList+0xc0>)
 8006922:	2201      	movs	r2, #1
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	e001      	b.n	800692c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800692c:	697b      	ldr	r3, [r7, #20]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20001004 	.word	0x20001004
 800693c:	20000fe4 	.word	0x20000fe4
 8006940:	20000ee0 	.word	0x20000ee0
 8006944:	20000f9c 	.word	0x20000f9c
 8006948:	20000edc 	.word	0x20000edc
 800694c:	20000ff0 	.word	0x20000ff0

08006950 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006958:	4b06      	ldr	r3, [pc, #24]	; (8006974 <vTaskInternalSetTimeOutState+0x24>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006960:	4b05      	ldr	r3, [pc, #20]	; (8006978 <vTaskInternalSetTimeOutState+0x28>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	605a      	str	r2, [r3, #4]
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	20000ff4 	.word	0x20000ff4
 8006978:	20000fe0 	.word	0x20000fe0

0800697c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d109      	bne.n	80069a0 <xTaskCheckForTimeOut+0x24>
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	e7fe      	b.n	800699e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d109      	bne.n	80069ba <xTaskCheckForTimeOut+0x3e>
 80069a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	e7fe      	b.n	80069b8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80069ba:	f7fe fd57 	bl	800546c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069be:	4b1d      	ldr	r3, [pc, #116]	; (8006a34 <xTaskCheckForTimeOut+0xb8>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069d6:	d102      	bne.n	80069de <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069d8:	2300      	movs	r3, #0
 80069da:	61fb      	str	r3, [r7, #28]
 80069dc:	e023      	b.n	8006a26 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	4b15      	ldr	r3, [pc, #84]	; (8006a38 <xTaskCheckForTimeOut+0xbc>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d007      	beq.n	80069fa <xTaskCheckForTimeOut+0x7e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d802      	bhi.n	80069fa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069f4:	2301      	movs	r3, #1
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	e015      	b.n	8006a26 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d90b      	bls.n	8006a1c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	1ad2      	subs	r2, r2, r3
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff ff9d 	bl	8006950 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
 8006a1a:	e004      	b.n	8006a26 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a22:	2301      	movs	r3, #1
 8006a24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a26:	f7fe fd4f 	bl	80054c8 <vPortExitCritical>

	return xReturn;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20000fe0 	.word	0x20000fe0
 8006a38:	20000ff4 	.word	0x20000ff4

08006a3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a40:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <vTaskMissedYield+0x14>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
}
 8006a46:	bf00      	nop
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	20000ff0 	.word	0x20000ff0

08006a54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a5c:	f000 f852 	bl	8006b04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a60:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <prvIdleTask+0x28>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d9f9      	bls.n	8006a5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a68:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <prvIdleTask+0x2c>)
 8006a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a78:	e7f0      	b.n	8006a5c <prvIdleTask+0x8>
 8006a7a:	bf00      	nop
 8006a7c:	20000ee0 	.word	0x20000ee0
 8006a80:	e000ed04 	.word	0xe000ed04

08006a84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	607b      	str	r3, [r7, #4]
 8006a8e:	e00c      	b.n	8006aaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	4613      	mov	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4a12      	ldr	r2, [pc, #72]	; (8006ae4 <prvInitialiseTaskLists+0x60>)
 8006a9c:	4413      	add	r3, r2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fb05 	bl	80050ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	607b      	str	r3, [r7, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b06      	cmp	r3, #6
 8006aae:	d9ef      	bls.n	8006a90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ab0:	480d      	ldr	r0, [pc, #52]	; (8006ae8 <prvInitialiseTaskLists+0x64>)
 8006ab2:	f7fe fafc 	bl	80050ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ab6:	480d      	ldr	r0, [pc, #52]	; (8006aec <prvInitialiseTaskLists+0x68>)
 8006ab8:	f7fe faf9 	bl	80050ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006abc:	480c      	ldr	r0, [pc, #48]	; (8006af0 <prvInitialiseTaskLists+0x6c>)
 8006abe:	f7fe faf6 	bl	80050ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ac2:	480c      	ldr	r0, [pc, #48]	; (8006af4 <prvInitialiseTaskLists+0x70>)
 8006ac4:	f7fe faf3 	bl	80050ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ac8:	480b      	ldr	r0, [pc, #44]	; (8006af8 <prvInitialiseTaskLists+0x74>)
 8006aca:	f7fe faf0 	bl	80050ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ace:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <prvInitialiseTaskLists+0x78>)
 8006ad0:	4a05      	ldr	r2, [pc, #20]	; (8006ae8 <prvInitialiseTaskLists+0x64>)
 8006ad2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ad4:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <prvInitialiseTaskLists+0x7c>)
 8006ad6:	4a05      	ldr	r2, [pc, #20]	; (8006aec <prvInitialiseTaskLists+0x68>)
 8006ad8:	601a      	str	r2, [r3, #0]
}
 8006ada:	bf00      	nop
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000ee0 	.word	0x20000ee0
 8006ae8:	20000f6c 	.word	0x20000f6c
 8006aec:	20000f80 	.word	0x20000f80
 8006af0:	20000f9c 	.word	0x20000f9c
 8006af4:	20000fb0 	.word	0x20000fb0
 8006af8:	20000fc8 	.word	0x20000fc8
 8006afc:	20000f94 	.word	0x20000f94
 8006b00:	20000f98 	.word	0x20000f98

08006b04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b0a:	e019      	b.n	8006b40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b0c:	f7fe fcae 	bl	800546c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b10:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <prvCheckTasksWaitingTermination+0x4c>)
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe fb50 	bl	80051c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b22:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <prvCheckTasksWaitingTermination+0x50>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	4a0a      	ldr	r2, [pc, #40]	; (8006b54 <prvCheckTasksWaitingTermination+0x50>)
 8006b2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <prvCheckTasksWaitingTermination+0x54>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	4a09      	ldr	r2, [pc, #36]	; (8006b58 <prvCheckTasksWaitingTermination+0x54>)
 8006b34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b36:	f7fe fcc7 	bl	80054c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f80e 	bl	8006b5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b40:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <prvCheckTasksWaitingTermination+0x54>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e1      	bne.n	8006b0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b48:	bf00      	nop
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20000fb0 	.word	0x20000fb0
 8006b54:	20000fdc 	.word	0x20000fdc
 8006b58:	20000fc4 	.word	0x20000fc4

08006b5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d108      	bne.n	8006b80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fe1e 	bl	80057b4 <vPortFree>
				vPortFree( pxTCB );
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7fe fe1b 	bl	80057b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b7e:	e017      	b.n	8006bb0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d103      	bne.n	8006b92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7fe fe12 	bl	80057b4 <vPortFree>
	}
 8006b90:	e00e      	b.n	8006bb0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d009      	beq.n	8006bb0 <prvDeleteTCB+0x54>
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	e7fe      	b.n	8006bae <prvDeleteTCB+0x52>
	}
 8006bb0:	bf00      	nop
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bbe:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <prvResetNextTaskUnblockTime+0x38>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d104      	bne.n	8006bd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8006bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bd0:	e008      	b.n	8006be4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bd2:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <prvResetNextTaskUnblockTime+0x38>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	4a04      	ldr	r2, [pc, #16]	; (8006bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8006be2:	6013      	str	r3, [r2, #0]
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	20000f94 	.word	0x20000f94
 8006bf4:	20000ffc 	.word	0x20000ffc

08006bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bfe:	4b0b      	ldr	r3, [pc, #44]	; (8006c2c <xTaskGetSchedulerState+0x34>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d102      	bne.n	8006c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c06:	2301      	movs	r3, #1
 8006c08:	607b      	str	r3, [r7, #4]
 8006c0a:	e008      	b.n	8006c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c0c:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <xTaskGetSchedulerState+0x38>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d102      	bne.n	8006c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c14:	2302      	movs	r3, #2
 8006c16:	607b      	str	r3, [r7, #4]
 8006c18:	e001      	b.n	8006c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c1e:	687b      	ldr	r3, [r7, #4]
	}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	20000fe8 	.word	0x20000fe8
 8006c30:	20001004 	.word	0x20001004

08006c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c40:	2300      	movs	r3, #0
 8006c42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d06c      	beq.n	8006d24 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c4a:	4b39      	ldr	r3, [pc, #228]	; (8006d30 <xTaskPriorityDisinherit+0xfc>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d009      	beq.n	8006c68 <xTaskPriorityDisinherit+0x34>
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e7fe      	b.n	8006c66 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d109      	bne.n	8006c84 <xTaskPriorityDisinherit+0x50>
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	60bb      	str	r3, [r7, #8]
 8006c82:	e7fe      	b.n	8006c82 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c88:	1e5a      	subs	r2, r3, #1
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d044      	beq.n	8006d24 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d140      	bne.n	8006d24 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe fa8b 	bl	80051c2 <uxListRemove>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d115      	bne.n	8006cde <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb6:	491f      	ldr	r1, [pc, #124]	; (8006d34 <xTaskPriorityDisinherit+0x100>)
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10a      	bne.n	8006cde <xTaskPriorityDisinherit+0xaa>
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	2201      	movs	r2, #1
 8006cce:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd2:	43da      	mvns	r2, r3
 8006cd4:	4b18      	ldr	r3, [pc, #96]	; (8006d38 <xTaskPriorityDisinherit+0x104>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4013      	ands	r3, r2
 8006cda:	4a17      	ldr	r2, [pc, #92]	; (8006d38 <xTaskPriorityDisinherit+0x104>)
 8006cdc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cea:	f1c3 0207 	rsb	r2, r3, #7
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	409a      	lsls	r2, r3
 8006cfa:	4b0f      	ldr	r3, [pc, #60]	; (8006d38 <xTaskPriorityDisinherit+0x104>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	4a0d      	ldr	r2, [pc, #52]	; (8006d38 <xTaskPriorityDisinherit+0x104>)
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	4613      	mov	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4a08      	ldr	r2, [pc, #32]	; (8006d34 <xTaskPriorityDisinherit+0x100>)
 8006d12:	441a      	add	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	f7fe f9f4 	bl	8005108 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d24:	697b      	ldr	r3, [r7, #20]
	}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000edc 	.word	0x20000edc
 8006d34:	20000ee0 	.word	0x20000ee0
 8006d38:	20000fe4 	.word	0x20000fe4

08006d3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d46:	4b29      	ldr	r3, [pc, #164]	; (8006dec <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d4c:	4b28      	ldr	r3, [pc, #160]	; (8006df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3304      	adds	r3, #4
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe fa35 	bl	80051c2 <uxListRemove>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10b      	bne.n	8006d76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d5e:	4b24      	ldr	r3, [pc, #144]	; (8006df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	2201      	movs	r2, #1
 8006d66:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6a:	43da      	mvns	r2, r3
 8006d6c:	4b21      	ldr	r3, [pc, #132]	; (8006df4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4013      	ands	r3, r2
 8006d72:	4a20      	ldr	r2, [pc, #128]	; (8006df4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d7c:	d10a      	bne.n	8006d94 <prvAddCurrentTaskToDelayedList+0x58>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d007      	beq.n	8006d94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d84:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	481a      	ldr	r0, [pc, #104]	; (8006df8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d8e:	f7fe f9bb 	bl	8005108 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d92:	e026      	b.n	8006de2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4413      	add	r3, r2
 8006d9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d9c:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d209      	bcs.n	8006dc0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dac:	4b13      	ldr	r3, [pc, #76]	; (8006dfc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3304      	adds	r3, #4
 8006db6:	4619      	mov	r1, r3
 8006db8:	4610      	mov	r0, r2
 8006dba:	f7fe f9c9 	bl	8005150 <vListInsert>
}
 8006dbe:	e010      	b.n	8006de2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dc0:	4b0f      	ldr	r3, [pc, #60]	; (8006e00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f7fe f9bf 	bl	8005150 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d202      	bcs.n	8006de2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ddc:	4a09      	ldr	r2, [pc, #36]	; (8006e04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	6013      	str	r3, [r2, #0]
}
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000fe0 	.word	0x20000fe0
 8006df0:	20000edc 	.word	0x20000edc
 8006df4:	20000fe4 	.word	0x20000fe4
 8006df8:	20000fc8 	.word	0x20000fc8
 8006dfc:	20000f98 	.word	0x20000f98
 8006e00:	20000f94 	.word	0x20000f94
 8006e04:	20000ffc 	.word	0x20000ffc

08006e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006e0c:	f7fa f942 	bl	8001094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006e10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006e12:	e003      	b.n	8006e1c <LoopCopyDataInit>

08006e14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006e14:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006e16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006e18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006e1a:	3104      	adds	r1, #4

08006e1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006e1c:	480a      	ldr	r0, [pc, #40]	; (8006e48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8006e20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006e22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006e24:	d3f6      	bcc.n	8006e14 <CopyDataInit>
	ldr	r2, =_sbss
 8006e26:	4a0a      	ldr	r2, [pc, #40]	; (8006e50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006e28:	e002      	b.n	8006e30 <LoopFillZerobss>

08006e2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006e2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006e2c:	f842 3b04 	str.w	r3, [r2], #4

08006e30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006e30:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <LoopForever+0x16>)
	cmp	r2, r3
 8006e32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006e34:	d3f9      	bcc.n	8006e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006e36:	f000 f811 	bl	8006e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006e3a:	f7f9 fbe5 	bl	8000608 <main>

08006e3e <LoopForever>:

LoopForever:
    b LoopForever
 8006e3e:	e7fe      	b.n	8006e3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006e40:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006e44:	08006fa4 	.word	0x08006fa4
	ldr	r0, =_sdata
 8006e48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006e4c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8006e50:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8006e54:	20001d18 	.word	0x20001d18

08006e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006e58:	e7fe      	b.n	8006e58 <ADC1_2_IRQHandler>
	...

08006e5c <__libc_init_array>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	4e0d      	ldr	r6, [pc, #52]	; (8006e94 <__libc_init_array+0x38>)
 8006e60:	4c0d      	ldr	r4, [pc, #52]	; (8006e98 <__libc_init_array+0x3c>)
 8006e62:	1ba4      	subs	r4, r4, r6
 8006e64:	10a4      	asrs	r4, r4, #2
 8006e66:	2500      	movs	r5, #0
 8006e68:	42a5      	cmp	r5, r4
 8006e6a:	d109      	bne.n	8006e80 <__libc_init_array+0x24>
 8006e6c:	4e0b      	ldr	r6, [pc, #44]	; (8006e9c <__libc_init_array+0x40>)
 8006e6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ea0 <__libc_init_array+0x44>)
 8006e70:	f000 f82c 	bl	8006ecc <_init>
 8006e74:	1ba4      	subs	r4, r4, r6
 8006e76:	10a4      	asrs	r4, r4, #2
 8006e78:	2500      	movs	r5, #0
 8006e7a:	42a5      	cmp	r5, r4
 8006e7c:	d105      	bne.n	8006e8a <__libc_init_array+0x2e>
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e84:	4798      	blx	r3
 8006e86:	3501      	adds	r5, #1
 8006e88:	e7ee      	b.n	8006e68 <__libc_init_array+0xc>
 8006e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e8e:	4798      	blx	r3
 8006e90:	3501      	adds	r5, #1
 8006e92:	e7f2      	b.n	8006e7a <__libc_init_array+0x1e>
 8006e94:	08006f9c 	.word	0x08006f9c
 8006e98:	08006f9c 	.word	0x08006f9c
 8006e9c:	08006f9c 	.word	0x08006f9c
 8006ea0:	08006fa0 	.word	0x08006fa0

08006ea4 <memcpy>:
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	1e43      	subs	r3, r0, #1
 8006ea8:	440a      	add	r2, r1
 8006eaa:	4291      	cmp	r1, r2
 8006eac:	d100      	bne.n	8006eb0 <memcpy+0xc>
 8006eae:	bd10      	pop	{r4, pc}
 8006eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eb8:	e7f7      	b.n	8006eaa <memcpy+0x6>

08006eba <memset>:
 8006eba:	4402      	add	r2, r0
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d100      	bne.n	8006ec4 <memset+0xa>
 8006ec2:	4770      	bx	lr
 8006ec4:	f803 1b01 	strb.w	r1, [r3], #1
 8006ec8:	e7f9      	b.n	8006ebe <memset+0x4>
	...

08006ecc <_init>:
 8006ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ece:	bf00      	nop
 8006ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed2:	bc08      	pop	{r3}
 8006ed4:	469e      	mov	lr, r3
 8006ed6:	4770      	bx	lr

08006ed8 <_fini>:
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eda:	bf00      	nop
 8006edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ede:	bc08      	pop	{r3}
 8006ee0:	469e      	mov	lr, r3
 8006ee2:	4770      	bx	lr
