
motor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005d28  08005d28  00015d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005d98  08005d98  00015d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08005da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001058  20000010  08005db0  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001068  08005db0  00021068  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016de6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002d68  00000000  00000000  00036e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001310  00000000  00000000  00039b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011d8  00000000  00000000  0003aea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a2e3  00000000  00000000  0003c078  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006a82  00000000  00000000  0004635b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004cddd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004f24  00000000  00000000  0004ce5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d10 	.word	0x08005d10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005d10 	.word	0x08005d10

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fae1 	bl	8000ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f83d 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f8e3 	bl	80006ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f8b1 	bl	800068c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB ,GPIO_PIN_4 ,GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	2110      	movs	r1, #16
 800052e:	4813      	ldr	r0, [pc, #76]	; (800057c <main+0x68>)
 8000530:	f000 fe50 	bl	80011d4 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000534:	2201      	movs	r2, #1
 8000536:	4912      	ldr	r1, [pc, #72]	; (8000580 <main+0x6c>)
 8000538:	4812      	ldr	r0, [pc, #72]	; (8000584 <main+0x70>)
 800053a:	f002 fd47 	bl	8002fcc <HAL_UART_Receive_IT>

  SimpleMutex=xSemaphoreCreateMutex();
 800053e:	2001      	movs	r0, #1
 8000540:	f004 fade 	bl	8004b00 <xQueueCreateMutex>
 8000544:	4602      	mov	r2, r0
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <main+0x74>)
 8000548:	601a      	str	r2, [r3, #0]

  if(SimpleMutex!=NULL)
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <main+0x74>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d006      	beq.n	8000560 <main+0x4c>
  {
  	  HAL_UART_Transmit(&huart2,(uint8_t *)"Mutex created\r\n\n",15,1000);
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	220f      	movs	r2, #15
 8000558:	490c      	ldr	r1, [pc, #48]	; (800058c <main+0x78>)
 800055a:	480a      	ldr	r0, [pc, #40]	; (8000584 <main+0x70>)
 800055c:	f002 fca2 	bl	8002ea4 <HAL_UART_Transmit>
  }


  xTaskCreate(HPT_Task,"HPT",128,NULL,3,&HPT_Handler);
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <main+0x7c>)
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	2303      	movs	r3, #3
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2300      	movs	r3, #0
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	4909      	ldr	r1, [pc, #36]	; (8000594 <main+0x80>)
 800056e:	480a      	ldr	r0, [pc, #40]	; (8000598 <main+0x84>)
 8000570:	f004 fd06 	bl	8004f80 <xTaskCreate>
  /*xTaskCreate(MPT_Task,"MPT",128,NULL,2,&MPT_Handler);
  xTaskCreate(LPT_Task,"LPT",128,NULL,1,&LPT_Handler);
*/
  vTaskStartScheduler();
 8000574:	f004 fe6e 	bl	8005254 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x64>
 800057a:	bf00      	nop
 800057c:	48000400 	.word	0x48000400
 8000580:	20000280 	.word	0x20000280
 8000584:	20000f94 	.word	0x20000f94
 8000588:	20000f90 	.word	0x20000f90
 800058c:	08005d28 	.word	0x08005d28
 8000590:	20000f8c 	.word	0x20000f8c
 8000594:	08005d3c 	.word	0x08005d3c
 8000598:	080007bd 	.word	0x080007bd

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0b8      	sub	sp, #224	; 0xe0
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005a6:	2244      	movs	r2, #68	; 0x44
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f005 fba7 	bl	8005cfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c0:	463b      	mov	r3, r7
 80005c2:	2288      	movs	r2, #136	; 0x88
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 fb99 	bl	8005cfe <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005cc:	2310      	movs	r3, #16
 80005ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d2:	2301      	movs	r3, #1
 80005d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005de:	2360      	movs	r3, #96	; 0x60
 80005e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005ea:	2301      	movs	r3, #1
 80005ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005f6:	2328      	movs	r3, #40	; 0x28
 80005f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fc:	2307      	movs	r3, #7
 80005fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fe5a 	bl	80012cc <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800061e:	f000 f937 	bl	8000890 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2303      	movs	r3, #3
 800062a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000640:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000644:	2104      	movs	r1, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fa26 	bl	8001a98 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000652:	f000 f91d 	bl	8000890 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000656:	2302      	movs	r3, #2
 8000658:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800065a:	2300      	movs	r3, #0
 800065c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fc4f 	bl	8001f04 <HAL_RCCEx_PeriphCLKConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800066c:	f000 f910 	bl	8000890 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000670:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000674:	f000 fdd4 	bl	8001220 <HAL_PWREx_ControlVoltageScaling>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800067e:	f000 f907 	bl	8000890 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	37e0      	adds	r7, #224	; 0xe0
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006d0:	f002 fb9a 	bl	8002e08 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006da:	f000 f8d9 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000f94 	.word	0x20000f94
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4a2b      	ldr	r2, [pc, #172]	; (80007b0 <MX_GPIO_Init+0xc4>)
 8000704:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <MX_GPIO_Init+0xc4>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <MX_GPIO_Init+0xc4>)
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <MX_GPIO_Init+0xc4>)
 800071e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4a1f      	ldr	r2, [pc, #124]	; (80007b0 <MX_GPIO_Init+0xc4>)
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_GPIO_Init+0xc4>)
 8000736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2158      	movs	r1, #88	; 0x58
 800074e:	4819      	ldr	r0, [pc, #100]	; (80007b4 <MX_GPIO_Init+0xc8>)
 8000750:	f000 fd40 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4619      	mov	r1, r3
 8000768:	4813      	ldr	r0, [pc, #76]	; (80007b8 <MX_GPIO_Init+0xcc>)
 800076a:	f000 fb73 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800076e:	2308      	movs	r3, #8
 8000770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000772:	2311      	movs	r3, #17
 8000774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	4619      	mov	r1, r3
 8000784:	480b      	ldr	r0, [pc, #44]	; (80007b4 <MX_GPIO_Init+0xc8>)
 8000786:	f000 fb65 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800078a:	2350      	movs	r3, #80	; 0x50
 800078c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4619      	mov	r1, r3
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_GPIO_Init+0xc8>)
 80007a2:	f000 fb57 	bl	8000e54 <HAL_GPIO_Init>

}
 80007a6:	bf00      	nop
 80007a8:	3720      	adds	r7, #32
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000
 80007b4:	48000400 	.word	0x48000400
 80007b8:	48000800 	.word	0x48000800

080007bc <HPT_Task>:

/* USER CODE BEGIN 4 */
void HPT_Task (void *argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	//uint8_t *strtosend = "IN HPT===========================\r\n";
	while (1)
	{


		if (!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13))
 80007c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c8:	4826      	ldr	r0, [pc, #152]	; (8000864 <HPT_Task+0xa8>)
 80007ca:	f000 fceb 	bl	80011a4 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d141      	bne.n	8000858 <HPT_Task+0x9c>
		{
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2110      	movs	r1, #16
 80007d8:	4823      	ldr	r0, [pc, #140]	; (8000868 <HPT_Task+0xac>)
 80007da:	f000 fcfb 	bl	80011d4 <HAL_GPIO_WritePin>
			for (int i=0;i<500;i++)
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	e012      	b.n	800080a <HPT_Task+0x4e>
			{
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2108      	movs	r1, #8
 80007e8:	481f      	ldr	r0, [pc, #124]	; (8000868 <HPT_Task+0xac>)
 80007ea:	f000 fcf3 	bl	80011d4 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f000 f9ae 	bl	8000b50 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2108      	movs	r1, #8
 80007f8:	481b      	ldr	r0, [pc, #108]	; (8000868 <HPT_Task+0xac>)
 80007fa:	f000 fceb 	bl	80011d4 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 f9a6 	bl	8000b50 <HAL_Delay>
			for (int i=0;i<500;i++)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000810:	dbe8      	blt.n	80007e4 <HPT_Task+0x28>
			}
			HAL_Delay(2000);
 8000812:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000816:	f000 f99b 	bl	8000b50 <HAL_Delay>

			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2110      	movs	r1, #16
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <HPT_Task+0xac>)
 8000820:	f000 fcd8 	bl	80011d4 <HAL_GPIO_WritePin>

			for (int i=0;i<500;i++)
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	e012      	b.n	8000850 <HPT_Task+0x94>
						{
							HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	2108      	movs	r1, #8
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <HPT_Task+0xac>)
 8000830:	f000 fcd0 	bl	80011d4 <HAL_GPIO_WritePin>
							HAL_Delay(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f000 f98b 	bl	8000b50 <HAL_Delay>
							HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2108      	movs	r1, #8
 800083e:	480a      	ldr	r0, [pc, #40]	; (8000868 <HPT_Task+0xac>)
 8000840:	f000 fcc8 	bl	80011d4 <HAL_GPIO_WritePin>
							HAL_Delay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f000 f983 	bl	8000b50 <HAL_Delay>
			for (int i=0;i<500;i++)
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	3301      	adds	r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000856:	dbe8      	blt.n	800082a <HPT_Task+0x6e>


		}
		//xSemaphoreGive(SimpleMutex);(let 'r' to give semaphore)

		vTaskDelay(750);
 8000858:	f240 20ee 	movw	r0, #750	; 0x2ee
 800085c:	f004 fcc6 	bl	80051ec <vTaskDelay>
		if (!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13))
 8000860:	e7b0      	b.n	80007c4 <HPT_Task+0x8>
 8000862:	bf00      	nop
 8000864:	48000800 	.word	0x48000800
 8000868:	48000400 	.word	0x48000400

0800086c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d101      	bne.n	8000882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800087e:	f000 f947 	bl	8000b10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40012c00 	.word	0x40012c00

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000896:	e7fe      	b.n	8000896 <Error_Handler+0x6>

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6613      	str	r3, [r2, #96]	; 0x60
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_MspInit+0x4c>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <HAL_MspInit+0x4c>)
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <HAL_MspInit+0x4c>)
 80008ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6593      	str	r3, [r2, #88]	; 0x58
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	210f      	movs	r1, #15
 80008d2:	f06f 0001 	mvn.w	r0, #1
 80008d6:	f000 fa13 	bl	8000d00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a1b      	ldr	r2, [pc, #108]	; (8000974 <HAL_UART_MspInit+0x8c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d130      	bne.n	800096c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090a:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <HAL_UART_MspInit+0x90>)
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <HAL_UART_MspInit+0x90>)
 800090e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000914:	6593      	str	r3, [r2, #88]	; 0x58
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <HAL_UART_MspInit+0x90>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_UART_MspInit+0x90>)
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_UART_MspInit+0x90>)
 8000926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_UART_MspInit+0x90>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800093a:	230c      	movs	r3, #12
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094a:	2307      	movs	r3, #7
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f000 fa7c 	bl	8000e54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2105      	movs	r1, #5
 8000960:	2026      	movs	r0, #38	; 0x26
 8000962:	f000 f9cd 	bl	8000d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000966:	2026      	movs	r0, #38	; 0x26
 8000968:	f000 f9e6 	bl	8000d38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40004400 	.word	0x40004400
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	2019      	movs	r0, #25
 8000992:	f000 f9b5 	bl	8000d00 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000996:	2019      	movs	r0, #25
 8000998:	f000 f9ce 	bl	8000d38 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800099c:	4a1e      	ldr	r2, [pc, #120]	; (8000a18 <HAL_InitTick+0x9c>)
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <HAL_InitTick+0x9c>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a6:	6613      	str	r3, [r2, #96]	; 0x60
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_InitTick+0x9c>)
 80009aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b4:	f107 0210 	add.w	r2, r7, #16
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 fa0e 	bl	8001de0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009c4:	f001 f9f6 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 80009c8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009cc:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <HAL_InitTick+0xa0>)
 80009ce:	fba2 2303 	umull	r2, r3, r2, r3
 80009d2:	0c9b      	lsrs	r3, r3, #18
 80009d4:	3b01      	subs	r3, #1
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_InitTick+0xa4>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <HAL_InitTick+0xa8>)
 80009dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_InitTick+0xa4>)
 80009e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_InitTick+0xa4>)
 80009e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_InitTick+0xa4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_InitTick+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009f8:	4809      	ldr	r0, [pc, #36]	; (8000a20 <HAL_InitTick+0xa4>)
 80009fa:	f001 ff33 	bl	8002864 <HAL_TIM_Base_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d104      	bne.n	8000a0e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a04:	4806      	ldr	r0, [pc, #24]	; (8000a20 <HAL_InitTick+0xa4>)
 8000a06:	f001 ff8f 	bl	8002928 <HAL_TIM_Base_Start_IT>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3730      	adds	r7, #48	; 0x30
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	431bde83 	.word	0x431bde83
 8000a20:	20001018 	.word	0x20001018
 8000a24:	40012c00 	.word	0x40012c00

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a5a:	f001 ffd5 	bl	8002a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20001018 	.word	0x20001018

08000a68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <USART2_IRQHandler+0x10>)
 8000a6e:	f002 faf1 	bl	8003054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000f94 	.word	0x20000f94

08000a7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a80:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <SystemInit+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <SystemInit+0x5c>)
 8000a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a90:	4a12      	ldr	r2, [pc, #72]	; (8000adc <SystemInit+0x60>)
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <SystemInit+0x60>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <SystemInit+0x60>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <SystemInit+0x60>)
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <SystemInit+0x60>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000aac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ab0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <SystemInit+0x60>)
 8000ab4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <SystemInit+0x60>)
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <SystemInit+0x60>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ac4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <SystemInit+0x60>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aea:	2003      	movs	r0, #3
 8000aec:	f000 f8fd 	bl	8000cea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f7ff ff43 	bl	800097c <HAL_InitTick>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	e001      	b.n	8000b06 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b02:	f7ff fec9 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b06:	79fb      	ldrb	r3, [r7, #7]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x20>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x24>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_IncTick+0x24>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20001064 	.word	0x20001064

08000b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_GetTick+0x14>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20001064 	.word	0x20001064

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff ffee 	bl	8000b38 <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_Delay+0x40>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b76:	bf00      	nop
 8000b78:	f7ff ffde 	bl	8000b38 <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad2      	subs	r2, r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d3f7      	bcc.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000008 	.word	0x20000008

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	4909      	ldr	r1, [pc, #36]	; (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	095b      	lsrs	r3, r3, #5
 8000c12:	79fa      	ldrb	r2, [r7, #7]
 8000c14:	f002 021f 	and.w	r2, r2, #31
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	490d      	ldr	r1, [pc, #52]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	4909      	ldr	r1, [pc, #36]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	1e5a      	subs	r2, r3, #1
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	401a      	ands	r2, r3
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cce:	2101      	movs	r1, #1
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	1e59      	subs	r1, r3, #1
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ff4e 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d12:	f7ff ff63 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	68b9      	ldr	r1, [r7, #8]
 8000d1c:	6978      	ldr	r0, [r7, #20]
 8000d1e:	f7ff ffb3 	bl	8000c88 <NVIC_EncodePriority>
 8000d22:	4602      	mov	r2, r0
 8000d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff82 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff56 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d008      	beq.n	8000d7e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2204      	movs	r2, #4
 8000d70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e022      	b.n	8000dc4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	6812      	ldr	r2, [r2, #0]
 8000d88:	f022 020e 	bic.w	r2, r2, #14
 8000d8c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	f022 0201 	bic.w	r2, r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000da6:	f002 021c 	and.w	r2, r2, #28
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d005      	beq.n	8000df4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2204      	movs	r2, #4
 8000dec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
 8000df2:	e029      	b.n	8000e48 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	6812      	ldr	r2, [r2, #0]
 8000dfc:	6812      	ldr	r2, [r2, #0]
 8000dfe:	f022 020e 	bic.w	r2, r2, #14
 8000e02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	6812      	ldr	r2, [r2, #0]
 8000e0e:	f022 0201 	bic.w	r2, r2, #1
 8000e12:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000e1c:	f002 021c 	and.w	r2, r2, #28
 8000e20:	2101      	movs	r1, #1
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	4798      	blx	r3
    }
  }
  return status;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e62:	e17f      	b.n	8001164 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 8171 	beq.w	800115e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d00b      	beq.n	8000e9c <HAL_GPIO_Init+0x48>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d007      	beq.n	8000e9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e90:	2b11      	cmp	r3, #17
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b12      	cmp	r3, #18
 8000e9a:	d130      	bne.n	8000efe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	091b      	lsrs	r3, r3, #4
 8000ee8:	f003 0201 	and.w	r2, r3, #1
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d118      	bne.n	8000f3c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f10:	2201      	movs	r2, #1
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	f003 0201 	and.w	r2, r3, #1
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x128>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b12      	cmp	r3, #18
 8000f7a:	d123      	bne.n	8000fc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	08da      	lsrs	r2, r3, #3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3208      	adds	r2, #8
 8000f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	220f      	movs	r2, #15
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	691a      	ldr	r2, [r3, #16]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	08da      	lsrs	r2, r3, #3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3208      	adds	r2, #8
 8000fbe:	6939      	ldr	r1, [r7, #16]
 8000fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0203 	and.w	r2, r3, #3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 80ac 	beq.w	800115e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	4a5e      	ldr	r2, [pc, #376]	; (8001180 <HAL_GPIO_Init+0x32c>)
 8001008:	4b5d      	ldr	r3, [pc, #372]	; (8001180 <HAL_GPIO_Init+0x32c>)
 800100a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6613      	str	r3, [r2, #96]	; 0x60
 8001012:	4b5b      	ldr	r3, [pc, #364]	; (8001180 <HAL_GPIO_Init+0x32c>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800101e:	4a59      	ldr	r2, [pc, #356]	; (8001184 <HAL_GPIO_Init+0x330>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001048:	d025      	beq.n	8001096 <HAL_GPIO_Init+0x242>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4e      	ldr	r2, [pc, #312]	; (8001188 <HAL_GPIO_Init+0x334>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01f      	beq.n	8001092 <HAL_GPIO_Init+0x23e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4d      	ldr	r2, [pc, #308]	; (800118c <HAL_GPIO_Init+0x338>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d019      	beq.n	800108e <HAL_GPIO_Init+0x23a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4c      	ldr	r2, [pc, #304]	; (8001190 <HAL_GPIO_Init+0x33c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0x236>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4b      	ldr	r2, [pc, #300]	; (8001194 <HAL_GPIO_Init+0x340>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <HAL_GPIO_Init+0x232>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <HAL_GPIO_Init+0x344>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0x22e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a49      	ldr	r2, [pc, #292]	; (800119c <HAL_GPIO_Init+0x348>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d101      	bne.n	800107e <HAL_GPIO_Init+0x22a>
 800107a:	2306      	movs	r3, #6
 800107c:	e00c      	b.n	8001098 <HAL_GPIO_Init+0x244>
 800107e:	2307      	movs	r3, #7
 8001080:	e00a      	b.n	8001098 <HAL_GPIO_Init+0x244>
 8001082:	2305      	movs	r3, #5
 8001084:	e008      	b.n	8001098 <HAL_GPIO_Init+0x244>
 8001086:	2304      	movs	r3, #4
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x244>
 800108a:	2303      	movs	r3, #3
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x244>
 800108e:	2302      	movs	r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x244>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x244>
 8001096:	2300      	movs	r3, #0
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	f002 0203 	and.w	r2, r2, #3
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a8:	4936      	ldr	r1, [pc, #216]	; (8001184 <HAL_GPIO_Init+0x330>)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010b6:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010da:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001104:	4a26      	ldr	r2, [pc, #152]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800112e:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001158:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3301      	adds	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa22 f303 	lsr.w	r3, r2, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	f47f ae78 	bne.w	8000e64 <HAL_GPIO_Init+0x10>
  }
}
 8001174:	bf00      	nop
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000
 8001188:	48000400 	.word	0x48000400
 800118c:	48000800 	.word	0x48000800
 8001190:	48000c00 	.word	0x48000c00
 8001194:	48001000 	.word	0x48001000
 8001198:	48001400 	.word	0x48001400
 800119c:	48001800 	.word	0x48001800
 80011a0:	40010400 	.word	0x40010400

080011a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011bc:	2301      	movs	r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	e001      	b.n	80011c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_PWREx_GetVoltageRange+0x18>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40007000 	.word	0x40007000

08001220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800122e:	d130      	bne.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800123c:	d038      	beq.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800123e:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2232      	movs	r2, #50	; 0x32
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	0c9b      	lsrs	r3, r3, #18
 8001260:	3301      	adds	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001264:	e002      	b.n	800126c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3b01      	subs	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001278:	d102      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f2      	bne.n	8001266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128c:	d110      	bne.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e00f      	b.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800129a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129e:	d007      	beq.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40007000 	.word	0x40007000
 80012c4:	20000000 	.word	0x20000000
 80012c8:	431bde83 	.word	0x431bde83

080012cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e3d4      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012de:	4ba1      	ldr	r3, [pc, #644]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012e8:	4b9e      	ldr	r3, [pc, #632]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80e4 	beq.w	80014c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <HAL_RCC_OscConfig+0x4a>
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2b0c      	cmp	r3, #12
 800130a:	f040 808b 	bne.w	8001424 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2b01      	cmp	r3, #1
 8001312:	f040 8087 	bne.w	8001424 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001316:	4b93      	ldr	r3, [pc, #588]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_RCC_OscConfig+0x62>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e3ac      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1a      	ldr	r2, [r3, #32]
 8001332:	4b8c      	ldr	r3, [pc, #560]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d004      	beq.n	8001348 <HAL_RCC_OscConfig+0x7c>
 800133e:	4b89      	ldr	r3, [pc, #548]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001346:	e005      	b.n	8001354 <HAL_RCC_OscConfig+0x88>
 8001348:	4b86      	ldr	r3, [pc, #536]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800134a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001354:	429a      	cmp	r2, r3
 8001356:	d923      	bls.n	80013a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fd71 	bl	8001e44 <RCC_SetFlashLatencyFromMSIRange>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e38d      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800136c:	4a7d      	ldr	r2, [pc, #500]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800136e:	4b7d      	ldr	r3, [pc, #500]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	497a      	ldr	r1, [pc, #488]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800137a:	4b7a      	ldr	r3, [pc, #488]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800138a:	4976      	ldr	r1, [pc, #472]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800138c:	4b75      	ldr	r3, [pc, #468]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
 800139e:	e025      	b.n	80013ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013a0:	4a70      	ldr	r2, [pc, #448]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 80013a2:	4b70      	ldr	r3, [pc, #448]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	496d      	ldr	r1, [pc, #436]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 80013ae:	4b6d      	ldr	r3, [pc, #436]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013be:	4969      	ldr	r1, [pc, #420]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 80013c0:	4b68      	ldr	r3, [pc, #416]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d109      	bne.n	80013ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fd31 	bl	8001e44 <RCC_SetFlashLatencyFromMSIRange>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e34d      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013ec:	f000 fc36 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 80013f0:	4601      	mov	r1, r0
 80013f2:	4b5c      	ldr	r3, [pc, #368]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	4a5a      	ldr	r2, [pc, #360]	; (8001568 <HAL_RCC_OscConfig+0x29c>)
 80013fe:	5cd3      	ldrb	r3, [r2, r3]
 8001400:	f003 031f 	and.w	r3, r3, #31
 8001404:	fa21 f303 	lsr.w	r3, r1, r3
 8001408:	4a58      	ldr	r2, [pc, #352]	; (800156c <HAL_RCC_OscConfig+0x2a0>)
 800140a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800140c:	4b58      	ldr	r3, [pc, #352]	; (8001570 <HAL_RCC_OscConfig+0x2a4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fab3 	bl	800097c <HAL_InitTick>
 8001416:	4603      	mov	r3, r0
 8001418:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d052      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	e331      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d032      	beq.n	8001492 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800142c:	4a4d      	ldr	r2, [pc, #308]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800142e:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001438:	f7ff fb7e 	bl	8000b38 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001440:	f7ff fb7a 	bl	8000b38 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e31a      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001452:	4b44      	ldr	r3, [pc, #272]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800145e:	4a41      	ldr	r2, [pc, #260]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001460:	4b40      	ldr	r3, [pc, #256]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	493e      	ldr	r1, [pc, #248]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800146c:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4313      	orrs	r3, r2
 800147a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800147c:	4939      	ldr	r1, [pc, #228]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800147e:	4b39      	ldr	r3, [pc, #228]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
 8001490:	e01a      	b.n	80014c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001492:	4a34      	ldr	r2, [pc, #208]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001494:	4b33      	ldr	r3, [pc, #204]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800149e:	f7ff fb4b 	bl	8000b38 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a6:	f7ff fb47 	bl	8000b38 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e2e7      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014b8:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x1da>
 80014c4:	e000      	b.n	80014c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d074      	beq.n	80015be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d005      	beq.n	80014e6 <HAL_RCC_OscConfig+0x21a>
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	2b0c      	cmp	r3, #12
 80014de:	d10e      	bne.n	80014fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d10b      	bne.n	80014fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e6:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d064      	beq.n	80015bc <HAL_RCC_OscConfig+0x2f0>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d160      	bne.n	80015bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e2c4      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0x24a>
 8001508:	4a16      	ldr	r2, [pc, #88]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e01d      	b.n	8001552 <HAL_RCC_OscConfig+0x286>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800151e:	d10c      	bne.n	800153a <HAL_RCC_OscConfig+0x26e>
 8001520:	4a10      	ldr	r2, [pc, #64]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e00b      	b.n	8001552 <HAL_RCC_OscConfig+0x286>
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_RCC_OscConfig+0x298>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d01c      	beq.n	8001594 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff faed 	bl	8000b38 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001560:	e011      	b.n	8001586 <HAL_RCC_OscConfig+0x2ba>
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000
 8001568:	08005d48 	.word	0x08005d48
 800156c:	20000000 	.word	0x20000000
 8001570:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fae0 	bl	8000b38 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e280      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001586:	4baf      	ldr	r3, [pc, #700]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x2a8>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fad0 	bl	8000b38 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff facc 	bl	8000b38 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e26c      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ae:	4ba5      	ldr	r3, [pc, #660]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x2d0>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d060      	beq.n	800168c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_OscConfig+0x310>
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	d119      	bne.n	800160a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d116      	bne.n	800160a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015dc:	4b99      	ldr	r3, [pc, #612]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_OscConfig+0x328>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e249      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4993      	ldr	r1, [pc, #588]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80015f6:	4b93      	ldr	r3, [pc, #588]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	061b      	lsls	r3, r3, #24
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001608:	e040      	b.n	800168c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d023      	beq.n	800165a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001612:	4a8c      	ldr	r2, [pc, #560]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 8001614:	4b8b      	ldr	r3, [pc, #556]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161e:	f7ff fa8b 	bl	8000b38 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001626:	f7ff fa87 	bl	8000b38 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e227      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001638:	4b82      	ldr	r3, [pc, #520]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001644:	497f      	ldr	r1, [pc, #508]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 8001646:	4b7f      	ldr	r3, [pc, #508]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	061b      	lsls	r3, r3, #24
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
 8001658:	e018      	b.n	800168c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165a:	4a7a      	ldr	r2, [pc, #488]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 800165c:	4b79      	ldr	r3, [pc, #484]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001666:	f7ff fa67 	bl	8000b38 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166e:	f7ff fa63 	bl	8000b38 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e203      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001680:	4b70      	ldr	r3, [pc, #448]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f0      	bne.n	800166e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b00      	cmp	r3, #0
 8001696:	d03c      	beq.n	8001712 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01c      	beq.n	80016da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a0:	4a68      	ldr	r2, [pc, #416]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80016a2:	4b68      	ldr	r3, [pc, #416]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80016a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fa42 	bl	8000b38 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff fa3e 	bl	8000b38 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e1de      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ca:	4b5e      	ldr	r3, [pc, #376]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80016cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ef      	beq.n	80016b8 <HAL_RCC_OscConfig+0x3ec>
 80016d8:	e01b      	b.n	8001712 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016da:	4a5a      	ldr	r2, [pc, #360]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80016dc:	4b59      	ldr	r3, [pc, #356]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80016de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ea:	f7ff fa25 	bl	8000b38 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f2:	f7ff fa21 	bl	8000b38 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e1c1      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001704:	4b4f      	ldr	r3, [pc, #316]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 8001706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1ef      	bne.n	80016f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 80a6 	beq.w	800186c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001724:	4b47      	ldr	r3, [pc, #284]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10d      	bne.n	800174c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	4a44      	ldr	r2, [pc, #272]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 8001732:	4b44      	ldr	r3, [pc, #272]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173a:	6593      	str	r3, [r2, #88]	; 0x58
 800173c:	4b41      	ldr	r3, [pc, #260]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001748:	2301      	movs	r3, #1
 800174a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174c:	4b3e      	ldr	r3, [pc, #248]	; (8001848 <HAL_RCC_OscConfig+0x57c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d118      	bne.n	800178a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001758:	4a3b      	ldr	r2, [pc, #236]	; (8001848 <HAL_RCC_OscConfig+0x57c>)
 800175a:	4b3b      	ldr	r3, [pc, #236]	; (8001848 <HAL_RCC_OscConfig+0x57c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001764:	f7ff f9e8 	bl	8000b38 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176c:	f7ff f9e4 	bl	8000b38 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e184      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177e:	4b32      	ldr	r3, [pc, #200]	; (8001848 <HAL_RCC_OscConfig+0x57c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d108      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4d8>
 8001792:	4a2c      	ldr	r2, [pc, #176]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 8001794:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a2:	e024      	b.n	80017ee <HAL_RCC_OscConfig+0x522>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	d110      	bne.n	80017ce <HAL_RCC_OscConfig+0x502>
 80017ac:	4a25      	ldr	r2, [pc, #148]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80017ae:	4b25      	ldr	r3, [pc, #148]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80017b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017bc:	4a21      	ldr	r2, [pc, #132]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80017c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017cc:	e00f      	b.n	80017ee <HAL_RCC_OscConfig+0x522>
 80017ce:	4a1d      	ldr	r2, [pc, #116]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80017d0:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017de:	4a19      	ldr	r2, [pc, #100]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e6:	f023 0304 	bic.w	r3, r3, #4
 80017ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d016      	beq.n	8001824 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff f99f 	bl	8000b38 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff f99b 	bl	8000b38 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e139      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_OscConfig+0x578>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0ed      	beq.n	80017fe <HAL_RCC_OscConfig+0x532>
 8001822:	e01a      	b.n	800185a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff f988 	bl	8000b38 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800182a:	e00f      	b.n	800184c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff f984 	bl	8000b38 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d906      	bls.n	800184c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e122      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800184c:	4b90      	ldr	r3, [pc, #576]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 800184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1e8      	bne.n	800182c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800185a:	7ffb      	ldrb	r3, [r7, #31]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d105      	bne.n	800186c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001860:	4a8b      	ldr	r2, [pc, #556]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001862:	4b8b      	ldr	r3, [pc, #556]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 8108 	beq.w	8001a86 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	2b02      	cmp	r3, #2
 800187c:	f040 80d0 	bne.w	8001a20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001880:	4b83      	ldr	r3, [pc, #524]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	429a      	cmp	r2, r3
 8001892:	d130      	bne.n	80018f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	3b01      	subs	r3, #1
 80018a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d127      	bne.n	80018f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d11f      	bne.n	80018f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018c0:	2a07      	cmp	r2, #7
 80018c2:	bf14      	ite	ne
 80018c4:	2201      	movne	r2, #1
 80018c6:	2200      	moveq	r2, #0
 80018c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d113      	bne.n	80018f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d8:	085b      	lsrs	r3, r3, #1
 80018da:	3b01      	subs	r3, #1
 80018dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d109      	bne.n	80018f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	085b      	lsrs	r3, r3, #1
 80018ee:	3b01      	subs	r3, #1
 80018f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d06e      	beq.n	80019d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	2b0c      	cmp	r3, #12
 80018fa:	d069      	beq.n	80019d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018fc:	4b64      	ldr	r3, [pc, #400]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001908:	4b61      	ldr	r3, [pc, #388]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0b7      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001918:	4a5d      	ldr	r2, [pc, #372]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 800191a:	4b5d      	ldr	r3, [pc, #372]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001922:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001924:	f7ff f908 	bl	8000b38 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff f904 	bl	8000b38 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e0a4      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193e:	4b54      	ldr	r3, [pc, #336]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194a:	4851      	ldr	r0, [pc, #324]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 800194c:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	4b50      	ldr	r3, [pc, #320]	; (8001a94 <HAL_RCC_OscConfig+0x7c8>)
 8001952:	4013      	ands	r3, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800195c:	3a01      	subs	r2, #1
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	4311      	orrs	r1, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001966:	0212      	lsls	r2, r2, #8
 8001968:	4311      	orrs	r1, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800196e:	0852      	lsrs	r2, r2, #1
 8001970:	3a01      	subs	r2, #1
 8001972:	0552      	lsls	r2, r2, #21
 8001974:	4311      	orrs	r1, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800197a:	0852      	lsrs	r2, r2, #1
 800197c:	3a01      	subs	r2, #1
 800197e:	0652      	lsls	r2, r2, #25
 8001980:	4311      	orrs	r1, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001986:	0912      	lsrs	r2, r2, #4
 8001988:	0452      	lsls	r2, r2, #17
 800198a:	430a      	orrs	r2, r1
 800198c:	4313      	orrs	r3, r2
 800198e:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001990:	4a3f      	ldr	r2, [pc, #252]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001992:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800199a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800199c:	4a3c      	ldr	r2, [pc, #240]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 800199e:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019a8:	f7ff f8c6 	bl	8000b38 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff f8c2 	bl	8000b38 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e062      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ce:	e05a      	b.n	8001a86 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e059      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d152      	bne.n	8001a86 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019e0:	4a2b      	ldr	r2, [pc, #172]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ec:	4a28      	ldr	r2, [pc, #160]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 80019ee:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019f8:	f7ff f89e 	bl	8000b38 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff f89a 	bl	8000b38 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e03a      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x734>
 8001a1e:	e032      	b.n	8001a86 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d02d      	beq.n	8001a82 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	4a1a      	ldr	r2, [pc, #104]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a3e:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f023 0303 	bic.w	r3, r3, #3
 8001a48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a4a:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001a4c:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f86d 	bl	8000b38 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a62:	f7ff f869 	bl	8000b38 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e009      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_RCC_OscConfig+0x7c4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x796>
 8001a80:	e001      	b.n	8001a86 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	f99d808c 	.word	0xf99d808c

08001a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0c8      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aac:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <HAL_RCC_ClockConfig+0x1b0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0207 	and.w	r2, r3, #7
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d210      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4963      	ldr	r1, [pc, #396]	; (8001c48 <HAL_RCC_ClockConfig+0x1b0>)
 8001abc:	4b62      	ldr	r3, [pc, #392]	; (8001c48 <HAL_RCC_ClockConfig+0x1b0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 0207 	bic.w	r2, r3, #7
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b5f      	ldr	r3, [pc, #380]	; (8001c48 <HAL_RCC_ClockConfig+0x1b0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0207 	and.w	r2, r3, #7
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b0      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d04c      	beq.n	8001b82 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af0:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <HAL_RCC_ClockConfig+0x1b4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d121      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e09e      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <HAL_RCC_ClockConfig+0x1b4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d115      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e092      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b20:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <HAL_RCC_ClockConfig+0x1b4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d109      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e086      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b30:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <HAL_RCC_ClockConfig+0x1b4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e07e      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b40:	4942      	ldr	r1, [pc, #264]	; (8001c4c <HAL_RCC_ClockConfig+0x1b4>)
 8001b42:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <HAL_RCC_ClockConfig+0x1b4>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f023 0203 	bic.w	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b52:	f7fe fff1 	bl	8000b38 <HAL_GetTick>
 8001b56:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5a:	f7fe ffed 	bl	8000b38 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e066      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b70:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <HAL_RCC_ClockConfig+0x1b4>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 020c 	and.w	r2, r3, #12
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d1eb      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d008      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8e:	492f      	ldr	r1, [pc, #188]	; (8001c4c <HAL_RCC_ClockConfig+0x1b4>)
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <HAL_RCC_ClockConfig+0x1b4>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b29      	ldr	r3, [pc, #164]	; (8001c48 <HAL_RCC_ClockConfig+0x1b0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0207 	and.w	r2, r3, #7
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d910      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bae:	4926      	ldr	r1, [pc, #152]	; (8001c48 <HAL_RCC_ClockConfig+0x1b0>)
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <HAL_RCC_ClockConfig+0x1b0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f023 0207 	bic.w	r2, r3, #7
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <HAL_RCC_ClockConfig+0x1b0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0207 	and.w	r2, r3, #7
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e036      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bdc:	491b      	ldr	r1, [pc, #108]	; (8001c4c <HAL_RCC_ClockConfig+0x1b4>)
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_RCC_ClockConfig+0x1b4>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfa:	4914      	ldr	r1, [pc, #80]	; (8001c4c <HAL_RCC_ClockConfig+0x1b4>)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_RCC_ClockConfig+0x1b4>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c0e:	f000 f825 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8001c12:	4601      	mov	r1, r0
 8001c14:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_RCC_ClockConfig+0x1b4>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	fa21 f303 	lsr.w	r3, r1, r3
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fea2 	bl	800097c <HAL_InitTick>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c3c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08005d48 	.word	0x08005d48
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20000004 	.word	0x20000004

08001c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c74:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x34>
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d121      	bne.n	8001cce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d11e      	bne.n	8001cce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c90:	4b33      	ldr	r3, [pc, #204]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c9c:	4b30      	ldr	r3, [pc, #192]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca2:	0a1b      	lsrs	r3, r3, #8
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	e005      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cac:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cb8:	4a2a      	ldr	r2, [pc, #168]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10d      	bne.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d102      	bne.n	8001cda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	e004      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ce2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d133      	bne.n	8001d52 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d002      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0xa4>
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d003      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0xaa>
 8001cfe:	e005      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d02:	617b      	str	r3, [r7, #20]
      break;
 8001d04:	e005      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d06:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d08:	617b      	str	r3, [r7, #20]
      break;
 8001d0a:	e002      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	617b      	str	r3, [r7, #20]
      break;
 8001d10:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	fb02 f203 	mul.w	r2, r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d36:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0e5b      	lsrs	r3, r3, #25
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	3301      	adds	r3, #1
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d52:	69bb      	ldr	r3, [r7, #24]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3724      	adds	r7, #36	; 0x24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08005d60 	.word	0x08005d60
 8001d68:	00f42400 	.word	0x00f42400
 8001d6c:	007a1200 	.word	0x007a1200

08001d70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000000 	.word	0x20000000

08001d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d8c:	f7ff fff0 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001d90:	4601      	mov	r1, r0
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d9e:	5cd3      	ldrb	r3, [r2, r3]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	08005d58 	.word	0x08005d58

08001db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001db8:	f7ff ffda 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001dbc:	4601      	mov	r1, r0
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0adb      	lsrs	r3, r3, #11
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	08005d58 	.word	0x08005d58

08001de0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	220f      	movs	r2, #15
 8001dee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	08db      	lsrs	r3, r3, #3
 8001e1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_RCC_GetClockConfig+0x60>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0207 	and.w	r2, r3, #7
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	601a      	str	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40022000 	.word	0x40022000

08001e44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e50:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e5c:	f7ff f9d2 	bl	8001204 <HAL_PWREx_GetVoltageRange>
 8001e60:	6178      	str	r0, [r7, #20]
 8001e62:	e014      	b.n	8001e8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	4a25      	ldr	r2, [pc, #148]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e66:	4b25      	ldr	r3, [pc, #148]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e70:	4b22      	ldr	r3, [pc, #136]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e7c:	f7ff f9c2 	bl	8001204 <HAL_PWREx_GetVoltageRange>
 8001e80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e94:	d10b      	bne.n	8001eae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b80      	cmp	r3, #128	; 0x80
 8001e9a:	d919      	bls.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2ba0      	cmp	r3, #160	; 0xa0
 8001ea0:	d902      	bls.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	e013      	b.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	e010      	b.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b80      	cmp	r3, #128	; 0x80
 8001eb2:	d902      	bls.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	e00a      	b.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b80      	cmp	r3, #128	; 0x80
 8001ebe:	d102      	bne.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e004      	b.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b70      	cmp	r3, #112	; 0x70
 8001eca:	d101      	bne.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ecc:	2301      	movs	r3, #1
 8001ece:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ed0:	490b      	ldr	r1, [pc, #44]	; (8001f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 0207 	bic.w	r2, r3, #7
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0207 	and.w	r2, r3, #7
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d001      	beq.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40022000 	.word	0x40022000

08001f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f10:	2300      	movs	r3, #0
 8001f12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d03f      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f28:	d01c      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f2e:	d802      	bhi.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00e      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001f34:	e01f      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001f36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f3a:	d003      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001f3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f40:	d01c      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001f42:	e018      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f44:	4a85      	ldr	r2, [pc, #532]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f46:	4b85      	ldr	r3, [pc, #532]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f50:	e015      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 fab9 	bl	80024d0 <RCCEx_PLLSAI1_Config>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f62:	e00c      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3320      	adds	r3, #32
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fba0 	bl	80026b0 <RCCEx_PLLSAI2_Config>
 8001f70:	4603      	mov	r3, r0
 8001f72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f74:	e003      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	74fb      	strb	r3, [r7, #19]
      break;
 8001f7a:	e000      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f7e:	7cfb      	ldrb	r3, [r7, #19]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10b      	bne.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f84:	4975      	ldr	r1, [pc, #468]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f86:	4b75      	ldr	r3, [pc, #468]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f9a:	e001      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f9c:	7cfb      	ldrb	r3, [r7, #19]
 8001f9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d03f      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb4:	d01c      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001fb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fba:	d802      	bhi.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00e      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001fc0:	e01f      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fc6:	d003      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001fc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fcc:	d01c      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001fce:	e018      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fd0:	4a62      	ldr	r2, [pc, #392]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fd2:	4b62      	ldr	r3, [pc, #392]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fda:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fdc:	e015      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fa73 	bl	80024d0 <RCCEx_PLLSAI1_Config>
 8001fea:	4603      	mov	r3, r0
 8001fec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fee:	e00c      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3320      	adds	r3, #32
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fb5a 	bl	80026b0 <RCCEx_PLLSAI2_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002000:	e003      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	74fb      	strb	r3, [r7, #19]
      break;
 8002006:	e000      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800200a:	7cfb      	ldrb	r3, [r7, #19]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10b      	bne.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002010:	4952      	ldr	r1, [pc, #328]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002012:	4b52      	ldr	r3, [pc, #328]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002018:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002026:	e001      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002028:	7cfb      	ldrb	r3, [r7, #19]
 800202a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80a0 	beq.w	800217a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800203e:	4b47      	ldr	r3, [pc, #284]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800204e:	2300      	movs	r3, #0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00d      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002054:	4a41      	ldr	r2, [pc, #260]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002056:	4b41      	ldr	r3, [pc, #260]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205e:	6593      	str	r3, [r2, #88]	; 0x58
 8002060:	4b3e      	ldr	r3, [pc, #248]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206c:	2301      	movs	r3, #1
 800206e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002070:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800207c:	f7fe fd5c 	bl	8000b38 <HAL_GetTick>
 8002080:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002082:	e009      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002084:	f7fe fd58 	bl	8000b38 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d902      	bls.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	74fb      	strb	r3, [r7, #19]
        break;
 8002096:	e005      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002098:	4b31      	ldr	r3, [pc, #196]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ef      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80020a4:	7cfb      	ldrb	r3, [r7, #19]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d15c      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020aa:	4b2c      	ldr	r3, [pc, #176]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01f      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d019      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020d4:	4a21      	ldr	r2, [pc, #132]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020f4:	4a19      	ldr	r2, [pc, #100]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d016      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002106:	f7fe fd17 	bl	8000b38 <HAL_GetTick>
 800210a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800210c:	e00b      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7fe fd13 	bl	8000b38 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	; 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d902      	bls.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	74fb      	strb	r3, [r7, #19]
            break;
 8002124:	e006      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0ec      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800213a:	4908      	ldr	r1, [pc, #32]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002152:	e009      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	74bb      	strb	r3, [r7, #18]
 8002158:	e006      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002168:	7c7b      	ldrb	r3, [r7, #17]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d105      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216e:	4a9e      	ldr	r2, [pc, #632]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002170:	4b9d      	ldr	r3, [pc, #628]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002178:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002186:	4998      	ldr	r1, [pc, #608]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002188:	4b97      	ldr	r3, [pc, #604]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218e:	f023 0203 	bic.w	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021a8:	498f      	ldr	r1, [pc, #572]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021aa:	4b8f      	ldr	r3, [pc, #572]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b0:	f023 020c 	bic.w	r2, r3, #12
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ca:	4987      	ldr	r1, [pc, #540]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021cc:	4b86      	ldr	r3, [pc, #536]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021ec:	497e      	ldr	r1, [pc, #504]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ee:	4b7e      	ldr	r3, [pc, #504]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800220e:	4976      	ldr	r1, [pc, #472]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002210:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002230:	496d      	ldr	r1, [pc, #436]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002232:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002238:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002252:	4965      	ldr	r1, [pc, #404]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002254:	4b64      	ldr	r3, [pc, #400]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002274:	495c      	ldr	r1, [pc, #368]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002276:	4b5c      	ldr	r3, [pc, #368]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002296:	4954      	ldr	r1, [pc, #336]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022b8:	494b      	ldr	r1, [pc, #300]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022ba:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022da:	4943      	ldr	r1, [pc, #268]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d028      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022fc:	493a      	ldr	r1, [pc, #232]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022fe:	4b3a      	ldr	r3, [pc, #232]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002304:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800231a:	d106      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800231c:	4a32      	ldr	r2, [pc, #200]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800231e:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002326:	60d3      	str	r3, [r2, #12]
 8002328:	e011      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800232e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002332:	d10c      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	2101      	movs	r1, #1
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f8c8 	bl	80024d0 <RCCEx_PLLSAI1_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d028      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800235a:	4923      	ldr	r1, [pc, #140]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002378:	d106      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800237a:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002384:	60d3      	str	r3, [r2, #12]
 8002386:	e011      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002390:	d10c      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	2101      	movs	r1, #1
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f899 	bl	80024d0 <RCCEx_PLLSAI1_Config>
 800239e:	4603      	mov	r3, r0
 80023a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023a2:	7cfb      	ldrb	r3, [r7, #19]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02b      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023b8:	490b      	ldr	r1, [pc, #44]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d6:	d109      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d8:	4a03      	ldr	r2, [pc, #12]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023da:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023e2:	60d3      	str	r3, [r2, #12]
 80023e4:	e014      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3304      	adds	r3, #4
 80023fa:	2101      	movs	r1, #1
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f867 	bl	80024d0 <RCCEx_PLLSAI1_Config>
 8002402:	4603      	mov	r3, r0
 8002404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002406:	7cfb      	ldrb	r3, [r7, #19]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d02f      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800241c:	492b      	ldr	r1, [pc, #172]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002424:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800243a:	d10d      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3304      	adds	r3, #4
 8002440:	2102      	movs	r1, #2
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f844 	bl	80024d0 <RCCEx_PLLSAI1_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d014      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	74bb      	strb	r3, [r7, #18]
 8002456:	e011      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800245c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002460:	d10c      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3320      	adds	r3, #32
 8002466:	2102      	movs	r1, #2
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f921 	bl	80026b0 <RCCEx_PLLSAI2_Config>
 800246e:	4603      	mov	r3, r0
 8002470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002488:	4910      	ldr	r1, [pc, #64]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024aa:	4908      	ldr	r1, [pc, #32]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024ac:	4b07      	ldr	r3, [pc, #28]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000

080024d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024de:	4b73      	ldr	r3, [pc, #460]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d018      	beq.n	800251c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024ea:	4b70      	ldr	r3, [pc, #448]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0203 	and.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d10d      	bne.n	8002516 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
       ||
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002502:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
       ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d044      	beq.n	80025a0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	e041      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d00c      	beq.n	800253e <RCCEx_PLLSAI1_Config+0x6e>
 8002524:	2b03      	cmp	r3, #3
 8002526:	d013      	beq.n	8002550 <RCCEx_PLLSAI1_Config+0x80>
 8002528:	2b01      	cmp	r3, #1
 800252a:	d120      	bne.n	800256e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800252c:	4b5f      	ldr	r3, [pc, #380]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d11d      	bne.n	8002574 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253c:	e01a      	b.n	8002574 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800253e:	4b5b      	ldr	r3, [pc, #364]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002546:	2b00      	cmp	r3, #0
 8002548:	d116      	bne.n	8002578 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800254e:	e013      	b.n	8002578 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002550:	4b56      	ldr	r3, [pc, #344]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10f      	bne.n	800257c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800256c:	e006      	b.n	800257c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
      break;
 8002572:	e004      	b.n	800257e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002574:	bf00      	nop
 8002576:	e002      	b.n	800257e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002578:	bf00      	nop
 800257a:	e000      	b.n	800257e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800257c:	bf00      	nop
    }

    if(status == HAL_OK)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10d      	bne.n	80025a0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002584:	4849      	ldr	r0, [pc, #292]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002586:	4b49      	ldr	r3, [pc, #292]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	430b      	orrs	r3, r1
 800259c:	4313      	orrs	r3, r2
 800259e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d17d      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025a6:	4a41      	ldr	r2, [pc, #260]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80025a8:	4b40      	ldr	r3, [pc, #256]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b2:	f7fe fac1 	bl	8000b38 <HAL_GetTick>
 80025b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025b8:	e009      	b.n	80025ce <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025ba:	f7fe fabd 	bl	8000b38 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d902      	bls.n	80025ce <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	73fb      	strb	r3, [r7, #15]
        break;
 80025cc:	e005      	b.n	80025da <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ce:	4b37      	ldr	r3, [pc, #220]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ef      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d160      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d111      	bne.n	800260a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025e6:	4831      	ldr	r0, [pc, #196]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80025e8:	4b30      	ldr	r3, [pc, #192]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6892      	ldr	r2, [r2, #8]
 80025f8:	0211      	lsls	r1, r2, #8
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68d2      	ldr	r2, [r2, #12]
 80025fe:	0912      	lsrs	r2, r2, #4
 8002600:	0452      	lsls	r2, r2, #17
 8002602:	430a      	orrs	r2, r1
 8002604:	4313      	orrs	r3, r2
 8002606:	6103      	str	r3, [r0, #16]
 8002608:	e027      	b.n	800265a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d112      	bne.n	8002636 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002610:	4826      	ldr	r0, [pc, #152]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800261a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6892      	ldr	r2, [r2, #8]
 8002622:	0211      	lsls	r1, r2, #8
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6912      	ldr	r2, [r2, #16]
 8002628:	0852      	lsrs	r2, r2, #1
 800262a:	3a01      	subs	r2, #1
 800262c:	0552      	lsls	r2, r2, #21
 800262e:	430a      	orrs	r2, r1
 8002630:	4313      	orrs	r3, r2
 8002632:	6103      	str	r3, [r0, #16]
 8002634:	e011      	b.n	800265a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002636:	481d      	ldr	r0, [pc, #116]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002638:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002640:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6892      	ldr	r2, [r2, #8]
 8002648:	0211      	lsls	r1, r2, #8
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6952      	ldr	r2, [r2, #20]
 800264e:	0852      	lsrs	r2, r2, #1
 8002650:	3a01      	subs	r2, #1
 8002652:	0652      	lsls	r2, r2, #25
 8002654:	430a      	orrs	r2, r1
 8002656:	4313      	orrs	r3, r2
 8002658:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800265a:	4a14      	ldr	r2, [pc, #80]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002664:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7fe fa67 	bl	8000b38 <HAL_GetTick>
 800266a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800266c:	e009      	b.n	8002682 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800266e:	f7fe fa63 	bl	8000b38 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d902      	bls.n	8002682 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	73fb      	strb	r3, [r7, #15]
          break;
 8002680:	e005      	b.n	800268e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0ef      	beq.n	800266e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d106      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002694:	4905      	ldr	r1, [pc, #20]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000

080026b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026be:	4b68      	ldr	r3, [pc, #416]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d018      	beq.n	80026fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026ca:	4b65      	ldr	r3, [pc, #404]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0203 	and.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d10d      	bne.n	80026f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
       ||
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026e2:	4b5f      	ldr	r3, [pc, #380]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
       ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d044      	beq.n	8002780 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	e041      	b.n	8002780 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d00c      	beq.n	800271e <RCCEx_PLLSAI2_Config+0x6e>
 8002704:	2b03      	cmp	r3, #3
 8002706:	d013      	beq.n	8002730 <RCCEx_PLLSAI2_Config+0x80>
 8002708:	2b01      	cmp	r3, #1
 800270a:	d120      	bne.n	800274e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800270c:	4b54      	ldr	r3, [pc, #336]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d11d      	bne.n	8002754 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271c:	e01a      	b.n	8002754 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800271e:	4b50      	ldr	r3, [pc, #320]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800272e:	e013      	b.n	8002758 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002730:	4b4b      	ldr	r3, [pc, #300]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10f      	bne.n	800275c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800273c:	4b48      	ldr	r3, [pc, #288]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800274c:	e006      	b.n	800275c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
      break;
 8002752:	e004      	b.n	800275e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002754:	bf00      	nop
 8002756:	e002      	b.n	800275e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002758:	bf00      	nop
 800275a:	e000      	b.n	800275e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800275c:	bf00      	nop
    }

    if(status == HAL_OK)
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10d      	bne.n	8002780 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002764:	483e      	ldr	r0, [pc, #248]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002766:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6819      	ldr	r1, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	430b      	orrs	r3, r1
 800277c:	4313      	orrs	r3, r2
 800277e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d167      	bne.n	8002856 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002786:	4a36      	ldr	r2, [pc, #216]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002788:	4b35      	ldr	r3, [pc, #212]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002792:	f7fe f9d1 	bl	8000b38 <HAL_GetTick>
 8002796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002798:	e009      	b.n	80027ae <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800279a:	f7fe f9cd 	bl	8000b38 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d902      	bls.n	80027ae <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	73fb      	strb	r3, [r7, #15]
        break;
 80027ac:	e005      	b.n	80027ba <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027ae:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1ef      	bne.n	800279a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d14a      	bne.n	8002856 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d111      	bne.n	80027ea <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027c6:	4826      	ldr	r0, [pc, #152]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027c8:	4b25      	ldr	r3, [pc, #148]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6892      	ldr	r2, [r2, #8]
 80027d8:	0211      	lsls	r1, r2, #8
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68d2      	ldr	r2, [r2, #12]
 80027de:	0912      	lsrs	r2, r2, #4
 80027e0:	0452      	lsls	r2, r2, #17
 80027e2:	430a      	orrs	r2, r1
 80027e4:	4313      	orrs	r3, r2
 80027e6:	6143      	str	r3, [r0, #20]
 80027e8:	e011      	b.n	800280e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027ea:	481d      	ldr	r0, [pc, #116]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027ec:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6892      	ldr	r2, [r2, #8]
 80027fc:	0211      	lsls	r1, r2, #8
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6912      	ldr	r2, [r2, #16]
 8002802:	0852      	lsrs	r2, r2, #1
 8002804:	3a01      	subs	r2, #1
 8002806:	0652      	lsls	r2, r2, #25
 8002808:	430a      	orrs	r2, r1
 800280a:	4313      	orrs	r3, r2
 800280c:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800280e:	4a14      	ldr	r2, [pc, #80]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002810:	4b13      	ldr	r3, [pc, #76]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002818:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281a:	f7fe f98d 	bl	8000b38 <HAL_GetTick>
 800281e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002820:	e009      	b.n	8002836 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002822:	f7fe f989 	bl	8000b38 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d902      	bls.n	8002836 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	73fb      	strb	r3, [r7, #15]
          break;
 8002834:	e005      	b.n	8002842 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ef      	beq.n	8002822 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d106      	bne.n	8002856 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002848:	4905      	ldr	r1, [pc, #20]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b0>)
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000

08002864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e049      	b.n	800290a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f841 	bl	8002912 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f000 f9f8 	bl	8002c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d001      	beq.n	8002940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e04f      	b.n	80029e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	68d2      	ldr	r2, [r2, #12]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a23      	ldr	r2, [pc, #140]	; (80029ec <HAL_TIM_Base_Start_IT+0xc4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d01d      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x76>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296a:	d018      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x76>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1f      	ldr	r2, [pc, #124]	; (80029f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x76>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00e      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x76>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d009      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x76>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <HAL_TIM_Base_Start_IT+0xd4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x76>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <HAL_TIM_Base_Start_IT+0xd8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d115      	bne.n	80029ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <HAL_TIM_Base_Start_IT+0xdc>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	d015      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0xb4>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b6:	d011      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c8:	e008      	b.n	80029dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e000      	b.n	80029de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40012c00 	.word	0x40012c00
 80029f0:	40000400 	.word	0x40000400
 80029f4:	40000800 	.word	0x40000800
 80029f8:	40000c00 	.word	0x40000c00
 80029fc:	40013400 	.word	0x40013400
 8002a00:	40014000 	.word	0x40014000
 8002a04:	00010007 	.word	0x00010007

08002a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d122      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d11b      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0202 	mvn.w	r2, #2
 8002a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f905 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 8002a50:	e005      	b.n	8002a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f8f7 	bl	8002c46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f908 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d122      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0204 	mvn.w	r2, #4
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8db 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f8cd 	bl	8002c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f8de 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0208 	mvn.w	r2, #8
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f8b1 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f8a3 	bl	8002c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f8b4 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d122      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b10      	cmp	r3, #16
 8002b26:	d11b      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0210 	mvn.w	r2, #16
 8002b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2208      	movs	r2, #8
 8002b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f887 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 8002b4c:	e005      	b.n	8002b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f879 	bl	8002c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f88a 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d10e      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d107      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0201 	mvn.w	r2, #1
 8002b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fd fe70 	bl	800086c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b96:	2b80      	cmp	r3, #128	; 0x80
 8002b98:	d10e      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	2b80      	cmp	r3, #128	; 0x80
 8002ba6:	d107      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f914 	bl	8002de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc6:	d10e      	bne.n	8002be6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd2:	2b80      	cmp	r3, #128	; 0x80
 8002bd4:	d107      	bne.n	8002be6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f907 	bl	8002df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf0:	2b40      	cmp	r3, #64	; 0x40
 8002bf2:	d10e      	bne.n	8002c12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d107      	bne.n	8002c12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f838 	bl	8002c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d10e      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	d107      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f06f 0220 	mvn.w	r2, #32
 8002c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f8c7 	bl	8002dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a40      	ldr	r2, [pc, #256]	; (8002dac <TIM_Base_SetConfig+0x114>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d013      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb6:	d00f      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a3d      	ldr	r2, [pc, #244]	; (8002db0 <TIM_Base_SetConfig+0x118>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00b      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a3c      	ldr	r2, [pc, #240]	; (8002db4 <TIM_Base_SetConfig+0x11c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a3b      	ldr	r2, [pc, #236]	; (8002db8 <TIM_Base_SetConfig+0x120>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a3a      	ldr	r2, [pc, #232]	; (8002dbc <TIM_Base_SetConfig+0x124>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d108      	bne.n	8002cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2f      	ldr	r2, [pc, #188]	; (8002dac <TIM_Base_SetConfig+0x114>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01f      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d01b      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2c      	ldr	r2, [pc, #176]	; (8002db0 <TIM_Base_SetConfig+0x118>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d017      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a2b      	ldr	r2, [pc, #172]	; (8002db4 <TIM_Base_SetConfig+0x11c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a2a      	ldr	r2, [pc, #168]	; (8002db8 <TIM_Base_SetConfig+0x120>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00f      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a29      	ldr	r2, [pc, #164]	; (8002dbc <TIM_Base_SetConfig+0x124>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00b      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a28      	ldr	r2, [pc, #160]	; (8002dc0 <TIM_Base_SetConfig+0x128>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d007      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a27      	ldr	r2, [pc, #156]	; (8002dc4 <TIM_Base_SetConfig+0x12c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d003      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <TIM_Base_SetConfig+0x130>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d108      	bne.n	8002d44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a10      	ldr	r2, [pc, #64]	; (8002dac <TIM_Base_SetConfig+0x114>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00f      	beq.n	8002d90 <TIM_Base_SetConfig+0xf8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <TIM_Base_SetConfig+0x124>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00b      	beq.n	8002d90 <TIM_Base_SetConfig+0xf8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a11      	ldr	r2, [pc, #68]	; (8002dc0 <TIM_Base_SetConfig+0x128>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d007      	beq.n	8002d90 <TIM_Base_SetConfig+0xf8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <TIM_Base_SetConfig+0x12c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d003      	beq.n	8002d90 <TIM_Base_SetConfig+0xf8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a0f      	ldr	r2, [pc, #60]	; (8002dc8 <TIM_Base_SetConfig+0x130>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d103      	bne.n	8002d98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	615a      	str	r2, [r3, #20]
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40000800 	.word	0x40000800
 8002db8:	40000c00 	.word	0x40000c00
 8002dbc:	40013400 	.word	0x40013400
 8002dc0:	40014000 	.word	0x40014000
 8002dc4:	40014400 	.word	0x40014400
 8002dc8:	40014800 	.word	0x40014800

08002dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e040      	b.n	8002e9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fd fd5c 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2224      	movs	r2, #36	; 0x24
 8002e34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	f022 0201 	bic.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fb30 	bl	80034ac <UART_SetConfig>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e022      	b.n	8002e9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fda8 	bl	80039b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	6852      	ldr	r2, [r2, #4]
 8002e6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	6892      	ldr	r2, [r2, #8]
 8002e7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fe2f 	bl	8003af8 <UART_CheckIdleState>
 8002e9a:	4603      	mov	r3, r0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	f040 8082 	bne.w	8002fc2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_UART_Transmit+0x26>
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e07a      	b.n	8002fc4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_UART_Transmit+0x38>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e073      	b.n	8002fc4 <HAL_UART_Transmit+0x120>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2221      	movs	r2, #33	; 0x21
 8002ef0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ef2:	f7fd fe21 	bl	8000b38 <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	88fa      	ldrh	r2, [r7, #6]
 8002efc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	88fa      	ldrh	r2, [r7, #6]
 8002f04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f10:	d108      	bne.n	8002f24 <HAL_UART_Transmit+0x80>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d104      	bne.n	8002f24 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	e003      	b.n	8002f2c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f34:	e02d      	b.n	8002f92 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2180      	movs	r1, #128	; 0x80
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fe22 	bl	8003b8a <UART_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e039      	b.n	8002fc4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10b      	bne.n	8002f6e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	8812      	ldrh	r2, [r2, #0]
 8002f5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f62:	b292      	uxth	r2, r2
 8002f64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	3302      	adds	r3, #2
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	e008      	b.n	8002f80 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	7812      	ldrb	r2, [r2, #0]
 8002f76:	b292      	uxth	r2, r2
 8002f78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1cb      	bne.n	8002f36 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2140      	movs	r1, #64	; 0x40
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 fdee 	bl	8003b8a <UART_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e005      	b.n	8002fc4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e000      	b.n	8002fc4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002fc2:	2302      	movs	r3, #2
  }
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3720      	adds	r7, #32
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d131      	bne.n	8003046 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_UART_Receive_IT+0x22>
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e02a      	b.n	8003048 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_UART_Receive_IT+0x34>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e023      	b.n	8003048 <HAL_UART_Receive_IT+0x7c>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a0f      	ldr	r2, [pc, #60]	; (8003050 <HAL_UART_Receive_IT+0x84>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00e      	beq.n	8003036 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003034:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	461a      	mov	r2, r3
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fe21 	bl	8003c84 <UART_Start_Receive_IT>
 8003042:	4603      	mov	r3, r0
 8003044:	e000      	b.n	8003048 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003046:	2302      	movs	r3, #2
  }
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40008000 	.word	0x40008000

08003054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	f640 030f 	movw	r3, #2063	; 0x80f
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d113      	bne.n	80030ac <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00e      	beq.n	80030ac <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d009      	beq.n	80030ac <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 81cf 	beq.w	8003440 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4798      	blx	r3
      }
      return;
 80030aa:	e1c9      	b.n	8003440 <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80e3 	beq.w	800327a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d105      	bne.n	80030ca <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4ba6      	ldr	r3, [pc, #664]	; (800335c <HAL_UART_IRQHandler+0x308>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80d8 	beq.w	800327a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d010      	beq.n	80030f6 <HAL_UART_IRQHandler+0xa2>
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2201      	movs	r2, #1
 80030e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ec:	f043 0201 	orr.w	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d010      	beq.n	8003122 <HAL_UART_IRQHandler+0xce>
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2202      	movs	r2, #2
 8003110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003118:	f043 0204 	orr.w	r2, r3, #4
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_UART_IRQHandler+0xfa>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2204      	movs	r2, #4
 800313c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003144:	f043 0202 	orr.w	r2, r3, #2
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d015      	beq.n	8003184 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d104      	bne.n	800316c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2208      	movs	r2, #8
 8003172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800317a:	f043 0208 	orr.w	r2, r3, #8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318a:	2b00      	cmp	r3, #0
 800318c:	d011      	beq.n	80031b2 <HAL_UART_IRQHandler+0x15e>
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00c      	beq.n	80031b2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 8143 	beq.w	8003444 <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00c      	beq.n	80031e2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	d004      	beq.n	8003202 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d031      	beq.n	8003266 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fdc6 	bl	8003d94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d123      	bne.n	800325e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	6892      	ldr	r2, [r2, #8]
 8003220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003224:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	2b00      	cmp	r3, #0
 800322c:	d013      	beq.n	8003256 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	4a4b      	ldr	r2, [pc, #300]	; (8003360 <HAL_UART_IRQHandler+0x30c>)
 8003234:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd fdc8 	bl	8000dd0 <HAL_DMA_Abort_IT>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d017      	beq.n	8003276 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003250:	4610      	mov	r0, r2
 8003252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	e00f      	b.n	8003276 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f912 	bl	8003480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325c:	e00b      	b.n	8003276 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f90e 	bl	8003480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	e007      	b.n	8003276 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f90a 	bl	8003480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003274:	e0e6      	b.n	8003444 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003276:	bf00      	nop
    return;
 8003278:	e0e4      	b.n	8003444 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327e:	2b01      	cmp	r3, #1
 8003280:	f040 80a9 	bne.w	80033d6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80a3 	beq.w	80033d6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 809d 	beq.w	80033d6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2210      	movs	r2, #16
 80032a2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d158      	bne.n	8003364 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	817b      	strh	r3, [r7, #10]
      if (  (nb_remaining_rx_data > 0U)
 80032bc:	897b      	ldrh	r3, [r7, #10]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80c2 	beq.w	8003448 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80032ca:	897a      	ldrh	r2, [r7, #10]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	f080 80bb 	bcs.w	8003448 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	897a      	ldrh	r2, [r7, #10]
 80032d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d12a      	bne.n	8003340 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6812      	ldr	r2, [r2, #0]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	6892      	ldr	r2, [r2, #8]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	6892      	ldr	r2, [r2, #8]
 8003314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003318:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2220      	movs	r2, #32
 800331e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	f022 0210 	bic.w	r2, r2, #16
 8003334:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd fd0a 	bl	8000d54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800334c:	b29b      	uxth	r3, r3
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	b29b      	uxth	r3, r3
 8003352:	4619      	mov	r1, r3
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f89d 	bl	8003494 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800335a:	e075      	b.n	8003448 <HAL_UART_IRQHandler+0x3f4>
 800335c:	04000120 	.word	0x04000120
 8003360:	08003df3 	.word	0x08003df3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003370:	b29b      	uxth	r3, r3
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	813b      	strh	r3, [r7, #8]
      if (  (huart->RxXferCount > 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d064      	beq.n	800344c <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8003382:	893b      	ldrh	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d061      	beq.n	800344c <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003396:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	6892      	ldr	r2, [r2, #8]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	f022 0210 	bic.w	r2, r2, #16
 80033c8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033ca:	893b      	ldrh	r3, [r7, #8]
 80033cc:	4619      	mov	r1, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f860 	bl	8003494 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033d4:	e03a      	b.n	800344c <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00d      	beq.n	80033fc <HAL_UART_IRQHandler+0x3a8>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fe03 	bl	8004000 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033fa:	e02a      	b.n	8003452 <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00d      	beq.n	8003422 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01b      	beq.n	8003450 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	4798      	blx	r3
    }
    return;
 8003420:	e016      	b.n	8003450 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d012      	beq.n	8003452 <HAL_UART_IRQHandler+0x3fe>
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fcf1 	bl	8003e1e <UART_EndTransmit_IT>
    return;
 800343c:	bf00      	nop
 800343e:	e008      	b.n	8003452 <HAL_UART_IRQHandler+0x3fe>
      return;
 8003440:	bf00      	nop
 8003442:	e006      	b.n	8003452 <HAL_UART_IRQHandler+0x3fe>
    return;
 8003444:	bf00      	nop
 8003446:	e004      	b.n	8003452 <HAL_UART_IRQHandler+0x3fe>
      return;
 8003448:	bf00      	nop
 800344a:	e002      	b.n	8003452 <HAL_UART_IRQHandler+0x3fe>
      return;
 800344c:	bf00      	nop
 800344e:	e000      	b.n	8003452 <HAL_UART_IRQHandler+0x3fe>
    return;
 8003450:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003452:	3720      	adds	r7, #32
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034ac:	b5b0      	push	{r4, r5, r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	4bac      	ldr	r3, [pc, #688]	; (800378c <UART_SetConfig+0x2e0>)
 80034dc:	400b      	ands	r3, r1
 80034de:	69f9      	ldr	r1, [r7, #28]
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	6852      	ldr	r2, [r2, #4]
 80034ee:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68d2      	ldr	r2, [r2, #12]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4aa2      	ldr	r2, [pc, #648]	; (8003790 <UART_SetConfig+0x2e4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	4313      	orrs	r3, r2
 8003512:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	6892      	ldr	r2, [r2, #8]
 800351e:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	430a      	orrs	r2, r1
 8003526:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a99      	ldr	r2, [pc, #612]	; (8003794 <UART_SetConfig+0x2e8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d122      	bne.n	8003578 <UART_SetConfig+0xcc>
 8003532:	4b99      	ldr	r3, [pc, #612]	; (8003798 <UART_SetConfig+0x2ec>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	2b03      	cmp	r3, #3
 800353e:	d817      	bhi.n	8003570 <UART_SetConfig+0xc4>
 8003540:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <UART_SetConfig+0x9c>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	08003559 	.word	0x08003559
 800354c:	08003565 	.word	0x08003565
 8003550:	0800355f 	.word	0x0800355f
 8003554:	0800356b 	.word	0x0800356b
 8003558:	2301      	movs	r3, #1
 800355a:	76fb      	strb	r3, [r7, #27]
 800355c:	e0e8      	b.n	8003730 <UART_SetConfig+0x284>
 800355e:	2302      	movs	r3, #2
 8003560:	76fb      	strb	r3, [r7, #27]
 8003562:	e0e5      	b.n	8003730 <UART_SetConfig+0x284>
 8003564:	2304      	movs	r3, #4
 8003566:	76fb      	strb	r3, [r7, #27]
 8003568:	e0e2      	b.n	8003730 <UART_SetConfig+0x284>
 800356a:	2308      	movs	r3, #8
 800356c:	76fb      	strb	r3, [r7, #27]
 800356e:	e0df      	b.n	8003730 <UART_SetConfig+0x284>
 8003570:	2310      	movs	r3, #16
 8003572:	76fb      	strb	r3, [r7, #27]
 8003574:	bf00      	nop
 8003576:	e0db      	b.n	8003730 <UART_SetConfig+0x284>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a87      	ldr	r2, [pc, #540]	; (800379c <UART_SetConfig+0x2f0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d134      	bne.n	80035ec <UART_SetConfig+0x140>
 8003582:	4b85      	ldr	r3, [pc, #532]	; (8003798 <UART_SetConfig+0x2ec>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b0c      	cmp	r3, #12
 800358e:	d829      	bhi.n	80035e4 <UART_SetConfig+0x138>
 8003590:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <UART_SetConfig+0xec>)
 8003592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003596:	bf00      	nop
 8003598:	080035cd 	.word	0x080035cd
 800359c:	080035e5 	.word	0x080035e5
 80035a0:	080035e5 	.word	0x080035e5
 80035a4:	080035e5 	.word	0x080035e5
 80035a8:	080035d9 	.word	0x080035d9
 80035ac:	080035e5 	.word	0x080035e5
 80035b0:	080035e5 	.word	0x080035e5
 80035b4:	080035e5 	.word	0x080035e5
 80035b8:	080035d3 	.word	0x080035d3
 80035bc:	080035e5 	.word	0x080035e5
 80035c0:	080035e5 	.word	0x080035e5
 80035c4:	080035e5 	.word	0x080035e5
 80035c8:	080035df 	.word	0x080035df
 80035cc:	2300      	movs	r3, #0
 80035ce:	76fb      	strb	r3, [r7, #27]
 80035d0:	e0ae      	b.n	8003730 <UART_SetConfig+0x284>
 80035d2:	2302      	movs	r3, #2
 80035d4:	76fb      	strb	r3, [r7, #27]
 80035d6:	e0ab      	b.n	8003730 <UART_SetConfig+0x284>
 80035d8:	2304      	movs	r3, #4
 80035da:	76fb      	strb	r3, [r7, #27]
 80035dc:	e0a8      	b.n	8003730 <UART_SetConfig+0x284>
 80035de:	2308      	movs	r3, #8
 80035e0:	76fb      	strb	r3, [r7, #27]
 80035e2:	e0a5      	b.n	8003730 <UART_SetConfig+0x284>
 80035e4:	2310      	movs	r3, #16
 80035e6:	76fb      	strb	r3, [r7, #27]
 80035e8:	bf00      	nop
 80035ea:	e0a1      	b.n	8003730 <UART_SetConfig+0x284>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6b      	ldr	r2, [pc, #428]	; (80037a0 <UART_SetConfig+0x2f4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d120      	bne.n	8003638 <UART_SetConfig+0x18c>
 80035f6:	4b68      	ldr	r3, [pc, #416]	; (8003798 <UART_SetConfig+0x2ec>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003600:	2b10      	cmp	r3, #16
 8003602:	d00f      	beq.n	8003624 <UART_SetConfig+0x178>
 8003604:	2b10      	cmp	r3, #16
 8003606:	d802      	bhi.n	800360e <UART_SetConfig+0x162>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <UART_SetConfig+0x16c>
 800360c:	e010      	b.n	8003630 <UART_SetConfig+0x184>
 800360e:	2b20      	cmp	r3, #32
 8003610:	d005      	beq.n	800361e <UART_SetConfig+0x172>
 8003612:	2b30      	cmp	r3, #48	; 0x30
 8003614:	d009      	beq.n	800362a <UART_SetConfig+0x17e>
 8003616:	e00b      	b.n	8003630 <UART_SetConfig+0x184>
 8003618:	2300      	movs	r3, #0
 800361a:	76fb      	strb	r3, [r7, #27]
 800361c:	e088      	b.n	8003730 <UART_SetConfig+0x284>
 800361e:	2302      	movs	r3, #2
 8003620:	76fb      	strb	r3, [r7, #27]
 8003622:	e085      	b.n	8003730 <UART_SetConfig+0x284>
 8003624:	2304      	movs	r3, #4
 8003626:	76fb      	strb	r3, [r7, #27]
 8003628:	e082      	b.n	8003730 <UART_SetConfig+0x284>
 800362a:	2308      	movs	r3, #8
 800362c:	76fb      	strb	r3, [r7, #27]
 800362e:	e07f      	b.n	8003730 <UART_SetConfig+0x284>
 8003630:	2310      	movs	r3, #16
 8003632:	76fb      	strb	r3, [r7, #27]
 8003634:	bf00      	nop
 8003636:	e07b      	b.n	8003730 <UART_SetConfig+0x284>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a59      	ldr	r2, [pc, #356]	; (80037a4 <UART_SetConfig+0x2f8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d120      	bne.n	8003684 <UART_SetConfig+0x1d8>
 8003642:	4b55      	ldr	r3, [pc, #340]	; (8003798 <UART_SetConfig+0x2ec>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	d00f      	beq.n	8003670 <UART_SetConfig+0x1c4>
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d802      	bhi.n	800365a <UART_SetConfig+0x1ae>
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <UART_SetConfig+0x1b8>
 8003658:	e010      	b.n	800367c <UART_SetConfig+0x1d0>
 800365a:	2b80      	cmp	r3, #128	; 0x80
 800365c:	d005      	beq.n	800366a <UART_SetConfig+0x1be>
 800365e:	2bc0      	cmp	r3, #192	; 0xc0
 8003660:	d009      	beq.n	8003676 <UART_SetConfig+0x1ca>
 8003662:	e00b      	b.n	800367c <UART_SetConfig+0x1d0>
 8003664:	2300      	movs	r3, #0
 8003666:	76fb      	strb	r3, [r7, #27]
 8003668:	e062      	b.n	8003730 <UART_SetConfig+0x284>
 800366a:	2302      	movs	r3, #2
 800366c:	76fb      	strb	r3, [r7, #27]
 800366e:	e05f      	b.n	8003730 <UART_SetConfig+0x284>
 8003670:	2304      	movs	r3, #4
 8003672:	76fb      	strb	r3, [r7, #27]
 8003674:	e05c      	b.n	8003730 <UART_SetConfig+0x284>
 8003676:	2308      	movs	r3, #8
 8003678:	76fb      	strb	r3, [r7, #27]
 800367a:	e059      	b.n	8003730 <UART_SetConfig+0x284>
 800367c:	2310      	movs	r3, #16
 800367e:	76fb      	strb	r3, [r7, #27]
 8003680:	bf00      	nop
 8003682:	e055      	b.n	8003730 <UART_SetConfig+0x284>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a47      	ldr	r2, [pc, #284]	; (80037a8 <UART_SetConfig+0x2fc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d124      	bne.n	80036d8 <UART_SetConfig+0x22c>
 800368e:	4b42      	ldr	r3, [pc, #264]	; (8003798 <UART_SetConfig+0x2ec>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369c:	d012      	beq.n	80036c4 <UART_SetConfig+0x218>
 800369e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a2:	d802      	bhi.n	80036aa <UART_SetConfig+0x1fe>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <UART_SetConfig+0x20c>
 80036a8:	e012      	b.n	80036d0 <UART_SetConfig+0x224>
 80036aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ae:	d006      	beq.n	80036be <UART_SetConfig+0x212>
 80036b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036b4:	d009      	beq.n	80036ca <UART_SetConfig+0x21e>
 80036b6:	e00b      	b.n	80036d0 <UART_SetConfig+0x224>
 80036b8:	2300      	movs	r3, #0
 80036ba:	76fb      	strb	r3, [r7, #27]
 80036bc:	e038      	b.n	8003730 <UART_SetConfig+0x284>
 80036be:	2302      	movs	r3, #2
 80036c0:	76fb      	strb	r3, [r7, #27]
 80036c2:	e035      	b.n	8003730 <UART_SetConfig+0x284>
 80036c4:	2304      	movs	r3, #4
 80036c6:	76fb      	strb	r3, [r7, #27]
 80036c8:	e032      	b.n	8003730 <UART_SetConfig+0x284>
 80036ca:	2308      	movs	r3, #8
 80036cc:	76fb      	strb	r3, [r7, #27]
 80036ce:	e02f      	b.n	8003730 <UART_SetConfig+0x284>
 80036d0:	2310      	movs	r3, #16
 80036d2:	76fb      	strb	r3, [r7, #27]
 80036d4:	bf00      	nop
 80036d6:	e02b      	b.n	8003730 <UART_SetConfig+0x284>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2c      	ldr	r2, [pc, #176]	; (8003790 <UART_SetConfig+0x2e4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d124      	bne.n	800372c <UART_SetConfig+0x280>
 80036e2:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <UART_SetConfig+0x2ec>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f0:	d012      	beq.n	8003718 <UART_SetConfig+0x26c>
 80036f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f6:	d802      	bhi.n	80036fe <UART_SetConfig+0x252>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <UART_SetConfig+0x260>
 80036fc:	e012      	b.n	8003724 <UART_SetConfig+0x278>
 80036fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003702:	d006      	beq.n	8003712 <UART_SetConfig+0x266>
 8003704:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003708:	d009      	beq.n	800371e <UART_SetConfig+0x272>
 800370a:	e00b      	b.n	8003724 <UART_SetConfig+0x278>
 800370c:	2300      	movs	r3, #0
 800370e:	76fb      	strb	r3, [r7, #27]
 8003710:	e00e      	b.n	8003730 <UART_SetConfig+0x284>
 8003712:	2302      	movs	r3, #2
 8003714:	76fb      	strb	r3, [r7, #27]
 8003716:	e00b      	b.n	8003730 <UART_SetConfig+0x284>
 8003718:	2304      	movs	r3, #4
 800371a:	76fb      	strb	r3, [r7, #27]
 800371c:	e008      	b.n	8003730 <UART_SetConfig+0x284>
 800371e:	2308      	movs	r3, #8
 8003720:	76fb      	strb	r3, [r7, #27]
 8003722:	e005      	b.n	8003730 <UART_SetConfig+0x284>
 8003724:	2310      	movs	r3, #16
 8003726:	76fb      	strb	r3, [r7, #27]
 8003728:	bf00      	nop
 800372a:	e001      	b.n	8003730 <UART_SetConfig+0x284>
 800372c:	2310      	movs	r3, #16
 800372e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a16      	ldr	r2, [pc, #88]	; (8003790 <UART_SetConfig+0x2e4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	f040 8080 	bne.w	800383c <UART_SetConfig+0x390>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800373c:	7efb      	ldrb	r3, [r7, #27]
 800373e:	2b08      	cmp	r3, #8
 8003740:	d836      	bhi.n	80037b0 <UART_SetConfig+0x304>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <UART_SetConfig+0x29c>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	0800376d 	.word	0x0800376d
 800374c:	080037b1 	.word	0x080037b1
 8003750:	08003775 	.word	0x08003775
 8003754:	080037b1 	.word	0x080037b1
 8003758:	0800377b 	.word	0x0800377b
 800375c:	080037b1 	.word	0x080037b1
 8003760:	080037b1 	.word	0x080037b1
 8003764:	080037b1 	.word	0x080037b1
 8003768:	08003783 	.word	0x08003783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800376c:	f7fe fb0c 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 8003770:	6178      	str	r0, [r7, #20]
        break;
 8003772:	e022      	b.n	80037ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003774:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <UART_SetConfig+0x300>)
 8003776:	617b      	str	r3, [r7, #20]
        break;
 8003778:	e01f      	b.n	80037ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377a:	f7fe fa6f 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 800377e:	6178      	str	r0, [r7, #20]
        break;
 8003780:	e01b      	b.n	80037ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003786:	617b      	str	r3, [r7, #20]
        break;
 8003788:	e017      	b.n	80037ba <UART_SetConfig+0x30e>
 800378a:	bf00      	nop
 800378c:	efff69f3 	.word	0xefff69f3
 8003790:	40008000 	.word	0x40008000
 8003794:	40013800 	.word	0x40013800
 8003798:	40021000 	.word	0x40021000
 800379c:	40004400 	.word	0x40004400
 80037a0:	40004800 	.word	0x40004800
 80037a4:	40004c00 	.word	0x40004c00
 80037a8:	40005000 	.word	0x40005000
 80037ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	76bb      	strb	r3, [r7, #26]
        break;
 80037b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80eb 	beq.w	8003998 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	441a      	add	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d805      	bhi.n	80037de <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d202      	bcs.n	80037e4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	76bb      	strb	r3, [r7, #26]
 80037e2:	e0d9      	b.n	8003998 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	021d      	lsls	r5, r3, #8
 80037ee:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80037f2:	0214      	lsls	r4, r2, #8
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	461a      	mov	r2, r3
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	18a0      	adds	r0, r4, r2
 8003802:	eb45 0103 	adc.w	r1, r5, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f04f 0400 	mov.w	r4, #0
 800380e:	461a      	mov	r2, r3
 8003810:	4623      	mov	r3, r4
 8003812:	f7fc fcdd 	bl	80001d0 <__aeabi_uldivmod>
 8003816:	4603      	mov	r3, r0
 8003818:	460c      	mov	r4, r1
 800381a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003822:	d308      	bcc.n	8003836 <UART_SetConfig+0x38a>
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800382a:	d204      	bcs.n	8003836 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	60da      	str	r2, [r3, #12]
 8003834:	e0b0      	b.n	8003998 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	76bb      	strb	r3, [r7, #26]
 800383a:	e0ad      	b.n	8003998 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003844:	d15c      	bne.n	8003900 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 8003846:	7efb      	ldrb	r3, [r7, #27]
 8003848:	2b08      	cmp	r3, #8
 800384a:	d828      	bhi.n	800389e <UART_SetConfig+0x3f2>
 800384c:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <UART_SetConfig+0x3a8>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003879 	.word	0x08003879
 8003858:	08003881 	.word	0x08003881
 800385c:	08003889 	.word	0x08003889
 8003860:	0800389f 	.word	0x0800389f
 8003864:	0800388f 	.word	0x0800388f
 8003868:	0800389f 	.word	0x0800389f
 800386c:	0800389f 	.word	0x0800389f
 8003870:	0800389f 	.word	0x0800389f
 8003874:	08003897 	.word	0x08003897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003878:	f7fe fa86 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 800387c:	6178      	str	r0, [r7, #20]
        break;
 800387e:	e013      	b.n	80038a8 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003880:	f7fe fa98 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 8003884:	6178      	str	r0, [r7, #20]
        break;
 8003886:	e00f      	b.n	80038a8 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003888:	4b49      	ldr	r3, [pc, #292]	; (80039b0 <UART_SetConfig+0x504>)
 800388a:	617b      	str	r3, [r7, #20]
        break;
 800388c:	e00c      	b.n	80038a8 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800388e:	f7fe f9e5 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8003892:	6178      	str	r0, [r7, #20]
        break;
 8003894:	e008      	b.n	80038a8 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389a:	617b      	str	r3, [r7, #20]
        break;
 800389c:	e004      	b.n	80038a8 <UART_SetConfig+0x3fc>
      default:
        pclk = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	76bb      	strb	r3, [r7, #26]
        break;
 80038a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d074      	beq.n	8003998 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	005a      	lsls	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	441a      	add	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b0f      	cmp	r3, #15
 80038ca:	d916      	bls.n	80038fa <UART_SetConfig+0x44e>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d2:	d212      	bcs.n	80038fa <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f023 030f 	bic.w	r3, r3, #15
 80038dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	89fb      	ldrh	r3, [r7, #14]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	89fa      	ldrh	r2, [r7, #14]
 80038f6:	60da      	str	r2, [r3, #12]
 80038f8:	e04e      	b.n	8003998 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	76bb      	strb	r3, [r7, #26]
 80038fe:	e04b      	b.n	8003998 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003900:	7efb      	ldrb	r3, [r7, #27]
 8003902:	2b08      	cmp	r3, #8
 8003904:	d827      	bhi.n	8003956 <UART_SetConfig+0x4aa>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <UART_SetConfig+0x460>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003931 	.word	0x08003931
 8003910:	08003939 	.word	0x08003939
 8003914:	08003941 	.word	0x08003941
 8003918:	08003957 	.word	0x08003957
 800391c:	08003947 	.word	0x08003947
 8003920:	08003957 	.word	0x08003957
 8003924:	08003957 	.word	0x08003957
 8003928:	08003957 	.word	0x08003957
 800392c:	0800394f 	.word	0x0800394f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003930:	f7fe fa2a 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 8003934:	6178      	str	r0, [r7, #20]
        break;
 8003936:	e013      	b.n	8003960 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003938:	f7fe fa3c 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 800393c:	6178      	str	r0, [r7, #20]
        break;
 800393e:	e00f      	b.n	8003960 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <UART_SetConfig+0x504>)
 8003942:	617b      	str	r3, [r7, #20]
        break;
 8003944:	e00c      	b.n	8003960 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003946:	f7fe f989 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 800394a:	6178      	str	r0, [r7, #20]
        break;
 800394c:	e008      	b.n	8003960 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800394e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003952:	617b      	str	r3, [r7, #20]
        break;
 8003954:	e004      	b.n	8003960 <UART_SetConfig+0x4b4>
      default:
        pclk = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	76bb      	strb	r3, [r7, #26]
        break;
 800395e:	bf00      	nop
    }

    if (pclk != 0U)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	085a      	lsrs	r2, r3, #1
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	441a      	add	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	b29b      	uxth	r3, r3
 800397a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b0f      	cmp	r3, #15
 8003980:	d908      	bls.n	8003994 <UART_SetConfig+0x4e8>
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003988:	d204      	bcs.n	8003994 <UART_SetConfig+0x4e8>
      {
        huart->Instance->BRR = usartdiv;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	e001      	b.n	8003998 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039a4:	7ebb      	ldrb	r3, [r7, #26]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bdb0      	pop	{r4, r5, r7, pc}
 80039ae:	bf00      	nop
 80039b0:	00f42400 	.word	0x00f42400

080039b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	6852      	ldr	r2, [r2, #4]
 80039d2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	6852      	ldr	r2, [r2, #4]
 80039f4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039fc:	430a      	orrs	r2, r1
 80039fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	6852      	ldr	r2, [r2, #4]
 8003a16:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	6852      	ldr	r2, [r2, #4]
 8003a38:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a40:	430a      	orrs	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	6892      	ldr	r2, [r2, #8]
 8003a5a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a62:	430a      	orrs	r2, r1
 8003a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	6892      	ldr	r2, [r2, #8]
 8003a7c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a84:	430a      	orrs	r2, r1
 8003a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01a      	beq.n	8003aca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	6852      	ldr	r2, [r2, #4]
 8003a9e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ab2:	d10a      	bne.n	8003aca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	6852      	ldr	r2, [r2, #4]
 8003abe:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	6852      	ldr	r2, [r2, #4]
 8003ae0:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	605a      	str	r2, [r3, #4]
  }
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b08:	f7fd f816 	bl	8000b38 <HAL_GetTick>
 8003b0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d10e      	bne.n	8003b3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f82d 	bl	8003b8a <UART_WaitOnFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e023      	b.n	8003b82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d10e      	bne.n	8003b66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f817 	bl	8003b8a <UART_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e00d      	b.n	8003b82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	4613      	mov	r3, r2
 8003b98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b9a:	e05e      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ba2:	d05a      	beq.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba4:	f7fc ffc8 	bl	8000b38 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	1ad2      	subs	r2, r2, r3
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d802      	bhi.n	8003bba <UART_WaitOnFlagUntilTimeout+0x30>
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d11b      	bne.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bc8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	6892      	ldr	r2, [r2, #8]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e043      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d02c      	beq.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c0e:	d124      	bne.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c18:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c28:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	6892      	ldr	r2, [r2, #8]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e00f      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69da      	ldr	r2, [r3, #28]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	401a      	ands	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d091      	beq.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	88fa      	ldrh	r2, [r7, #6]
 8003ca4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb6:	d10e      	bne.n	8003cd6 <UART_Start_Receive_IT+0x52>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d105      	bne.n	8003ccc <UART_Start_Receive_IT+0x48>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003cc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cca:	e02d      	b.n	8003d28 <UART_Start_Receive_IT+0xa4>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	22ff      	movs	r2, #255	; 0xff
 8003cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cd4:	e028      	b.n	8003d28 <UART_Start_Receive_IT+0xa4>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10d      	bne.n	8003cfa <UART_Start_Receive_IT+0x76>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <UART_Start_Receive_IT+0x6c>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	22ff      	movs	r2, #255	; 0xff
 8003cea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cee:	e01b      	b.n	8003d28 <UART_Start_Receive_IT+0xa4>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	227f      	movs	r2, #127	; 0x7f
 8003cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cf8:	e016      	b.n	8003d28 <UART_Start_Receive_IT+0xa4>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d02:	d10d      	bne.n	8003d20 <UART_Start_Receive_IT+0x9c>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <UART_Start_Receive_IT+0x92>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	227f      	movs	r2, #127	; 0x7f
 8003d10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d14:	e008      	b.n	8003d28 <UART_Start_Receive_IT+0xa4>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	223f      	movs	r2, #63	; 0x3f
 8003d1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d1e:	e003      	b.n	8003d28 <UART_Start_Receive_IT+0xa4>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2222      	movs	r2, #34	; 0x22
 8003d34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	6892      	ldr	r2, [r2, #8]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4e:	d107      	bne.n	8003d60 <UART_Start_Receive_IT+0xdc>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d103      	bne.n	8003d60 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <UART_Start_Receive_IT+0x108>)
 8003d5c:	665a      	str	r2, [r3, #100]	; 0x64
 8003d5e:	e002      	b.n	8003d66 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <UART_Start_Receive_IT+0x10c>)
 8003d64:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003d7c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	08003f29 	.word	0x08003f29
 8003d90:	08003e51 	.word	0x08003e51

08003d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003daa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	6892      	ldr	r2, [r2, #8]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d107      	bne.n	8003dd4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	f022 0210 	bic.w	r2, r2, #16
 8003dd2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff fb35 	bl	8003480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e34:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff fb08 	bl	8003458 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e48:	bf00      	nop
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e5e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e64:	2b22      	cmp	r3, #34	; 0x22
 8003e66:	d151      	bne.n	8003f0c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e6e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	89ba      	ldrh	r2, [r7, #12]
 8003e76:	b2d1      	uxtb	r1, r2
 8003e78:	89fa      	ldrh	r2, [r7, #14]
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d13a      	bne.n	8003f20 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003eb8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	6892      	ldr	r2, [r2, #8]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10f      	bne.n	8003efe <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	f022 0210 	bic.w	r2, r2, #16
 8003eec:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff facc 	bl	8003494 <HAL_UARTEx_RxEventCallback>
 8003efc:	e002      	b.n	8003f04 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff fab4 	bl	800346c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f0a:	e009      	b.n	8003f20 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	8b12      	ldrh	r2, [r2, #24]
 8003f16:	b292      	uxth	r2, r2
 8003f18:	f042 0208 	orr.w	r2, r2, #8
 8003f1c:	b292      	uxth	r2, r2
 8003f1e:	831a      	strh	r2, [r3, #24]
}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f36:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3c:	2b22      	cmp	r3, #34	; 0x22
 8003f3e:	d151      	bne.n	8003fe4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f46:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f4e:	89ba      	ldrh	r2, [r7, #12]
 8003f50:	89fb      	ldrh	r3, [r7, #14]
 8003f52:	4013      	ands	r3, r2
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	1c9a      	adds	r2, r3, #2
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d13a      	bne.n	8003ff8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f90:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	6892      	ldr	r2, [r2, #8]
 8003f9c:	f022 0201 	bic.w	r2, r2, #1
 8003fa0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d10f      	bne.n	8003fd6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	f022 0210 	bic.w	r2, r2, #16
 8003fc4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fa60 	bl	8003494 <HAL_UARTEx_RxEventCallback>
 8003fd4:	e002      	b.n	8003fdc <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fa48 	bl	800346c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fe2:	e009      	b.n	8003ff8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	8b12      	ldrh	r2, [r2, #24]
 8003fee:	b292      	uxth	r2, r2
 8003ff0:	f042 0208 	orr.w	r2, r2, #8
 8003ff4:	b292      	uxth	r2, r2
 8003ff6:	831a      	strh	r2, [r3, #24]
}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f103 0208 	add.w	r2, r3, #8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800402c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f103 0208 	add.w	r2, r3, #8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f103 0208 	add.w	r2, r3, #8
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	601a      	str	r2, [r3, #0]
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040b6:	b480      	push	{r7}
 80040b8:	b085      	sub	sp, #20
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040cc:	d103      	bne.n	80040d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	e00c      	b.n	80040f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3308      	adds	r3, #8
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	e002      	b.n	80040e4 <vListInsert+0x2e>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d9f6      	bls.n	80040de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	601a      	str	r2, [r3, #0]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6892      	ldr	r2, [r2, #8]
 800413e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6852      	ldr	r2, [r2, #4]
 8004148:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	d103      	bne.n	800415c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	1e5a      	subs	r2, r3, #1
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3b04      	subs	r3, #4
 800418c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3b04      	subs	r3, #4
 800419a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f023 0201 	bic.w	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3b04      	subs	r3, #4
 80041aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041ac:	4a0c      	ldr	r2, [pc, #48]	; (80041e0 <pxPortInitialiseStack+0x64>)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3b14      	subs	r3, #20
 80041b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3b04      	subs	r3, #4
 80041c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f06f 0202 	mvn.w	r2, #2
 80041ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3b20      	subs	r3, #32
 80041d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041d2:	68fb      	ldr	r3, [r7, #12]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	080041e5 	.word	0x080041e5

080041e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041ee:	4b11      	ldr	r3, [pc, #68]	; (8004234 <prvTaskExitError+0x50>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041f6:	d009      	beq.n	800420c <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	e7fe      	b.n	800420a <prvTaskExitError+0x26>
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800421e:	bf00      	nop
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0fc      	beq.n	8004220 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	2000000c 	.word	0x2000000c
	...

08004240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004240:	4b07      	ldr	r3, [pc, #28]	; (8004260 <pxCurrentTCBConst2>)
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	6808      	ldr	r0, [r1, #0]
 8004246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424a:	f380 8809 	msr	PSP, r0
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8811 	msr	BASEPRI, r0
 800425a:	4770      	bx	lr
 800425c:	f3af 8000 	nop.w

08004260 <pxCurrentTCBConst2>:
 8004260:	20000e60 	.word	0x20000e60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop

08004268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004268:	4808      	ldr	r0, [pc, #32]	; (800428c <prvPortStartFirstTask+0x24>)
 800426a:	6800      	ldr	r0, [r0, #0]
 800426c:	6800      	ldr	r0, [r0, #0]
 800426e:	f380 8808 	msr	MSP, r0
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f380 8814 	msr	CONTROL, r0
 800427a:	b662      	cpsie	i
 800427c:	b661      	cpsie	f
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	df00      	svc	0
 8004288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800428a:	bf00      	nop
 800428c:	e000ed08 	.word	0xe000ed08

08004290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004296:	4b44      	ldr	r3, [pc, #272]	; (80043a8 <xPortStartScheduler+0x118>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a44      	ldr	r2, [pc, #272]	; (80043ac <xPortStartScheduler+0x11c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d109      	bne.n	80042b4 <xPortStartScheduler+0x24>
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	e7fe      	b.n	80042b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042b4:	4b3c      	ldr	r3, [pc, #240]	; (80043a8 <xPortStartScheduler+0x118>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a3d      	ldr	r2, [pc, #244]	; (80043b0 <xPortStartScheduler+0x120>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d109      	bne.n	80042d2 <xPortStartScheduler+0x42>
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	e7fe      	b.n	80042d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042d2:	4b38      	ldr	r3, [pc, #224]	; (80043b4 <xPortStartScheduler+0x124>)
 80042d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	22ff      	movs	r2, #255	; 0xff
 80042e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <xPortStartScheduler+0x128>)
 80042f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042fa:	4b30      	ldr	r3, [pc, #192]	; (80043bc <xPortStartScheduler+0x12c>)
 80042fc:	2207      	movs	r2, #7
 80042fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004300:	e009      	b.n	8004316 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004302:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <xPortStartScheduler+0x12c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3b01      	subs	r3, #1
 8004308:	4a2c      	ldr	r2, [pc, #176]	; (80043bc <xPortStartScheduler+0x12c>)
 800430a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	b2db      	uxtb	r3, r3
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	b2db      	uxtb	r3, r3
 8004314:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431e:	2b80      	cmp	r3, #128	; 0x80
 8004320:	d0ef      	beq.n	8004302 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004322:	4b26      	ldr	r3, [pc, #152]	; (80043bc <xPortStartScheduler+0x12c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f1c3 0307 	rsb	r3, r3, #7
 800432a:	2b04      	cmp	r3, #4
 800432c:	d009      	beq.n	8004342 <xPortStartScheduler+0xb2>
 800432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	e7fe      	b.n	8004340 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004342:	4b1e      	ldr	r3, [pc, #120]	; (80043bc <xPortStartScheduler+0x12c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <xPortStartScheduler+0x12c>)
 800434a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <xPortStartScheduler+0x12c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004354:	4a19      	ldr	r2, [pc, #100]	; (80043bc <xPortStartScheduler+0x12c>)
 8004356:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004360:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <xPortStartScheduler+0x130>)
 8004362:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <xPortStartScheduler+0x130>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800436a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800436c:	4a14      	ldr	r2, [pc, #80]	; (80043c0 <xPortStartScheduler+0x130>)
 800436e:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <xPortStartScheduler+0x130>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004376:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004378:	f000 f8d6 	bl	8004528 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <xPortStartScheduler+0x134>)
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004382:	f000 f8f5 	bl	8004570 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004386:	4a10      	ldr	r2, [pc, #64]	; (80043c8 <xPortStartScheduler+0x138>)
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <xPortStartScheduler+0x138>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004390:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004392:	f7ff ff69 	bl	8004268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004396:	f001 f91d 	bl	80055d4 <vTaskSwitchContext>
	prvTaskExitError();
 800439a:	f7ff ff23 	bl	80041e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	e000ed00 	.word	0xe000ed00
 80043ac:	410fc271 	.word	0x410fc271
 80043b0:	410fc270 	.word	0x410fc270
 80043b4:	e000e400 	.word	0xe000e400
 80043b8:	20000281 	.word	0x20000281
 80043bc:	20000284 	.word	0x20000284
 80043c0:	e000ed20 	.word	0xe000ed20
 80043c4:	2000000c 	.word	0x2000000c
 80043c8:	e000ef34 	.word	0xe000ef34

080043cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043e4:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <vPortEnterCritical+0x54>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3301      	adds	r3, #1
 80043ea:	4a0d      	ldr	r2, [pc, #52]	; (8004420 <vPortEnterCritical+0x54>)
 80043ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <vPortEnterCritical+0x54>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10e      	bne.n	8004414 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043f6:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <vPortEnterCritical+0x58>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d009      	beq.n	8004414 <vPortEnterCritical+0x48>
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	603b      	str	r3, [r7, #0]
 8004412:	e7fe      	b.n	8004412 <vPortEnterCritical+0x46>
	}
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	2000000c 	.word	0x2000000c
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800442e:	4b11      	ldr	r3, [pc, #68]	; (8004474 <vPortExitCritical+0x4c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <vPortExitCritical+0x22>
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	e7fe      	b.n	8004448 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <vPortExitCritical+0x4c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3b01      	subs	r3, #1
 8004450:	4a08      	ldr	r2, [pc, #32]	; (8004474 <vPortExitCritical+0x4c>)
 8004452:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004454:	4b07      	ldr	r3, [pc, #28]	; (8004474 <vPortExitCritical+0x4c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <vPortExitCritical+0x3e>
 800445c:	2300      	movs	r3, #0
 800445e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	2000000c 	.word	0x2000000c
	...

08004480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004480:	f3ef 8009 	mrs	r0, PSP
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <pxCurrentTCBConst>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	f01e 0f10 	tst.w	lr, #16
 8004490:	bf08      	it	eq
 8004492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449a:	6010      	str	r0, [r2, #0]
 800449c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044a4:	f380 8811 	msr	BASEPRI, r0
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f001 f890 	bl	80055d4 <vTaskSwitchContext>
 80044b4:	f04f 0000 	mov.w	r0, #0
 80044b8:	f380 8811 	msr	BASEPRI, r0
 80044bc:	bc09      	pop	{r0, r3}
 80044be:	6819      	ldr	r1, [r3, #0]
 80044c0:	6808      	ldr	r0, [r1, #0]
 80044c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c6:	f01e 0f10 	tst.w	lr, #16
 80044ca:	bf08      	it	eq
 80044cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044d0:	f380 8809 	msr	PSP, r0
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	f3af 8000 	nop.w

080044e0 <pxCurrentTCBConst>:
 80044e0:	20000e60 	.word	0x20000e60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop

080044e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004500:	f000 ffb0 	bl	8005464 <xTaskIncrementTick>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800450a:	4b06      	ldr	r3, [pc, #24]	; (8004524 <SysTick_Handler+0x3c>)
 800450c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	2300      	movs	r3, #0
 8004514:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	e000ed04 	.word	0xe000ed04

08004528 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <vPortSetupTimerInterrupt+0x34>)
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <vPortSetupTimerInterrupt+0x38>)
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004538:	4a0a      	ldr	r2, [pc, #40]	; (8004564 <vPortSetupTimerInterrupt+0x3c>)
 800453a:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <vPortSetupTimerInterrupt+0x40>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	490b      	ldr	r1, [pc, #44]	; (800456c <vPortSetupTimerInterrupt+0x44>)
 8004540:	fba1 1303 	umull	r1, r3, r1, r3
 8004544:	099b      	lsrs	r3, r3, #6
 8004546:	3b01      	subs	r3, #1
 8004548:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800454a:	4b04      	ldr	r3, [pc, #16]	; (800455c <vPortSetupTimerInterrupt+0x34>)
 800454c:	2207      	movs	r2, #7
 800454e:	601a      	str	r2, [r3, #0]
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	e000e010 	.word	0xe000e010
 8004560:	e000e018 	.word	0xe000e018
 8004564:	e000e014 	.word	0xe000e014
 8004568:	20000000 	.word	0x20000000
 800456c:	10624dd3 	.word	0x10624dd3

08004570 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004570:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004580 <vPortEnableVFP+0x10>
 8004574:	6801      	ldr	r1, [r0, #0]
 8004576:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800457a:	6001      	str	r1, [r0, #0]
 800457c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800457e:	bf00      	nop
 8004580:	e000ed88 	.word	0xe000ed88

08004584 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	; 0x28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800458c:	2300      	movs	r3, #0
 800458e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004590:	f000 febe 	bl	8005310 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004594:	4b59      	ldr	r3, [pc, #356]	; (80046fc <pvPortMalloc+0x178>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800459c:	f000 f91a 	bl	80047d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045a0:	4b57      	ldr	r3, [pc, #348]	; (8004700 <pvPortMalloc+0x17c>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f040 8091 	bne.w	80046d0 <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01c      	beq.n	80045ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80045b4:	2208      	movs	r2, #8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4413      	add	r3, r2
 80045ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d013      	beq.n	80045ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f023 0307 	bic.w	r3, r3, #7
 80045cc:	3308      	adds	r3, #8
 80045ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <pvPortMalloc+0x6a>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e7fe      	b.n	80045ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d06d      	beq.n	80046d0 <pvPortMalloc+0x14c>
 80045f4:	4b43      	ldr	r3, [pc, #268]	; (8004704 <pvPortMalloc+0x180>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d868      	bhi.n	80046d0 <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045fe:	4b42      	ldr	r3, [pc, #264]	; (8004708 <pvPortMalloc+0x184>)
 8004600:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004602:	4b41      	ldr	r3, [pc, #260]	; (8004708 <pvPortMalloc+0x184>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004608:	e004      	b.n	8004614 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d203      	bcs.n	8004626 <pvPortMalloc+0xa2>
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f1      	bne.n	800460a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004626:	4b35      	ldr	r3, [pc, #212]	; (80046fc <pvPortMalloc+0x178>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462c:	429a      	cmp	r2, r3
 800462e:	d04f      	beq.n	80046d0 <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2208      	movs	r2, #8
 8004636:	4413      	add	r3, r2
 8004638:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	1ad2      	subs	r2, r2, r3
 800464a:	2308      	movs	r3, #8
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	429a      	cmp	r2, r3
 8004650:	d91e      	bls.n	8004690 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4413      	add	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	2b00      	cmp	r3, #0
 8004662:	d009      	beq.n	8004678 <pvPortMalloc+0xf4>
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e7fe      	b.n	8004676 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1ad2      	subs	r2, r2, r3
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800468a:	69b8      	ldr	r0, [r7, #24]
 800468c:	f000 f904 	bl	8004898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004690:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <pvPortMalloc+0x180>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	4a1a      	ldr	r2, [pc, #104]	; (8004704 <pvPortMalloc+0x180>)
 800469c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800469e:	4b19      	ldr	r3, [pc, #100]	; (8004704 <pvPortMalloc+0x180>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b1a      	ldr	r3, [pc, #104]	; (800470c <pvPortMalloc+0x188>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d203      	bcs.n	80046b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046aa:	4b16      	ldr	r3, [pc, #88]	; (8004704 <pvPortMalloc+0x180>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a17      	ldr	r2, [pc, #92]	; (800470c <pvPortMalloc+0x188>)
 80046b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <pvPortMalloc+0x17c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80046c6:	4b12      	ldr	r3, [pc, #72]	; (8004710 <pvPortMalloc+0x18c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3301      	adds	r3, #1
 80046cc:	4a10      	ldr	r2, [pc, #64]	; (8004710 <pvPortMalloc+0x18c>)
 80046ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046d0:	f000 fe2c 	bl	800532c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <pvPortMalloc+0x16e>
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e7fe      	b.n	80046f0 <pvPortMalloc+0x16c>
	return pvReturn;
 80046f2:	69fb      	ldr	r3, [r7, #28]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3728      	adds	r7, #40	; 0x28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20000e48 	.word	0x20000e48
 8004700:	20000e5c 	.word	0x20000e5c
 8004704:	20000e4c 	.word	0x20000e4c
 8004708:	20000e40 	.word	0x20000e40
 800470c:	20000e50 	.word	0x20000e50
 8004710:	20000e54 	.word	0x20000e54

08004714 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d04b      	beq.n	80047be <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004726:	2308      	movs	r3, #8
 8004728:	425b      	negs	r3, r3
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4413      	add	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	4b23      	ldr	r3, [pc, #140]	; (80047c8 <vPortFree+0xb4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4013      	ands	r3, r2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <vPortFree+0x42>
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	e7fe      	b.n	8004754 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <vPortFree+0x5e>
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	e7fe      	b.n	8004770 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <vPortFree+0xb4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01e      	beq.n	80047be <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d11a      	bne.n	80047be <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <vPortFree+0xb4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	43db      	mvns	r3, r3
 8004792:	401a      	ands	r2, r3
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004798:	f000 fdba 	bl	8005310 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <vPortFree+0xb8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4413      	add	r3, r2
 80047a6:	4a09      	ldr	r2, [pc, #36]	; (80047cc <vPortFree+0xb8>)
 80047a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047aa:	6938      	ldr	r0, [r7, #16]
 80047ac:	f000 f874 	bl	8004898 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80047b0:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <vPortFree+0xbc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3301      	adds	r3, #1
 80047b6:	4a06      	ldr	r2, [pc, #24]	; (80047d0 <vPortFree+0xbc>)
 80047b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80047ba:	f000 fdb7 	bl	800532c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047be:	bf00      	nop
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000e5c 	.word	0x20000e5c
 80047cc:	20000e4c 	.word	0x20000e4c
 80047d0:	20000e58 	.word	0x20000e58

080047d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80047de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047e0:	4b27      	ldr	r3, [pc, #156]	; (8004880 <prvHeapInit+0xac>)
 80047e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00c      	beq.n	8004808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3307      	adds	r3, #7
 80047f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0307 	bic.w	r3, r3, #7
 80047fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <prvHeapInit+0xac>)
 8004804:	4413      	add	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800480c:	4a1d      	ldr	r2, [pc, #116]	; (8004884 <prvHeapInit+0xb0>)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004812:	4b1c      	ldr	r3, [pc, #112]	; (8004884 <prvHeapInit+0xb0>)
 8004814:	2200      	movs	r2, #0
 8004816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4413      	add	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004820:	2208      	movs	r2, #8
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0307 	bic.w	r3, r3, #7
 800482e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a15      	ldr	r2, [pc, #84]	; (8004888 <prvHeapInit+0xb4>)
 8004834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <prvHeapInit+0xb4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2200      	movs	r2, #0
 800483c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800483e:	4b12      	ldr	r3, [pc, #72]	; (8004888 <prvHeapInit+0xb4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	1ad2      	subs	r2, r2, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <prvHeapInit+0xb4>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4a0a      	ldr	r2, [pc, #40]	; (800488c <prvHeapInit+0xb8>)
 8004862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4a09      	ldr	r2, [pc, #36]	; (8004890 <prvHeapInit+0xbc>)
 800486a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800486c:	4b09      	ldr	r3, [pc, #36]	; (8004894 <prvHeapInit+0xc0>)
 800486e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004872:	601a      	str	r2, [r3, #0]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	20000288 	.word	0x20000288
 8004884:	20000e40 	.word	0x20000e40
 8004888:	20000e48 	.word	0x20000e48
 800488c:	20000e50 	.word	0x20000e50
 8004890:	20000e4c 	.word	0x20000e4c
 8004894:	20000e5c 	.word	0x20000e5c

08004898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048a0:	4b28      	ldr	r3, [pc, #160]	; (8004944 <prvInsertBlockIntoFreeList+0xac>)
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e002      	b.n	80048ac <prvInsertBlockIntoFreeList+0x14>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d3f7      	bcc.n	80048a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	441a      	add	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d108      	bne.n	80048da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	441a      	add	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	441a      	add	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d118      	bne.n	8004920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <prvInsertBlockIntoFreeList+0xb0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d00d      	beq.n	8004916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	441a      	add	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e008      	b.n	8004928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004916:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <prvInsertBlockIntoFreeList+0xb0>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e003      	b.n	8004928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	d002      	beq.n	8004936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000e40 	.word	0x20000e40
 8004948:	20000e48 	.word	0x20000e48

0800494c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <xQueueGenericReset+0x28>
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	e7fe      	b.n	8004972 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004974:	f7ff fd2a 	bl	80043cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004980:	68f9      	ldr	r1, [r7, #12]
 8004982:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	441a      	add	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	3b01      	subs	r3, #1
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049aa:	fb01 f303 	mul.w	r3, r1, r3
 80049ae:	441a      	add	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	22ff      	movs	r2, #255	; 0xff
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	22ff      	movs	r2, #255	; 0xff
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d114      	bne.n	80049f4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01a      	beq.n	8004a08 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3310      	adds	r3, #16
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fe7a 	bl	80056d0 <xTaskRemoveFromEventList>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d012      	beq.n	8004a08 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049e2:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <xQueueGenericReset+0xcc>)
 80049e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	e009      	b.n	8004a08 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3310      	adds	r3, #16
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff fb0b 	bl	8004014 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3324      	adds	r3, #36	; 0x24
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fb06 	bl	8004014 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a08:	f7ff fd0e 	bl	8004428 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a0c:	2301      	movs	r3, #1
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	e000ed04 	.word	0xe000ed04

08004a1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	4613      	mov	r3, r2
 8004a28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d109      	bne.n	8004a44 <xQueueGenericCreate+0x28>
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	e7fe      	b.n	8004a42 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	3348      	adds	r3, #72	; 0x48
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fd96 	bl	8004584 <pvPortMalloc>
 8004a58:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d011      	beq.n	8004a84 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	3348      	adds	r3, #72	; 0x48
 8004a68:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a72:	79fa      	ldrb	r2, [r7, #7]
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f805 	bl	8004a8e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a84:	69bb      	ldr	r3, [r7, #24]
	}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
 8004a9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d103      	bne.n	8004aaa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e002      	b.n	8004ab0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004abc:	2101      	movs	r1, #1
 8004abe:	69b8      	ldr	r0, [r7, #24]
 8004ac0:	f7ff ff44 	bl	800494c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00e      	beq.n	8004af8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004aec:	2300      	movs	r3, #0
 8004aee:	2200      	movs	r2, #0
 8004af0:	2100      	movs	r1, #0
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f81c 	bl	8004b30 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	461a      	mov	r2, r3
 8004b16:	6939      	ldr	r1, [r7, #16]
 8004b18:	6978      	ldr	r0, [r7, #20]
 8004b1a:	f7ff ff7f 	bl	8004a1c <xQueueGenericCreate>
 8004b1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff ffd3 	bl	8004acc <prvInitialiseMutex>

		return xNewQueue;
 8004b26:	68fb      	ldr	r3, [r7, #12]
	}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08e      	sub	sp, #56	; 0x38
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d109      	bne.n	8004b60 <xQueueGenericSend+0x30>
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5e:	e7fe      	b.n	8004b5e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d103      	bne.n	8004b6e <xQueueGenericSend+0x3e>
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <xQueueGenericSend+0x42>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <xQueueGenericSend+0x44>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <xQueueGenericSend+0x5c>
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8a:	e7fe      	b.n	8004b8a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d103      	bne.n	8004b9a <xQueueGenericSend+0x6a>
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <xQueueGenericSend+0x6e>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <xQueueGenericSend+0x70>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <xQueueGenericSend+0x88>
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	623b      	str	r3, [r7, #32]
 8004bb6:	e7fe      	b.n	8004bb6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bb8:	f000 ff40 	bl	8005a3c <xTaskGetSchedulerState>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <xQueueGenericSend+0x98>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <xQueueGenericSend+0x9c>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <xQueueGenericSend+0x9e>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d109      	bne.n	8004be6 <xQueueGenericSend+0xb6>
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	61fb      	str	r3, [r7, #28]
 8004be4:	e7fe      	b.n	8004be4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004be6:	f7ff fbf1 	bl	80043cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <xQueueGenericSend+0xcc>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d129      	bne.n	8004c50 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c02:	f000 f88f 	bl	8004d24 <prvCopyDataToQueue>
 8004c06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d010      	beq.n	8004c32 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	3324      	adds	r3, #36	; 0x24
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fd5b 	bl	80056d0 <xTaskRemoveFromEventList>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d013      	beq.n	8004c48 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c20:	4b3f      	ldr	r3, [pc, #252]	; (8004d20 <xQueueGenericSend+0x1f0>)
 8004c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	e00a      	b.n	8004c48 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c38:	4b39      	ldr	r3, [pc, #228]	; (8004d20 <xQueueGenericSend+0x1f0>)
 8004c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c48:	f7ff fbee 	bl	8004428 <vPortExitCritical>
				return pdPASS;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e063      	b.n	8004d18 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c56:	f7ff fbe7 	bl	8004428 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e05c      	b.n	8004d18 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d106      	bne.n	8004c72 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c64:	f107 0314 	add.w	r3, r7, #20
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fd93 	bl	8005794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c72:	f7ff fbd9 	bl	8004428 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c76:	f000 fb4b 	bl	8005310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c7a:	f7ff fba7 	bl	80043cc <vPortEnterCritical>
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c84:	b25b      	sxtb	r3, r3
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c8a:	d103      	bne.n	8004c94 <xQueueGenericSend+0x164>
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c9a:	b25b      	sxtb	r3, r3
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca0:	d103      	bne.n	8004caa <xQueueGenericSend+0x17a>
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004caa:	f7ff fbbd 	bl	8004428 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cae:	1d3a      	adds	r2, r7, #4
 8004cb0:	f107 0314 	add.w	r3, r7, #20
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fd82 	bl	80057c0 <xTaskCheckForTimeOut>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d124      	bne.n	8004d0c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cc4:	f000 f8ea 	bl	8004e9c <prvIsQueueFull>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d018      	beq.n	8004d00 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	3310      	adds	r3, #16
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fcd6 	bl	8005688 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cde:	f000 f88b 	bl	8004df8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ce2:	f000 fb23 	bl	800532c <xTaskResumeAll>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f47f af7c 	bne.w	8004be6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <xQueueGenericSend+0x1f0>)
 8004cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	e772      	b.n	8004be6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d02:	f000 f879 	bl	8004df8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d06:	f000 fb11 	bl	800532c <xTaskResumeAll>
 8004d0a:	e76c      	b.n	8004be6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d0e:	f000 f873 	bl	8004df8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d12:	f000 fb0b 	bl	800532c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3738      	adds	r7, #56	; 0x38
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10d      	bne.n	8004d5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d14d      	bne.n	8004de6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fe92 	bl	8005a78 <xTaskPriorityDisinherit>
 8004d54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	609a      	str	r2, [r3, #8]
 8004d5c:	e043      	b.n	8004de6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d119      	bne.n	8004d98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6858      	ldr	r0, [r3, #4]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	f000 ffba 	bl	8005ce8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	441a      	add	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d32b      	bcc.n	8004de6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]
 8004d96:	e026      	b.n	8004de6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	68d8      	ldr	r0, [r3, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	461a      	mov	r2, r3
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	f000 ffa0 	bl	8005ce8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	425b      	negs	r3, r3
 8004db2:	441a      	add	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d207      	bcs.n	8004dd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	425b      	negs	r3, r3
 8004dce:	441a      	add	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d105      	bne.n	8004de6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004dee:	697b      	ldr	r3, [r7, #20]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e00:	f7ff fae4 	bl	80043cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e0c:	e011      	b.n	8004e32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d012      	beq.n	8004e3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3324      	adds	r3, #36	; 0x24
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fc58 	bl	80056d0 <xTaskRemoveFromEventList>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e26:	f000 fd2b 	bl	8005880 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	dce9      	bgt.n	8004e0e <prvUnlockQueue+0x16>
 8004e3a:	e000      	b.n	8004e3e <prvUnlockQueue+0x46>
					break;
 8004e3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	22ff      	movs	r2, #255	; 0xff
 8004e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e46:	f7ff faef 	bl	8004428 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e4a:	f7ff fabf 	bl	80043cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e56:	e011      	b.n	8004e7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d012      	beq.n	8004e86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3310      	adds	r3, #16
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 fc33 	bl	80056d0 <xTaskRemoveFromEventList>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e70:	f000 fd06 	bl	8005880 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e74:	7bbb      	ldrb	r3, [r7, #14]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	dce9      	bgt.n	8004e58 <prvUnlockQueue+0x60>
 8004e84:	e000      	b.n	8004e88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	22ff      	movs	r2, #255	; 0xff
 8004e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e90:	f7ff faca 	bl	8004428 <vPortExitCritical>
}
 8004e94:	bf00      	nop
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ea4:	f7ff fa92 	bl	80043cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d102      	bne.n	8004eba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	e001      	b.n	8004ebe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ebe:	f7ff fab3 	bl	8004428 <vPortExitCritical>

	return xReturn;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08e      	sub	sp, #56	; 0x38
 8004ed0:	af04      	add	r7, sp, #16
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d109      	bne.n	8004ef4 <xTaskCreateStatic+0x28>
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	623b      	str	r3, [r7, #32]
 8004ef2:	e7fe      	b.n	8004ef2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d109      	bne.n	8004f0e <xTaskCreateStatic+0x42>
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	61fb      	str	r3, [r7, #28]
 8004f0c:	e7fe      	b.n	8004f0c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f0e:	2354      	movs	r3, #84	; 0x54
 8004f10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b54      	cmp	r3, #84	; 0x54
 8004f16:	d009      	beq.n	8004f2c <xTaskCreateStatic+0x60>
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	e7fe      	b.n	8004f2a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01e      	beq.n	8004f72 <xTaskCreateStatic+0xa6>
 8004f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01b      	beq.n	8004f72 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9303      	str	r3, [sp, #12]
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	9302      	str	r3, [sp, #8]
 8004f54:	f107 0314 	add.w	r3, r7, #20
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f850 	bl	800500a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f6c:	f000 f8d4 	bl	8005118 <prvAddNewTaskToReadyList>
 8004f70:	e001      	b.n	8004f76 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f76:	697b      	ldr	r3, [r7, #20]
	}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3728      	adds	r7, #40	; 0x28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08c      	sub	sp, #48	; 0x30
 8004f84:	af04      	add	r7, sp, #16
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f90:	88fb      	ldrh	r3, [r7, #6]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff faf5 	bl	8004584 <pvPortMalloc>
 8004f9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00e      	beq.n	8004fc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fa2:	2054      	movs	r0, #84	; 0x54
 8004fa4:	f7ff faee 	bl	8004584 <pvPortMalloc>
 8004fa8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
 8004fb6:	e005      	b.n	8004fc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fb8:	6978      	ldr	r0, [r7, #20]
 8004fba:	f7ff fbab 	bl	8004714 <vPortFree>
 8004fbe:	e001      	b.n	8004fc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d017      	beq.n	8004ffa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fd2:	88fa      	ldrh	r2, [r7, #6]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	9303      	str	r3, [sp, #12]
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	9302      	str	r3, [sp, #8]
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f80e 	bl	800500a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fee:	69f8      	ldr	r0, [r7, #28]
 8004ff0:	f000 f892 	bl	8005118 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	61bb      	str	r3, [r7, #24]
 8004ff8:	e002      	b.n	8005000 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ffe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005000:	69bb      	ldr	r3, [r7, #24]
	}
 8005002:	4618      	mov	r0, r3
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b088      	sub	sp, #32
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	607a      	str	r2, [r7, #4]
 8005016:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005022:	3b01      	subs	r3, #1
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	f023 0307 	bic.w	r3, r3, #7
 8005030:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	2b00      	cmp	r3, #0
 800503a:	d009      	beq.n	8005050 <prvInitialiseNewTask+0x46>
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	e7fe      	b.n	800504e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01f      	beq.n	8005096 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005056:	2300      	movs	r3, #0
 8005058:	61fb      	str	r3, [r7, #28]
 800505a:	e012      	b.n	8005082 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	7819      	ldrb	r1, [r3, #0]
 8005064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	4413      	add	r3, r2
 800506a:	3334      	adds	r3, #52	; 0x34
 800506c:	460a      	mov	r2, r1
 800506e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d006      	beq.n	800508a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	3301      	adds	r3, #1
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b0f      	cmp	r3, #15
 8005086:	d9e9      	bls.n	800505c <prvInitialiseNewTask+0x52>
 8005088:	e000      	b.n	800508c <prvInitialiseNewTask+0x82>
			{
				break;
 800508a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005094:	e003      	b.n	800509e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	2b06      	cmp	r3, #6
 80050a2:	d901      	bls.n	80050a8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050a4:	2306      	movs	r3, #6
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	2200      	movs	r2, #0
 80050b8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	3304      	adds	r3, #4
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe ffc8 	bl	8004054 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	3318      	adds	r3, #24
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fe ffc3 	bl	8004054 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	f1c3 0207 	rsb	r2, r3, #7
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	2200      	movs	r2, #0
 80050e8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	68f9      	ldr	r1, [r7, #12]
 80050f6:	69b8      	ldr	r0, [r7, #24]
 80050f8:	f7ff f840 	bl	800417c <pxPortInitialiseStack>
 80050fc:	4602      	mov	r2, r0
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800510e:	bf00      	nop
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005120:	f7ff f954 	bl	80043cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005124:	4b2a      	ldr	r3, [pc, #168]	; (80051d0 <prvAddNewTaskToReadyList+0xb8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3301      	adds	r3, #1
 800512a:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <prvAddNewTaskToReadyList+0xb8>)
 800512c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800512e:	4b29      	ldr	r3, [pc, #164]	; (80051d4 <prvAddNewTaskToReadyList+0xbc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d109      	bne.n	800514a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005136:	4a27      	ldr	r2, [pc, #156]	; (80051d4 <prvAddNewTaskToReadyList+0xbc>)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800513c:	4b24      	ldr	r3, [pc, #144]	; (80051d0 <prvAddNewTaskToReadyList+0xb8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d110      	bne.n	8005166 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005144:	f000 fbc0 	bl	80058c8 <prvInitialiseTaskLists>
 8005148:	e00d      	b.n	8005166 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800514a:	4b23      	ldr	r3, [pc, #140]	; (80051d8 <prvAddNewTaskToReadyList+0xc0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005152:	4b20      	ldr	r3, [pc, #128]	; (80051d4 <prvAddNewTaskToReadyList+0xbc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	429a      	cmp	r2, r3
 800515e:	d802      	bhi.n	8005166 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005160:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <prvAddNewTaskToReadyList+0xbc>)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005166:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <prvAddNewTaskToReadyList+0xc4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	4a1b      	ldr	r2, [pc, #108]	; (80051dc <prvAddNewTaskToReadyList+0xc4>)
 800516e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	2201      	movs	r2, #1
 8005176:	409a      	lsls	r2, r3
 8005178:	4b19      	ldr	r3, [pc, #100]	; (80051e0 <prvAddNewTaskToReadyList+0xc8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4313      	orrs	r3, r2
 800517e:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <prvAddNewTaskToReadyList+0xc8>)
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <prvAddNewTaskToReadyList+0xcc>)
 8005190:	441a      	add	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f7fe ff68 	bl	800406e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800519e:	f7ff f943 	bl	8004428 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051a2:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <prvAddNewTaskToReadyList+0xc0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00e      	beq.n	80051c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051aa:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <prvAddNewTaskToReadyList+0xbc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d207      	bcs.n	80051c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <prvAddNewTaskToReadyList+0xd0>)
 80051ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051c8:	bf00      	nop
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20000f60 	.word	0x20000f60
 80051d4:	20000e60 	.word	0x20000e60
 80051d8:	20000f6c 	.word	0x20000f6c
 80051dc:	20000f7c 	.word	0x20000f7c
 80051e0:	20000f68 	.word	0x20000f68
 80051e4:	20000e64 	.word	0x20000e64
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d016      	beq.n	800522c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051fe:	4b13      	ldr	r3, [pc, #76]	; (800524c <vTaskDelay+0x60>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d009      	beq.n	800521a <vTaskDelay+0x2e>
 8005206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	e7fe      	b.n	8005218 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800521a:	f000 f879 	bl	8005310 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800521e:	2100      	movs	r1, #0
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fcad 	bl	8005b80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005226:	f000 f881 	bl	800532c <xTaskResumeAll>
 800522a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d107      	bne.n	8005242 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005232:	4b07      	ldr	r3, [pc, #28]	; (8005250 <vTaskDelay+0x64>)
 8005234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005242:	bf00      	nop
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000f88 	.word	0x20000f88
 8005250:	e000ed04 	.word	0xe000ed04

08005254 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08a      	sub	sp, #40	; 0x28
 8005258:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800525a:	2300      	movs	r3, #0
 800525c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005262:	463a      	mov	r2, r7
 8005264:	1d39      	adds	r1, r7, #4
 8005266:	f107 0308 	add.w	r3, r7, #8
 800526a:	4618      	mov	r0, r3
 800526c:	f7fb f938 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005270:	6839      	ldr	r1, [r7, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	9202      	str	r2, [sp, #8]
 8005278:	9301      	str	r3, [sp, #4]
 800527a:	2300      	movs	r3, #0
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	2300      	movs	r3, #0
 8005280:	460a      	mov	r2, r1
 8005282:	491d      	ldr	r1, [pc, #116]	; (80052f8 <vTaskStartScheduler+0xa4>)
 8005284:	481d      	ldr	r0, [pc, #116]	; (80052fc <vTaskStartScheduler+0xa8>)
 8005286:	f7ff fe21 	bl	8004ecc <xTaskCreateStatic>
 800528a:	4602      	mov	r2, r0
 800528c:	4b1c      	ldr	r3, [pc, #112]	; (8005300 <vTaskStartScheduler+0xac>)
 800528e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <vTaskStartScheduler+0xac>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005298:	2301      	movs	r3, #1
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	e001      	b.n	80052a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d115      	bne.n	80052d4 <vTaskStartScheduler+0x80>
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	613b      	str	r3, [r7, #16]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052ba:	4b12      	ldr	r3, [pc, #72]	; (8005304 <vTaskStartScheduler+0xb0>)
 80052bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052c2:	4b11      	ldr	r3, [pc, #68]	; (8005308 <vTaskStartScheduler+0xb4>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052c8:	4b10      	ldr	r3, [pc, #64]	; (800530c <vTaskStartScheduler+0xb8>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052ce:	f7fe ffdf 	bl	8004290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052d2:	e00d      	b.n	80052f0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052da:	d109      	bne.n	80052f0 <vTaskStartScheduler+0x9c>
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e7fe      	b.n	80052ee <vTaskStartScheduler+0x9a>
}
 80052f0:	bf00      	nop
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	08005d40 	.word	0x08005d40
 80052fc:	08005899 	.word	0x08005899
 8005300:	20000f84 	.word	0x20000f84
 8005304:	20000f80 	.word	0x20000f80
 8005308:	20000f6c 	.word	0x20000f6c
 800530c:	20000f64 	.word	0x20000f64

08005310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005314:	4b04      	ldr	r3, [pc, #16]	; (8005328 <vTaskSuspendAll+0x18>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3301      	adds	r3, #1
 800531a:	4a03      	ldr	r2, [pc, #12]	; (8005328 <vTaskSuspendAll+0x18>)
 800531c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800531e:	bf00      	nop
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	20000f88 	.word	0x20000f88

0800532c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005336:	2300      	movs	r3, #0
 8005338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800533a:	4b41      	ldr	r3, [pc, #260]	; (8005440 <xTaskResumeAll+0x114>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d109      	bne.n	8005356 <xTaskResumeAll+0x2a>
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	e7fe      	b.n	8005354 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005356:	f7ff f839 	bl	80043cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800535a:	4b39      	ldr	r3, [pc, #228]	; (8005440 <xTaskResumeAll+0x114>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3b01      	subs	r3, #1
 8005360:	4a37      	ldr	r2, [pc, #220]	; (8005440 <xTaskResumeAll+0x114>)
 8005362:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005364:	4b36      	ldr	r3, [pc, #216]	; (8005440 <xTaskResumeAll+0x114>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d161      	bne.n	8005430 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800536c:	4b35      	ldr	r3, [pc, #212]	; (8005444 <xTaskResumeAll+0x118>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d05d      	beq.n	8005430 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005374:	e02e      	b.n	80053d4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005376:	4b34      	ldr	r3, [pc, #208]	; (8005448 <xTaskResumeAll+0x11c>)
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3318      	adds	r3, #24
 8005382:	4618      	mov	r0, r3
 8005384:	f7fe fed0 	bl	8004128 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3304      	adds	r3, #4
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe fecb 	bl	8004128 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	2201      	movs	r2, #1
 8005398:	409a      	lsls	r2, r3
 800539a:	4b2c      	ldr	r3, [pc, #176]	; (800544c <xTaskResumeAll+0x120>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4313      	orrs	r3, r2
 80053a0:	4a2a      	ldr	r2, [pc, #168]	; (800544c <xTaskResumeAll+0x120>)
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4a27      	ldr	r2, [pc, #156]	; (8005450 <xTaskResumeAll+0x124>)
 80053b2:	441a      	add	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f7fe fe57 	bl	800406e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c4:	4b23      	ldr	r3, [pc, #140]	; (8005454 <xTaskResumeAll+0x128>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d302      	bcc.n	80053d4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80053ce:	4b22      	ldr	r3, [pc, #136]	; (8005458 <xTaskResumeAll+0x12c>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053d4:	4b1c      	ldr	r3, [pc, #112]	; (8005448 <xTaskResumeAll+0x11c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1cc      	bne.n	8005376 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053e2:	f000 fb0b 	bl	80059fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053e6:	4b1d      	ldr	r3, [pc, #116]	; (800545c <xTaskResumeAll+0x130>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d010      	beq.n	8005414 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053f2:	f000 f837 	bl	8005464 <xTaskIncrementTick>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80053fc:	4b16      	ldr	r3, [pc, #88]	; (8005458 <xTaskResumeAll+0x12c>)
 80053fe:	2201      	movs	r2, #1
 8005400:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3b01      	subs	r3, #1
 8005406:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f1      	bne.n	80053f2 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 800540e:	4b13      	ldr	r3, [pc, #76]	; (800545c <xTaskResumeAll+0x130>)
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005414:	4b10      	ldr	r3, [pc, #64]	; (8005458 <xTaskResumeAll+0x12c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d009      	beq.n	8005430 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800541c:	2301      	movs	r3, #1
 800541e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005420:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <xTaskResumeAll+0x134>)
 8005422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005430:	f7fe fffa 	bl	8004428 <vPortExitCritical>

	return xAlreadyYielded;
 8005434:	68bb      	ldr	r3, [r7, #8]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20000f88 	.word	0x20000f88
 8005444:	20000f60 	.word	0x20000f60
 8005448:	20000f20 	.word	0x20000f20
 800544c:	20000f68 	.word	0x20000f68
 8005450:	20000e64 	.word	0x20000e64
 8005454:	20000e60 	.word	0x20000e60
 8005458:	20000f74 	.word	0x20000f74
 800545c:	20000f70 	.word	0x20000f70
 8005460:	e000ed04 	.word	0xe000ed04

08005464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546e:	4b4e      	ldr	r3, [pc, #312]	; (80055a8 <xTaskIncrementTick+0x144>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f040 808d 	bne.w	8005592 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005478:	4b4c      	ldr	r3, [pc, #304]	; (80055ac <xTaskIncrementTick+0x148>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005480:	4a4a      	ldr	r2, [pc, #296]	; (80055ac <xTaskIncrementTick+0x148>)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d11f      	bne.n	80054cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800548c:	4b48      	ldr	r3, [pc, #288]	; (80055b0 <xTaskIncrementTick+0x14c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <xTaskIncrementTick+0x46>
 8005496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	e7fe      	b.n	80054a8 <xTaskIncrementTick+0x44>
 80054aa:	4b41      	ldr	r3, [pc, #260]	; (80055b0 <xTaskIncrementTick+0x14c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	4b40      	ldr	r3, [pc, #256]	; (80055b4 <xTaskIncrementTick+0x150>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a3e      	ldr	r2, [pc, #248]	; (80055b0 <xTaskIncrementTick+0x14c>)
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	4a3e      	ldr	r2, [pc, #248]	; (80055b4 <xTaskIncrementTick+0x150>)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	4b3e      	ldr	r3, [pc, #248]	; (80055b8 <xTaskIncrementTick+0x154>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3301      	adds	r3, #1
 80054c4:	4a3c      	ldr	r2, [pc, #240]	; (80055b8 <xTaskIncrementTick+0x154>)
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	f000 fa98 	bl	80059fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054cc:	4b3b      	ldr	r3, [pc, #236]	; (80055bc <xTaskIncrementTick+0x158>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d348      	bcc.n	8005568 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054d6:	4b36      	ldr	r3, [pc, #216]	; (80055b0 <xTaskIncrementTick+0x14c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d104      	bne.n	80054ea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e0:	4b36      	ldr	r3, [pc, #216]	; (80055bc <xTaskIncrementTick+0x158>)
 80054e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054e6:	601a      	str	r2, [r3, #0]
					break;
 80054e8:	e03e      	b.n	8005568 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ea:	4b31      	ldr	r3, [pc, #196]	; (80055b0 <xTaskIncrementTick+0x14c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d203      	bcs.n	800550a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005502:	4a2e      	ldr	r2, [pc, #184]	; (80055bc <xTaskIncrementTick+0x158>)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005508:	e02e      	b.n	8005568 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	3304      	adds	r3, #4
 800550e:	4618      	mov	r0, r3
 8005510:	f7fe fe0a 	bl	8004128 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	3318      	adds	r3, #24
 8005520:	4618      	mov	r0, r3
 8005522:	f7fe fe01 	bl	8004128 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	2201      	movs	r2, #1
 800552c:	409a      	lsls	r2, r3
 800552e:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <xTaskIncrementTick+0x15c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4313      	orrs	r3, r2
 8005534:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <xTaskIncrementTick+0x15c>)
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4a1f      	ldr	r2, [pc, #124]	; (80055c4 <xTaskIncrementTick+0x160>)
 8005546:	441a      	add	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	3304      	adds	r3, #4
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f7fe fd8d 	bl	800406e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005558:	4b1b      	ldr	r3, [pc, #108]	; (80055c8 <xTaskIncrementTick+0x164>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	429a      	cmp	r2, r3
 8005560:	d3b9      	bcc.n	80054d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005562:	2301      	movs	r3, #1
 8005564:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005566:	e7b6      	b.n	80054d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005568:	4b17      	ldr	r3, [pc, #92]	; (80055c8 <xTaskIncrementTick+0x164>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556e:	4915      	ldr	r1, [pc, #84]	; (80055c4 <xTaskIncrementTick+0x160>)
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d901      	bls.n	8005584 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8005580:	2301      	movs	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005584:	4b11      	ldr	r3, [pc, #68]	; (80055cc <xTaskIncrementTick+0x168>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800558c:	2301      	movs	r3, #1
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	e004      	b.n	800559c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005592:	4b0f      	ldr	r3, [pc, #60]	; (80055d0 <xTaskIncrementTick+0x16c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3301      	adds	r3, #1
 8005598:	4a0d      	ldr	r2, [pc, #52]	; (80055d0 <xTaskIncrementTick+0x16c>)
 800559a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800559c:	697b      	ldr	r3, [r7, #20]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000f88 	.word	0x20000f88
 80055ac:	20000f64 	.word	0x20000f64
 80055b0:	20000f18 	.word	0x20000f18
 80055b4:	20000f1c 	.word	0x20000f1c
 80055b8:	20000f78 	.word	0x20000f78
 80055bc:	20000f80 	.word	0x20000f80
 80055c0:	20000f68 	.word	0x20000f68
 80055c4:	20000e64 	.word	0x20000e64
 80055c8:	20000e60 	.word	0x20000e60
 80055cc:	20000f74 	.word	0x20000f74
 80055d0:	20000f70 	.word	0x20000f70

080055d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055da:	4b26      	ldr	r3, [pc, #152]	; (8005674 <vTaskSwitchContext+0xa0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055e2:	4b25      	ldr	r3, [pc, #148]	; (8005678 <vTaskSwitchContext+0xa4>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055e8:	e03e      	b.n	8005668 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80055ea:	4b23      	ldr	r3, [pc, #140]	; (8005678 <vTaskSwitchContext+0xa4>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f0:	4b22      	ldr	r3, [pc, #136]	; (800567c <vTaskSwitchContext+0xa8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	fab3 f383 	clz	r3, r3
 80055fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80055fe:	7afb      	ldrb	r3, [r7, #11]
 8005600:	f1c3 031f 	rsb	r3, r3, #31
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	491e      	ldr	r1, [pc, #120]	; (8005680 <vTaskSwitchContext+0xac>)
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <vTaskSwitchContext+0x5a>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	607b      	str	r3, [r7, #4]
 800562c:	e7fe      	b.n	800562c <vTaskSwitchContext+0x58>
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4a11      	ldr	r2, [pc, #68]	; (8005680 <vTaskSwitchContext+0xac>)
 800563a:	4413      	add	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	3308      	adds	r3, #8
 8005650:	429a      	cmp	r2, r3
 8005652:	d104      	bne.n	800565e <vTaskSwitchContext+0x8a>
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4a07      	ldr	r2, [pc, #28]	; (8005684 <vTaskSwitchContext+0xb0>)
 8005666:	6013      	str	r3, [r2, #0]
}
 8005668:	bf00      	nop
 800566a:	371c      	adds	r7, #28
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	20000f88 	.word	0x20000f88
 8005678:	20000f74 	.word	0x20000f74
 800567c:	20000f68 	.word	0x20000f68
 8005680:	20000e64 	.word	0x20000e64
 8005684:	20000e60 	.word	0x20000e60

08005688 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d109      	bne.n	80056ac <vTaskPlaceOnEventList+0x24>
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	e7fe      	b.n	80056aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056ac:	4b07      	ldr	r3, [pc, #28]	; (80056cc <vTaskPlaceOnEventList+0x44>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3318      	adds	r3, #24
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7fe fcfe 	bl	80040b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056ba:	2101      	movs	r1, #1
 80056bc:	6838      	ldr	r0, [r7, #0]
 80056be:	f000 fa5f 	bl	8005b80 <prvAddCurrentTaskToDelayedList>
}
 80056c2:	bf00      	nop
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000e60 	.word	0x20000e60

080056d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <xTaskRemoveFromEventList+0x2a>
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	e7fe      	b.n	80056f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	3318      	adds	r3, #24
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe fd12 	bl	8004128 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005704:	4b1d      	ldr	r3, [pc, #116]	; (800577c <xTaskRemoveFromEventList+0xac>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d11c      	bne.n	8005746 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	3304      	adds	r3, #4
 8005710:	4618      	mov	r0, r3
 8005712:	f7fe fd09 	bl	8004128 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571a:	2201      	movs	r2, #1
 800571c:	409a      	lsls	r2, r3
 800571e:	4b18      	ldr	r3, [pc, #96]	; (8005780 <xTaskRemoveFromEventList+0xb0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4313      	orrs	r3, r2
 8005724:	4a16      	ldr	r2, [pc, #88]	; (8005780 <xTaskRemoveFromEventList+0xb0>)
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4a13      	ldr	r2, [pc, #76]	; (8005784 <xTaskRemoveFromEventList+0xb4>)
 8005736:	441a      	add	r2, r3
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	3304      	adds	r3, #4
 800573c:	4619      	mov	r1, r3
 800573e:	4610      	mov	r0, r2
 8005740:	f7fe fc95 	bl	800406e <vListInsertEnd>
 8005744:	e005      	b.n	8005752 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	3318      	adds	r3, #24
 800574a:	4619      	mov	r1, r3
 800574c:	480e      	ldr	r0, [pc, #56]	; (8005788 <xTaskRemoveFromEventList+0xb8>)
 800574e:	f7fe fc8e 	bl	800406e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005756:	4b0d      	ldr	r3, [pc, #52]	; (800578c <xTaskRemoveFromEventList+0xbc>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	429a      	cmp	r2, r3
 800575e:	d905      	bls.n	800576c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005760:	2301      	movs	r3, #1
 8005762:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005764:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <xTaskRemoveFromEventList+0xc0>)
 8005766:	2201      	movs	r2, #1
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	e001      	b.n	8005770 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005770:	697b      	ldr	r3, [r7, #20]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000f88 	.word	0x20000f88
 8005780:	20000f68 	.word	0x20000f68
 8005784:	20000e64 	.word	0x20000e64
 8005788:	20000f20 	.word	0x20000f20
 800578c:	20000e60 	.word	0x20000e60
 8005790:	20000f74 	.word	0x20000f74

08005794 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <vTaskInternalSetTimeOutState+0x24>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <vTaskInternalSetTimeOutState+0x28>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	605a      	str	r2, [r3, #4]
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	20000f78 	.word	0x20000f78
 80057bc:	20000f64 	.word	0x20000f64

080057c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <xTaskCheckForTimeOut+0x24>
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	e7fe      	b.n	80057e2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d109      	bne.n	80057fe <xTaskCheckForTimeOut+0x3e>
 80057ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	e7fe      	b.n	80057fc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80057fe:	f7fe fde5 	bl	80043cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005802:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <xTaskCheckForTimeOut+0xb8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800581a:	d102      	bne.n	8005822 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800581c:	2300      	movs	r3, #0
 800581e:	61fb      	str	r3, [r7, #28]
 8005820:	e023      	b.n	800586a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b15      	ldr	r3, [pc, #84]	; (800587c <xTaskCheckForTimeOut+0xbc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d007      	beq.n	800583e <xTaskCheckForTimeOut+0x7e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	429a      	cmp	r2, r3
 8005836:	d802      	bhi.n	800583e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005838:	2301      	movs	r3, #1
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	e015      	b.n	800586a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	429a      	cmp	r2, r3
 8005846:	d90b      	bls.n	8005860 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	1ad2      	subs	r2, r2, r3
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff ff9d 	bl	8005794 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800585a:	2300      	movs	r3, #0
 800585c:	61fb      	str	r3, [r7, #28]
 800585e:	e004      	b.n	800586a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005866:	2301      	movs	r3, #1
 8005868:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800586a:	f7fe fddd 	bl	8004428 <vPortExitCritical>

	return xReturn;
 800586e:	69fb      	ldr	r3, [r7, #28]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	20000f64 	.word	0x20000f64
 800587c:	20000f78 	.word	0x20000f78

08005880 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005884:	4b03      	ldr	r3, [pc, #12]	; (8005894 <vTaskMissedYield+0x14>)
 8005886:	2201      	movs	r2, #1
 8005888:	601a      	str	r2, [r3, #0]
}
 800588a:	bf00      	nop
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	20000f74 	.word	0x20000f74

08005898 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058a0:	f000 f852 	bl	8005948 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058a4:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <prvIdleTask+0x28>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d9f9      	bls.n	80058a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80058ac:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <prvIdleTask+0x2c>)
 80058ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058bc:	e7f0      	b.n	80058a0 <prvIdleTask+0x8>
 80058be:	bf00      	nop
 80058c0:	20000e64 	.word	0x20000e64
 80058c4:	e000ed04 	.word	0xe000ed04

080058c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058ce:	2300      	movs	r3, #0
 80058d0:	607b      	str	r3, [r7, #4]
 80058d2:	e00c      	b.n	80058ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4a12      	ldr	r2, [pc, #72]	; (8005928 <prvInitialiseTaskLists+0x60>)
 80058e0:	4413      	add	r3, r2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fe fb96 	bl	8004014 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3301      	adds	r3, #1
 80058ec:	607b      	str	r3, [r7, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b06      	cmp	r3, #6
 80058f2:	d9ef      	bls.n	80058d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058f4:	480d      	ldr	r0, [pc, #52]	; (800592c <prvInitialiseTaskLists+0x64>)
 80058f6:	f7fe fb8d 	bl	8004014 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058fa:	480d      	ldr	r0, [pc, #52]	; (8005930 <prvInitialiseTaskLists+0x68>)
 80058fc:	f7fe fb8a 	bl	8004014 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005900:	480c      	ldr	r0, [pc, #48]	; (8005934 <prvInitialiseTaskLists+0x6c>)
 8005902:	f7fe fb87 	bl	8004014 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005906:	480c      	ldr	r0, [pc, #48]	; (8005938 <prvInitialiseTaskLists+0x70>)
 8005908:	f7fe fb84 	bl	8004014 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800590c:	480b      	ldr	r0, [pc, #44]	; (800593c <prvInitialiseTaskLists+0x74>)
 800590e:	f7fe fb81 	bl	8004014 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005912:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <prvInitialiseTaskLists+0x78>)
 8005914:	4a05      	ldr	r2, [pc, #20]	; (800592c <prvInitialiseTaskLists+0x64>)
 8005916:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005918:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <prvInitialiseTaskLists+0x7c>)
 800591a:	4a05      	ldr	r2, [pc, #20]	; (8005930 <prvInitialiseTaskLists+0x68>)
 800591c:	601a      	str	r2, [r3, #0]
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000e64 	.word	0x20000e64
 800592c:	20000ef0 	.word	0x20000ef0
 8005930:	20000f04 	.word	0x20000f04
 8005934:	20000f20 	.word	0x20000f20
 8005938:	20000f34 	.word	0x20000f34
 800593c:	20000f4c 	.word	0x20000f4c
 8005940:	20000f18 	.word	0x20000f18
 8005944:	20000f1c 	.word	0x20000f1c

08005948 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800594e:	e019      	b.n	8005984 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005950:	f7fe fd3c 	bl	80043cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <prvCheckTasksWaitingTermination+0x4c>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3304      	adds	r3, #4
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe fbe1 	bl	8004128 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <prvCheckTasksWaitingTermination+0x50>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3b01      	subs	r3, #1
 800596c:	4a0a      	ldr	r2, [pc, #40]	; (8005998 <prvCheckTasksWaitingTermination+0x50>)
 800596e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005970:	4b0a      	ldr	r3, [pc, #40]	; (800599c <prvCheckTasksWaitingTermination+0x54>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3b01      	subs	r3, #1
 8005976:	4a09      	ldr	r2, [pc, #36]	; (800599c <prvCheckTasksWaitingTermination+0x54>)
 8005978:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800597a:	f7fe fd55 	bl	8004428 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f80e 	bl	80059a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <prvCheckTasksWaitingTermination+0x54>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e1      	bne.n	8005950 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800598c:	bf00      	nop
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000f34 	.word	0x20000f34
 8005998:	20000f60 	.word	0x20000f60
 800599c:	20000f48 	.word	0x20000f48

080059a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d108      	bne.n	80059c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe feac 	bl	8004714 <vPortFree>
				vPortFree( pxTCB );
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7fe fea9 	bl	8004714 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059c2:	e017      	b.n	80059f4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d103      	bne.n	80059d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fe fea0 	bl	8004714 <vPortFree>
	}
 80059d4:	e00e      	b.n	80059f4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d009      	beq.n	80059f4 <prvDeleteTCB+0x54>
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	e7fe      	b.n	80059f2 <prvDeleteTCB+0x52>
	}
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a02:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <prvResetNextTaskUnblockTime+0x38>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d104      	bne.n	8005a16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <prvResetNextTaskUnblockTime+0x3c>)
 8005a0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a14:	e008      	b.n	8005a28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a16:	4b07      	ldr	r3, [pc, #28]	; (8005a34 <prvResetNextTaskUnblockTime+0x38>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	4a04      	ldr	r2, [pc, #16]	; (8005a38 <prvResetNextTaskUnblockTime+0x3c>)
 8005a26:	6013      	str	r3, [r2, #0]
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	20000f18 	.word	0x20000f18
 8005a38:	20000f80 	.word	0x20000f80

08005a3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a42:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <xTaskGetSchedulerState+0x34>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d102      	bne.n	8005a50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	607b      	str	r3, [r7, #4]
 8005a4e:	e008      	b.n	8005a62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a50:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <xTaskGetSchedulerState+0x38>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d102      	bne.n	8005a5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	607b      	str	r3, [r7, #4]
 8005a5c:	e001      	b.n	8005a62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a62:	687b      	ldr	r3, [r7, #4]
	}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	20000f6c 	.word	0x20000f6c
 8005a74:	20000f88 	.word	0x20000f88

08005a78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d06c      	beq.n	8005b68 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a8e:	4b39      	ldr	r3, [pc, #228]	; (8005b74 <xTaskPriorityDisinherit+0xfc>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d009      	beq.n	8005aac <xTaskPriorityDisinherit+0x34>
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e7fe      	b.n	8005aaa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d109      	bne.n	8005ac8 <xTaskPriorityDisinherit+0x50>
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	e7fe      	b.n	8005ac6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005acc:	1e5a      	subs	r2, r3, #1
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d044      	beq.n	8005b68 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d140      	bne.n	8005b68 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fe fb1c 	bl	8004128 <uxListRemove>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d115      	bne.n	8005b22 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afa:	491f      	ldr	r1, [pc, #124]	; (8005b78 <xTaskPriorityDisinherit+0x100>)
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <xTaskPriorityDisinherit+0xaa>
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	2201      	movs	r2, #1
 8005b12:	fa02 f303 	lsl.w	r3, r2, r3
 8005b16:	43da      	mvns	r2, r3
 8005b18:	4b18      	ldr	r3, [pc, #96]	; (8005b7c <xTaskPriorityDisinherit+0x104>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	4a17      	ldr	r2, [pc, #92]	; (8005b7c <xTaskPriorityDisinherit+0x104>)
 8005b20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	f1c3 0207 	rsb	r2, r3, #7
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	409a      	lsls	r2, r3
 8005b3e:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <xTaskPriorityDisinherit+0x104>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	4a0d      	ldr	r2, [pc, #52]	; (8005b7c <xTaskPriorityDisinherit+0x104>)
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4a08      	ldr	r2, [pc, #32]	; (8005b78 <xTaskPriorityDisinherit+0x100>)
 8005b56:	441a      	add	r2, r3
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f7fe fa85 	bl	800406e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b64:	2301      	movs	r3, #1
 8005b66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b68:	697b      	ldr	r3, [r7, #20]
	}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000e60 	.word	0x20000e60
 8005b78:	20000e64 	.word	0x20000e64
 8005b7c:	20000f68 	.word	0x20000f68

08005b80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b8a:	4b29      	ldr	r3, [pc, #164]	; (8005c30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b90:	4b28      	ldr	r3, [pc, #160]	; (8005c34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3304      	adds	r3, #4
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fac6 	bl	8004128 <uxListRemove>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10b      	bne.n	8005bba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005ba2:	4b24      	ldr	r3, [pc, #144]	; (8005c34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba8:	2201      	movs	r2, #1
 8005baa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bae:	43da      	mvns	r2, r3
 8005bb0:	4b21      	ldr	r3, [pc, #132]	; (8005c38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	4a20      	ldr	r2, [pc, #128]	; (8005c38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bb8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bc0:	d10a      	bne.n	8005bd8 <prvAddCurrentTaskToDelayedList+0x58>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bc8:	4b1a      	ldr	r3, [pc, #104]	; (8005c34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	481a      	ldr	r0, [pc, #104]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005bd2:	f7fe fa4c 	bl	800406e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bd6:	e026      	b.n	8005c26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4413      	add	r3, r2
 8005bde:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005be0:	4b14      	ldr	r3, [pc, #80]	; (8005c34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d209      	bcs.n	8005c04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bf0:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f7fe fa5a 	bl	80040b6 <vListInsert>
}
 8005c02:	e010      	b.n	8005c26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c04:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4b0a      	ldr	r3, [pc, #40]	; (8005c34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4610      	mov	r0, r2
 8005c12:	f7fe fa50 	bl	80040b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d202      	bcs.n	8005c26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c20:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	6013      	str	r3, [r2, #0]
}
 8005c26:	bf00      	nop
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000f64 	.word	0x20000f64
 8005c34:	20000e60 	.word	0x20000e60
 8005c38:	20000f68 	.word	0x20000f68
 8005c3c:	20000f4c 	.word	0x20000f4c
 8005c40:	20000f1c 	.word	0x20000f1c
 8005c44:	20000f18 	.word	0x20000f18
 8005c48:	20000f80 	.word	0x20000f80

08005c4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005c50:	f7fa ff14 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005c54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005c56:	e003      	b.n	8005c60 <LoopCopyDataInit>

08005c58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005c58:	4b0b      	ldr	r3, [pc, #44]	; (8005c88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005c5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005c5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005c5e:	3104      	adds	r1, #4

08005c60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005c60:	480a      	ldr	r0, [pc, #40]	; (8005c8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8005c62:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005c64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005c66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005c68:	d3f6      	bcc.n	8005c58 <CopyDataInit>
	ldr	r2, =_sbss
 8005c6a:	4a0a      	ldr	r2, [pc, #40]	; (8005c94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005c6c:	e002      	b.n	8005c74 <LoopFillZerobss>

08005c6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005c6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005c70:	f842 3b04 	str.w	r3, [r2], #4

08005c74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005c74:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <LoopForever+0x16>)
	cmp	r2, r3
 8005c76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005c78:	d3f9      	bcc.n	8005c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005c7a:	f000 f811 	bl	8005ca0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005c7e:	f7fa fc49 	bl	8000514 <main>

08005c82 <LoopForever>:

LoopForever:
    b LoopForever
 8005c82:	e7fe      	b.n	8005c82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005c84:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005c88:	08005da0 	.word	0x08005da0
	ldr	r0, =_sdata
 8005c8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005c90:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8005c94:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8005c98:	20001068 	.word	0x20001068

08005c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005c9c:	e7fe      	b.n	8005c9c <ADC1_2_IRQHandler>
	...

08005ca0 <__libc_init_array>:
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	4e0d      	ldr	r6, [pc, #52]	; (8005cd8 <__libc_init_array+0x38>)
 8005ca4:	4c0d      	ldr	r4, [pc, #52]	; (8005cdc <__libc_init_array+0x3c>)
 8005ca6:	1ba4      	subs	r4, r4, r6
 8005ca8:	10a4      	asrs	r4, r4, #2
 8005caa:	2500      	movs	r5, #0
 8005cac:	42a5      	cmp	r5, r4
 8005cae:	d109      	bne.n	8005cc4 <__libc_init_array+0x24>
 8005cb0:	4e0b      	ldr	r6, [pc, #44]	; (8005ce0 <__libc_init_array+0x40>)
 8005cb2:	4c0c      	ldr	r4, [pc, #48]	; (8005ce4 <__libc_init_array+0x44>)
 8005cb4:	f000 f82c 	bl	8005d10 <_init>
 8005cb8:	1ba4      	subs	r4, r4, r6
 8005cba:	10a4      	asrs	r4, r4, #2
 8005cbc:	2500      	movs	r5, #0
 8005cbe:	42a5      	cmp	r5, r4
 8005cc0:	d105      	bne.n	8005cce <__libc_init_array+0x2e>
 8005cc2:	bd70      	pop	{r4, r5, r6, pc}
 8005cc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cc8:	4798      	blx	r3
 8005cca:	3501      	adds	r5, #1
 8005ccc:	e7ee      	b.n	8005cac <__libc_init_array+0xc>
 8005cce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cd2:	4798      	blx	r3
 8005cd4:	3501      	adds	r5, #1
 8005cd6:	e7f2      	b.n	8005cbe <__libc_init_array+0x1e>
 8005cd8:	08005d98 	.word	0x08005d98
 8005cdc:	08005d98 	.word	0x08005d98
 8005ce0:	08005d98 	.word	0x08005d98
 8005ce4:	08005d9c 	.word	0x08005d9c

08005ce8 <memcpy>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	1e43      	subs	r3, r0, #1
 8005cec:	440a      	add	r2, r1
 8005cee:	4291      	cmp	r1, r2
 8005cf0:	d100      	bne.n	8005cf4 <memcpy+0xc>
 8005cf2:	bd10      	pop	{r4, pc}
 8005cf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cfc:	e7f7      	b.n	8005cee <memcpy+0x6>

08005cfe <memset>:
 8005cfe:	4402      	add	r2, r0
 8005d00:	4603      	mov	r3, r0
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d100      	bne.n	8005d08 <memset+0xa>
 8005d06:	4770      	bx	lr
 8005d08:	f803 1b01 	strb.w	r1, [r3], #1
 8005d0c:	e7f9      	b.n	8005d02 <memset+0x4>
	...

08005d10 <_init>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	bf00      	nop
 8005d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d16:	bc08      	pop	{r3}
 8005d18:	469e      	mov	lr, r3
 8005d1a:	4770      	bx	lr

08005d1c <_fini>:
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1e:	bf00      	nop
 8005d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d22:	bc08      	pop	{r3}
 8005d24:	469e      	mov	lr, r3
 8005d26:	4770      	bx	lr
