
22222.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a168  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800a2f8  0800a2f8  0001a2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a588  0800a588  0001a588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a590  0800a590  0001a590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a594  0800a594  0001a594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800a598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d0c  20000074  0800a60c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001d80  0800a60c  00021d80  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b3b7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000033e9  00000000  00000000  0003b45b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001840  00000000  00000000  0003e848  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000016e8  00000000  00000000  00040088  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000be20  00000000  00000000  00041770  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000807a  00000000  00000000  0004d590  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005560a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006e0c  00000000  00000000  00055688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2e0 	.word	0x0800a2e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800a2e0 	.word	0x0800a2e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2uiz>:
 8000b74:	004a      	lsls	r2, r1, #1
 8000b76:	d211      	bcs.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d211      	bcs.n	8000ba2 <__aeabi_d2uiz+0x2e>
 8000b7e:	d50d      	bpl.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d40e      	bmi.n	8000ba8 <__aeabi_d2uiz+0x34>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_d2uiz+0x3a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_uldivmod>:
 8000c54:	b953      	cbnz	r3, 8000c6c <__aeabi_uldivmod+0x18>
 8000c56:	b94a      	cbnz	r2, 8000c6c <__aeabi_uldivmod+0x18>
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	2800      	cmpeq	r0, #0
 8000c5e:	bf1c      	itt	ne
 8000c60:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c68:	f000 b97a 	b.w	8000f60 <__aeabi_idiv0>
 8000c6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c74:	f000 f806 	bl	8000c84 <__udivmoddi4>
 8000c78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c80:	b004      	add	sp, #16
 8000c82:	4770      	bx	lr

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	468c      	mov	ip, r1
 8000c8a:	460d      	mov	r5, r1
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	9e08      	ldr	r6, [sp, #32]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d151      	bne.n	8000d38 <__udivmoddi4+0xb4>
 8000c94:	428a      	cmp	r2, r1
 8000c96:	4617      	mov	r7, r2
 8000c98:	d96d      	bls.n	8000d76 <__udivmoddi4+0xf2>
 8000c9a:	fab2 fe82 	clz	lr, r2
 8000c9e:	f1be 0f00 	cmp.w	lr, #0
 8000ca2:	d00b      	beq.n	8000cbc <__udivmoddi4+0x38>
 8000ca4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ca8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cac:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cb0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cb4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cb8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cbc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cc0:	0c25      	lsrs	r5, r4, #16
 8000cc2:	fbbc f8fa 	udiv	r8, ip, sl
 8000cc6:	fa1f f987 	uxth.w	r9, r7
 8000cca:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cce:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cd2:	fb08 f309 	mul.w	r3, r8, r9
 8000cd6:	42ab      	cmp	r3, r5
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x6c>
 8000cda:	19ed      	adds	r5, r5, r7
 8000cdc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000ce0:	f080 8123 	bcs.w	8000f2a <__udivmoddi4+0x2a6>
 8000ce4:	42ab      	cmp	r3, r5
 8000ce6:	f240 8120 	bls.w	8000f2a <__udivmoddi4+0x2a6>
 8000cea:	f1a8 0802 	sub.w	r8, r8, #2
 8000cee:	443d      	add	r5, r7
 8000cf0:	1aed      	subs	r5, r5, r3
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000cf8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000cfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d00:	fb00 f909 	mul.w	r9, r0, r9
 8000d04:	45a1      	cmp	r9, r4
 8000d06:	d909      	bls.n	8000d1c <__udivmoddi4+0x98>
 8000d08:	19e4      	adds	r4, r4, r7
 8000d0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0e:	f080 810a 	bcs.w	8000f26 <__udivmoddi4+0x2a2>
 8000d12:	45a1      	cmp	r9, r4
 8000d14:	f240 8107 	bls.w	8000f26 <__udivmoddi4+0x2a2>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	443c      	add	r4, r7
 8000d1c:	eba4 0409 	sub.w	r4, r4, r9
 8000d20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d24:	2100      	movs	r1, #0
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d061      	beq.n	8000dee <__udivmoddi4+0x16a>
 8000d2a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d2e:	2300      	movs	r3, #0
 8000d30:	6034      	str	r4, [r6, #0]
 8000d32:	6073      	str	r3, [r6, #4]
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xc8>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d054      	beq.n	8000dea <__udivmoddi4+0x166>
 8000d40:	2100      	movs	r1, #0
 8000d42:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d46:	4608      	mov	r0, r1
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	fab3 f183 	clz	r1, r3
 8000d50:	2900      	cmp	r1, #0
 8000d52:	f040 808e 	bne.w	8000e72 <__udivmoddi4+0x1ee>
 8000d56:	42ab      	cmp	r3, r5
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xdc>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 80fa 	bhi.w	8000f54 <__udivmoddi4+0x2d0>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb65 0503 	sbc.w	r5, r5, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	46ac      	mov	ip, r5
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d03f      	beq.n	8000dee <__udivmoddi4+0x16a>
 8000d6e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	b912      	cbnz	r2, 8000d7e <__udivmoddi4+0xfa>
 8000d78:	2701      	movs	r7, #1
 8000d7a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d7e:	fab7 fe87 	clz	lr, r7
 8000d82:	f1be 0f00 	cmp.w	lr, #0
 8000d86:	d134      	bne.n	8000df2 <__udivmoddi4+0x16e>
 8000d88:	1beb      	subs	r3, r5, r7
 8000d8a:	0c3a      	lsrs	r2, r7, #16
 8000d8c:	fa1f fc87 	uxth.w	ip, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d96:	0c25      	lsrs	r5, r4, #16
 8000d98:	fb02 3318 	mls	r3, r2, r8, r3
 8000d9c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000da0:	fb0c f308 	mul.w	r3, ip, r8
 8000da4:	42ab      	cmp	r3, r5
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0x134>
 8000da8:	19ed      	adds	r5, r5, r7
 8000daa:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x132>
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	f200 80d1 	bhi.w	8000f58 <__udivmoddi4+0x2d4>
 8000db6:	4680      	mov	r8, r0
 8000db8:	1aed      	subs	r5, r5, r3
 8000dba:	b2a3      	uxth	r3, r4
 8000dbc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dc0:	fb02 5510 	mls	r5, r2, r0, r5
 8000dc4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dc8:	fb0c fc00 	mul.w	ip, ip, r0
 8000dcc:	45a4      	cmp	ip, r4
 8000dce:	d907      	bls.n	8000de0 <__udivmoddi4+0x15c>
 8000dd0:	19e4      	adds	r4, r4, r7
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x15a>
 8000dd8:	45a4      	cmp	ip, r4
 8000dda:	f200 80b8 	bhi.w	8000f4e <__udivmoddi4+0x2ca>
 8000dde:	4618      	mov	r0, r3
 8000de0:	eba4 040c 	sub.w	r4, r4, ip
 8000de4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de8:	e79d      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000dea:	4631      	mov	r1, r6
 8000dec:	4630      	mov	r0, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1ce 0420 	rsb	r4, lr, #32
 8000df6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000dfa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dfe:	fa20 f804 	lsr.w	r8, r0, r4
 8000e02:	0c3a      	lsrs	r2, r7, #16
 8000e04:	fa25 f404 	lsr.w	r4, r5, r4
 8000e08:	ea48 0803 	orr.w	r8, r8, r3
 8000e0c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e10:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e14:	fb02 4411 	mls	r4, r2, r1, r4
 8000e18:	fa1f fc87 	uxth.w	ip, r7
 8000e1c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e20:	fb01 f30c 	mul.w	r3, r1, ip
 8000e24:	42ab      	cmp	r3, r5
 8000e26:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e2a:	d909      	bls.n	8000e40 <__udivmoddi4+0x1bc>
 8000e2c:	19ed      	adds	r5, r5, r7
 8000e2e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000e32:	f080 808a 	bcs.w	8000f4a <__udivmoddi4+0x2c6>
 8000e36:	42ab      	cmp	r3, r5
 8000e38:	f240 8087 	bls.w	8000f4a <__udivmoddi4+0x2c6>
 8000e3c:	3902      	subs	r1, #2
 8000e3e:	443d      	add	r5, r7
 8000e40:	1aeb      	subs	r3, r5, r3
 8000e42:	fa1f f588 	uxth.w	r5, r8
 8000e46:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e4a:	fb02 3310 	mls	r3, r2, r0, r3
 8000e4e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e52:	fb00 f30c 	mul.w	r3, r0, ip
 8000e56:	42ab      	cmp	r3, r5
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1e6>
 8000e5a:	19ed      	adds	r5, r5, r7
 8000e5c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e60:	d26f      	bcs.n	8000f42 <__udivmoddi4+0x2be>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	d96d      	bls.n	8000f42 <__udivmoddi4+0x2be>
 8000e66:	3802      	subs	r0, #2
 8000e68:	443d      	add	r5, r7
 8000e6a:	1aeb      	subs	r3, r5, r3
 8000e6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e70:	e78f      	b.n	8000d92 <__udivmoddi4+0x10e>
 8000e72:	f1c1 0720 	rsb	r7, r1, #32
 8000e76:	fa22 f807 	lsr.w	r8, r2, r7
 8000e7a:	408b      	lsls	r3, r1
 8000e7c:	fa05 f401 	lsl.w	r4, r5, r1
 8000e80:	ea48 0303 	orr.w	r3, r8, r3
 8000e84:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e88:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e8c:	40fd      	lsrs	r5, r7
 8000e8e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e92:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e96:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e9a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e9e:	fa1f f883 	uxth.w	r8, r3
 8000ea2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ea6:	fb09 f408 	mul.w	r4, r9, r8
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x244>
 8000eb6:	18ed      	adds	r5, r5, r3
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ebc:	d243      	bcs.n	8000f46 <__udivmoddi4+0x2c2>
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	d941      	bls.n	8000f46 <__udivmoddi4+0x2c2>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	441d      	add	r5, r3
 8000ec8:	1b2d      	subs	r5, r5, r4
 8000eca:	fa1f fe8e 	uxth.w	lr, lr
 8000ece:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ed2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ed6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45a0      	cmp	r8, r4
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x26e>
 8000ee2:	18e4      	adds	r4, r4, r3
 8000ee4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000ee8:	d229      	bcs.n	8000f3e <__udivmoddi4+0x2ba>
 8000eea:	45a0      	cmp	r8, r4
 8000eec:	d927      	bls.n	8000f3e <__udivmoddi4+0x2ba>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	441c      	add	r4, r3
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba4 0408 	sub.w	r4, r4, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454c      	cmp	r4, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	464d      	mov	r5, r9
 8000f04:	d315      	bcc.n	8000f32 <__udivmoddi4+0x2ae>
 8000f06:	d012      	beq.n	8000f2e <__udivmoddi4+0x2aa>
 8000f08:	b156      	cbz	r6, 8000f20 <__udivmoddi4+0x29c>
 8000f0a:	ebba 030e 	subs.w	r3, sl, lr
 8000f0e:	eb64 0405 	sbc.w	r4, r4, r5
 8000f12:	fa04 f707 	lsl.w	r7, r4, r7
 8000f16:	40cb      	lsrs	r3, r1
 8000f18:	431f      	orrs	r7, r3
 8000f1a:	40cc      	lsrs	r4, r1
 8000f1c:	6037      	str	r7, [r6, #0]
 8000f1e:	6074      	str	r4, [r6, #4]
 8000f20:	2100      	movs	r1, #0
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	4618      	mov	r0, r3
 8000f28:	e6f8      	b.n	8000d1c <__udivmoddi4+0x98>
 8000f2a:	4690      	mov	r8, r2
 8000f2c:	e6e0      	b.n	8000cf0 <__udivmoddi4+0x6c>
 8000f2e:	45c2      	cmp	sl, r8
 8000f30:	d2ea      	bcs.n	8000f08 <__udivmoddi4+0x284>
 8000f32:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f36:	eb69 0503 	sbc.w	r5, r9, r3
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7e4      	b.n	8000f08 <__udivmoddi4+0x284>
 8000f3e:	4628      	mov	r0, r5
 8000f40:	e7d7      	b.n	8000ef2 <__udivmoddi4+0x26e>
 8000f42:	4640      	mov	r0, r8
 8000f44:	e791      	b.n	8000e6a <__udivmoddi4+0x1e6>
 8000f46:	4681      	mov	r9, r0
 8000f48:	e7be      	b.n	8000ec8 <__udivmoddi4+0x244>
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	e778      	b.n	8000e40 <__udivmoddi4+0x1bc>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	e745      	b.n	8000de0 <__udivmoddi4+0x15c>
 8000f54:	4608      	mov	r0, r1
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xe6>
 8000f58:	f1a8 0802 	sub.w	r8, r8, #2
 8000f5c:	443d      	add	r5, r7
 8000f5e:	e72b      	b.n	8000db8 <__udivmoddi4+0x134>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <vApplicationGetIdleTaskMemory+0x30>)
 8000f7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2280      	movs	r2, #128	; 0x80
 8000f80:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000090 	.word	0x20000090
 8000f94:	200000e4 	.word	0x200000e4

08000f98 <Set_LED>:
int ledmode=0;
int ledmode_buffer=0;
int ledmode_color[8][3]={{0,0,0},{255,0,0},{0,255,0},{0,0,255},{255,255,0},{255,0,255},{0,255,255},{255,255,255}};

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	b2d8      	uxtb	r0, r3
 8000faa:	491c      	ldr	r1, [pc, #112]	; (800101c <Set_LED+0x84>)
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][1] = Green;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	b2d8      	uxtb	r0, r3
 8000fbe:	4917      	ldr	r1, [pc, #92]	; (800101c <Set_LED+0x84>)
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4602      	mov	r2, r0
 8000fce:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][2] = Red;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	b2d8      	uxtb	r0, r3
 8000fd4:	4911      	ldr	r1, [pc, #68]	; (800101c <Set_LED+0x84>)
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][3] = Blue;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2d8      	uxtb	r0, r3
 8000fea:	490c      	ldr	r1, [pc, #48]	; (800101c <Set_LED+0x84>)
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3303      	adds	r3, #3
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][4] = 0;
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <Set_LED+0x84>)
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	440b      	add	r3, r1
 8001008:	3304      	adds	r3, #4
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2000104c 	.word	0x2000104c

08001020 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b2d      	cmp	r3, #45	; 0x2d
 800102c:	dd01      	ble.n	8001032 <Set_Brightness+0x12>
 800102e:	232d      	movs	r3, #45	; 0x2d
 8001030:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e082      	b.n	800113e <Set_Brightness+0x11e>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8001038:	4947      	ldr	r1, [pc, #284]	; (8001158 <Set_Brightness+0x138>)
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	440b      	add	r3, r1
 8001044:	7818      	ldrb	r0, [r3, #0]
 8001046:	4945      	ldr	r1, [pc, #276]	; (800115c <Set_Brightness+0x13c>)
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	440b      	add	r3, r1
 8001052:	4602      	mov	r2, r0
 8001054:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<5; j++)
 8001056:	2301      	movs	r3, #1
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	e06a      	b.n	8001132 <Set_Brightness+0x112>
		{
			float angle = 90-brightness;  // in degrees
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106a:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f7ff fa6a 	bl	8000548 <__aeabi_f2d>
 8001074:	a336      	add	r3, pc, #216	; (adr r3, 8001150 <Set_Brightness+0x130>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	f7ff fab9 	bl	80005f0 <__aeabi_dmul>
 800107e:	4603      	mov	r3, r0
 8001080:	460c      	mov	r4, r1
 8001082:	4618      	mov	r0, r3
 8001084:	4621      	mov	r1, r4
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b35      	ldr	r3, [pc, #212]	; (8001160 <Set_Brightness+0x140>)
 800108c:	f7ff fbda 	bl	8000844 <__aeabi_ddiv>
 8001090:	4603      	mov	r3, r0
 8001092:	460c      	mov	r4, r1
 8001094:	4618      	mov	r0, r3
 8001096:	4621      	mov	r1, r4
 8001098:	f7ff fd8c 	bl	8000bb4 <__aeabi_d2f>
 800109c:	4603      	mov	r3, r0
 800109e:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = brightness!=45?LED_Data[i][j]/(tan(angle)):LED_Data[i][j];
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b2d      	cmp	r3, #45	; 0x2d
 80010a4:	d025      	beq.n	80010f2 <Set_Brightness+0xd2>
 80010a6:	492c      	ldr	r1, [pc, #176]	; (8001158 <Set_Brightness+0x138>)
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	18ca      	adds	r2, r1, r3
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa33 	bl	8000524 <__aeabi_i2d>
 80010be:	4604      	mov	r4, r0
 80010c0:	460d      	mov	r5, r1
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f7ff fa40 	bl	8000548 <__aeabi_f2d>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	ec43 2b10 	vmov	d0, r2, r3
 80010d0:	f008 f8ae 	bl	8009230 <tan>
 80010d4:	ec53 2b10 	vmov	r2, r3, d0
 80010d8:	4620      	mov	r0, r4
 80010da:	4629      	mov	r1, r5
 80010dc:	f7ff fbb2 	bl	8000844 <__aeabi_ddiv>
 80010e0:	4603      	mov	r3, r0
 80010e2:	460c      	mov	r4, r1
 80010e4:	4618      	mov	r0, r3
 80010e6:	4621      	mov	r1, r4
 80010e8:	f7ff fd44 	bl	8000b74 <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	e013      	b.n	800111a <Set_Brightness+0xfa>
 80010f2:	4919      	ldr	r1, [pc, #100]	; (8001158 <Set_Brightness+0x138>)
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	18ca      	adds	r2, r1, r3
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa0d 	bl	8000524 <__aeabi_i2d>
 800110a:	4603      	mov	r3, r0
 800110c:	460c      	mov	r4, r1
 800110e:	4618      	mov	r0, r3
 8001110:	4621      	mov	r1, r4
 8001112:	f7ff fd2f 	bl	8000b74 <__aeabi_d2uiz>
 8001116:	4603      	mov	r3, r0
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4810      	ldr	r0, [pc, #64]	; (800115c <Set_Brightness+0x13c>)
 800111c:	6979      	ldr	r1, [r7, #20]
 800111e:	460b      	mov	r3, r1
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	18c1      	adds	r1, r0, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	440b      	add	r3, r1
 800112a:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<5; j++)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	3301      	adds	r3, #1
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	2b04      	cmp	r3, #4
 8001136:	dd91      	ble.n	800105c <Set_Brightness+0x3c>
	for (int i=0; i<MAX_LED; i++)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3301      	adds	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b26      	cmp	r3, #38	; 0x26
 8001142:	f77f af79 	ble.w	8001038 <Set_Brightness+0x18>
		}
	}

#endif
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bdb0      	pop	{r4, r5, r7, pc}
 800114e:	bf00      	nop
 8001150:	53c8d4f1 	.word	0x53c8d4f1
 8001154:	400921fb 	.word	0x400921fb
 8001158:	2000104c 	.word	0x2000104c
 800115c:	20001110 	.word	0x20001110
 8001160:	40668000 	.word	0x40668000

08001164 <WS2812_Send>:
uint16_t pwmData[(32*MAX_LED)+50];

void WS2812_Send (void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	e040      	b.n	80011f6 <WS2812_Send+0x92>
	{
		#if USE_BRIGHTNESS
				color = ((LED_Mod[i][1]<<24) | (LED_Mod[i][2]<<16) | (LED_Mod[i][3]<<8));
 8001174:	4933      	ldr	r1, [pc, #204]	; (8001244 <WS2812_Send+0xe0>)
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	440b      	add	r3, r1
 8001180:	3301      	adds	r3, #1
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	0619      	lsls	r1, r3, #24
 8001186:	482f      	ldr	r0, [pc, #188]	; (8001244 <WS2812_Send+0xe0>)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	4403      	add	r3, r0
 8001192:	3302      	adds	r3, #2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	041b      	lsls	r3, r3, #16
 8001198:	4319      	orrs	r1, r3
 800119a:	482a      	ldr	r0, [pc, #168]	; (8001244 <WS2812_Send+0xe0>)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	4403      	add	r3, r0
 80011a6:	3303      	adds	r3, #3
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	430b      	orrs	r3, r1
 80011ae:	607b      	str	r3, [r7, #4]
		#else
				color = ((LED_Data[i][1]<<24) | (LED_Data[i][2]<<16) | (LED_Data[i][3]<<8));
		#endif

		for (int j=31; j>=0; j--)
 80011b0:	231f      	movs	r3, #31
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	e019      	b.n	80011ea <WS2812_Send+0x86>
		{
			if (color&(1<<j))pwmData[indx] = 64;
 80011b6:	2201      	movs	r2, #1
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <WS2812_Send+0x70>
 80011c8:	4a1f      	ldr	r2, [pc, #124]	; (8001248 <WS2812_Send+0xe4>)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2140      	movs	r1, #64	; 0x40
 80011ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80011d2:	e004      	b.n	80011de <WS2812_Send+0x7a>
			else pwmData[indx] = 32;
 80011d4:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <WS2812_Send+0xe4>)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2120      	movs	r1, #32
 80011da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
		for (int j=31; j>=0; j--)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	dae2      	bge.n	80011b6 <WS2812_Send+0x52>
	for (int i= 0; i<MAX_LED; i++)
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	3301      	adds	r3, #1
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	2b26      	cmp	r3, #38	; 0x26
 80011fa:	ddbb      	ble.n	8001174 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	e00a      	b.n	8001218 <WS2812_Send+0xb4>
	{
		pwmData[indx] = 0;
 8001202:	4a11      	ldr	r2, [pc, #68]	; (8001248 <WS2812_Send+0xe4>)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2100      	movs	r1, #0
 8001208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3301      	adds	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3301      	adds	r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b31      	cmp	r3, #49	; 0x31
 800121c:	ddf1      	ble.n	8001202 <WS2812_Send+0x9e>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	b29b      	uxth	r3, r3
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <WS2812_Send+0xe4>)
 8001224:	2100      	movs	r1, #0
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <WS2812_Send+0xe8>)
 8001228:	f004 f840 	bl	80052ac <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 800122c:	bf00      	nop
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <WS2812_Send+0xec>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0fb      	beq.n	800122e <WS2812_Send+0xca>
	datasentflag = 0;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <WS2812_Send+0xec>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20001110 	.word	0x20001110
 8001248:	20001238 	.word	0x20001238
 800124c:	20001c5c 	.word	0x20001c5c
 8001250:	200002e4 	.word	0x200002e4

08001254 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800125c:	2100      	movs	r1, #0
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001260:	f004 fa3c 	bl	80056dc <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20001c5c 	.word	0x20001c5c
 8001278:	200002e4 	.word	0x200002e4

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b5b0      	push	{r4, r5, r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001282:	f000 fcbf 	bl	8001c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001286:	f000 f823 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128a:	f000 fa1b 	bl	80016c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800128e:	f000 f9fb 	bl	8001688 <MX_DMA_Init>
  MX_ADC1_Init();
 8001292:	f000 f8a7 	bl	80013e4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001296:	f000 f9c7 	bl	8001628 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800129a:	f000 f919 	bl	80014d0 <MX_TIM1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <main+0x4c>)
 80012a0:	463c      	mov	r4, r7
 80012a2:	461d      	mov	r5, r3
 80012a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012b0:	463b      	mov	r3, r7
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f006 f92d 	bl	8007514 <osThreadCreate>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <main+0x50>)
 80012be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80012c0:	f006 f921 	bl	8007506 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <main+0x48>
 80012c6:	bf00      	nop
 80012c8:	0800a304 	.word	0x0800a304
 80012cc:	20001048 	.word	0x20001048

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0b8      	sub	sp, #224	; 0xe0
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012da:	2244      	movs	r2, #68	; 0x44
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f007 fb89 	bl	80089f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f4:	463b      	mov	r3, r7
 80012f6:	2288      	movs	r2, #136	; 0x88
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f007 fb7b 	bl	80089f6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001300:	2310      	movs	r3, #16
 8001302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001306:	2301      	movs	r3, #1
 8001308:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001312:	2360      	movs	r3, #96	; 0x60
 8001314:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001318:	2302      	movs	r3, #2
 800131a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800131e:	2301      	movs	r3, #1
 8001320:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800132a:	2328      	movs	r3, #40	; 0x28
 800132c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001330:	2307      	movs	r3, #7
 8001332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001342:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fbba 	bl	8003ac0 <HAL_RCC_OscConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001352:	f000 fa47 	bl	80017e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001356:	230f      	movs	r3, #15
 8001358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135c:	2303      	movs	r3, #3
 800135e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001374:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001378:	2104      	movs	r1, #4
 800137a:	4618      	mov	r0, r3
 800137c:	f002 ff86 	bl	800428c <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001386:	f000 fa2d 	bl	80017e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800138a:	f244 0302 	movw	r3, #16386	; 0x4002
 800138e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001390:	2300      	movs	r3, #0
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001394:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001398:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800139a:	2301      	movs	r3, #1
 800139c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80013a2:	2310      	movs	r3, #16
 80013a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013a6:	2307      	movs	r3, #7
 80013a8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80013b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013b6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4618      	mov	r0, r3
 80013bc:	f003 f99c 	bl	80046f8 <HAL_RCCEx_PeriphCLKConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80013c6:	f000 fa0d 	bl	80017e4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013ce:	f002 fb21 	bl	8003a14 <HAL_PWREx_ControlVoltageScaling>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80013d8:	f000 fa04 	bl	80017e4 <Error_Handler>
  }
}
 80013dc:	bf00      	nop
 80013de:	37e0      	adds	r7, #224	; 0xe0
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001406:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <MX_ADC1_Init+0xe0>)
 8001408:	4a2f      	ldr	r2, [pc, #188]	; (80014c8 <MX_ADC1_Init+0xe4>)
 800140a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800140c:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <MX_ADC1_Init+0xe0>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001412:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <MX_ADC1_Init+0xe0>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <MX_ADC1_Init+0xe0>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <MX_ADC1_Init+0xe0>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <MX_ADC1_Init+0xe0>)
 8001426:	2204      	movs	r2, #4
 8001428:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <MX_ADC1_Init+0xe0>)
 800142c:	2200      	movs	r2, #0
 800142e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <MX_ADC1_Init+0xe0>)
 8001432:	2200      	movs	r2, #0
 8001434:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <MX_ADC1_Init+0xe0>)
 8001438:	2201      	movs	r2, #1
 800143a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <MX_ADC1_Init+0xe0>)
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <MX_ADC1_Init+0xe0>)
 8001446:	2200      	movs	r2, #0
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MX_ADC1_Init+0xe0>)
 800144c:	2200      	movs	r2, #0
 800144e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_ADC1_Init+0xe0>)
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_ADC1_Init+0xe0>)
 800145a:	2200      	movs	r2, #0
 800145c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MX_ADC1_Init+0xe0>)
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001466:	4817      	ldr	r0, [pc, #92]	; (80014c4 <MX_ADC1_Init+0xe0>)
 8001468:	f000 fde8 	bl	800203c <HAL_ADC_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001472:	f000 f9b7 	bl	80017e4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	4810      	ldr	r0, [pc, #64]	; (80014c4 <MX_ADC1_Init+0xe0>)
 8001482:	f001 fd49 	bl	8002f18 <HAL_ADCEx_MultiModeConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800148c:	f000 f9aa 	bl	80017e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_ADC1_Init+0xe8>)
 8001492:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001494:	2306      	movs	r3, #6
 8001496:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800149c:	237f      	movs	r3, #127	; 0x7f
 800149e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014a0:	2304      	movs	r3, #4
 80014a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_ADC1_Init+0xe0>)
 80014ae:	f001 f8bb 	bl	8002628 <HAL_ADC_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80014b8:	f000 f994 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	3728      	adds	r7, #40	; 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200011d4 	.word	0x200011d4
 80014c8:	50040000 	.word	0x50040000
 80014cc:	04300002 	.word	0x04300002

080014d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b09a      	sub	sp, #104	; 0x68
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	615a      	str	r2, [r3, #20]
 8001502:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	222c      	movs	r2, #44	; 0x2c
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f007 fa73 	bl	80089f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001510:	4b43      	ldr	r3, [pc, #268]	; (8001620 <MX_TIM1_Init+0x150>)
 8001512:	4a44      	ldr	r2, [pc, #272]	; (8001624 <MX_TIM1_Init+0x154>)
 8001514:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001516:	4b42      	ldr	r3, [pc, #264]	; (8001620 <MX_TIM1_Init+0x150>)
 8001518:	2200      	movs	r2, #0
 800151a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151c:	4b40      	ldr	r3, [pc, #256]	; (8001620 <MX_TIM1_Init+0x150>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001522:	4b3f      	ldr	r3, [pc, #252]	; (8001620 <MX_TIM1_Init+0x150>)
 8001524:	2263      	movs	r2, #99	; 0x63
 8001526:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001528:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <MX_TIM1_Init+0x150>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800152e:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <MX_TIM1_Init+0x150>)
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001534:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <MX_TIM1_Init+0x150>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800153a:	4839      	ldr	r0, [pc, #228]	; (8001620 <MX_TIM1_Init+0x150>)
 800153c:	f003 fd8c 	bl	8005058 <HAL_TIM_Base_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001546:	f000 f94d 	bl	80017e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001550:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001554:	4619      	mov	r1, r3
 8001556:	4832      	ldr	r0, [pc, #200]	; (8001620 <MX_TIM1_Init+0x150>)
 8001558:	f004 fbe0 	bl	8005d1c <HAL_TIM_ConfigClockSource>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001562:	f000 f93f 	bl	80017e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001566:	482e      	ldr	r0, [pc, #184]	; (8001620 <MX_TIM1_Init+0x150>)
 8001568:	f003 fe3e 	bl	80051e8 <HAL_TIM_PWM_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001572:	f000 f937 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001582:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001586:	4619      	mov	r1, r3
 8001588:	4825      	ldr	r0, [pc, #148]	; (8001620 <MX_TIM1_Init+0x150>)
 800158a:	f005 f9b3 	bl	80068f4 <HAL_TIMEx_MasterConfigSynchronization>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001594:	f000 f926 	bl	80017e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001598:	2360      	movs	r3, #96	; 0x60
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a0:	2300      	movs	r3, #0
 80015a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b8:	2200      	movs	r2, #0
 80015ba:	4619      	mov	r1, r3
 80015bc:	4818      	ldr	r0, [pc, #96]	; (8001620 <MX_TIM1_Init+0x150>)
 80015be:	f004 fa9d 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80015c8:	f000 f90c 	bl	80017e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	4807      	ldr	r0, [pc, #28]	; (8001620 <MX_TIM1_Init+0x150>)
 8001602:	f005 f9ff 	bl	8006a04 <HAL_TIMEx_ConfigBreakDeadTime>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800160c:	f000 f8ea 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <MX_TIM1_Init+0x150>)
 8001612:	f000 f99f 	bl	8001954 <HAL_TIM_MspPostInit>

}
 8001616:	bf00      	nop
 8001618:	3768      	adds	r7, #104	; 0x68
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20001c5c 	.word	0x20001c5c
 8001624:	40012c00 	.word	0x40012c00

08001628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <MX_USART2_UART_Init+0x58>)
 800162e:	4a15      	ldr	r2, [pc, #84]	; (8001684 <MX_USART2_UART_Init+0x5c>)
 8001630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <MX_USART2_UART_Init+0x58>)
 8001634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_USART2_UART_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_USART2_UART_Init+0x58>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_USART2_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_USART2_UART_Init+0x58>)
 800164e:	220c      	movs	r2, #12
 8001650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <MX_USART2_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_USART2_UART_Init+0x58>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <MX_USART2_UART_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_USART2_UART_Init+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_USART2_UART_Init+0x58>)
 800166c:	f005 fa66 	bl	8006b3c <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001676:	f000 f8b5 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20001ca8 	.word	0x20001ca8
 8001684:	40004400 	.word	0x40004400

08001688 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800168e:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <MX_DMA_Init+0x38>)
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_DMA_Init+0x38>)
 8001692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6493      	str	r3, [r2, #72]	; 0x48
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_DMA_Init+0x38>)
 800169c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2105      	movs	r1, #5
 80016aa:	200c      	movs	r0, #12
 80016ac:	f001 fd9a 	bl	80031e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016b0:	200c      	movs	r0, #12
 80016b2:	f001 fdb3 	bl	800321c <HAL_NVIC_EnableIRQ>

}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <MX_GPIO_Init+0x44>)
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_GPIO_Init+0x44>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_GPIO_Init+0x44>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4a09      	ldr	r2, [pc, #36]	; (8001708 <MX_GPIO_Init+0x44>)
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_GPIO_Init+0x44>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_GPIO_Init+0x44>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]

}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000

0800170c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t val;
		uint16_t raw;
		char msg[10];
	  /* Infinite loop */
		for(int i=0;i<MAX_LED;i++)
 8001714:	2300      	movs	r3, #0
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	e008      	b.n	800172c <StartDefaultTask+0x20>
			  {
				Set_LED(i,150,90,40);
 800171a:	2328      	movs	r3, #40	; 0x28
 800171c:	225a      	movs	r2, #90	; 0x5a
 800171e:	2196      	movs	r1, #150	; 0x96
 8001720:	69b8      	ldr	r0, [r7, #24]
 8001722:	f7ff fc39 	bl	8000f98 <Set_LED>
		for(int i=0;i<MAX_LED;i++)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	3301      	adds	r3, #1
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	2b26      	cmp	r3, #38	; 0x26
 8001730:	ddf3      	ble.n	800171a <StartDefaultTask+0xe>
			  }

	  for(;;)
	  {

		  HAL_ADC_Start(&hadc1);
 8001732:	4820      	ldr	r0, [pc, #128]	; (80017b4 <StartDefaultTask+0xa8>)
 8001734:	f000 fdd8 	bl	80022e8 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8001738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800173c:	481d      	ldr	r0, [pc, #116]	; (80017b4 <StartDefaultTask+0xa8>)
 800173e:	f000 fe8d 	bl	800245c <HAL_ADC_PollForConversion>
		  raw=HAL_ADC_GetValue(&hadc1);
 8001742:	481c      	ldr	r0, [pc, #112]	; (80017b4 <StartDefaultTask+0xa8>)
 8001744:	f000 ff62 	bl	800260c <HAL_ADC_GetValue>
 8001748:	4603      	mov	r3, r0
 800174a:	82fb      	strh	r3, [r7, #22]
//		  raw=raw<2750?2750:raw;
//		  val=map(raw,3050,4095,0,45);



		  if(val>=5)val-=5;
 800174c:	8bfb      	ldrh	r3, [r7, #30]
 800174e:	2b04      	cmp	r3, #4
 8001750:	d903      	bls.n	800175a <StartDefaultTask+0x4e>
 8001752:	8bfb      	ldrh	r3, [r7, #30]
 8001754:	3b05      	subs	r3, #5
 8001756:	83fb      	strh	r3, [r7, #30]
 8001758:	e007      	b.n	800176a <StartDefaultTask+0x5e>
		  else if(val>0 && val<5)val=0;
 800175a:	8bfb      	ldrh	r3, [r7, #30]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <StartDefaultTask+0x5e>
 8001760:	8bfb      	ldrh	r3, [r7, #30]
 8001762:	2b04      	cmp	r3, #4
 8001764:	d801      	bhi.n	800176a <StartDefaultTask+0x5e>
 8001766:	2300      	movs	r3, #0
 8001768:	83fb      	strh	r3, [r7, #30]
		  if(raw>3800)val=45;
 800176a:	8afb      	ldrh	r3, [r7, #22]
 800176c:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <StartDefaultTask+0x6c>
 8001774:	232d      	movs	r3, #45	; 0x2d
 8001776:	83fb      	strh	r3, [r7, #30]

		  sprintf(msg, "%hu   %hu\r\n", raw,val);
 8001778:	8afa      	ldrh	r2, [r7, #22]
 800177a:	8bfb      	ldrh	r3, [r7, #30]
 800177c:	f107 000c 	add.w	r0, r7, #12
 8001780:	490d      	ldr	r1, [pc, #52]	; (80017b8 <StartDefaultTask+0xac>)
 8001782:	f007 f941 	bl	8008a08 <siprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t *) msg,strlen(msg),100);
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fd20 	bl	80001d0 <strlen>
 8001790:	4603      	mov	r3, r0
 8001792:	b29a      	uxth	r2, r3
 8001794:	f107 010c 	add.w	r1, r7, #12
 8001798:	2364      	movs	r3, #100	; 0x64
 800179a:	4808      	ldr	r0, [pc, #32]	; (80017bc <StartDefaultTask+0xb0>)
 800179c:	f005 fa1c 	bl	8006bd8 <HAL_UART_Transmit>
		  Set_Brightness(val);//0~45
 80017a0:	8bfb      	ldrh	r3, [r7, #30]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fc3c 	bl	8001020 <Set_Brightness>
		  WS2812_Send();
 80017a8:	f7ff fcdc 	bl	8001164 <WS2812_Send>
	//	  WS2812_Send();
	//	  HAL_Delay(200);
	//	  Set_Brightness(0);//0~45
	//	  WS2812_Send();
	//	  HAL_Delay(200);
	    osDelay(1);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f005 fefd 	bl	80075ac <osDelay>
	  {
 80017b2:	e7be      	b.n	8001732 <StartDefaultTask+0x26>
 80017b4:	200011d4 	.word	0x200011d4
 80017b8:	0800a320 	.word	0x0800a320
 80017bc:	20001ca8 	.word	0x20001ca8

080017c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017d2:	f000 fa2f 	bl	8001c34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40001000 	.word	0x40001000

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ea:	e7fe      	b.n	80017ea <Error_Handler+0x6>

080017ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4a11      	ldr	r2, [pc, #68]	; (8001838 <HAL_MspInit+0x4c>)
 80017f4:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_MspInit+0x4c>)
 80017f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6613      	str	r3, [r2, #96]	; 0x60
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_MspInit+0x4c>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <HAL_MspInit+0x4c>)
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_MspInit+0x4c>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_MspInit+0x4c>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	210f      	movs	r1, #15
 8001826:	f06f 0001 	mvn.w	r0, #1
 800182a:	f001 fcdb 	bl	80031e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000

0800183c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a15      	ldr	r2, [pc, #84]	; (80018b0 <HAL_ADC_MspInit+0x74>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d123      	bne.n	80018a6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800185e:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <HAL_ADC_MspInit+0x78>)
 8001860:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_ADC_MspInit+0x78>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_ADC_MspInit+0x78>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <HAL_ADC_MspInit+0x78>)
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_ADC_MspInit+0x78>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_ADC_MspInit+0x78>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001892:	230b      	movs	r3, #11
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_ADC_MspInit+0x7c>)
 80018a2:	f001 ff01 	bl	80036a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	; 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	50040000 	.word	0x50040000
 80018b4:	40021000 	.word	0x40021000
 80018b8:	48000800 	.word	0x48000800

080018bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_TIM_Base_MspInit+0x88>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d136      	bne.n	800193c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ce:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <HAL_TIM_Base_MspInit+0x8c>)
 80018d0:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_TIM_Base_MspInit+0x8c>)
 80018d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d8:	6613      	str	r3, [r2, #96]	; 0x60
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_TIM_Base_MspInit+0x8c>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_TIM_Base_MspInit+0x90>)
 80018e8:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_TIM_Base_MspInit+0x94>)
 80018ea:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <HAL_TIM_Base_MspInit+0x90>)
 80018ee:	2207      	movs	r2, #7
 80018f0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_TIM_Base_MspInit+0x90>)
 80018f4:	2210      	movs	r2, #16
 80018f6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <HAL_TIM_Base_MspInit+0x90>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_TIM_Base_MspInit+0x90>)
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_TIM_Base_MspInit+0x90>)
 8001906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_TIM_Base_MspInit+0x90>)
 800190e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001912:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_TIM_Base_MspInit+0x90>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_TIM_Base_MspInit+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001920:	480a      	ldr	r0, [pc, #40]	; (800194c <HAL_TIM_Base_MspInit+0x90>)
 8001922:	f001 fc89 	bl	8003238 <HAL_DMA_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 800192c:	f7ff ff5a 	bl	80017e4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a06      	ldr	r2, [pc, #24]	; (800194c <HAL_TIM_Base_MspInit+0x90>)
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <HAL_TIM_Base_MspInit+0x90>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40012c00 	.word	0x40012c00
 8001948:	40021000 	.word	0x40021000
 800194c:	20001000 	.word	0x20001000
 8001950:	4002001c 	.word	0x4002001c

08001954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a12      	ldr	r2, [pc, #72]	; (80019bc <HAL_TIM_MspPostInit+0x68>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d11d      	bne.n	80019b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <HAL_TIM_MspPostInit+0x6c>)
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_TIM_MspPostInit+0x6c>)
 800197a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_TIM_MspPostInit+0x6c>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800198e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001992:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4619      	mov	r1, r3
 80019aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ae:	f001 fe7b 	bl	80036a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019b2:	bf00      	nop
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40012c00 	.word	0x40012c00
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <HAL_UART_MspInit+0x7c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d128      	bne.n	8001a38 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e6:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <HAL_UART_MspInit+0x80>)
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_UART_MspInit+0x80>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	6593      	str	r3, [r2, #88]	; 0x58
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_UART_MspInit+0x80>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <HAL_UART_MspInit+0x80>)
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_UART_MspInit+0x80>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_UART_MspInit+0x80>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a16:	230c      	movs	r3, #12
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a26:	2307      	movs	r3, #7
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a34:	f001 fe38 	bl	80036a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40004400 	.word	0x40004400
 8001a44:	40021000 	.word	0x40021000

08001a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	2036      	movs	r0, #54	; 0x36
 8001a5e:	f001 fbc1 	bl	80031e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a62:	2036      	movs	r0, #54	; 0x36
 8001a64:	f001 fbda 	bl	800321c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a68:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <HAL_InitTick+0x9c>)
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <HAL_InitTick+0x9c>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	f043 0310 	orr.w	r3, r3, #16
 8001a72:	6593      	str	r3, [r2, #88]	; 0x58
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_InitTick+0x9c>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a80:	f107 0210 	add.w	r2, r7, #16
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fda2 	bl	80045d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a90:	f002 fd74 	bl	800457c <HAL_RCC_GetPCLK1Freq>
 8001a94:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <HAL_InitTick+0xa0>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	0c9b      	lsrs	r3, r3, #18
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_InitTick+0xa4>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <HAL_InitTick+0xa8>)
 8001aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_InitTick+0xa4>)
 8001aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ab2:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <HAL_InitTick+0xa4>)
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_InitTick+0xa4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_InitTick+0xa4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <HAL_InitTick+0xa4>)
 8001ac6:	f003 fac7 	bl	8005058 <HAL_TIM_Base_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d104      	bne.n	8001ada <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ad0:	4806      	ldr	r0, [pc, #24]	; (8001aec <HAL_InitTick+0xa4>)
 8001ad2:	f003 fb19 	bl	8005108 <HAL_TIM_Base_Start_IT>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	e000      	b.n	8001adc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3730      	adds	r7, #48	; 0x30
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	431bde83 	.word	0x431bde83
 8001aec:	20001d2c 	.word	0x20001d2c
 8001af0:	40001000 	.word	0x40001000

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <DMA1_Channel2_IRQHandler+0x10>)
 8001b26:	f001 fce0 	bl	80034ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20001000 	.word	0x20001000

08001b34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <TIM6_DAC_IRQHandler+0x10>)
 8001b3a:	f003 febf 	bl	80058bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20001d2c 	.word	0x20001d2c

08001b48 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <_sbrk+0x50>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <_sbrk+0x16>
		heap_end = &end;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <_sbrk+0x50>)
 8001b5a:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <_sbrk+0x54>)
 8001b5c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <_sbrk+0x50>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <_sbrk+0x50>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	466a      	mov	r2, sp
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d907      	bls.n	8001b82 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001b72:	f006 ff0b 	bl	800898c <__errno>
 8001b76:	4602      	mov	r2, r0
 8001b78:	230c      	movs	r3, #12
 8001b7a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b80:	e006      	b.n	8001b90 <_sbrk+0x48>
	}

	heap_end += incr;
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <_sbrk+0x50>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a03      	ldr	r2, [pc, #12]	; (8001b98 <_sbrk+0x50>)
 8001b8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200002e8 	.word	0x200002e8
 8001b9c:	20001d80 	.word	0x20001d80

08001ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ba4:	4a15      	ldr	r2, [pc, #84]	; (8001bfc <SystemInit+0x5c>)
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <SystemInit+0x5c>)
 8001ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bb4:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <SystemInit+0x60>)
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <SystemInit+0x60>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <SystemInit+0x60>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bc6:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <SystemInit+0x60>)
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <SystemInit+0x60>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001bd0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001bd4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <SystemInit+0x60>)
 8001bd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bdc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bde:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <SystemInit+0x60>)
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <SystemInit+0x60>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <SystemInit+0x60>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0e:	2003      	movs	r0, #3
 8001c10:	f001 fadd 	bl	80031ce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff ff17 	bl	8001a48 <HAL_InitTick>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	71fb      	strb	r3, [r7, #7]
 8001c24:	e001      	b.n	8001c2a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c26:	f7ff fde1 	bl	80017ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20001d78 	.word	0x20001d78

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20001d78 	.word	0x20001d78

08001c74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3360      	adds	r3, #96	; 0x60
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <LL_ADC_SetOffset+0x44>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d14:	bf00      	nop
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	03fff000 	.word	0x03fff000

08001d24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3360      	adds	r3, #96	; 0x60
 8001d32:	461a      	mov	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3360      	adds	r3, #96	; 0x60
 8001d60:	461a      	mov	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d7a:	bf00      	nop
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3330      	adds	r3, #48	; 0x30
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	4413      	add	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	211f      	movs	r1, #31
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	401a      	ands	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0e9b      	lsrs	r3, r3, #26
 8001de4:	f003 011f 	and.w	r1, r3, #31
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	431a      	orrs	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	3314      	adds	r3, #20
 8001e14:	461a      	mov	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	0e5b      	lsrs	r3, r3, #25
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	4413      	add	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	0d1b      	lsrs	r3, r3, #20
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2107      	movs	r1, #7
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	401a      	ands	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	0d1b      	lsrs	r3, r3, #20
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e4e:	bf00      	nop
 8001e50:	371c      	adds	r7, #28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e74:	43db      	mvns	r3, r3
 8001e76:	401a      	ands	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0318 	and.w	r3, r3, #24
 8001e7e:	4908      	ldr	r1, [pc, #32]	; (8001ea0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e80:	40d9      	lsrs	r1, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	400b      	ands	r3, r1
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	0007ffff 	.word	0x0007ffff

08001ea4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 031f 	and.w	r3, r3, #31
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6093      	str	r3, [r2, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f14:	d101      	bne.n	8001f1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f64:	d101      	bne.n	8001f6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <LL_ADC_IsEnabled+0x18>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <LL_ADC_IsEnabled+0x1a>
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fda:	f043 0204 	orr.w	r2, r3, #4
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d101      	bne.n	8002006 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b08      	cmp	r3, #8
 8002026:	d101      	bne.n	800202c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e136      	b.n	80022c4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	2b00      	cmp	r3, #0
 8002062:	d109      	bne.n	8002078 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fbe9 	bl	800183c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff3f 	bl	8001f00 <LL_ADC_IsDeepPowerDownEnabled>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d004      	beq.n	8002092 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff25 	bl	8001edc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff5a 	bl	8001f50 <LL_ADC_IsInternalRegulatorEnabled>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d115      	bne.n	80020ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ff3e 	bl	8001f28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020ac:	4b87      	ldr	r3, [pc, #540]	; (80022cc <HAL_ADC_Init+0x290>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	099b      	lsrs	r3, r3, #6
 80020b2:	4a87      	ldr	r2, [pc, #540]	; (80022d0 <HAL_ADC_Init+0x294>)
 80020b4:	fba2 2303 	umull	r2, r3, r2, r3
 80020b8:	099b      	lsrs	r3, r3, #6
 80020ba:	3301      	adds	r3, #1
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020c0:	e002      	b.n	80020c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f9      	bne.n	80020c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff3c 	bl	8001f50 <LL_ADC_IsInternalRegulatorEnabled>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10d      	bne.n	80020fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	f043 0210 	orr.w	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff75 	bl	8001fee <LL_ADC_REG_IsConversionOngoing>
 8002104:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 80cf 	bne.w	80022b2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 80cb 	bne.w	80022b2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002120:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002124:	f043 0202 	orr.w	r2, r3, #2
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff35 	bl	8001fa0 <LL_ADC_IsEnabled>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d115      	bne.n	8002168 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800213c:	4865      	ldr	r0, [pc, #404]	; (80022d4 <HAL_ADC_Init+0x298>)
 800213e:	f7ff ff2f 	bl	8001fa0 <LL_ADC_IsEnabled>
 8002142:	4604      	mov	r4, r0
 8002144:	4864      	ldr	r0, [pc, #400]	; (80022d8 <HAL_ADC_Init+0x29c>)
 8002146:	f7ff ff2b 	bl	8001fa0 <LL_ADC_IsEnabled>
 800214a:	4603      	mov	r3, r0
 800214c:	431c      	orrs	r4, r3
 800214e:	4863      	ldr	r0, [pc, #396]	; (80022dc <HAL_ADC_Init+0x2a0>)
 8002150:	f7ff ff26 	bl	8001fa0 <LL_ADC_IsEnabled>
 8002154:	4603      	mov	r3, r0
 8002156:	4323      	orrs	r3, r4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d105      	bne.n	8002168 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4619      	mov	r1, r3
 8002162:	485f      	ldr	r0, [pc, #380]	; (80022e0 <HAL_ADC_Init+0x2a4>)
 8002164:	f7ff fd86 	bl	8001c74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	7e5b      	ldrb	r3, [r3, #25]
 800216c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002172:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002178:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800217e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002186:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d106      	bne.n	80021a4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	3b01      	subs	r3, #1
 800219c:	045b      	lsls	r3, r3, #17
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d009      	beq.n	80021c0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68d9      	ldr	r1, [r3, #12]
 80021ca:	4b46      	ldr	r3, [pc, #280]	; (80022e4 <HAL_ADC_Init+0x2a8>)
 80021cc:	400b      	ands	r3, r1
 80021ce:	69b9      	ldr	r1, [r7, #24]
 80021d0:	430b      	orrs	r3, r1
 80021d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff08 	bl	8001fee <LL_ADC_REG_IsConversionOngoing>
 80021de:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff15 	bl	8002014 <LL_ADC_INJ_IsConversionOngoing>
 80021ea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d13d      	bne.n	800226e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d13a      	bne.n	800226e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021fc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002204:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002218:	f023 0302 	bic.w	r3, r3, #2
 800221c:	69b9      	ldr	r1, [r7, #24]
 800221e:	430b      	orrs	r3, r1
 8002220:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002228:	2b01      	cmp	r3, #1
 800222a:	d118      	bne.n	800225e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800223a:	f023 0304 	bic.w	r3, r3, #4
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002246:	4308      	orrs	r0, r1
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800224c:	4308      	orrs	r0, r1
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	6c89      	ldr	r1, [r1, #72]	; 0x48
 8002252:	4301      	orrs	r1, r0
 8002254:	430b      	orrs	r3, r1
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6113      	str	r3, [r2, #16]
 800225c:	e007      	b.n	800226e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	6912      	ldr	r2, [r2, #16]
 8002268:	f022 0201 	bic.w	r2, r2, #1
 800226c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d10c      	bne.n	8002290 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002280:	f022 010f 	bic.w	r1, r2, #15
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	69d2      	ldr	r2, [r2, #28]
 8002288:	3a01      	subs	r2, #1
 800228a:	430a      	orrs	r2, r1
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
 800228e:	e007      	b.n	80022a0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800229a:	f022 020f 	bic.w	r2, r2, #15
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a4:	f023 0303 	bic.w	r3, r3, #3
 80022a8:	f043 0201 	orr.w	r2, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54
 80022b0:	e007      	b.n	80022c2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	f043 0210 	orr.w	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3724      	adds	r7, #36	; 0x24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd90      	pop	{r4, r7, pc}
 80022cc:	20000000 	.word	0x20000000
 80022d0:	053e2d63 	.word	0x053e2d63
 80022d4:	50040000 	.word	0x50040000
 80022d8:	50040100 	.word	0x50040100
 80022dc:	50040200 	.word	0x50040200
 80022e0:	50040300 	.word	0x50040300
 80022e4:	fff0c007 	.word	0xfff0c007

080022e8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022f0:	4857      	ldr	r0, [pc, #348]	; (8002450 <HAL_ADC_Start+0x168>)
 80022f2:	f7ff fdd7 	bl	8001ea4 <LL_ADC_GetMultimode>
 80022f6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fe76 	bl	8001fee <LL_ADC_REG_IsConversionOngoing>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 809c 	bne.w	8002442 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_ADC_Start+0x30>
 8002314:	2302      	movs	r3, #2
 8002316:	e097      	b.n	8002448 <HAL_ADC_Start+0x160>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fd71 	bl	8002e08 <ADC_Enable>
 8002326:	4603      	mov	r3, r0
 8002328:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800232a:	7dfb      	ldrb	r3, [r7, #23]
 800232c:	2b00      	cmp	r3, #0
 800232e:	f040 8083 	bne.w	8002438 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a42      	ldr	r2, [pc, #264]	; (8002454 <HAL_ADC_Start+0x16c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d002      	beq.n	8002356 <HAL_ADC_Start+0x6e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	e000      	b.n	8002358 <HAL_ADC_Start+0x70>
 8002356:	4b40      	ldr	r3, [pc, #256]	; (8002458 <HAL_ADC_Start+0x170>)
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	4293      	cmp	r3, r2
 800235e:	d002      	beq.n	8002366 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d105      	bne.n	8002372 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237e:	d106      	bne.n	800238e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	f023 0206 	bic.w	r2, r3, #6
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	659a      	str	r2, [r3, #88]	; 0x58
 800238c:	e002      	b.n	8002394 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	221c      	movs	r2, #28
 800239a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2a      	ldr	r2, [pc, #168]	; (8002454 <HAL_ADC_Start+0x16c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d002      	beq.n	80023b4 <HAL_ADC_Start+0xcc>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	e000      	b.n	80023b6 <HAL_ADC_Start+0xce>
 80023b4:	4b28      	ldr	r3, [pc, #160]	; (8002458 <HAL_ADC_Start+0x170>)
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d008      	beq.n	80023d0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d002      	beq.n	80023d0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b09      	cmp	r3, #9
 80023ce:	d114      	bne.n	80023fa <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d007      	beq.n	80023ee <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fde7 	bl	8001fc6 <LL_ADC_REG_StartConversion>
 80023f8:	e025      	b.n	8002446 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <HAL_ADC_Start+0x16c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d002      	beq.n	8002416 <HAL_ADC_Start+0x12e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	e000      	b.n	8002418 <HAL_ADC_Start+0x130>
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <HAL_ADC_Start+0x170>)
 8002418:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00f      	beq.n	8002446 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800242e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
 8002436:	e006      	b.n	8002446 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002440:	e001      	b.n	8002446 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002442:	2302      	movs	r3, #2
 8002444:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002446:	7dfb      	ldrb	r3, [r7, #23]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	50040300 	.word	0x50040300
 8002454:	50040100 	.word	0x50040100
 8002458:	50040000 	.word	0x50040000

0800245c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002466:	4866      	ldr	r0, [pc, #408]	; (8002600 <HAL_ADC_PollForConversion+0x1a4>)
 8002468:	f7ff fd1c 	bl	8001ea4 <LL_ADC_GetMultimode>
 800246c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	2b08      	cmp	r3, #8
 8002474:	d102      	bne.n	800247c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002476:	2308      	movs	r3, #8
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	e02a      	b.n	80024d2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b05      	cmp	r3, #5
 8002486:	d002      	beq.n	800248e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b09      	cmp	r3, #9
 800248c:	d111      	bne.n	80024b2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	f043 0220 	orr.w	r2, r3, #32
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0a4      	b.n	80025f6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80024ac:	2304      	movs	r3, #4
 80024ae:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024b0:	e00f      	b.n	80024d2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024b2:	4853      	ldr	r0, [pc, #332]	; (8002600 <HAL_ADC_PollForConversion+0x1a4>)
 80024b4:	f7ff fd04 	bl	8001ec0 <LL_ADC_GetMultiDMATransfer>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d007      	beq.n	80024ce <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f043 0220 	orr.w	r2, r3, #32
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e093      	b.n	80025f6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80024ce:	2304      	movs	r3, #4
 80024d0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80024d2:	f7ff fbc3 	bl	8001c5c <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024d8:	e021      	b.n	800251e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024e0:	d01d      	beq.n	800251e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80024e2:	f7ff fbbb 	bl	8001c5c <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad2      	subs	r2, r2, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d802      	bhi.n	80024f8 <HAL_ADC_PollForConversion+0x9c>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d112      	bne.n	800251e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10b      	bne.n	800251e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	f043 0204 	orr.w	r2, r3, #4
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e06b      	b.n	80025f6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0d6      	beq.n	80024da <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002530:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fc22 	bl	8001d86 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01c      	beq.n	8002582 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7e5b      	ldrb	r3, [r3, #25]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d118      	bne.n	8002582 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b08      	cmp	r3, #8
 800255c:	d111      	bne.n	8002582 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d105      	bne.n	8002582 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f043 0201 	orr.w	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a1f      	ldr	r2, [pc, #124]	; (8002604 <HAL_ADC_PollForConversion+0x1a8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d002      	beq.n	8002592 <HAL_ADC_PollForConversion+0x136>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	e000      	b.n	8002594 <HAL_ADC_PollForConversion+0x138>
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_ADC_PollForConversion+0x1ac>)
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	4293      	cmp	r3, r2
 800259a:	d008      	beq.n	80025ae <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d002      	beq.n	80025ae <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2b09      	cmp	r3, #9
 80025ac:	d104      	bne.n	80025b8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	e00c      	b.n	80025d2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a11      	ldr	r2, [pc, #68]	; (8002604 <HAL_ADC_PollForConversion+0x1a8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d002      	beq.n	80025c8 <HAL_ADC_PollForConversion+0x16c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	e000      	b.n	80025ca <HAL_ADC_PollForConversion+0x16e>
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_ADC_PollForConversion+0x1ac>)
 80025ca:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d104      	bne.n	80025e2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2208      	movs	r2, #8
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e008      	b.n	80025f4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d103      	bne.n	80025f4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	220c      	movs	r2, #12
 80025f2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	50040300 	.word	0x50040300
 8002604:	50040100 	.word	0x50040100
 8002608:	50040000 	.word	0x50040000

0800260c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0b6      	sub	sp, #216	; 0xd8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_ADC_ConfigChannel+0x22>
 8002646:	2302      	movs	r3, #2
 8002648:	e3c7      	b.n	8002dda <HAL_ADC_ConfigChannel+0x7b2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fcc9 	bl	8001fee <LL_ADC_REG_IsConversionOngoing>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 83a8 	bne.w	8002db4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b05      	cmp	r3, #5
 800266a:	d824      	bhi.n	80026b6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	3b02      	subs	r3, #2
 8002672:	2b03      	cmp	r3, #3
 8002674:	d81b      	bhi.n	80026ae <HAL_ADC_ConfigChannel+0x86>
 8002676:	a201      	add	r2, pc, #4	; (adr r2, 800267c <HAL_ADC_ConfigChannel+0x54>)
 8002678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267c:	0800268d 	.word	0x0800268d
 8002680:	08002695 	.word	0x08002695
 8002684:	0800269d 	.word	0x0800269d
 8002688:	080026a5 	.word	0x080026a5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	220c      	movs	r2, #12
 8002690:	605a      	str	r2, [r3, #4]
          break;
 8002692:	e010      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2212      	movs	r2, #18
 8002698:	605a      	str	r2, [r3, #4]
          break;
 800269a:	e00c      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2218      	movs	r2, #24
 80026a0:	605a      	str	r2, [r3, #4]
          break;
 80026a2:	e008      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026aa:	605a      	str	r2, [r3, #4]
          break;
 80026ac:	e003      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2206      	movs	r2, #6
 80026b2:	605a      	str	r2, [r3, #4]
          break;
 80026b4:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6859      	ldr	r1, [r3, #4]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f7ff fb72 	bl	8001dac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fc8e 	bl	8001fee <LL_ADC_REG_IsConversionOngoing>
 80026d2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fc9a 	bl	8002014 <LL_ADC_INJ_IsConversionOngoing>
 80026e0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f040 81a6 	bne.w	8002a3a <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 81a1 	bne.w	8002a3a <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	461a      	mov	r2, r3
 8002706:	f7ff fb7d 	bl	8001e04 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	08db      	lsrs	r3, r3, #3
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	2b04      	cmp	r3, #4
 800272a:	d00a      	beq.n	8002742 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	6919      	ldr	r1, [r3, #16]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800273c:	f7ff face 	bl	8001cdc <LL_ADC_SetOffset>
 8002740:	e17b      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff faeb 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 800274e:	4603      	mov	r3, r0
 8002750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <HAL_ADC_ConfigChannel+0x146>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fae0 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	0e9b      	lsrs	r3, r3, #26
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	e01e      	b.n	80027ac <HAL_ADC_ConfigChannel+0x184>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fad5 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800278c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002790:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002794:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 800279c:	2320      	movs	r3, #32
 800279e:	e004      	b.n	80027aa <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 80027a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x19c>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0e9b      	lsrs	r3, r3, #26
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	e018      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x1ce>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 80027e8:	2320      	movs	r3, #32
 80027ea:	e004      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 80027ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027f0:	fab3 f383 	clz	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d106      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff faa4 	bl	8001d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2101      	movs	r1, #1
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fa88 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x20c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2101      	movs	r1, #1
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fa7d 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 800282a:	4603      	mov	r3, r0
 800282c:	0e9b      	lsrs	r3, r3, #26
 800282e:	f003 021f 	and.w	r2, r3, #31
 8002832:	e01e      	b.n	8002872 <HAL_ADC_ConfigChannel+0x24a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2101      	movs	r1, #1
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fa72 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002856:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800285a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8002862:	2320      	movs	r3, #32
 8002864:	e004      	b.n	8002870 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8002866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287a:	2b00      	cmp	r3, #0
 800287c:	d105      	bne.n	800288a <HAL_ADC_ConfigChannel+0x262>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	0e9b      	lsrs	r3, r3, #26
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	e018      	b.n	80028bc <HAL_ADC_ConfigChannel+0x294>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800289e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80028a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 80028ae:	2320      	movs	r3, #32
 80028b0:	e004      	b.n	80028bc <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 80028b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028bc:	429a      	cmp	r2, r3
 80028be:	d106      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2101      	movs	r1, #1
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fa41 	bl	8001d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2102      	movs	r1, #2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fa25 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10a      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x2d2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2102      	movs	r1, #2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fa1a 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 80028f0:	4603      	mov	r3, r0
 80028f2:	0e9b      	lsrs	r3, r3, #26
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	e01e      	b.n	8002938 <HAL_ADC_ConfigChannel+0x310>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2102      	movs	r1, #2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fa0f 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002906:	4603      	mov	r3, r0
 8002908:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002918:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800291c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002920:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002928:	2320      	movs	r3, #32
 800292a:	e004      	b.n	8002936 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 800292c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002940:	2b00      	cmp	r3, #0
 8002942:	d105      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x328>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0e9b      	lsrs	r3, r3, #26
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	e016      	b.n	800297e <HAL_ADC_ConfigChannel+0x356>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002962:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8002970:	2320      	movs	r3, #32
 8002972:	e004      	b.n	800297e <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8002974:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800297e:	429a      	cmp	r2, r3
 8002980:	d106      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2200      	movs	r2, #0
 8002988:	2102      	movs	r1, #2
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff f9e0 	bl	8001d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2103      	movs	r1, #3
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff f9c4 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 800299c:	4603      	mov	r3, r0
 800299e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x394>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2103      	movs	r1, #3
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff f9b9 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 80029b2:	4603      	mov	r3, r0
 80029b4:	0e9b      	lsrs	r3, r3, #26
 80029b6:	f003 021f 	and.w	r2, r3, #31
 80029ba:	e017      	b.n	80029ec <HAL_ADC_ConfigChannel+0x3c4>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2103      	movs	r1, #3
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff f9ae 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 80029c8:	4603      	mov	r3, r0
 80029ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029d6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80029de:	2320      	movs	r3, #32
 80029e0:	e003      	b.n	80029ea <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 80029e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x3dc>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	0e9b      	lsrs	r3, r3, #26
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	e011      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x400>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8002a1c:	2320      	movs	r3, #32
 8002a1e:	e003      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8002a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2103      	movs	r1, #3
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f98b 	bl	8001d50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff faae 	bl	8001fa0 <LL_ADC_IsEnabled>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f040 8140 	bne.w	8002ccc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6819      	ldr	r1, [r3, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f7ff f9ff 	bl	8001e5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	4a8f      	ldr	r2, [pc, #572]	; (8002ca0 <HAL_ADC_ConfigChannel+0x678>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	f040 8131 	bne.w	8002ccc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10b      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x46a>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	0e9b      	lsrs	r3, r3, #26
 8002a80:	3301      	adds	r3, #1
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2b09      	cmp	r3, #9
 8002a88:	bf94      	ite	ls
 8002a8a:	2301      	movls	r3, #1
 8002a8c:	2300      	movhi	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	e019      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x49e>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002aa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8002aaa:	2320      	movs	r3, #32
 8002aac:	e003      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8002aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	2b09      	cmp	r3, #9
 8002abe:	bf94      	ite	ls
 8002ac0:	2301      	movls	r3, #1
 8002ac2:	2300      	movhi	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d079      	beq.n	8002bbe <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d107      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x4be>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	0e9b      	lsrs	r3, r3, #26
 8002adc:	3301      	adds	r3, #1
 8002ade:	069b      	lsls	r3, r3, #26
 8002ae0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ae4:	e015      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x4ea>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8002afe:	2320      	movs	r3, #32
 8002b00:	e003      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8002b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	069b      	lsls	r3, r3, #26
 8002b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x50a>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	0e9b      	lsrs	r3, r3, #26
 8002b24:	3301      	adds	r3, #1
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b30:	e017      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x53a>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	e003      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8002b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	3301      	adds	r3, #1
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b62:	ea42 0103 	orr.w	r1, r2, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x560>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	0e9b      	lsrs	r3, r3, #26
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f003 021f 	and.w	r2, r3, #31
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	051b      	lsls	r3, r3, #20
 8002b86:	e018      	b.n	8002bba <HAL_ADC_ConfigChannel+0x592>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	e003      	b.n	8002bac <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	f003 021f 	and.w	r2, r3, #31
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	e081      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d107      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x5b2>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	069b      	lsls	r3, r3, #26
 8002bd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bd8:	e015      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x5de>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	e003      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	069b      	lsls	r3, r3, #26
 8002c02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x5fe>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	0e9b      	lsrs	r3, r3, #26
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	e017      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x62e>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	61fb      	str	r3, [r7, #28]
  return result;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8002c3e:	2320      	movs	r3, #32
 8002c40:	e003      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	ea42 0103 	orr.w	r1, r2, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10d      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x65a>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	0e9b      	lsrs	r3, r3, #26
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f003 021f 	and.w	r2, r3, #31
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	3b1e      	subs	r3, #30
 8002c7a:	051b      	lsls	r3, r3, #20
 8002c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c80:	e01e      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x698>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	613b      	str	r3, [r7, #16]
  return result;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d104      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	e006      	b.n	8002cac <HAL_ADC_ConfigChannel+0x684>
 8002c9e:	bf00      	nop
 8002ca0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	3301      	adds	r3, #1
 8002cae:	f003 021f 	and.w	r2, r3, #31
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3b1e      	subs	r3, #30
 8002cba:	051b      	lsls	r3, r3, #20
 8002cbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	6892      	ldr	r2, [r2, #8]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f7ff f89c 	bl	8001e04 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b44      	ldr	r3, [pc, #272]	; (8002de4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d07a      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cd8:	4843      	ldr	r0, [pc, #268]	; (8002de8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002cda:	f7fe fff1 	bl	8001cc0 <LL_ADC_GetCommonPathInternalCh>
 8002cde:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a41      	ldr	r2, [pc, #260]	; (8002dec <HAL_ADC_ConfigChannel+0x7c4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d12c      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d126      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a3c      	ldr	r2, [pc, #240]	; (8002df0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d004      	beq.n	8002d0c <HAL_ADC_ConfigChannel+0x6e4>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a3b      	ldr	r2, [pc, #236]	; (8002df4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d15d      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d14:	4619      	mov	r1, r3
 8002d16:	4834      	ldr	r0, [pc, #208]	; (8002de8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d18:	f7fe ffbf 	bl	8001c9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d1c:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	099b      	lsrs	r3, r3, #6
 8002d22:	4a36      	ldr	r2, [pc, #216]	; (8002dfc <HAL_ADC_ConfigChannel+0x7d4>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	099b      	lsrs	r3, r3, #6
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d36:	e002      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f9      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d44:	e040      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2d      	ldr	r2, [pc, #180]	; (8002e00 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d118      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x75a>
 8002d50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d112      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a23      	ldr	r2, [pc, #140]	; (8002df0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d004      	beq.n	8002d70 <HAL_ADC_ConfigChannel+0x748>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d12d      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d78:	4619      	mov	r1, r3
 8002d7a:	481b      	ldr	r0, [pc, #108]	; (8002de8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d7c:	f7fe ff8d 	bl	8001c9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d80:	e024      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1f      	ldr	r2, [pc, #124]	; (8002e04 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d120      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d11a      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d115      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002da6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002daa:	4619      	mov	r1, r3
 8002dac:	480e      	ldr	r0, [pc, #56]	; (8002de8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dae:	f7fe ff74 	bl	8001c9a <LL_ADC_SetCommonPathInternalCh>
 8002db2:	e00c      	b.n	8002dce <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	f043 0220 	orr.w	r2, r3, #32
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002dc6:	e002      	b.n	8002dce <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dc8:	bf00      	nop
 8002dca:	e000      	b.n	8002dce <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dcc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	37d8      	adds	r7, #216	; 0xd8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	80080000 	.word	0x80080000
 8002de8:	50040300 	.word	0x50040300
 8002dec:	c7520000 	.word	0xc7520000
 8002df0:	50040000 	.word	0x50040000
 8002df4:	50040200 	.word	0x50040200
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	053e2d63 	.word	0x053e2d63
 8002e00:	cb840000 	.word	0xcb840000
 8002e04:	80000001 	.word	0x80000001

08002e08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff f8c3 	bl	8001fa0 <LL_ADC_IsEnabled>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d14d      	bne.n	8002ebc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	4b28      	ldr	r3, [pc, #160]	; (8002ec8 <ADC_Enable+0xc0>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00d      	beq.n	8002e4a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e32:	f043 0210 	orr.w	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	f043 0201 	orr.w	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e039      	b.n	8002ebe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff f892 	bl	8001f78 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e54:	f7fe ff02 	bl	8001c5c <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e5a:	e028      	b.n	8002eae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff f89d 	bl	8001fa0 <LL_ADC_IsEnabled>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff f881 	bl	8001f78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e76:	f7fe fef1 	bl	8001c5c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d914      	bls.n	8002eae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d00d      	beq.n	8002eae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	f043 0210 	orr.w	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e007      	b.n	8002ebe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d1cf      	bne.n	8002e5c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	8000003f 	.word	0x8000003f

08002ecc <LL_ADC_IsEnabled>:
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <LL_ADC_IsEnabled+0x18>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <LL_ADC_IsEnabled+0x1a>
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d101      	bne.n	8002f0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b09f      	sub	sp, #124	; 0x7c
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e093      	b.n	800305e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002f3e:	2300      	movs	r3, #0
 8002f40:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002f42:	2300      	movs	r3, #0
 8002f44:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a47      	ldr	r2, [pc, #284]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d102      	bne.n	8002f56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f50:	4b46      	ldr	r3, [pc, #280]	; (800306c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	e001      	b.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10b      	bne.n	8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e072      	b.n	800305e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff ffb9 	bl	8002ef2 <LL_ADC_REG_IsConversionOngoing>
 8002f80:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff ffb3 	bl	8002ef2 <LL_ADC_REG_IsConversionOngoing>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d154      	bne.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d151      	bne.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f98:	4b35      	ldr	r3, [pc, #212]	; (8003070 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002f9a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d02c      	beq.n	8002ffe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fb6:	035b      	lsls	r3, r3, #13
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fc0:	4829      	ldr	r0, [pc, #164]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fc2:	f7ff ff83 	bl	8002ecc <LL_ADC_IsEnabled>
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	4828      	ldr	r0, [pc, #160]	; (800306c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fca:	f7ff ff7f 	bl	8002ecc <LL_ADC_IsEnabled>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	431c      	orrs	r4, r3
 8002fd2:	4828      	ldr	r0, [pc, #160]	; (8003074 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002fd4:	f7ff ff7a 	bl	8002ecc <LL_ADC_IsEnabled>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4323      	orrs	r3, r4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d137      	bne.n	8003050 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fe8:	f023 030f 	bic.w	r3, r3, #15
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	6811      	ldr	r1, [r2, #0]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	6892      	ldr	r2, [r2, #8]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ffc:	e028      	b.n	8003050 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003008:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800300a:	4817      	ldr	r0, [pc, #92]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800300c:	f7ff ff5e 	bl	8002ecc <LL_ADC_IsEnabled>
 8003010:	4604      	mov	r4, r0
 8003012:	4816      	ldr	r0, [pc, #88]	; (800306c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003014:	f7ff ff5a 	bl	8002ecc <LL_ADC_IsEnabled>
 8003018:	4603      	mov	r3, r0
 800301a:	431c      	orrs	r4, r3
 800301c:	4815      	ldr	r0, [pc, #84]	; (8003074 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800301e:	f7ff ff55 	bl	8002ecc <LL_ADC_IsEnabled>
 8003022:	4603      	mov	r3, r0
 8003024:	4323      	orrs	r3, r4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d112      	bne.n	8003050 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800302a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003032:	f023 030f 	bic.w	r3, r3, #15
 8003036:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003038:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800303a:	e009      	b.n	8003050 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003040:	f043 0220 	orr.w	r2, r3, #32
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800304e:	e000      	b.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003050:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800305a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800305e:	4618      	mov	r0, r3
 8003060:	377c      	adds	r7, #124	; 0x7c
 8003062:	46bd      	mov	sp, r7
 8003064:	bd90      	pop	{r4, r7, pc}
 8003066:	bf00      	nop
 8003068:	50040000 	.word	0x50040000
 800306c:	50040100 	.word	0x50040100
 8003070:	50040300 	.word	0x50040300
 8003074:	50040200 	.word	0x50040200

08003078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <__NVIC_SetPriorityGrouping+0x44>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003094:	4013      	ands	r3, r2
 8003096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030aa:	4a04      	ldr	r2, [pc, #16]	; (80030bc <__NVIC_SetPriorityGrouping+0x44>)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	60d3      	str	r3, [r2, #12]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <__NVIC_GetPriorityGrouping+0x18>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	0a1b      	lsrs	r3, r3, #8
 80030ca:	f003 0307 	and.w	r3, r3, #7
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	db0b      	blt.n	8003106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ee:	4909      	ldr	r1, [pc, #36]	; (8003114 <__NVIC_EnableIRQ+0x38>)
 80030f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	79fa      	ldrb	r2, [r7, #7]
 80030f8:	f002 021f 	and.w	r2, r2, #31
 80030fc:	2001      	movs	r0, #1
 80030fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000e100 	.word	0xe000e100

08003118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	6039      	str	r1, [r7, #0]
 8003122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003128:	2b00      	cmp	r3, #0
 800312a:	db0a      	blt.n	8003142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312c:	490d      	ldr	r1, [pc, #52]	; (8003164 <__NVIC_SetPriority+0x4c>)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	0112      	lsls	r2, r2, #4
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	440b      	add	r3, r1
 800313c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003140:	e00a      	b.n	8003158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003142:	4909      	ldr	r1, [pc, #36]	; (8003168 <__NVIC_SetPriority+0x50>)
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	3b04      	subs	r3, #4
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	0112      	lsls	r2, r2, #4
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	440b      	add	r3, r1
 8003156:	761a      	strb	r2, [r3, #24]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	e000e100 	.word	0xe000e100
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	; 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f1c3 0307 	rsb	r3, r3, #7
 8003186:	2b04      	cmp	r3, #4
 8003188:	bf28      	it	cs
 800318a:	2304      	movcs	r3, #4
 800318c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3304      	adds	r3, #4
 8003192:	2b06      	cmp	r3, #6
 8003194:	d902      	bls.n	800319c <NVIC_EncodePriority+0x30>
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3b03      	subs	r3, #3
 800319a:	e000      	b.n	800319e <NVIC_EncodePriority+0x32>
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a0:	2201      	movs	r2, #1
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	1e5a      	subs	r2, r3, #1
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	401a      	ands	r2, r3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b2:	2101      	movs	r1, #1
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	1e59      	subs	r1, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	4313      	orrs	r3, r2
         );
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff ff4e 	bl	8003078 <__NVIC_SetPriorityGrouping>
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031f6:	f7ff ff63 	bl	80030c0 <__NVIC_GetPriorityGrouping>
 80031fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	6978      	ldr	r0, [r7, #20]
 8003202:	f7ff ffb3 	bl	800316c <NVIC_EncodePriority>
 8003206:	4602      	mov	r2, r0
 8003208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ff82 	bl	8003118 <__NVIC_SetPriority>
}
 8003214:	bf00      	nop
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff56 	bl	80030dc <__NVIC_EnableIRQ>
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e098      	b.n	800337c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	4b4d      	ldr	r3, [pc, #308]	; (8003388 <HAL_DMA_Init+0x150>)
 8003252:	429a      	cmp	r2, r3
 8003254:	d80f      	bhi.n	8003276 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	4b4b      	ldr	r3, [pc, #300]	; (800338c <HAL_DMA_Init+0x154>)
 800325e:	4413      	add	r3, r2
 8003260:	4a4b      	ldr	r2, [pc, #300]	; (8003390 <HAL_DMA_Init+0x158>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	009a      	lsls	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a48      	ldr	r2, [pc, #288]	; (8003394 <HAL_DMA_Init+0x15c>)
 8003272:	641a      	str	r2, [r3, #64]	; 0x40
 8003274:	e00e      	b.n	8003294 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	4b46      	ldr	r3, [pc, #280]	; (8003398 <HAL_DMA_Init+0x160>)
 800327e:	4413      	add	r3, r2
 8003280:	4a43      	ldr	r2, [pc, #268]	; (8003390 <HAL_DMA_Init+0x158>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	009a      	lsls	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a42      	ldr	r2, [pc, #264]	; (800339c <HAL_DMA_Init+0x164>)
 8003292:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ee:	d039      	beq.n	8003364 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	4a27      	ldr	r2, [pc, #156]	; (8003394 <HAL_DMA_Init+0x15c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d11a      	bne.n	8003330 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032fa:	4929      	ldr	r1, [pc, #164]	; (80033a0 <HAL_DMA_Init+0x168>)
 80032fc:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <HAL_DMA_Init+0x168>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	f003 031c 	and.w	r3, r3, #28
 8003308:	200f      	movs	r0, #15
 800330a:	fa00 f303 	lsl.w	r3, r0, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	4013      	ands	r3, r2
 8003312:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003314:	4822      	ldr	r0, [pc, #136]	; (80033a0 <HAL_DMA_Init+0x168>)
 8003316:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <HAL_DMA_Init+0x168>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6859      	ldr	r1, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	f003 031c 	and.w	r3, r3, #28
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	4313      	orrs	r3, r2
 800332c:	6003      	str	r3, [r0, #0]
 800332e:	e019      	b.n	8003364 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003330:	491c      	ldr	r1, [pc, #112]	; (80033a4 <HAL_DMA_Init+0x16c>)
 8003332:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_DMA_Init+0x16c>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f003 031c 	and.w	r3, r3, #28
 800333e:	200f      	movs	r0, #15
 8003340:	fa00 f303 	lsl.w	r3, r0, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	4013      	ands	r3, r2
 8003348:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800334a:	4816      	ldr	r0, [pc, #88]	; (80033a4 <HAL_DMA_Init+0x16c>)
 800334c:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <HAL_DMA_Init+0x16c>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	f003 031c 	and.w	r3, r3, #28
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	4313      	orrs	r3, r2
 8003362:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40020407 	.word	0x40020407
 800338c:	bffdfff8 	.word	0xbffdfff8
 8003390:	cccccccd 	.word	0xcccccccd
 8003394:	40020000 	.word	0x40020000
 8003398:	bffdfbf8 	.word	0xbffdfbf8
 800339c:	40020400 	.word	0x40020400
 80033a0:	400200a8 	.word	0x400200a8
 80033a4:	400204a8 	.word	0x400204a8

080033a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_DMA_Start_IT+0x20>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e04b      	b.n	8003460 <HAL_DMA_Start_IT+0xb8>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d13a      	bne.n	8003452 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f921 	bl	8003648 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	f042 020e 	orr.w	r2, r2, #14
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e00f      	b.n	8003440 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	f022 0204 	bic.w	r2, r2, #4
 800342e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	f042 020a 	orr.w	r2, r2, #10
 800343e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e005      	b.n	800345e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800345a:	2302      	movs	r3, #2
 800345c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800345e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d005      	beq.n	800348c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2204      	movs	r2, #4
 8003484:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
 800348a:	e029      	b.n	80034e0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	f022 020e 	bic.w	r2, r2, #14
 800349a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034b4:	f002 021c 	and.w	r2, r2, #28
 80034b8:	2101      	movs	r1, #1
 80034ba:	fa01 f202 	lsl.w	r2, r1, r2
 80034be:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
    }
  }
  return status;
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	f003 031c 	and.w	r3, r3, #28
 800350a:	2204      	movs	r2, #4
 800350c:	409a      	lsls	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d026      	beq.n	8003564 <HAL_DMA_IRQHandler+0x7a>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d021      	beq.n	8003564 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d107      	bne.n	800353e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	f022 0204 	bic.w	r2, r2, #4
 800353c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003546:	f002 021c 	and.w	r2, r2, #28
 800354a:	2104      	movs	r1, #4
 800354c:	fa01 f202 	lsl.w	r2, r1, r2
 8003550:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	2b00      	cmp	r3, #0
 8003558:	d071      	beq.n	800363e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003562:	e06c      	b.n	800363e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	f003 031c 	and.w	r3, r3, #28
 800356c:	2202      	movs	r2, #2
 800356e:	409a      	lsls	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d02e      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xec>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d029      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0320 	and.w	r3, r3, #32
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10b      	bne.n	80035a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	f022 020a 	bic.w	r2, r2, #10
 800359e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80035b0:	f002 021c 	and.w	r2, r2, #28
 80035b4:	2102      	movs	r1, #2
 80035b6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d038      	beq.n	800363e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035d4:	e033      	b.n	800363e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f003 031c 	and.w	r3, r3, #28
 80035de:	2208      	movs	r2, #8
 80035e0:	409a      	lsls	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d02a      	beq.n	8003640 <HAL_DMA_IRQHandler+0x156>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d025      	beq.n	8003640 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	f022 020e 	bic.w	r2, r2, #14
 8003602:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800360c:	f002 021c 	and.w	r2, r2, #28
 8003610:	2101      	movs	r1, #1
 8003612:	fa01 f202 	lsl.w	r2, r1, r2
 8003616:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003632:	2b00      	cmp	r3, #0
 8003634:	d004      	beq.n	8003640 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800363e:	bf00      	nop
 8003640:	bf00      	nop
}
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800365e:	f002 021c 	and.w	r2, r2, #28
 8003662:	2101      	movs	r1, #1
 8003664:	fa01 f202 	lsl.w	r2, r1, r2
 8003668:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b10      	cmp	r3, #16
 8003678:	d108      	bne.n	800368c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800368a:	e007      	b.n	800369c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	60da      	str	r2, [r3, #12]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b6:	e17f      	b.n	80039b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	2101      	movs	r1, #1
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	4013      	ands	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8171 	beq.w	80039b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d00b      	beq.n	80036f0 <HAL_GPIO_Init+0x48>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d007      	beq.n	80036f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036e4:	2b11      	cmp	r3, #17
 80036e6:	d003      	beq.n	80036f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b12      	cmp	r3, #18
 80036ee:	d130      	bne.n	8003752 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	2203      	movs	r2, #3
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003726:	2201      	movs	r2, #1
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	f003 0201 	and.w	r2, r3, #1
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b03      	cmp	r3, #3
 800375c:	d118      	bne.n	8003790 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003764:	2201      	movs	r2, #1
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	08db      	lsrs	r3, r3, #3
 800377a:	f003 0201 	and.w	r2, r3, #1
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2203      	movs	r2, #3
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x128>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b12      	cmp	r3, #18
 80037ce:	d123      	bne.n	8003818 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	08da      	lsrs	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3208      	adds	r2, #8
 80037d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	220f      	movs	r2, #15
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	08da      	lsrs	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3208      	adds	r2, #8
 8003812:	6939      	ldr	r1, [r7, #16]
 8003814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0203 	and.w	r2, r3, #3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80ac 	beq.w	80039b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385a:	4a5e      	ldr	r2, [pc, #376]	; (80039d4 <HAL_GPIO_Init+0x32c>)
 800385c:	4b5d      	ldr	r3, [pc, #372]	; (80039d4 <HAL_GPIO_Init+0x32c>)
 800385e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6613      	str	r3, [r2, #96]	; 0x60
 8003866:	4b5b      	ldr	r3, [pc, #364]	; (80039d4 <HAL_GPIO_Init+0x32c>)
 8003868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003872:	4a59      	ldr	r2, [pc, #356]	; (80039d8 <HAL_GPIO_Init+0x330>)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	3302      	adds	r3, #2
 800387a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	220f      	movs	r2, #15
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800389c:	d025      	beq.n	80038ea <HAL_GPIO_Init+0x242>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4e      	ldr	r2, [pc, #312]	; (80039dc <HAL_GPIO_Init+0x334>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01f      	beq.n	80038e6 <HAL_GPIO_Init+0x23e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4d      	ldr	r2, [pc, #308]	; (80039e0 <HAL_GPIO_Init+0x338>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d019      	beq.n	80038e2 <HAL_GPIO_Init+0x23a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4c      	ldr	r2, [pc, #304]	; (80039e4 <HAL_GPIO_Init+0x33c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_GPIO_Init+0x236>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4b      	ldr	r2, [pc, #300]	; (80039e8 <HAL_GPIO_Init+0x340>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00d      	beq.n	80038da <HAL_GPIO_Init+0x232>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4a      	ldr	r2, [pc, #296]	; (80039ec <HAL_GPIO_Init+0x344>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <HAL_GPIO_Init+0x22e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a49      	ldr	r2, [pc, #292]	; (80039f0 <HAL_GPIO_Init+0x348>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_GPIO_Init+0x22a>
 80038ce:	2306      	movs	r3, #6
 80038d0:	e00c      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038d2:	2307      	movs	r3, #7
 80038d4:	e00a      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038d6:	2305      	movs	r3, #5
 80038d8:	e008      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038da:	2304      	movs	r3, #4
 80038dc:	e006      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038de:	2303      	movs	r3, #3
 80038e0:	e004      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e002      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038ea:	2300      	movs	r3, #0
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	f002 0203 	and.w	r2, r2, #3
 80038f2:	0092      	lsls	r2, r2, #2
 80038f4:	4093      	lsls	r3, r2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038fc:	4936      	ldr	r1, [pc, #216]	; (80039d8 <HAL_GPIO_Init+0x330>)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	3302      	adds	r3, #2
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800390a:	4b3a      	ldr	r3, [pc, #232]	; (80039f4 <HAL_GPIO_Init+0x34c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	43db      	mvns	r3, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800392e:	4a31      	ldr	r2, [pc, #196]	; (80039f4 <HAL_GPIO_Init+0x34c>)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003934:	4b2f      	ldr	r3, [pc, #188]	; (80039f4 <HAL_GPIO_Init+0x34c>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	43db      	mvns	r3, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003958:	4a26      	ldr	r2, [pc, #152]	; (80039f4 <HAL_GPIO_Init+0x34c>)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800395e:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <HAL_GPIO_Init+0x34c>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	43db      	mvns	r3, r3
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4013      	ands	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003982:	4a1c      	ldr	r2, [pc, #112]	; (80039f4 <HAL_GPIO_Init+0x34c>)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003988:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_GPIO_Init+0x34c>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	43db      	mvns	r3, r3
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039ac:	4a11      	ldr	r2, [pc, #68]	; (80039f4 <HAL_GPIO_Init+0x34c>)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	3301      	adds	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fa22 f303 	lsr.w	r3, r2, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f47f ae78 	bne.w	80036b8 <HAL_GPIO_Init+0x10>
  }
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40010000 	.word	0x40010000
 80039dc:	48000400 	.word	0x48000400
 80039e0:	48000800 	.word	0x48000800
 80039e4:	48000c00 	.word	0x48000c00
 80039e8:	48001000 	.word	0x48001000
 80039ec:	48001400 	.word	0x48001400
 80039f0:	48001800 	.word	0x48001800
 80039f4:	40010400 	.word	0x40010400

080039f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <HAL_PWREx_GetVoltageRange+0x18>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40007000 	.word	0x40007000

08003a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a22:	d130      	bne.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a24:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a30:	d038      	beq.n	8003aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a32:	4a20      	ldr	r2, [pc, #128]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a34:	4b1f      	ldr	r3, [pc, #124]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a42:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2232      	movs	r2, #50	; 0x32
 8003a48:	fb02 f303 	mul.w	r3, r2, r3
 8003a4c:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	0c9b      	lsrs	r3, r3, #18
 8003a54:	3301      	adds	r3, #1
 8003a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a58:	e002      	b.n	8003a60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6c:	d102      	bne.n	8003a74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f2      	bne.n	8003a5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a74:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a80:	d110      	bne.n	8003aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e00f      	b.n	8003aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a92:	d007      	beq.n	8003aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a94:	4a07      	ldr	r2, [pc, #28]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a96:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aa2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40007000 	.word	0x40007000
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	431bde83 	.word	0x431bde83

08003ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e3d4      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad2:	4ba1      	ldr	r3, [pc, #644]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003adc:	4b9e      	ldr	r3, [pc, #632]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80e4 	beq.w	8003cbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <HAL_RCC_OscConfig+0x4a>
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	2b0c      	cmp	r3, #12
 8003afe:	f040 808b 	bne.w	8003c18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f040 8087 	bne.w	8003c18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b0a:	4b93      	ldr	r3, [pc, #588]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_RCC_OscConfig+0x62>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e3ac      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1a      	ldr	r2, [r3, #32]
 8003b26:	4b8c      	ldr	r3, [pc, #560]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d004      	beq.n	8003b3c <HAL_RCC_OscConfig+0x7c>
 8003b32:	4b89      	ldr	r3, [pc, #548]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b3a:	e005      	b.n	8003b48 <HAL_RCC_OscConfig+0x88>
 8003b3c:	4b86      	ldr	r3, [pc, #536]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b42:	091b      	lsrs	r3, r3, #4
 8003b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d923      	bls.n	8003b94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fd71 	bl	8004638 <RCC_SetFlashLatencyFromMSIRange>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e38d      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b60:	4a7d      	ldr	r2, [pc, #500]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003b62:	4b7d      	ldr	r3, [pc, #500]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f043 0308 	orr.w	r3, r3, #8
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	497a      	ldr	r1, [pc, #488]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003b6e:	4b7a      	ldr	r3, [pc, #488]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b7e:	4976      	ldr	r1, [pc, #472]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003b80:	4b75      	ldr	r3, [pc, #468]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	021b      	lsls	r3, r3, #8
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	604b      	str	r3, [r1, #4]
 8003b92:	e025      	b.n	8003be0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b94:	4a70      	ldr	r2, [pc, #448]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003b96:	4b70      	ldr	r3, [pc, #448]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f043 0308 	orr.w	r3, r3, #8
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	496d      	ldr	r1, [pc, #436]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003ba2:	4b6d      	ldr	r3, [pc, #436]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bb2:	4969      	ldr	r1, [pc, #420]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003bb4:	4b68      	ldr	r3, [pc, #416]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fd31 	bl	8004638 <RCC_SetFlashLatencyFromMSIRange>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e34d      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003be0:	f000 fc36 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8003be4:	4601      	mov	r1, r0
 8003be6:	4b5c      	ldr	r3, [pc, #368]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	091b      	lsrs	r3, r3, #4
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	4a5a      	ldr	r2, [pc, #360]	; (8003d5c <HAL_RCC_OscConfig+0x29c>)
 8003bf2:	5cd3      	ldrb	r3, [r2, r3]
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8003bfc:	4a58      	ldr	r2, [pc, #352]	; (8003d60 <HAL_RCC_OscConfig+0x2a0>)
 8003bfe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c00:	4b58      	ldr	r3, [pc, #352]	; (8003d64 <HAL_RCC_OscConfig+0x2a4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fd ff1f 	bl	8001a48 <HAL_InitTick>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d052      	beq.n	8003cba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	e331      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d032      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c20:	4a4d      	ldr	r2, [pc, #308]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003c22:	4b4d      	ldr	r3, [pc, #308]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c2c:	f7fe f816 	bl	8001c5c <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c34:	f7fe f812 	bl	8001c5c <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e31a      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c46:	4b44      	ldr	r3, [pc, #272]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c52:	4a41      	ldr	r2, [pc, #260]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003c54:	4b40      	ldr	r3, [pc, #256]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f043 0308 	orr.w	r3, r3, #8
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	493e      	ldr	r1, [pc, #248]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003c60:	4b3d      	ldr	r3, [pc, #244]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c70:	4939      	ldr	r1, [pc, #228]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003c72:	4b39      	ldr	r3, [pc, #228]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
 8003c84:	e01a      	b.n	8003cbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c86:	4a34      	ldr	r2, [pc, #208]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003c88:	4b33      	ldr	r3, [pc, #204]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c92:	f7fd ffe3 	bl	8001c5c <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c9a:	f7fd ffdf 	bl	8001c5c <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e2e7      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cac:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f0      	bne.n	8003c9a <HAL_RCC_OscConfig+0x1da>
 8003cb8:	e000      	b.n	8003cbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d074      	beq.n	8003db2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d005      	beq.n	8003cda <HAL_RCC_OscConfig+0x21a>
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	d10e      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d10b      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cda:	4b1f      	ldr	r3, [pc, #124]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d064      	beq.n	8003db0 <HAL_RCC_OscConfig+0x2f0>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d160      	bne.n	8003db0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e2c4      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfa:	d106      	bne.n	8003d0a <HAL_RCC_OscConfig+0x24a>
 8003cfc:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003cfe:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	e01d      	b.n	8003d46 <HAL_RCC_OscConfig+0x286>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d12:	d10c      	bne.n	8003d2e <HAL_RCC_OscConfig+0x26e>
 8003d14:	4a10      	ldr	r2, [pc, #64]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003d16:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	4a0d      	ldr	r2, [pc, #52]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003d22:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	e00b      	b.n	8003d46 <HAL_RCC_OscConfig+0x286>
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	4a07      	ldr	r2, [pc, #28]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_RCC_OscConfig+0x298>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01c      	beq.n	8003d88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7fd ff85 	bl	8001c5c <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d54:	e011      	b.n	8003d7a <HAL_RCC_OscConfig+0x2ba>
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	0800a334 	.word	0x0800a334
 8003d60:	20000000 	.word	0x20000000
 8003d64:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d68:	f7fd ff78 	bl	8001c5c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b64      	cmp	r3, #100	; 0x64
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e280      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d7a:	4baf      	ldr	r3, [pc, #700]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCC_OscConfig+0x2a8>
 8003d86:	e014      	b.n	8003db2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fd ff68 	bl	8001c5c <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d90:	f7fd ff64 	bl	8001c5c <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b64      	cmp	r3, #100	; 0x64
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e26c      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003da2:	4ba5      	ldr	r3, [pc, #660]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x2d0>
 8003dae:	e000      	b.n	8003db2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d060      	beq.n	8003e80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x310>
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b0c      	cmp	r3, #12
 8003dc8:	d119      	bne.n	8003dfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d116      	bne.n	8003dfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dd0:	4b99      	ldr	r3, [pc, #612]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_RCC_OscConfig+0x328>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e249      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de8:	4993      	ldr	r1, [pc, #588]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003dea:	4b93      	ldr	r3, [pc, #588]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	061b      	lsls	r3, r3, #24
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dfc:	e040      	b.n	8003e80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d023      	beq.n	8003e4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e06:	4a8c      	ldr	r2, [pc, #560]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003e08:	4b8b      	ldr	r3, [pc, #556]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e12:	f7fd ff23 	bl	8001c5c <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e1a:	f7fd ff1f 	bl	8001c5c <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e227      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e2c:	4b82      	ldr	r3, [pc, #520]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e38:	497f      	ldr	r1, [pc, #508]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003e3a:	4b7f      	ldr	r3, [pc, #508]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	061b      	lsls	r3, r3, #24
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
 8003e4c:	e018      	b.n	8003e80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e4e:	4a7a      	ldr	r2, [pc, #488]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003e50:	4b79      	ldr	r3, [pc, #484]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5a:	f7fd feff 	bl	8001c5c <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e62:	f7fd fefb 	bl	8001c5c <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e203      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e74:	4b70      	ldr	r3, [pc, #448]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f0      	bne.n	8003e62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d03c      	beq.n	8003f06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01c      	beq.n	8003ece <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e94:	4a68      	ldr	r2, [pc, #416]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003e96:	4b68      	ldr	r3, [pc, #416]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea4:	f7fd feda 	bl	8001c5c <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eac:	f7fd fed6 	bl	8001c5c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e1de      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ebe:	4b5e      	ldr	r3, [pc, #376]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0ef      	beq.n	8003eac <HAL_RCC_OscConfig+0x3ec>
 8003ecc:	e01b      	b.n	8003f06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ece:	4a5a      	ldr	r2, [pc, #360]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003ed0:	4b59      	ldr	r3, [pc, #356]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ede:	f7fd febd 	bl	8001c5c <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee6:	f7fd feb9 	bl	8001c5c <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e1c1      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ef8:	4b4f      	ldr	r3, [pc, #316]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1ef      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80a6 	beq.w	8004060 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f14:	2300      	movs	r3, #0
 8003f16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f18:	4b47      	ldr	r3, [pc, #284]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10d      	bne.n	8003f40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f24:	4a44      	ldr	r2, [pc, #272]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003f26:	4b44      	ldr	r3, [pc, #272]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f30:	4b41      	ldr	r3, [pc, #260]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f40:	4b3e      	ldr	r3, [pc, #248]	; (800403c <HAL_RCC_OscConfig+0x57c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d118      	bne.n	8003f7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f4c:	4a3b      	ldr	r2, [pc, #236]	; (800403c <HAL_RCC_OscConfig+0x57c>)
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	; (800403c <HAL_RCC_OscConfig+0x57c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f58:	f7fd fe80 	bl	8001c5c <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f60:	f7fd fe7c 	bl	8001c5c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e184      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f72:	4b32      	ldr	r3, [pc, #200]	; (800403c <HAL_RCC_OscConfig+0x57c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d108      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4d8>
 8003f86:	4a2c      	ldr	r2, [pc, #176]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003f88:	4b2b      	ldr	r3, [pc, #172]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f96:	e024      	b.n	8003fe2 <HAL_RCC_OscConfig+0x522>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b05      	cmp	r3, #5
 8003f9e:	d110      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x502>
 8003fa0:	4a25      	ldr	r2, [pc, #148]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003fa2:	4b25      	ldr	r3, [pc, #148]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa8:	f043 0304 	orr.w	r3, r3, #4
 8003fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fb0:	4a21      	ldr	r2, [pc, #132]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003fb2:	4b21      	ldr	r3, [pc, #132]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fc0:	e00f      	b.n	8003fe2 <HAL_RCC_OscConfig+0x522>
 8003fc2:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003fc4:	4b1c      	ldr	r3, [pc, #112]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fd2:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003fd4:	4b18      	ldr	r3, [pc, #96]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f023 0304 	bic.w	r3, r3, #4
 8003fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d016      	beq.n	8004018 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fea:	f7fd fe37 	bl	8001c5c <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ff0:	e00a      	b.n	8004008 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff2:	f7fd fe33 	bl	8001c5c <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004000:	4293      	cmp	r3, r2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e139      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004008:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <HAL_RCC_OscConfig+0x578>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0ed      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x532>
 8004016:	e01a      	b.n	800404e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004018:	f7fd fe20 	bl	8001c5c <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800401e:	e00f      	b.n	8004040 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004020:	f7fd fe1c 	bl	8001c5c <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	; 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d906      	bls.n	8004040 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e122      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000
 800403c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004040:	4b90      	ldr	r3, [pc, #576]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e8      	bne.n	8004020 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800404e:	7ffb      	ldrb	r3, [r7, #31]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d105      	bne.n	8004060 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004054:	4a8b      	ldr	r2, [pc, #556]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004056:	4b8b      	ldr	r3, [pc, #556]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800405e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8108 	beq.w	800427a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	2b02      	cmp	r3, #2
 8004070:	f040 80d0 	bne.w	8004214 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004074:	4b83      	ldr	r3, [pc, #524]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 0203 	and.w	r2, r3, #3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	429a      	cmp	r2, r3
 8004086:	d130      	bne.n	80040ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	3b01      	subs	r3, #1
 8004094:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d127      	bne.n	80040ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d11f      	bne.n	80040ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040b4:	2a07      	cmp	r2, #7
 80040b6:	bf14      	ite	ne
 80040b8:	2201      	movne	r2, #1
 80040ba:	2200      	moveq	r2, #0
 80040bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040be:	4293      	cmp	r3, r2
 80040c0:	d113      	bne.n	80040ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	3b01      	subs	r3, #1
 80040d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d109      	bne.n	80040ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	3b01      	subs	r3, #1
 80040e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d06e      	beq.n	80041c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	2b0c      	cmp	r3, #12
 80040ee:	d069      	beq.n	80041c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040f0:	4b64      	ldr	r3, [pc, #400]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d105      	bne.n	8004108 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040fc:	4b61      	ldr	r3, [pc, #388]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0b7      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800410c:	4a5d      	ldr	r2, [pc, #372]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 800410e:	4b5d      	ldr	r3, [pc, #372]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004116:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004118:	f7fd fda0 	bl	8001c5c <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004120:	f7fd fd9c 	bl	8001c5c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e0a4      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004132:	4b54      	ldr	r3, [pc, #336]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800413e:	4851      	ldr	r0, [pc, #324]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004140:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	4b50      	ldr	r3, [pc, #320]	; (8004288 <HAL_RCC_OscConfig+0x7c8>)
 8004146:	4013      	ands	r3, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004150:	3a01      	subs	r2, #1
 8004152:	0112      	lsls	r2, r2, #4
 8004154:	4311      	orrs	r1, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800415a:	0212      	lsls	r2, r2, #8
 800415c:	4311      	orrs	r1, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004162:	0852      	lsrs	r2, r2, #1
 8004164:	3a01      	subs	r2, #1
 8004166:	0552      	lsls	r2, r2, #21
 8004168:	4311      	orrs	r1, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800416e:	0852      	lsrs	r2, r2, #1
 8004170:	3a01      	subs	r2, #1
 8004172:	0652      	lsls	r2, r2, #25
 8004174:	4311      	orrs	r1, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800417a:	0912      	lsrs	r2, r2, #4
 800417c:	0452      	lsls	r2, r2, #17
 800417e:	430a      	orrs	r2, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004184:	4a3f      	ldr	r2, [pc, #252]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004186:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800418e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004190:	4a3c      	ldr	r2, [pc, #240]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004192:	4b3c      	ldr	r3, [pc, #240]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800419a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800419c:	f7fd fd5e 	bl	8001c5c <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fd fd5a 	bl	8001c5c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e062      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b6:	4b33      	ldr	r3, [pc, #204]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041c2:	e05a      	b.n	800427a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e059      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c8:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d152      	bne.n	800427a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041d4:	4a2b      	ldr	r2, [pc, #172]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 80041d6:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041e0:	4a28      	ldr	r2, [pc, #160]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 80041e2:	4b28      	ldr	r3, [pc, #160]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041ec:	f7fd fd36 	bl	8001c5c <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f4:	f7fd fd32 	bl	8001c5c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e03a      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004206:	4b1f      	ldr	r3, [pc, #124]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x734>
 8004212:	e032      	b.n	800427a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b0c      	cmp	r3, #12
 8004218:	d02d      	beq.n	8004276 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421a:	4a1a      	ldr	r2, [pc, #104]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 800421c:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004224:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004226:	4b17      	ldr	r3, [pc, #92]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d105      	bne.n	800423e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004232:	4a14      	ldr	r2, [pc, #80]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004234:	4b13      	ldr	r3, [pc, #76]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f023 0303 	bic.w	r3, r3, #3
 800423c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800423e:	4a11      	ldr	r2, [pc, #68]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004240:	4b10      	ldr	r3, [pc, #64]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424e:	f7fd fd05 	bl	8001c5c <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004256:	f7fd fd01 	bl	8001c5c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e009      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004268:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_RCC_OscConfig+0x7c4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f0      	bne.n	8004256 <HAL_RCC_OscConfig+0x796>
 8004274:	e001      	b.n	800427a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000
 8004288:	f99d808c 	.word	0xf99d808c

0800428c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0c8      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a0:	4b66      	ldr	r3, [pc, #408]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0207 	and.w	r2, r3, #7
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d210      	bcs.n	80042d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4963      	ldr	r1, [pc, #396]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 80042b0:	4b62      	ldr	r3, [pc, #392]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f023 0207 	bic.w	r2, r3, #7
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042be:	4b5f      	ldr	r3, [pc, #380]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0207 	and.w	r2, r3, #7
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0b0      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d04c      	beq.n	8004376 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d107      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e4:	4b56      	ldr	r3, [pc, #344]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d121      	bne.n	8004334 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e09e      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d107      	bne.n	800430c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042fc:	4b50      	ldr	r3, [pc, #320]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d115      	bne.n	8004334 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e092      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d107      	bne.n	8004324 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004314:	4b4a      	ldr	r3, [pc, #296]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e086      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004324:	4b46      	ldr	r3, [pc, #280]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e07e      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004334:	4942      	ldr	r1, [pc, #264]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 8004336:	4b42      	ldr	r3, [pc, #264]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f023 0203 	bic.w	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004346:	f7fd fc89 	bl	8001c5c <HAL_GetTick>
 800434a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434c:	e00a      	b.n	8004364 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434e:	f7fd fc85 	bl	8001c5c <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	f241 3288 	movw	r2, #5000	; 0x1388
 800435c:	4293      	cmp	r3, r2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e066      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004364:	4b36      	ldr	r3, [pc, #216]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 020c 	and.w	r2, r3, #12
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	429a      	cmp	r2, r3
 8004374:	d1eb      	bne.n	800434e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004382:	492f      	ldr	r1, [pc, #188]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 8004384:	4b2e      	ldr	r3, [pc, #184]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	4313      	orrs	r3, r2
 8004392:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004394:	4b29      	ldr	r3, [pc, #164]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0207 	and.w	r2, r3, #7
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d910      	bls.n	80043c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a2:	4926      	ldr	r1, [pc, #152]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 80043a4:	4b25      	ldr	r3, [pc, #148]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 0207 	bic.w	r2, r3, #7
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b22      	ldr	r3, [pc, #136]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0207 	and.w	r2, r3, #7
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e036      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d0:	491b      	ldr	r1, [pc, #108]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 80043d2:	4b1b      	ldr	r3, [pc, #108]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ee:	4914      	ldr	r1, [pc, #80]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 80043f0:	4b13      	ldr	r3, [pc, #76]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4313      	orrs	r3, r2
 8004400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004402:	f000 f825 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8004406:	4601      	mov	r1, r0
 8004408:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 8004414:	5cd3      	ldrb	r3, [r2, r3]
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	fa21 f303 	lsr.w	r3, r1, r3
 800441e:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_RCC_ClockConfig+0x1c0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fd fb0e 	bl	8001a48 <HAL_InitTick>
 800442c:	4603      	mov	r3, r0
 800442e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004430:	7afb      	ldrb	r3, [r7, #11]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40022000 	.word	0x40022000
 8004440:	40021000 	.word	0x40021000
 8004444:	0800a334 	.word	0x0800a334
 8004448:	20000000 	.word	0x20000000
 800444c:	20000004 	.word	0x20000004

08004450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004450:	b480      	push	{r7}
 8004452:	b089      	sub	sp, #36	; 0x24
 8004454:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445e:	4b3d      	ldr	r3, [pc, #244]	; (8004554 <HAL_RCC_GetSysClockFreq+0x104>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004468:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <HAL_RCC_GetSysClockFreq+0x104>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0x34>
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b0c      	cmp	r3, #12
 800447c:	d121      	bne.n	80044c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d11e      	bne.n	80044c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004484:	4b33      	ldr	r3, [pc, #204]	; (8004554 <HAL_RCC_GetSysClockFreq+0x104>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d107      	bne.n	80044a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004490:	4b30      	ldr	r3, [pc, #192]	; (8004554 <HAL_RCC_GetSysClockFreq+0x104>)
 8004492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	e005      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044a0:	4b2c      	ldr	r3, [pc, #176]	; (8004554 <HAL_RCC_GetSysClockFreq+0x104>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044ac:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10d      	bne.n	80044d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044c0:	e00a      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d102      	bne.n	80044ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044c8:	4b24      	ldr	r3, [pc, #144]	; (800455c <HAL_RCC_GetSysClockFreq+0x10c>)
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	e004      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044d4:	4b22      	ldr	r3, [pc, #136]	; (8004560 <HAL_RCC_GetSysClockFreq+0x110>)
 80044d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b0c      	cmp	r3, #12
 80044dc:	d133      	bne.n	8004546 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044de:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <HAL_RCC_GetSysClockFreq+0x104>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d002      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0xa4>
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d003      	beq.n	80044fa <HAL_RCC_GetSysClockFreq+0xaa>
 80044f2:	e005      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044f4:	4b19      	ldr	r3, [pc, #100]	; (800455c <HAL_RCC_GetSysClockFreq+0x10c>)
 80044f6:	617b      	str	r3, [r7, #20]
      break;
 80044f8:	e005      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044fa:	4b19      	ldr	r3, [pc, #100]	; (8004560 <HAL_RCC_GetSysClockFreq+0x110>)
 80044fc:	617b      	str	r3, [r7, #20]
      break;
 80044fe:	e002      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	617b      	str	r3, [r7, #20]
      break;
 8004504:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <HAL_RCC_GetSysClockFreq+0x104>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	3301      	adds	r3, #1
 8004512:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <HAL_RCC_GetSysClockFreq+0x104>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	0a1b      	lsrs	r3, r3, #8
 800451a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	fb02 f203 	mul.w	r2, r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	fbb2 f3f3 	udiv	r3, r2, r3
 800452a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800452c:	4b09      	ldr	r3, [pc, #36]	; (8004554 <HAL_RCC_GetSysClockFreq+0x104>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	0e5b      	lsrs	r3, r3, #25
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	3301      	adds	r3, #1
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004546:	69bb      	ldr	r3, [r7, #24]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3724      	adds	r7, #36	; 0x24
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	40021000 	.word	0x40021000
 8004558:	0800a34c 	.word	0x0800a34c
 800455c:	00f42400 	.word	0x00f42400
 8004560:	007a1200 	.word	0x007a1200

08004564 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004568:	4b03      	ldr	r3, [pc, #12]	; (8004578 <HAL_RCC_GetHCLKFreq+0x14>)
 800456a:	681b      	ldr	r3, [r3, #0]
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000000 	.word	0x20000000

0800457c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004580:	f7ff fff0 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 8004584:	4601      	mov	r1, r0
 8004586:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	0a1b      	lsrs	r3, r3, #8
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4a04      	ldr	r2, [pc, #16]	; (80045a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004592:	5cd3      	ldrb	r3, [r2, r3]
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	fa21 f303 	lsr.w	r3, r1, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40021000 	.word	0x40021000
 80045a4:	0800a344 	.word	0x0800a344

080045a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045ac:	f7ff ffda 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 80045b0:	4601      	mov	r1, r0
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	0adb      	lsrs	r3, r3, #11
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4a04      	ldr	r2, [pc, #16]	; (80045d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045be:	5cd3      	ldrb	r3, [r2, r3]
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40021000 	.word	0x40021000
 80045d0:	0800a344 	.word	0x0800a344

080045d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	220f      	movs	r2, #15
 80045e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80045e4:	4b12      	ldr	r3, [pc, #72]	; (8004630 <HAL_RCC_GetClockConfig+0x5c>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 0203 	and.w	r2, r3, #3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80045f0:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <HAL_RCC_GetClockConfig+0x5c>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <HAL_RCC_GetClockConfig+0x5c>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004608:	4b09      	ldr	r3, [pc, #36]	; (8004630 <HAL_RCC_GetClockConfig+0x5c>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	08db      	lsrs	r3, r3, #3
 800460e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004616:	4b07      	ldr	r3, [pc, #28]	; (8004634 <HAL_RCC_GetClockConfig+0x60>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0207 	and.w	r2, r3, #7
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	601a      	str	r2, [r3, #0]
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000
 8004634:	40022000 	.word	0x40022000

08004638 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004640:	2300      	movs	r3, #0
 8004642:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004644:	4b2a      	ldr	r3, [pc, #168]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004650:	f7ff f9d2 	bl	80039f8 <HAL_PWREx_GetVoltageRange>
 8004654:	6178      	str	r0, [r7, #20]
 8004656:	e014      	b.n	8004682 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004658:	4a25      	ldr	r2, [pc, #148]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800465a:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004662:	6593      	str	r3, [r2, #88]	; 0x58
 8004664:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004670:	f7ff f9c2 	bl	80039f8 <HAL_PWREx_GetVoltageRange>
 8004674:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004676:	4a1e      	ldr	r2, [pc, #120]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004680:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004688:	d10b      	bne.n	80046a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b80      	cmp	r3, #128	; 0x80
 800468e:	d919      	bls.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2ba0      	cmp	r3, #160	; 0xa0
 8004694:	d902      	bls.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004696:	2302      	movs	r3, #2
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	e013      	b.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800469c:	2301      	movs	r3, #1
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	e010      	b.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b80      	cmp	r3, #128	; 0x80
 80046a6:	d902      	bls.n	80046ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046a8:	2303      	movs	r3, #3
 80046aa:	613b      	str	r3, [r7, #16]
 80046ac:	e00a      	b.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b80      	cmp	r3, #128	; 0x80
 80046b2:	d102      	bne.n	80046ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046b4:	2302      	movs	r3, #2
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	e004      	b.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b70      	cmp	r3, #112	; 0x70
 80046be:	d101      	bne.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046c0:	2301      	movs	r3, #1
 80046c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046c4:	490b      	ldr	r1, [pc, #44]	; (80046f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 0207 	bic.w	r2, r3, #7
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046d4:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0207 	and.w	r2, r3, #7
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d001      	beq.n	80046e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40022000 	.word	0x40022000

080046f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004700:	2300      	movs	r3, #0
 8004702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004704:	2300      	movs	r3, #0
 8004706:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004710:	2b00      	cmp	r3, #0
 8004712:	d03f      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800471c:	d01c      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800471e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004722:	d802      	bhi.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00e      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004728:	e01f      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800472a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800472e:	d003      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004730:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004734:	d01c      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004736:	e018      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004738:	4a85      	ldr	r2, [pc, #532]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800473a:	4b85      	ldr	r3, [pc, #532]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004742:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004744:	e015      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3304      	adds	r3, #4
 800474a:	2100      	movs	r1, #0
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fab9 	bl	8004cc4 <RCCEx_PLLSAI1_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004756:	e00c      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3320      	adds	r3, #32
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fba0 	bl	8004ea4 <RCCEx_PLLSAI2_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004768:	e003      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	74fb      	strb	r3, [r7, #19]
      break;
 800476e:	e000      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004772:	7cfb      	ldrb	r3, [r7, #19]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004778:	4975      	ldr	r1, [pc, #468]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800477a:	4b75      	ldr	r3, [pc, #468]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800478e:	e001      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	7cfb      	ldrb	r3, [r7, #19]
 8004792:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d03f      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047a8:	d01c      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80047aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047ae:	d802      	bhi.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00e      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80047b4:	e01f      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80047b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047ba:	d003      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80047bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047c0:	d01c      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80047c2:	e018      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047c4:	4a62      	ldr	r2, [pc, #392]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047c6:	4b62      	ldr	r3, [pc, #392]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047d0:	e015      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3304      	adds	r3, #4
 80047d6:	2100      	movs	r1, #0
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fa73 	bl	8004cc4 <RCCEx_PLLSAI1_Config>
 80047de:	4603      	mov	r3, r0
 80047e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047e2:	e00c      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3320      	adds	r3, #32
 80047e8:	2100      	movs	r1, #0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fb5a 	bl	8004ea4 <RCCEx_PLLSAI2_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047f4:	e003      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	74fb      	strb	r3, [r7, #19]
      break;
 80047fa:	e000      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80047fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047fe:	7cfb      	ldrb	r3, [r7, #19]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004804:	4952      	ldr	r1, [pc, #328]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004806:	4b52      	ldr	r3, [pc, #328]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800481a:	e001      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	7cfb      	ldrb	r3, [r7, #19]
 800481e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80a0 	beq.w	800496e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482e:	2300      	movs	r3, #0
 8004830:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004832:	4b47      	ldr	r3, [pc, #284]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004842:	2300      	movs	r3, #0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00d      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004848:	4a41      	ldr	r2, [pc, #260]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800484a:	4b41      	ldr	r3, [pc, #260]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004852:	6593      	str	r3, [r2, #88]	; 0x58
 8004854:	4b3e      	ldr	r3, [pc, #248]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004860:	2301      	movs	r3, #1
 8004862:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004864:	4a3b      	ldr	r2, [pc, #236]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004866:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004870:	f7fd f9f4 	bl	8001c5c <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004876:	e009      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004878:	f7fd f9f0 	bl	8001c5c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d902      	bls.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	74fb      	strb	r3, [r7, #19]
        break;
 800488a:	e005      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800488c:	4b31      	ldr	r3, [pc, #196]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0ef      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d15c      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800489e:	4b2c      	ldr	r3, [pc, #176]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01f      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d019      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048bc:	4b24      	ldr	r3, [pc, #144]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048c8:	4a21      	ldr	r2, [pc, #132]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048ca:	4b21      	ldr	r3, [pc, #132]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048d8:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048da:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048e8:	4a19      	ldr	r2, [pc, #100]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d016      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fa:	f7fd f9af 	bl	8001c5c <HAL_GetTick>
 80048fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004900:	e00b      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004902:	f7fd f9ab 	bl	8001c5c <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004910:	4293      	cmp	r3, r2
 8004912:	d902      	bls.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	74fb      	strb	r3, [r7, #19]
            break;
 8004918:	e006      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800491a:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0ec      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10c      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800492e:	4908      	ldr	r1, [pc, #32]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004946:	e009      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004948:	7cfb      	ldrb	r3, [r7, #19]
 800494a:	74bb      	strb	r3, [r7, #18]
 800494c:	e006      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800494e:	bf00      	nop
 8004950:	40021000 	.word	0x40021000
 8004954:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800495c:	7c7b      	ldrb	r3, [r7, #17]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d105      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004962:	4a9e      	ldr	r2, [pc, #632]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004964:	4b9d      	ldr	r3, [pc, #628]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800496c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800497a:	4998      	ldr	r1, [pc, #608]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800497c:	4b97      	ldr	r3, [pc, #604]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f023 0203 	bic.w	r2, r3, #3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800499c:	498f      	ldr	r1, [pc, #572]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800499e:	4b8f      	ldr	r3, [pc, #572]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a4:	f023 020c 	bic.w	r2, r3, #12
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049be:	4987      	ldr	r1, [pc, #540]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049c0:	4b86      	ldr	r3, [pc, #536]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049e0:	497e      	ldr	r1, [pc, #504]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049e2:	4b7e      	ldr	r3, [pc, #504]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a02:	4976      	ldr	r1, [pc, #472]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a04:	4b75      	ldr	r3, [pc, #468]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a24:	496d      	ldr	r1, [pc, #436]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a26:	4b6d      	ldr	r3, [pc, #436]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a46:	4965      	ldr	r1, [pc, #404]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a48:	4b64      	ldr	r3, [pc, #400]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a68:	495c      	ldr	r1, [pc, #368]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a6a:	4b5c      	ldr	r3, [pc, #368]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a8a:	4954      	ldr	r1, [pc, #336]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a8c:	4b53      	ldr	r3, [pc, #332]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004aac:	494b      	ldr	r1, [pc, #300]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aae:	4b4b      	ldr	r3, [pc, #300]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ace:	4943      	ldr	r1, [pc, #268]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ad0:	4b42      	ldr	r3, [pc, #264]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d028      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004af0:	493a      	ldr	r1, [pc, #232]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004af2:	4b3a      	ldr	r3, [pc, #232]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b0e:	d106      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b10:	4a32      	ldr	r2, [pc, #200]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b12:	4b32      	ldr	r3, [pc, #200]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b1a:	60d3      	str	r3, [r2, #12]
 8004b1c:	e011      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b26:	d10c      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 f8c8 	bl	8004cc4 <RCCEx_PLLSAI1_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b38:	7cfb      	ldrb	r3, [r7, #19]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004b3e:	7cfb      	ldrb	r3, [r7, #19]
 8004b40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d028      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b4e:	4923      	ldr	r1, [pc, #140]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b50:	4b22      	ldr	r3, [pc, #136]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b6c:	d106      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b6e:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b70:	4b1a      	ldr	r3, [pc, #104]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b78:	60d3      	str	r3, [r2, #12]
 8004b7a:	e011      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b84:	d10c      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 f899 	bl	8004cc4 <RCCEx_PLLSAI1_Config>
 8004b92:	4603      	mov	r3, r0
 8004b94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b96:	7cfb      	ldrb	r3, [r7, #19]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004b9c:	7cfb      	ldrb	r3, [r7, #19]
 8004b9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d02b      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bac:	490b      	ldr	r1, [pc, #44]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bae:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bca:	d109      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bcc:	4a03      	ldr	r2, [pc, #12]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bce:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd6:	60d3      	str	r3, [r2, #12]
 8004bd8:	e014      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004be8:	d10c      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3304      	adds	r3, #4
 8004bee:	2101      	movs	r1, #1
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 f867 	bl	8004cc4 <RCCEx_PLLSAI1_Config>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bfa:	7cfb      	ldrb	r3, [r7, #19]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d02f      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c10:	492b      	ldr	r1, [pc, #172]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c12:	4b2b      	ldr	r3, [pc, #172]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c2e:	d10d      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3304      	adds	r3, #4
 8004c34:	2102      	movs	r1, #2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f844 	bl	8004cc4 <RCCEx_PLLSAI1_Config>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d014      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	74bb      	strb	r3, [r7, #18]
 8004c4a:	e011      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c54:	d10c      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3320      	adds	r3, #32
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 f921 	bl	8004ea4 <RCCEx_PLLSAI2_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c66:	7cfb      	ldrb	r3, [r7, #19]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004c6c:	7cfb      	ldrb	r3, [r7, #19]
 8004c6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c7c:	4910      	ldr	r1, [pc, #64]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c7e:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00b      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c9e:	4908      	ldr	r1, [pc, #32]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ca0:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cb6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40021000 	.word	0x40021000

08004cc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cd2:	4b73      	ldr	r3, [pc, #460]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d018      	beq.n	8004d10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cde:	4b70      	ldr	r3, [pc, #448]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f003 0203 	and.w	r2, r3, #3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d10d      	bne.n	8004d0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
       ||
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cf6:	4b6a      	ldr	r3, [pc, #424]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	091b      	lsrs	r3, r3, #4
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
       ||
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d044      	beq.n	8004d94 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
 8004d0e:	e041      	b.n	8004d94 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d00c      	beq.n	8004d32 <RCCEx_PLLSAI1_Config+0x6e>
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d013      	beq.n	8004d44 <RCCEx_PLLSAI1_Config+0x80>
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d120      	bne.n	8004d62 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d20:	4b5f      	ldr	r3, [pc, #380]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d11d      	bne.n	8004d68 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d30:	e01a      	b.n	8004d68 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d32:	4b5b      	ldr	r3, [pc, #364]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d116      	bne.n	8004d6c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d42:	e013      	b.n	8004d6c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d44:	4b56      	ldr	r3, [pc, #344]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10f      	bne.n	8004d70 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d50:	4b53      	ldr	r3, [pc, #332]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d109      	bne.n	8004d70 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d60:	e006      	b.n	8004d70 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	73fb      	strb	r3, [r7, #15]
      break;
 8004d66:	e004      	b.n	8004d72 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004d68:	bf00      	nop
 8004d6a:	e002      	b.n	8004d72 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004d6c:	bf00      	nop
 8004d6e:	e000      	b.n	8004d72 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004d70:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10d      	bne.n	8004d94 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d78:	4849      	ldr	r0, [pc, #292]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d7a:	4b49      	ldr	r3, [pc, #292]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6819      	ldr	r1, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d17d      	bne.n	8004e96 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d9a:	4a41      	ldr	r2, [pc, #260]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d9c:	4b40      	ldr	r3, [pc, #256]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da6:	f7fc ff59 	bl	8001c5c <HAL_GetTick>
 8004daa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dac:	e009      	b.n	8004dc2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dae:	f7fc ff55 	bl	8001c5c <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d902      	bls.n	8004dc2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	73fb      	strb	r3, [r7, #15]
        break;
 8004dc0:	e005      	b.n	8004dce <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dc2:	4b37      	ldr	r3, [pc, #220]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1ef      	bne.n	8004dae <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d160      	bne.n	8004e96 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d111      	bne.n	8004dfe <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dda:	4831      	ldr	r0, [pc, #196]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ddc:	4b30      	ldr	r3, [pc, #192]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6892      	ldr	r2, [r2, #8]
 8004dec:	0211      	lsls	r1, r2, #8
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68d2      	ldr	r2, [r2, #12]
 8004df2:	0912      	lsrs	r2, r2, #4
 8004df4:	0452      	lsls	r2, r2, #17
 8004df6:	430a      	orrs	r2, r1
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	6103      	str	r3, [r0, #16]
 8004dfc:	e027      	b.n	8004e4e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d112      	bne.n	8004e2a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e04:	4826      	ldr	r0, [pc, #152]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e06:	4b26      	ldr	r3, [pc, #152]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6892      	ldr	r2, [r2, #8]
 8004e16:	0211      	lsls	r1, r2, #8
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6912      	ldr	r2, [r2, #16]
 8004e1c:	0852      	lsrs	r2, r2, #1
 8004e1e:	3a01      	subs	r2, #1
 8004e20:	0552      	lsls	r2, r2, #21
 8004e22:	430a      	orrs	r2, r1
 8004e24:	4313      	orrs	r3, r2
 8004e26:	6103      	str	r3, [r0, #16]
 8004e28:	e011      	b.n	8004e4e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e2a:	481d      	ldr	r0, [pc, #116]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e2c:	4b1c      	ldr	r3, [pc, #112]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6892      	ldr	r2, [r2, #8]
 8004e3c:	0211      	lsls	r1, r2, #8
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6952      	ldr	r2, [r2, #20]
 8004e42:	0852      	lsrs	r2, r2, #1
 8004e44:	3a01      	subs	r2, #1
 8004e46:	0652      	lsls	r2, r2, #25
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e4e:	4a14      	ldr	r2, [pc, #80]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e50:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5a:	f7fc feff 	bl	8001c5c <HAL_GetTick>
 8004e5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e60:	e009      	b.n	8004e76 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e62:	f7fc fefb 	bl	8001c5c <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d902      	bls.n	8004e76 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	73fb      	strb	r3, [r7, #15]
          break;
 8004e74:	e005      	b.n	8004e82 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e76:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0ef      	beq.n	8004e62 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d106      	bne.n	8004e96 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e88:	4905      	ldr	r1, [pc, #20]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40021000 	.word	0x40021000

08004ea4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004eb2:	4b68      	ldr	r3, [pc, #416]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d018      	beq.n	8004ef0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ebe:	4b65      	ldr	r3, [pc, #404]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0203 	and.w	r2, r3, #3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d10d      	bne.n	8004eea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d009      	beq.n	8004eea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ed6:	4b5f      	ldr	r3, [pc, #380]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	091b      	lsrs	r3, r3, #4
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d044      	beq.n	8004f74 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	73fb      	strb	r3, [r7, #15]
 8004eee:	e041      	b.n	8004f74 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d00c      	beq.n	8004f12 <RCCEx_PLLSAI2_Config+0x6e>
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d013      	beq.n	8004f24 <RCCEx_PLLSAI2_Config+0x80>
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d120      	bne.n	8004f42 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f00:	4b54      	ldr	r3, [pc, #336]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d11d      	bne.n	8004f48 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f10:	e01a      	b.n	8004f48 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f12:	4b50      	ldr	r3, [pc, #320]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d116      	bne.n	8004f4c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f22:	e013      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f24:	4b4b      	ldr	r3, [pc, #300]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10f      	bne.n	8004f50 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f30:	4b48      	ldr	r3, [pc, #288]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d109      	bne.n	8004f50 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f40:	e006      	b.n	8004f50 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	73fb      	strb	r3, [r7, #15]
      break;
 8004f46:	e004      	b.n	8004f52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004f48:	bf00      	nop
 8004f4a:	e002      	b.n	8004f52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004f4c:	bf00      	nop
 8004f4e:	e000      	b.n	8004f52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004f50:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10d      	bne.n	8004f74 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f58:	483e      	ldr	r0, [pc, #248]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f5a:	4b3e      	ldr	r3, [pc, #248]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6819      	ldr	r1, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d167      	bne.n	800504a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f7a:	4a36      	ldr	r2, [pc, #216]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f7c:	4b35      	ldr	r3, [pc, #212]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f86:	f7fc fe69 	bl	8001c5c <HAL_GetTick>
 8004f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f8c:	e009      	b.n	8004fa2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f8e:	f7fc fe65 	bl	8001c5c <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d902      	bls.n	8004fa2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	73fb      	strb	r3, [r7, #15]
        break;
 8004fa0:	e005      	b.n	8004fae <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fa2:	4b2c      	ldr	r3, [pc, #176]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1ef      	bne.n	8004f8e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d14a      	bne.n	800504a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d111      	bne.n	8004fde <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fba:	4826      	ldr	r0, [pc, #152]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6892      	ldr	r2, [r2, #8]
 8004fcc:	0211      	lsls	r1, r2, #8
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68d2      	ldr	r2, [r2, #12]
 8004fd2:	0912      	lsrs	r2, r2, #4
 8004fd4:	0452      	lsls	r2, r2, #17
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	6143      	str	r3, [r0, #20]
 8004fdc:	e011      	b.n	8005002 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fde:	481d      	ldr	r0, [pc, #116]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fe0:	4b1c      	ldr	r3, [pc, #112]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fe8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6892      	ldr	r2, [r2, #8]
 8004ff0:	0211      	lsls	r1, r2, #8
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6912      	ldr	r2, [r2, #16]
 8004ff6:	0852      	lsrs	r2, r2, #1
 8004ff8:	3a01      	subs	r2, #1
 8004ffa:	0652      	lsls	r2, r2, #25
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	4313      	orrs	r3, r2
 8005000:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005002:	4a14      	ldr	r2, [pc, #80]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005004:	4b13      	ldr	r3, [pc, #76]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500e:	f7fc fe25 	bl	8001c5c <HAL_GetTick>
 8005012:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005014:	e009      	b.n	800502a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005016:	f7fc fe21 	bl	8001c5c <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d902      	bls.n	800502a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	73fb      	strb	r3, [r7, #15]
          break;
 8005028:	e005      	b.n	8005036 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800502a:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0ef      	beq.n	8005016 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d106      	bne.n	800504a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800503c:	4905      	ldr	r1, [pc, #20]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 800503e:	4b05      	ldr	r3, [pc, #20]	; (8005054 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40021000 	.word	0x40021000

08005058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e049      	b.n	80050fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fc fc1c 	bl	80018bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3304      	adds	r3, #4
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f000 fffc 	bl	8006094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	d001      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e04f      	b.n	80051c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	68d2      	ldr	r2, [r2, #12]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a23      	ldr	r2, [pc, #140]	; (80051cc <HAL_TIM_Base_Start_IT+0xc4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d01d      	beq.n	800517e <HAL_TIM_Base_Start_IT+0x76>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514a:	d018      	beq.n	800517e <HAL_TIM_Base_Start_IT+0x76>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d013      	beq.n	800517e <HAL_TIM_Base_Start_IT+0x76>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a1e      	ldr	r2, [pc, #120]	; (80051d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00e      	beq.n	800517e <HAL_TIM_Base_Start_IT+0x76>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1c      	ldr	r2, [pc, #112]	; (80051d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d009      	beq.n	800517e <HAL_TIM_Base_Start_IT+0x76>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1b      	ldr	r2, [pc, #108]	; (80051dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d004      	beq.n	800517e <HAL_TIM_Base_Start_IT+0x76>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a19      	ldr	r2, [pc, #100]	; (80051e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d115      	bne.n	80051aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	4b17      	ldr	r3, [pc, #92]	; (80051e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005186:	4013      	ands	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b06      	cmp	r3, #6
 800518e:	d015      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0xb4>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005196:	d011      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a8:	e008      	b.n	80051bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	6812      	ldr	r2, [r2, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	e000      	b.n	80051be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	40012c00 	.word	0x40012c00
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40000c00 	.word	0x40000c00
 80051dc:	40013400 	.word	0x40013400
 80051e0:	40014000 	.word	0x40014000
 80051e4:	00010007 	.word	0x00010007

080051e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e049      	b.n	800528e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f841 	bl	8005296 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
 8005224:	4619      	mov	r1, r3
 8005226:	4610      	mov	r0, r2
 8005228:	f000 ff34 	bl	8006094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
	...

080052ac <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d109      	bne.n	80052d4 <HAL_TIM_PWM_Start_DMA+0x28>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	bf0c      	ite	eq
 80052cc:	2301      	moveq	r3, #1
 80052ce:	2300      	movne	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e03c      	b.n	800534e <HAL_TIM_PWM_Start_DMA+0xa2>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d109      	bne.n	80052ee <HAL_TIM_PWM_Start_DMA+0x42>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	bf0c      	ite	eq
 80052e6:	2301      	moveq	r3, #1
 80052e8:	2300      	movne	r3, #0
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	e02f      	b.n	800534e <HAL_TIM_PWM_Start_DMA+0xa2>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d109      	bne.n	8005308 <HAL_TIM_PWM_Start_DMA+0x5c>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	bf0c      	ite	eq
 8005300:	2301      	moveq	r3, #1
 8005302:	2300      	movne	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	e022      	b.n	800534e <HAL_TIM_PWM_Start_DMA+0xa2>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b0c      	cmp	r3, #12
 800530c:	d109      	bne.n	8005322 <HAL_TIM_PWM_Start_DMA+0x76>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	bf0c      	ite	eq
 800531a:	2301      	moveq	r3, #1
 800531c:	2300      	movne	r3, #0
 800531e:	b2db      	uxtb	r3, r3
 8005320:	e015      	b.n	800534e <HAL_TIM_PWM_Start_DMA+0xa2>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b10      	cmp	r3, #16
 8005326:	d109      	bne.n	800533c <HAL_TIM_PWM_Start_DMA+0x90>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	bf0c      	ite	eq
 8005334:	2301      	moveq	r3, #1
 8005336:	2300      	movne	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	e008      	b.n	800534e <HAL_TIM_PWM_Start_DMA+0xa2>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	bf0c      	ite	eq
 8005348:	2301      	moveq	r3, #1
 800534a:	2300      	movne	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8005352:	2302      	movs	r3, #2
 8005354:	e1a6      	b.n	80056a4 <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d109      	bne.n	8005370 <HAL_TIM_PWM_Start_DMA+0xc4>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	bf0c      	ite	eq
 8005368:	2301      	moveq	r3, #1
 800536a:	2300      	movne	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e03c      	b.n	80053ea <HAL_TIM_PWM_Start_DMA+0x13e>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b04      	cmp	r3, #4
 8005374:	d109      	bne.n	800538a <HAL_TIM_PWM_Start_DMA+0xde>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	bf0c      	ite	eq
 8005382:	2301      	moveq	r3, #1
 8005384:	2300      	movne	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	e02f      	b.n	80053ea <HAL_TIM_PWM_Start_DMA+0x13e>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d109      	bne.n	80053a4 <HAL_TIM_PWM_Start_DMA+0xf8>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e022      	b.n	80053ea <HAL_TIM_PWM_Start_DMA+0x13e>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b0c      	cmp	r3, #12
 80053a8:	d109      	bne.n	80053be <HAL_TIM_PWM_Start_DMA+0x112>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	bf0c      	ite	eq
 80053b6:	2301      	moveq	r3, #1
 80053b8:	2300      	movne	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	e015      	b.n	80053ea <HAL_TIM_PWM_Start_DMA+0x13e>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d109      	bne.n	80053d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	bf0c      	ite	eq
 80053d0:	2301      	moveq	r3, #1
 80053d2:	2300      	movne	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e008      	b.n	80053ea <HAL_TIM_PWM_Start_DMA+0x13e>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	bf0c      	ite	eq
 80053e4:	2301      	moveq	r3, #1
 80053e6:	2300      	movne	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d034      	beq.n	8005458 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d104      	bne.n	80053fe <HAL_TIM_PWM_Start_DMA+0x152>
 80053f4:	887b      	ldrh	r3, [r7, #2]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e152      	b.n	80056a4 <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <HAL_TIM_PWM_Start_DMA+0x162>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800540c:	e026      	b.n	800545c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b04      	cmp	r3, #4
 8005412:	d104      	bne.n	800541e <HAL_TIM_PWM_Start_DMA+0x172>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800541c:	e01e      	b.n	800545c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d104      	bne.n	800542e <HAL_TIM_PWM_Start_DMA+0x182>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800542c:	e016      	b.n	800545c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b0c      	cmp	r3, #12
 8005432:	d104      	bne.n	800543e <HAL_TIM_PWM_Start_DMA+0x192>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800543c:	e00e      	b.n	800545c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b10      	cmp	r3, #16
 8005442:	d104      	bne.n	800544e <HAL_TIM_PWM_Start_DMA+0x1a2>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800544c:	e006      	b.n	800545c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2202      	movs	r2, #2
 8005452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005456:	e001      	b.n	800545c <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e123      	b.n	80056a4 <HAL_TIM_PWM_Start_DMA+0x3f8>
  }

  switch (Channel)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b0c      	cmp	r3, #12
 8005460:	f200 80ae 	bhi.w	80055c0 <HAL_TIM_PWM_Start_DMA+0x314>
 8005464:	a201      	add	r2, pc, #4	; (adr r2, 800546c <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8005466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546a:	bf00      	nop
 800546c:	080054a1 	.word	0x080054a1
 8005470:	080055c1 	.word	0x080055c1
 8005474:	080055c1 	.word	0x080055c1
 8005478:	080055c1 	.word	0x080055c1
 800547c:	080054e9 	.word	0x080054e9
 8005480:	080055c1 	.word	0x080055c1
 8005484:	080055c1 	.word	0x080055c1
 8005488:	080055c1 	.word	0x080055c1
 800548c:	08005531 	.word	0x08005531
 8005490:	080055c1 	.word	0x080055c1
 8005494:	080055c1 	.word	0x080055c1
 8005498:	080055c1 	.word	0x080055c1
 800549c:	08005579 	.word	0x08005579
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	4a81      	ldr	r2, [pc, #516]	; (80056ac <HAL_TIM_PWM_Start_DMA+0x400>)
 80054a6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	4a80      	ldr	r2, [pc, #512]	; (80056b0 <HAL_TIM_PWM_Start_DMA+0x404>)
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	4a7f      	ldr	r2, [pc, #508]	; (80056b4 <HAL_TIM_PWM_Start_DMA+0x408>)
 80054b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3334      	adds	r3, #52	; 0x34
 80054c4:	461a      	mov	r2, r3
 80054c6:	887b      	ldrh	r3, [r7, #2]
 80054c8:	f7fd ff6e 	bl	80033a8 <HAL_DMA_Start_IT>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e0e6      	b.n	80056a4 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	68d2      	ldr	r2, [r2, #12]
 80054e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e4:	60da      	str	r2, [r3, #12]
      break;
 80054e6:	e06c      	b.n	80055c2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	4a6f      	ldr	r2, [pc, #444]	; (80056ac <HAL_TIM_PWM_Start_DMA+0x400>)
 80054ee:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f4:	4a6e      	ldr	r2, [pc, #440]	; (80056b0 <HAL_TIM_PWM_Start_DMA+0x404>)
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fc:	4a6d      	ldr	r2, [pc, #436]	; (80056b4 <HAL_TIM_PWM_Start_DMA+0x408>)
 80054fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3338      	adds	r3, #56	; 0x38
 800550c:	461a      	mov	r2, r3
 800550e:	887b      	ldrh	r3, [r7, #2]
 8005510:	f7fd ff4a 	bl	80033a8 <HAL_DMA_Start_IT>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e0c2      	b.n	80056a4 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	68d2      	ldr	r2, [r2, #12]
 8005528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800552c:	60da      	str	r2, [r3, #12]
      break;
 800552e:	e048      	b.n	80055c2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	4a5d      	ldr	r2, [pc, #372]	; (80056ac <HAL_TIM_PWM_Start_DMA+0x400>)
 8005536:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553c:	4a5c      	ldr	r2, [pc, #368]	; (80056b0 <HAL_TIM_PWM_Start_DMA+0x404>)
 800553e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	4a5b      	ldr	r2, [pc, #364]	; (80056b4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8005546:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	333c      	adds	r3, #60	; 0x3c
 8005554:	461a      	mov	r2, r3
 8005556:	887b      	ldrh	r3, [r7, #2]
 8005558:	f7fd ff26 	bl	80033a8 <HAL_DMA_Start_IT>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e09e      	b.n	80056a4 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	68d2      	ldr	r2, [r2, #12]
 8005570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005574:	60da      	str	r2, [r3, #12]
      break;
 8005576:	e024      	b.n	80055c2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	4a4b      	ldr	r2, [pc, #300]	; (80056ac <HAL_TIM_PWM_Start_DMA+0x400>)
 800557e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	4a4a      	ldr	r2, [pc, #296]	; (80056b0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8005586:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	4a49      	ldr	r2, [pc, #292]	; (80056b4 <HAL_TIM_PWM_Start_DMA+0x408>)
 800558e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3340      	adds	r3, #64	; 0x40
 800559c:	461a      	mov	r2, r3
 800559e:	887b      	ldrh	r3, [r7, #2]
 80055a0:	f7fd ff02 	bl	80033a8 <HAL_DMA_Start_IT>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e07a      	b.n	80056a4 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	68d2      	ldr	r2, [r2, #12]
 80055b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055bc:	60da      	str	r2, [r3, #12]
      break;
 80055be:	e000      	b.n	80055c2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 80055c0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2201      	movs	r2, #1
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f001 f96c 	bl	80068a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a38      	ldr	r2, [pc, #224]	; (80056b8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d013      	beq.n	8005602 <HAL_TIM_PWM_Start_DMA+0x356>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a37      	ldr	r2, [pc, #220]	; (80056bc <HAL_TIM_PWM_Start_DMA+0x410>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00e      	beq.n	8005602 <HAL_TIM_PWM_Start_DMA+0x356>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a35      	ldr	r2, [pc, #212]	; (80056c0 <HAL_TIM_PWM_Start_DMA+0x414>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d009      	beq.n	8005602 <HAL_TIM_PWM_Start_DMA+0x356>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a34      	ldr	r2, [pc, #208]	; (80056c4 <HAL_TIM_PWM_Start_DMA+0x418>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d004      	beq.n	8005602 <HAL_TIM_PWM_Start_DMA+0x356>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a32      	ldr	r2, [pc, #200]	; (80056c8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d101      	bne.n	8005606 <HAL_TIM_PWM_Start_DMA+0x35a>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <HAL_TIM_PWM_Start_DMA+0x35c>
 8005606:	2300      	movs	r3, #0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800561a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a25      	ldr	r2, [pc, #148]	; (80056b8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01d      	beq.n	8005662 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562e:	d018      	beq.n	8005662 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a25      	ldr	r2, [pc, #148]	; (80056cc <HAL_TIM_PWM_Start_DMA+0x420>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_TIM_PWM_Start_DMA+0x3b6>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a24      	ldr	r2, [pc, #144]	; (80056d0 <HAL_TIM_PWM_Start_DMA+0x424>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00e      	beq.n	8005662 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a22      	ldr	r2, [pc, #136]	; (80056d4 <HAL_TIM_PWM_Start_DMA+0x428>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_TIM_PWM_Start_DMA+0x3b6>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1a      	ldr	r2, [pc, #104]	; (80056bc <HAL_TIM_PWM_Start_DMA+0x410>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <HAL_TIM_PWM_Start_DMA+0x414>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d115      	bne.n	800568e <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	4b1b      	ldr	r3, [pc, #108]	; (80056d8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800566a:	4013      	ands	r3, r2
 800566c:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b06      	cmp	r3, #6
 8005672:	d015      	beq.n	80056a0 <HAL_TIM_PWM_Start_DMA+0x3f4>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567a:	d011      	beq.n	80056a0 <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	6812      	ldr	r2, [r2, #0]
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568c:	e008      	b.n	80056a0 <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	f042 0201 	orr.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e000      	b.n	80056a2 <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	08005f85 	.word	0x08005f85
 80056b0:	0800602d 	.word	0x0800602d
 80056b4:	08005ef3 	.word	0x08005ef3
 80056b8:	40012c00 	.word	0x40012c00
 80056bc:	40013400 	.word	0x40013400
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40014400 	.word	0x40014400
 80056c8:	40014800 	.word	0x40014800
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800
 80056d4:	40000c00 	.word	0x40000c00
 80056d8:	00010007 	.word	0x00010007

080056dc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b0c      	cmp	r3, #12
 80056ea:	d855      	bhi.n	8005798 <HAL_TIM_PWM_Stop_DMA+0xbc>
 80056ec:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <HAL_TIM_PWM_Stop_DMA+0x18>)
 80056ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f2:	bf00      	nop
 80056f4:	08005729 	.word	0x08005729
 80056f8:	08005799 	.word	0x08005799
 80056fc:	08005799 	.word	0x08005799
 8005700:	08005799 	.word	0x08005799
 8005704:	08005745 	.word	0x08005745
 8005708:	08005799 	.word	0x08005799
 800570c:	08005799 	.word	0x08005799
 8005710:	08005799 	.word	0x08005799
 8005714:	08005761 	.word	0x08005761
 8005718:	08005799 	.word	0x08005799
 800571c:	08005799 	.word	0x08005799
 8005720:	08005799 	.word	0x08005799
 8005724:	0800577d 	.word	0x0800577d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	68d2      	ldr	r2, [r2, #12]
 8005732:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005736:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	4618      	mov	r0, r3
 800573e:	f7fd fe93 	bl	8003468 <HAL_DMA_Abort_IT>
      break;
 8005742:	e02a      	b.n	800579a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6812      	ldr	r2, [r2, #0]
 800574c:	68d2      	ldr	r2, [r2, #12]
 800574e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005752:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	4618      	mov	r0, r3
 800575a:	f7fd fe85 	bl	8003468 <HAL_DMA_Abort_IT>
      break;
 800575e:	e01c      	b.n	800579a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	68d2      	ldr	r2, [r2, #12]
 800576a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800576e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	4618      	mov	r0, r3
 8005776:	f7fd fe77 	bl	8003468 <HAL_DMA_Abort_IT>
      break;
 800577a:	e00e      	b.n	800579a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	68d2      	ldr	r2, [r2, #12]
 8005786:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800578a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	4618      	mov	r0, r3
 8005792:	f7fd fe69 	bl	8003468 <HAL_DMA_Abort_IT>
      break;
 8005796:	e000      	b.n	800579a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8005798:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2200      	movs	r2, #0
 80057a0:	6839      	ldr	r1, [r7, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f001 f880 	bl	80068a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a3e      	ldr	r2, [pc, #248]	; (80058a8 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_TIM_PWM_Stop_DMA+0xfe>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a3d      	ldr	r2, [pc, #244]	; (80058ac <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_TIM_PWM_Stop_DMA+0xfe>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a3b      	ldr	r2, [pc, #236]	; (80058b0 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_TIM_PWM_Stop_DMA+0xfe>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a3a      	ldr	r2, [pc, #232]	; (80058b4 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_TIM_PWM_Stop_DMA+0xfe>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a38      	ldr	r2, [pc, #224]	; (80058b8 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d101      	bne.n	80057de <HAL_TIM_PWM_Stop_DMA+0x102>
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <HAL_TIM_PWM_Stop_DMA+0x104>
 80057de:	2300      	movs	r3, #0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d017      	beq.n	8005814 <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6a1a      	ldr	r2, [r3, #32]
 80057ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10f      	bne.n	8005814 <HAL_TIM_PWM_Stop_DMA+0x138>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6a1a      	ldr	r2, [r3, #32]
 80057fa:	f240 4344 	movw	r3, #1092	; 0x444
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d107      	bne.n	8005814 <HAL_TIM_PWM_Stop_DMA+0x138>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6812      	ldr	r2, [r2, #0]
 800580c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800580e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005812:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6a1a      	ldr	r2, [r3, #32]
 800581a:	f241 1311 	movw	r3, #4369	; 0x1111
 800581e:	4013      	ands	r3, r2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10f      	bne.n	8005844 <HAL_TIM_PWM_Stop_DMA+0x168>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6a1a      	ldr	r2, [r3, #32]
 800582a:	f240 4344 	movw	r3, #1092	; 0x444
 800582e:	4013      	ands	r3, r2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d107      	bne.n	8005844 <HAL_TIM_PWM_Stop_DMA+0x168>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	6812      	ldr	r2, [r2, #0]
 800583e:	f022 0201 	bic.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d104      	bne.n	8005854 <HAL_TIM_PWM_Stop_DMA+0x178>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005852:	e023      	b.n	800589c <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b04      	cmp	r3, #4
 8005858:	d104      	bne.n	8005864 <HAL_TIM_PWM_Stop_DMA+0x188>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005862:	e01b      	b.n	800589c <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b08      	cmp	r3, #8
 8005868:	d104      	bne.n	8005874 <HAL_TIM_PWM_Stop_DMA+0x198>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005872:	e013      	b.n	800589c <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b0c      	cmp	r3, #12
 8005878:	d104      	bne.n	8005884 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005882:	e00b      	b.n	800589c <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b10      	cmp	r3, #16
 8005888:	d104      	bne.n	8005894 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005892:	e003      	b.n	800589c <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40012c00 	.word	0x40012c00
 80058ac:	40013400 	.word	0x40013400
 80058b0:	40014000 	.word	0x40014000
 80058b4:	40014400 	.word	0x40014400
 80058b8:	40014800 	.word	0x40014800

080058bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d122      	bne.n	8005918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d11b      	bne.n	8005918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0202 	mvn.w	r2, #2
 80058e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 facf 	bl	8005ea2 <HAL_TIM_IC_CaptureCallback>
 8005904:	e005      	b.n	8005912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fac1 	bl	8005e8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7fb fca1 	bl	8001254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b04      	cmp	r3, #4
 8005924:	d122      	bne.n	800596c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b04      	cmp	r3, #4
 8005932:	d11b      	bne.n	800596c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0204 	mvn.w	r2, #4
 800593c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 faa5 	bl	8005ea2 <HAL_TIM_IC_CaptureCallback>
 8005958:	e005      	b.n	8005966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fa97 	bl	8005e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7fb fc77 	bl	8001254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b08      	cmp	r3, #8
 8005978:	d122      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b08      	cmp	r3, #8
 8005986:	d11b      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0208 	mvn.w	r2, #8
 8005990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2204      	movs	r2, #4
 8005996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fa7b 	bl	8005ea2 <HAL_TIM_IC_CaptureCallback>
 80059ac:	e005      	b.n	80059ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fa6d 	bl	8005e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7fb fc4d 	bl	8001254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d122      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b10      	cmp	r3, #16
 80059da:	d11b      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0210 	mvn.w	r2, #16
 80059e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2208      	movs	r2, #8
 80059ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fa51 	bl	8005ea2 <HAL_TIM_IC_CaptureCallback>
 8005a00:	e005      	b.n	8005a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fa43 	bl	8005e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7fb fc23 	bl	8001254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d10e      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d107      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0201 	mvn.w	r2, #1
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fb fec0 	bl	80017c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4a:	2b80      	cmp	r3, #128	; 0x80
 8005a4c:	d10e      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a58:	2b80      	cmp	r3, #128	; 0x80
 8005a5a:	d107      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f001 f854 	bl	8006b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7a:	d10e      	bne.n	8005a9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a86:	2b80      	cmp	r3, #128	; 0x80
 8005a88:	d107      	bne.n	8005a9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f001 f847 	bl	8006b28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b40      	cmp	r3, #64	; 0x40
 8005aa6:	d10e      	bne.n	8005ac6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d107      	bne.n	8005ac6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fa02 	bl	8005eca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d10e      	bne.n	8005af2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b20      	cmp	r3, #32
 8005ae0:	d107      	bne.n	8005af2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f06f 0220 	mvn.w	r2, #32
 8005aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 f807 	bl	8006b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e0fd      	b.n	8005d12 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b14      	cmp	r3, #20
 8005b22:	f200 80f0 	bhi.w	8005d06 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b81 	.word	0x08005b81
 8005b30:	08005d07 	.word	0x08005d07
 8005b34:	08005d07 	.word	0x08005d07
 8005b38:	08005d07 	.word	0x08005d07
 8005b3c:	08005bc1 	.word	0x08005bc1
 8005b40:	08005d07 	.word	0x08005d07
 8005b44:	08005d07 	.word	0x08005d07
 8005b48:	08005d07 	.word	0x08005d07
 8005b4c:	08005c03 	.word	0x08005c03
 8005b50:	08005d07 	.word	0x08005d07
 8005b54:	08005d07 	.word	0x08005d07
 8005b58:	08005d07 	.word	0x08005d07
 8005b5c:	08005c43 	.word	0x08005c43
 8005b60:	08005d07 	.word	0x08005d07
 8005b64:	08005d07 	.word	0x08005d07
 8005b68:	08005d07 	.word	0x08005d07
 8005b6c:	08005c85 	.word	0x08005c85
 8005b70:	08005d07 	.word	0x08005d07
 8005b74:	08005d07 	.word	0x08005d07
 8005b78:	08005d07 	.word	0x08005d07
 8005b7c:	08005cc5 	.word	0x08005cc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fb1e 	bl	80061c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	6812      	ldr	r2, [r2, #0]
 8005b94:	6992      	ldr	r2, [r2, #24]
 8005b96:	f042 0208 	orr.w	r2, r2, #8
 8005b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	6992      	ldr	r2, [r2, #24]
 8005ba6:	f022 0204 	bic.w	r2, r2, #4
 8005baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	6991      	ldr	r1, [r2, #24]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	6912      	ldr	r2, [r2, #16]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	619a      	str	r2, [r3, #24]
      break;
 8005bbe:	e0a3      	b.n	8005d08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fb8e 	bl	80062e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	6992      	ldr	r2, [r2, #24]
 8005bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	6992      	ldr	r2, [r2, #24]
 8005be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	6991      	ldr	r1, [r2, #24]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	6912      	ldr	r2, [r2, #16]
 8005bfa:	0212      	lsls	r2, r2, #8
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	619a      	str	r2, [r3, #24]
      break;
 8005c00:	e082      	b.n	8005d08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fbf7 	bl	80063fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	69d2      	ldr	r2, [r2, #28]
 8005c18:	f042 0208 	orr.w	r2, r2, #8
 8005c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	6812      	ldr	r2, [r2, #0]
 8005c26:	69d2      	ldr	r2, [r2, #28]
 8005c28:	f022 0204 	bic.w	r2, r2, #4
 8005c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	6812      	ldr	r2, [r2, #0]
 8005c36:	69d1      	ldr	r1, [r2, #28]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	6912      	ldr	r2, [r2, #16]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	61da      	str	r2, [r3, #28]
      break;
 8005c40:	e062      	b.n	8005d08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fc5f 	bl	800650c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	69d2      	ldr	r2, [r2, #28]
 8005c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	6812      	ldr	r2, [r2, #0]
 8005c66:	69d2      	ldr	r2, [r2, #28]
 8005c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	69d1      	ldr	r1, [r2, #28]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	6912      	ldr	r2, [r2, #16]
 8005c7c:	0212      	lsls	r2, r2, #8
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	61da      	str	r2, [r3, #28]
      break;
 8005c82:	e041      	b.n	8005d08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fca8 	bl	80065e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005c9a:	f042 0208 	orr.w	r2, r2, #8
 8005c9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005caa:	f022 0204 	bic.w	r2, r2, #4
 8005cae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	6912      	ldr	r2, [r2, #16]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005cc2:	e021      	b.n	8005d08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fcec 	bl	80066a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	6912      	ldr	r2, [r2, #16]
 8005cfe:	0212      	lsls	r2, r2, #8
 8005d00:	430a      	orrs	r2, r1
 8005d02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d04:	e000      	b.n	8005d08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005d06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop

08005d1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_TIM_ConfigClockSource+0x18>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e0a8      	b.n	8005e86 <HAL_TIM_ConfigClockSource+0x16a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d067      	beq.n	8005e40 <HAL_TIM_ConfigClockSource+0x124>
 8005d70:	2b40      	cmp	r3, #64	; 0x40
 8005d72:	d80b      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x70>
 8005d74:	2b10      	cmp	r3, #16
 8005d76:	d073      	beq.n	8005e60 <HAL_TIM_ConfigClockSource+0x144>
 8005d78:	2b10      	cmp	r3, #16
 8005d7a:	d802      	bhi.n	8005d82 <HAL_TIM_ConfigClockSource+0x66>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d06f      	beq.n	8005e60 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d80:	e078      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d06c      	beq.n	8005e60 <HAL_TIM_ConfigClockSource+0x144>
 8005d86:	2b30      	cmp	r3, #48	; 0x30
 8005d88:	d06a      	beq.n	8005e60 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005d8a:	e073      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005d8c:	2b70      	cmp	r3, #112	; 0x70
 8005d8e:	d00d      	beq.n	8005dac <HAL_TIM_ConfigClockSource+0x90>
 8005d90:	2b70      	cmp	r3, #112	; 0x70
 8005d92:	d804      	bhi.n	8005d9e <HAL_TIM_ConfigClockSource+0x82>
 8005d94:	2b50      	cmp	r3, #80	; 0x50
 8005d96:	d033      	beq.n	8005e00 <HAL_TIM_ConfigClockSource+0xe4>
 8005d98:	2b60      	cmp	r3, #96	; 0x60
 8005d9a:	d041      	beq.n	8005e20 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005d9c:	e06a      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da2:	d066      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x156>
 8005da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da8:	d017      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005daa:	e063      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	6899      	ldr	r1, [r3, #8]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f000 fd54 	bl	8006868 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	609a      	str	r2, [r3, #8]
      break;
 8005dd8:	e04c      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	6899      	ldr	r1, [r3, #8]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f000 fd3d 	bl	8006868 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	6892      	ldr	r2, [r2, #8]
 8005df8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dfc:	609a      	str	r2, [r3, #8]
      break;
 8005dfe:	e039      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	6859      	ldr	r1, [r3, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f000 fcb1 	bl	8006774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2150      	movs	r1, #80	; 0x50
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fd0a 	bl	8006832 <TIM_ITRx_SetConfig>
      break;
 8005e1e:	e029      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	6859      	ldr	r1, [r3, #4]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f000 fcd0 	bl	80067d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2160      	movs	r1, #96	; 0x60
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fcfa 	bl	8006832 <TIM_ITRx_SetConfig>
      break;
 8005e3e:	e019      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	6859      	ldr	r1, [r3, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f000 fc91 	bl	8006774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2140      	movs	r1, #64	; 0x40
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fcea 	bl	8006832 <TIM_ITRx_SetConfig>
      break;
 8005e5e:	e009      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f000 fce1 	bl	8006832 <TIM_ITRx_SetConfig>
        break;
 8005e70:	e000      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d107      	bne.n	8005f1a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f18:	e02a      	b.n	8005f70 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d107      	bne.n	8005f34 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2202      	movs	r2, #2
 8005f28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f32:	e01d      	b.n	8005f70 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d107      	bne.n	8005f4e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2204      	movs	r2, #4
 8005f42:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f4c:	e010      	b.n	8005f70 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d107      	bne.n	8005f68 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2208      	movs	r2, #8
 8005f5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f66:	e003      	b.n	8005f70 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7ff ffb4 	bl	8005ede <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	771a      	strb	r2, [r3, #28]
}
 8005f7c:	bf00      	nop
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d10b      	bne.n	8005fb4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d136      	bne.n	8006018 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fb2:	e031      	b.n	8006018 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d10b      	bne.n	8005fd6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d125      	bne.n	8006018 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd4:	e020      	b.n	8006018 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d10b      	bne.n	8005ff8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2204      	movs	r2, #4
 8005fe4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d114      	bne.n	8006018 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff6:	e00f      	b.n	8006018 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d10a      	bne.n	8006018 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2208      	movs	r2, #8
 8006006:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d103      	bne.n	8006018 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7fb f91b 	bl	8001254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	771a      	strb	r2, [r3, #28]
}
 8006024:	bf00      	nop
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	429a      	cmp	r2, r3
 8006042:	d103      	bne.n	800604c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	771a      	strb	r2, [r3, #28]
 800604a:	e019      	b.n	8006080 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	429a      	cmp	r2, r3
 8006054:	d103      	bne.n	800605e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2202      	movs	r2, #2
 800605a:	771a      	strb	r2, [r3, #28]
 800605c:	e010      	b.n	8006080 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	d103      	bne.n	8006070 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2204      	movs	r2, #4
 800606c:	771a      	strb	r2, [r3, #28]
 800606e:	e007      	b.n	8006080 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	429a      	cmp	r2, r3
 8006078:	d102      	bne.n	8006080 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2208      	movs	r2, #8
 800607e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f7ff ff18 	bl	8005eb6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	771a      	strb	r2, [r3, #28]
}
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a40      	ldr	r2, [pc, #256]	; (80061a8 <TIM_Base_SetConfig+0x114>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <TIM_Base_SetConfig+0x40>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b2:	d00f      	beq.n	80060d4 <TIM_Base_SetConfig+0x40>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a3d      	ldr	r2, [pc, #244]	; (80061ac <TIM_Base_SetConfig+0x118>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00b      	beq.n	80060d4 <TIM_Base_SetConfig+0x40>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a3c      	ldr	r2, [pc, #240]	; (80061b0 <TIM_Base_SetConfig+0x11c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d007      	beq.n	80060d4 <TIM_Base_SetConfig+0x40>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a3b      	ldr	r2, [pc, #236]	; (80061b4 <TIM_Base_SetConfig+0x120>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <TIM_Base_SetConfig+0x40>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a3a      	ldr	r2, [pc, #232]	; (80061b8 <TIM_Base_SetConfig+0x124>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d108      	bne.n	80060e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a2f      	ldr	r2, [pc, #188]	; (80061a8 <TIM_Base_SetConfig+0x114>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d01f      	beq.n	800612e <TIM_Base_SetConfig+0x9a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f4:	d01b      	beq.n	800612e <TIM_Base_SetConfig+0x9a>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a2c      	ldr	r2, [pc, #176]	; (80061ac <TIM_Base_SetConfig+0x118>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d017      	beq.n	800612e <TIM_Base_SetConfig+0x9a>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a2b      	ldr	r2, [pc, #172]	; (80061b0 <TIM_Base_SetConfig+0x11c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <TIM_Base_SetConfig+0x9a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a2a      	ldr	r2, [pc, #168]	; (80061b4 <TIM_Base_SetConfig+0x120>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d00f      	beq.n	800612e <TIM_Base_SetConfig+0x9a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a29      	ldr	r2, [pc, #164]	; (80061b8 <TIM_Base_SetConfig+0x124>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00b      	beq.n	800612e <TIM_Base_SetConfig+0x9a>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a28      	ldr	r2, [pc, #160]	; (80061bc <TIM_Base_SetConfig+0x128>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d007      	beq.n	800612e <TIM_Base_SetConfig+0x9a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a27      	ldr	r2, [pc, #156]	; (80061c0 <TIM_Base_SetConfig+0x12c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d003      	beq.n	800612e <TIM_Base_SetConfig+0x9a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a26      	ldr	r2, [pc, #152]	; (80061c4 <TIM_Base_SetConfig+0x130>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d108      	bne.n	8006140 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a10      	ldr	r2, [pc, #64]	; (80061a8 <TIM_Base_SetConfig+0x114>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00f      	beq.n	800618c <TIM_Base_SetConfig+0xf8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a12      	ldr	r2, [pc, #72]	; (80061b8 <TIM_Base_SetConfig+0x124>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00b      	beq.n	800618c <TIM_Base_SetConfig+0xf8>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a11      	ldr	r2, [pc, #68]	; (80061bc <TIM_Base_SetConfig+0x128>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d007      	beq.n	800618c <TIM_Base_SetConfig+0xf8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a10      	ldr	r2, [pc, #64]	; (80061c0 <TIM_Base_SetConfig+0x12c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d003      	beq.n	800618c <TIM_Base_SetConfig+0xf8>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a0f      	ldr	r2, [pc, #60]	; (80061c4 <TIM_Base_SetConfig+0x130>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d103      	bne.n	8006194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	691a      	ldr	r2, [r3, #16]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	615a      	str	r2, [r3, #20]
}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40000400 	.word	0x40000400
 80061b0:	40000800 	.word	0x40000800
 80061b4:	40000c00 	.word	0x40000c00
 80061b8:	40013400 	.word	0x40013400
 80061bc:	40014000 	.word	0x40014000
 80061c0:	40014400 	.word	0x40014400
 80061c4:	40014800 	.word	0x40014800

080061c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	f023 0201 	bic.w	r2, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f023 0303 	bic.w	r3, r3, #3
 8006202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	4313      	orrs	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f023 0302 	bic.w	r3, r3, #2
 8006214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a2c      	ldr	r2, [pc, #176]	; (80062d4 <TIM_OC1_SetConfig+0x10c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00f      	beq.n	8006248 <TIM_OC1_SetConfig+0x80>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a2b      	ldr	r2, [pc, #172]	; (80062d8 <TIM_OC1_SetConfig+0x110>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00b      	beq.n	8006248 <TIM_OC1_SetConfig+0x80>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a2a      	ldr	r2, [pc, #168]	; (80062dc <TIM_OC1_SetConfig+0x114>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d007      	beq.n	8006248 <TIM_OC1_SetConfig+0x80>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a29      	ldr	r2, [pc, #164]	; (80062e0 <TIM_OC1_SetConfig+0x118>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d003      	beq.n	8006248 <TIM_OC1_SetConfig+0x80>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a28      	ldr	r2, [pc, #160]	; (80062e4 <TIM_OC1_SetConfig+0x11c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d10c      	bne.n	8006262 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f023 0308 	bic.w	r3, r3, #8
 800624e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f023 0304 	bic.w	r3, r3, #4
 8006260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a1b      	ldr	r2, [pc, #108]	; (80062d4 <TIM_OC1_SetConfig+0x10c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00f      	beq.n	800628a <TIM_OC1_SetConfig+0xc2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a1a      	ldr	r2, [pc, #104]	; (80062d8 <TIM_OC1_SetConfig+0x110>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00b      	beq.n	800628a <TIM_OC1_SetConfig+0xc2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a19      	ldr	r2, [pc, #100]	; (80062dc <TIM_OC1_SetConfig+0x114>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d007      	beq.n	800628a <TIM_OC1_SetConfig+0xc2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a18      	ldr	r2, [pc, #96]	; (80062e0 <TIM_OC1_SetConfig+0x118>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d003      	beq.n	800628a <TIM_OC1_SetConfig+0xc2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a17      	ldr	r2, [pc, #92]	; (80062e4 <TIM_OC1_SetConfig+0x11c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d111      	bne.n	80062ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	621a      	str	r2, [r3, #32]
}
 80062c8:	bf00      	nop
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40013400 	.word	0x40013400
 80062dc:	40014000 	.word	0x40014000
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800

080062e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	f023 0210 	bic.w	r2, r3, #16
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f023 0320 	bic.w	r3, r3, #32
 8006336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	011b      	lsls	r3, r3, #4
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4313      	orrs	r3, r2
 8006342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a28      	ldr	r2, [pc, #160]	; (80063e8 <TIM_OC2_SetConfig+0x100>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_OC2_SetConfig+0x6c>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a27      	ldr	r2, [pc, #156]	; (80063ec <TIM_OC2_SetConfig+0x104>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d10d      	bne.n	8006370 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800636e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a1d      	ldr	r2, [pc, #116]	; (80063e8 <TIM_OC2_SetConfig+0x100>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00f      	beq.n	8006398 <TIM_OC2_SetConfig+0xb0>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a1c      	ldr	r2, [pc, #112]	; (80063ec <TIM_OC2_SetConfig+0x104>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00b      	beq.n	8006398 <TIM_OC2_SetConfig+0xb0>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a1b      	ldr	r2, [pc, #108]	; (80063f0 <TIM_OC2_SetConfig+0x108>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d007      	beq.n	8006398 <TIM_OC2_SetConfig+0xb0>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a1a      	ldr	r2, [pc, #104]	; (80063f4 <TIM_OC2_SetConfig+0x10c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <TIM_OC2_SetConfig+0xb0>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a19      	ldr	r2, [pc, #100]	; (80063f8 <TIM_OC2_SetConfig+0x110>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d113      	bne.n	80063c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800639e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	621a      	str	r2, [r3, #32]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40012c00 	.word	0x40012c00
 80063ec:	40013400 	.word	0x40013400
 80063f0:	40014000 	.word	0x40014000
 80063f4:	40014400 	.word	0x40014400
 80063f8:	40014800 	.word	0x40014800

080063fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800642a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0303 	bic.w	r3, r3, #3
 8006436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a27      	ldr	r2, [pc, #156]	; (80064f8 <TIM_OC3_SetConfig+0xfc>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d003      	beq.n	8006466 <TIM_OC3_SetConfig+0x6a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a26      	ldr	r2, [pc, #152]	; (80064fc <TIM_OC3_SetConfig+0x100>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d10d      	bne.n	8006482 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800646c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	021b      	lsls	r3, r3, #8
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a1c      	ldr	r2, [pc, #112]	; (80064f8 <TIM_OC3_SetConfig+0xfc>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00f      	beq.n	80064aa <TIM_OC3_SetConfig+0xae>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a1b      	ldr	r2, [pc, #108]	; (80064fc <TIM_OC3_SetConfig+0x100>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00b      	beq.n	80064aa <TIM_OC3_SetConfig+0xae>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a1a      	ldr	r2, [pc, #104]	; (8006500 <TIM_OC3_SetConfig+0x104>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d007      	beq.n	80064aa <TIM_OC3_SetConfig+0xae>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a19      	ldr	r2, [pc, #100]	; (8006504 <TIM_OC3_SetConfig+0x108>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d003      	beq.n	80064aa <TIM_OC3_SetConfig+0xae>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a18      	ldr	r2, [pc, #96]	; (8006508 <TIM_OC3_SetConfig+0x10c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d113      	bne.n	80064d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	621a      	str	r2, [r3, #32]
}
 80064ec:	bf00      	nop
 80064ee:	371c      	adds	r7, #28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40013400 	.word	0x40013400
 8006500:	40014000 	.word	0x40014000
 8006504:	40014400 	.word	0x40014400
 8006508:	40014800 	.word	0x40014800

0800650c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800653a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	021b      	lsls	r3, r3, #8
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4313      	orrs	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800655a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	031b      	lsls	r3, r3, #12
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a18      	ldr	r2, [pc, #96]	; (80065cc <TIM_OC4_SetConfig+0xc0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00f      	beq.n	8006590 <TIM_OC4_SetConfig+0x84>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a17      	ldr	r2, [pc, #92]	; (80065d0 <TIM_OC4_SetConfig+0xc4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_OC4_SetConfig+0x84>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a16      	ldr	r2, [pc, #88]	; (80065d4 <TIM_OC4_SetConfig+0xc8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_OC4_SetConfig+0x84>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a15      	ldr	r2, [pc, #84]	; (80065d8 <TIM_OC4_SetConfig+0xcc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_OC4_SetConfig+0x84>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a14      	ldr	r2, [pc, #80]	; (80065dc <TIM_OC4_SetConfig+0xd0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d109      	bne.n	80065a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	019b      	lsls	r3, r3, #6
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	621a      	str	r2, [r3, #32]
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40013400 	.word	0x40013400
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40014400 	.word	0x40014400
 80065dc:	40014800 	.word	0x40014800

080065e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800660e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006624:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	041b      	lsls	r3, r3, #16
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a17      	ldr	r2, [pc, #92]	; (8006694 <TIM_OC5_SetConfig+0xb4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d00f      	beq.n	800665a <TIM_OC5_SetConfig+0x7a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a16      	ldr	r2, [pc, #88]	; (8006698 <TIM_OC5_SetConfig+0xb8>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00b      	beq.n	800665a <TIM_OC5_SetConfig+0x7a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a15      	ldr	r2, [pc, #84]	; (800669c <TIM_OC5_SetConfig+0xbc>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d007      	beq.n	800665a <TIM_OC5_SetConfig+0x7a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a14      	ldr	r2, [pc, #80]	; (80066a0 <TIM_OC5_SetConfig+0xc0>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d003      	beq.n	800665a <TIM_OC5_SetConfig+0x7a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a13      	ldr	r2, [pc, #76]	; (80066a4 <TIM_OC5_SetConfig+0xc4>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d109      	bne.n	800666e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006660:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	621a      	str	r2, [r3, #32]
}
 8006688:	bf00      	nop
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40013400 	.word	0x40013400
 800669c:	40014000 	.word	0x40014000
 80066a0:	40014400 	.word	0x40014400
 80066a4:	40014800 	.word	0x40014800

080066a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	021b      	lsls	r3, r3, #8
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	051b      	lsls	r3, r3, #20
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a18      	ldr	r2, [pc, #96]	; (8006760 <TIM_OC6_SetConfig+0xb8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00f      	beq.n	8006724 <TIM_OC6_SetConfig+0x7c>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a17      	ldr	r2, [pc, #92]	; (8006764 <TIM_OC6_SetConfig+0xbc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00b      	beq.n	8006724 <TIM_OC6_SetConfig+0x7c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a16      	ldr	r2, [pc, #88]	; (8006768 <TIM_OC6_SetConfig+0xc0>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d007      	beq.n	8006724 <TIM_OC6_SetConfig+0x7c>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a15      	ldr	r2, [pc, #84]	; (800676c <TIM_OC6_SetConfig+0xc4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_OC6_SetConfig+0x7c>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a14      	ldr	r2, [pc, #80]	; (8006770 <TIM_OC6_SetConfig+0xc8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d109      	bne.n	8006738 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800672a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	029b      	lsls	r3, r3, #10
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40012c00 	.word	0x40012c00
 8006764:	40013400 	.word	0x40013400
 8006768:	40014000 	.word	0x40014000
 800676c:	40014400 	.word	0x40014400
 8006770:	40014800 	.word	0x40014800

08006774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f023 0201 	bic.w	r2, r3, #1
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800679e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	011b      	lsls	r3, r3, #4
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f023 030a 	bic.w	r3, r3, #10
 80067b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b087      	sub	sp, #28
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	60f8      	str	r0, [r7, #12]
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f023 0210 	bic.w	r2, r3, #16
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	031b      	lsls	r3, r3, #12
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800680e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4313      	orrs	r3, r2
 8006818:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	621a      	str	r2, [r3, #32]
}
 8006826:	bf00      	nop
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006832:	b480      	push	{r7}
 8006834:	b085      	sub	sp, #20
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	f043 0307 	orr.w	r3, r3, #7
 8006854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	609a      	str	r2, [r3, #8]
}
 800685c:	bf00      	nop
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	021a      	lsls	r2, r3, #8
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	431a      	orrs	r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4313      	orrs	r3, r2
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	4313      	orrs	r3, r2
 8006894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	609a      	str	r2, [r3, #8]
}
 800689c:	bf00      	nop
 800689e:	371c      	adds	r7, #28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f003 031f 	and.w	r3, r3, #31
 80068ba:	2201      	movs	r2, #1
 80068bc:	fa02 f303 	lsl.w	r3, r2, r3
 80068c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a1a      	ldr	r2, [r3, #32]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	43db      	mvns	r3, r3
 80068ca:	401a      	ands	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6a1a      	ldr	r2, [r3, #32]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	fa01 f303 	lsl.w	r3, r1, r3
 80068e0:	431a      	orrs	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	621a      	str	r2, [r3, #32]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
	...

080068f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006908:	2302      	movs	r3, #2
 800690a:	e068      	b.n	80069de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a2e      	ldr	r2, [pc, #184]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d004      	beq.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a2d      	ldr	r2, [pc, #180]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d108      	bne.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006946:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006958:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4313      	orrs	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a1e      	ldr	r2, [pc, #120]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d01d      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697e:	d018      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a1b      	ldr	r2, [pc, #108]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d013      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a1a      	ldr	r2, [pc, #104]	; (80069f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00e      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a18      	ldr	r2, [pc, #96]	; (80069fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d009      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a13      	ldr	r2, [pc, #76]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d004      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a14      	ldr	r2, [pc, #80]	; (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d10c      	bne.n	80069cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40012c00 	.word	0x40012c00
 80069f0:	40013400 	.word	0x40013400
 80069f4:	40000400 	.word	0x40000400
 80069f8:	40000800 	.word	0x40000800
 80069fc:	40000c00 	.word	0x40000c00
 8006a00:	40014000 	.word	0x40014000

08006a04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d101      	bne.n	8006a20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e065      	b.n	8006aec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	041b      	lsls	r3, r3, #16
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a16      	ldr	r2, [pc, #88]	; (8006af8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a14      	ldr	r2, [pc, #80]	; (8006afc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d115      	bne.n	8006ada <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	051b      	lsls	r3, r3, #20
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	40012c00 	.word	0x40012c00
 8006afc:	40013400 	.word	0x40013400

08006b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e040      	b.n	8006bd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fa ff30 	bl	80019c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2224      	movs	r2, #36	; 0x24
 8006b68:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6812      	ldr	r2, [r2, #0]
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	f022 0201 	bic.w	r2, r2, #1
 8006b78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f8c0 	bl	8006d00 <UART_SetConfig>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e022      	b.n	8006bd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fb38 	bl	8007208 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6812      	ldr	r2, [r2, #0]
 8006ba0:	6852      	ldr	r2, [r2, #4]
 8006ba2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ba6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	6892      	ldr	r2, [r2, #8]
 8006bb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	6812      	ldr	r2, [r2, #0]
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	f042 0201 	orr.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fbbf 	bl	800734c <UART_CheckIdleState>
 8006bce:	4603      	mov	r3, r0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08a      	sub	sp, #40	; 0x28
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	603b      	str	r3, [r7, #0]
 8006be4:	4613      	mov	r3, r2
 8006be6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	f040 8082 	bne.w	8006cf6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <HAL_UART_Transmit+0x26>
 8006bf8:	88fb      	ldrh	r3, [r7, #6]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e07a      	b.n	8006cf8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_UART_Transmit+0x38>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e073      	b.n	8006cf8 <HAL_UART_Transmit+0x120>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2221      	movs	r2, #33	; 0x21
 8006c24:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c26:	f7fb f819 	bl	8001c5c <HAL_GetTick>
 8006c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	88fa      	ldrh	r2, [r7, #6]
 8006c30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	88fa      	ldrh	r2, [r7, #6]
 8006c38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c44:	d108      	bne.n	8006c58 <HAL_UART_Transmit+0x80>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d104      	bne.n	8006c58 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	61bb      	str	r3, [r7, #24]
 8006c56:	e003      	b.n	8006c60 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006c68:	e02d      	b.n	8006cc6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2200      	movs	r2, #0
 8006c72:	2180      	movs	r1, #128	; 0x80
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 fbb2 	bl	80073de <UART_WaitOnFlagUntilTimeout>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e039      	b.n	8006cf8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10b      	bne.n	8006ca2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	8812      	ldrh	r2, [r2, #0]
 8006c92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c96:	b292      	uxth	r2, r2
 8006c98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	3302      	adds	r3, #2
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	e008      	b.n	8006cb4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	7812      	ldrb	r2, [r2, #0]
 8006caa:	b292      	uxth	r2, r2
 8006cac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1cb      	bne.n	8006c6a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2140      	movs	r1, #64	; 0x40
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 fb7e 	bl	80073de <UART_WaitOnFlagUntilTimeout>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e005      	b.n	8006cf8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e000      	b.n	8006cf8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006cf6:	2302      	movs	r3, #2
  }
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d00:	b5b0      	push	{r4, r5, r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6819      	ldr	r1, [r3, #0]
 8006d2e:	4bac      	ldr	r3, [pc, #688]	; (8006fe0 <UART_SetConfig+0x2e0>)
 8006d30:	400b      	ands	r3, r1
 8006d32:	69f9      	ldr	r1, [r7, #28]
 8006d34:	430b      	orrs	r3, r1
 8006d36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6812      	ldr	r2, [r2, #0]
 8006d40:	6852      	ldr	r2, [r2, #4]
 8006d42:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	68d2      	ldr	r2, [r2, #12]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4aa2      	ldr	r2, [pc, #648]	; (8006fe4 <UART_SetConfig+0x2e4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d004      	beq.n	8006d68 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6812      	ldr	r2, [r2, #0]
 8006d70:	6892      	ldr	r2, [r2, #8]
 8006d72:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a99      	ldr	r2, [pc, #612]	; (8006fe8 <UART_SetConfig+0x2e8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d122      	bne.n	8006dcc <UART_SetConfig+0xcc>
 8006d86:	4b99      	ldr	r3, [pc, #612]	; (8006fec <UART_SetConfig+0x2ec>)
 8006d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8c:	f003 0303 	and.w	r3, r3, #3
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d817      	bhi.n	8006dc4 <UART_SetConfig+0xc4>
 8006d94:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <UART_SetConfig+0x9c>)
 8006d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9a:	bf00      	nop
 8006d9c:	08006dad 	.word	0x08006dad
 8006da0:	08006db9 	.word	0x08006db9
 8006da4:	08006db3 	.word	0x08006db3
 8006da8:	08006dbf 	.word	0x08006dbf
 8006dac:	2301      	movs	r3, #1
 8006dae:	76fb      	strb	r3, [r7, #27]
 8006db0:	e0e8      	b.n	8006f84 <UART_SetConfig+0x284>
 8006db2:	2302      	movs	r3, #2
 8006db4:	76fb      	strb	r3, [r7, #27]
 8006db6:	e0e5      	b.n	8006f84 <UART_SetConfig+0x284>
 8006db8:	2304      	movs	r3, #4
 8006dba:	76fb      	strb	r3, [r7, #27]
 8006dbc:	e0e2      	b.n	8006f84 <UART_SetConfig+0x284>
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	76fb      	strb	r3, [r7, #27]
 8006dc2:	e0df      	b.n	8006f84 <UART_SetConfig+0x284>
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	76fb      	strb	r3, [r7, #27]
 8006dc8:	bf00      	nop
 8006dca:	e0db      	b.n	8006f84 <UART_SetConfig+0x284>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a87      	ldr	r2, [pc, #540]	; (8006ff0 <UART_SetConfig+0x2f0>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d134      	bne.n	8006e40 <UART_SetConfig+0x140>
 8006dd6:	4b85      	ldr	r3, [pc, #532]	; (8006fec <UART_SetConfig+0x2ec>)
 8006dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ddc:	f003 030c 	and.w	r3, r3, #12
 8006de0:	2b0c      	cmp	r3, #12
 8006de2:	d829      	bhi.n	8006e38 <UART_SetConfig+0x138>
 8006de4:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <UART_SetConfig+0xec>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e21 	.word	0x08006e21
 8006df0:	08006e39 	.word	0x08006e39
 8006df4:	08006e39 	.word	0x08006e39
 8006df8:	08006e39 	.word	0x08006e39
 8006dfc:	08006e2d 	.word	0x08006e2d
 8006e00:	08006e39 	.word	0x08006e39
 8006e04:	08006e39 	.word	0x08006e39
 8006e08:	08006e39 	.word	0x08006e39
 8006e0c:	08006e27 	.word	0x08006e27
 8006e10:	08006e39 	.word	0x08006e39
 8006e14:	08006e39 	.word	0x08006e39
 8006e18:	08006e39 	.word	0x08006e39
 8006e1c:	08006e33 	.word	0x08006e33
 8006e20:	2300      	movs	r3, #0
 8006e22:	76fb      	strb	r3, [r7, #27]
 8006e24:	e0ae      	b.n	8006f84 <UART_SetConfig+0x284>
 8006e26:	2302      	movs	r3, #2
 8006e28:	76fb      	strb	r3, [r7, #27]
 8006e2a:	e0ab      	b.n	8006f84 <UART_SetConfig+0x284>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	76fb      	strb	r3, [r7, #27]
 8006e30:	e0a8      	b.n	8006f84 <UART_SetConfig+0x284>
 8006e32:	2308      	movs	r3, #8
 8006e34:	76fb      	strb	r3, [r7, #27]
 8006e36:	e0a5      	b.n	8006f84 <UART_SetConfig+0x284>
 8006e38:	2310      	movs	r3, #16
 8006e3a:	76fb      	strb	r3, [r7, #27]
 8006e3c:	bf00      	nop
 8006e3e:	e0a1      	b.n	8006f84 <UART_SetConfig+0x284>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a6b      	ldr	r2, [pc, #428]	; (8006ff4 <UART_SetConfig+0x2f4>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d120      	bne.n	8006e8c <UART_SetConfig+0x18c>
 8006e4a:	4b68      	ldr	r3, [pc, #416]	; (8006fec <UART_SetConfig+0x2ec>)
 8006e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d00f      	beq.n	8006e78 <UART_SetConfig+0x178>
 8006e58:	2b10      	cmp	r3, #16
 8006e5a:	d802      	bhi.n	8006e62 <UART_SetConfig+0x162>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <UART_SetConfig+0x16c>
 8006e60:	e010      	b.n	8006e84 <UART_SetConfig+0x184>
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d005      	beq.n	8006e72 <UART_SetConfig+0x172>
 8006e66:	2b30      	cmp	r3, #48	; 0x30
 8006e68:	d009      	beq.n	8006e7e <UART_SetConfig+0x17e>
 8006e6a:	e00b      	b.n	8006e84 <UART_SetConfig+0x184>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	76fb      	strb	r3, [r7, #27]
 8006e70:	e088      	b.n	8006f84 <UART_SetConfig+0x284>
 8006e72:	2302      	movs	r3, #2
 8006e74:	76fb      	strb	r3, [r7, #27]
 8006e76:	e085      	b.n	8006f84 <UART_SetConfig+0x284>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	76fb      	strb	r3, [r7, #27]
 8006e7c:	e082      	b.n	8006f84 <UART_SetConfig+0x284>
 8006e7e:	2308      	movs	r3, #8
 8006e80:	76fb      	strb	r3, [r7, #27]
 8006e82:	e07f      	b.n	8006f84 <UART_SetConfig+0x284>
 8006e84:	2310      	movs	r3, #16
 8006e86:	76fb      	strb	r3, [r7, #27]
 8006e88:	bf00      	nop
 8006e8a:	e07b      	b.n	8006f84 <UART_SetConfig+0x284>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a59      	ldr	r2, [pc, #356]	; (8006ff8 <UART_SetConfig+0x2f8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d120      	bne.n	8006ed8 <UART_SetConfig+0x1d8>
 8006e96:	4b55      	ldr	r3, [pc, #340]	; (8006fec <UART_SetConfig+0x2ec>)
 8006e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ea0:	2b40      	cmp	r3, #64	; 0x40
 8006ea2:	d00f      	beq.n	8006ec4 <UART_SetConfig+0x1c4>
 8006ea4:	2b40      	cmp	r3, #64	; 0x40
 8006ea6:	d802      	bhi.n	8006eae <UART_SetConfig+0x1ae>
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <UART_SetConfig+0x1b8>
 8006eac:	e010      	b.n	8006ed0 <UART_SetConfig+0x1d0>
 8006eae:	2b80      	cmp	r3, #128	; 0x80
 8006eb0:	d005      	beq.n	8006ebe <UART_SetConfig+0x1be>
 8006eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8006eb4:	d009      	beq.n	8006eca <UART_SetConfig+0x1ca>
 8006eb6:	e00b      	b.n	8006ed0 <UART_SetConfig+0x1d0>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	76fb      	strb	r3, [r7, #27]
 8006ebc:	e062      	b.n	8006f84 <UART_SetConfig+0x284>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	76fb      	strb	r3, [r7, #27]
 8006ec2:	e05f      	b.n	8006f84 <UART_SetConfig+0x284>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	76fb      	strb	r3, [r7, #27]
 8006ec8:	e05c      	b.n	8006f84 <UART_SetConfig+0x284>
 8006eca:	2308      	movs	r3, #8
 8006ecc:	76fb      	strb	r3, [r7, #27]
 8006ece:	e059      	b.n	8006f84 <UART_SetConfig+0x284>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	76fb      	strb	r3, [r7, #27]
 8006ed4:	bf00      	nop
 8006ed6:	e055      	b.n	8006f84 <UART_SetConfig+0x284>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a47      	ldr	r2, [pc, #284]	; (8006ffc <UART_SetConfig+0x2fc>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d124      	bne.n	8006f2c <UART_SetConfig+0x22c>
 8006ee2:	4b42      	ldr	r3, [pc, #264]	; (8006fec <UART_SetConfig+0x2ec>)
 8006ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef0:	d012      	beq.n	8006f18 <UART_SetConfig+0x218>
 8006ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef6:	d802      	bhi.n	8006efe <UART_SetConfig+0x1fe>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <UART_SetConfig+0x20c>
 8006efc:	e012      	b.n	8006f24 <UART_SetConfig+0x224>
 8006efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f02:	d006      	beq.n	8006f12 <UART_SetConfig+0x212>
 8006f04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f08:	d009      	beq.n	8006f1e <UART_SetConfig+0x21e>
 8006f0a:	e00b      	b.n	8006f24 <UART_SetConfig+0x224>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	76fb      	strb	r3, [r7, #27]
 8006f10:	e038      	b.n	8006f84 <UART_SetConfig+0x284>
 8006f12:	2302      	movs	r3, #2
 8006f14:	76fb      	strb	r3, [r7, #27]
 8006f16:	e035      	b.n	8006f84 <UART_SetConfig+0x284>
 8006f18:	2304      	movs	r3, #4
 8006f1a:	76fb      	strb	r3, [r7, #27]
 8006f1c:	e032      	b.n	8006f84 <UART_SetConfig+0x284>
 8006f1e:	2308      	movs	r3, #8
 8006f20:	76fb      	strb	r3, [r7, #27]
 8006f22:	e02f      	b.n	8006f84 <UART_SetConfig+0x284>
 8006f24:	2310      	movs	r3, #16
 8006f26:	76fb      	strb	r3, [r7, #27]
 8006f28:	bf00      	nop
 8006f2a:	e02b      	b.n	8006f84 <UART_SetConfig+0x284>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a2c      	ldr	r2, [pc, #176]	; (8006fe4 <UART_SetConfig+0x2e4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d124      	bne.n	8006f80 <UART_SetConfig+0x280>
 8006f36:	4b2d      	ldr	r3, [pc, #180]	; (8006fec <UART_SetConfig+0x2ec>)
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f44:	d012      	beq.n	8006f6c <UART_SetConfig+0x26c>
 8006f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4a:	d802      	bhi.n	8006f52 <UART_SetConfig+0x252>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d007      	beq.n	8006f60 <UART_SetConfig+0x260>
 8006f50:	e012      	b.n	8006f78 <UART_SetConfig+0x278>
 8006f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f56:	d006      	beq.n	8006f66 <UART_SetConfig+0x266>
 8006f58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f5c:	d009      	beq.n	8006f72 <UART_SetConfig+0x272>
 8006f5e:	e00b      	b.n	8006f78 <UART_SetConfig+0x278>
 8006f60:	2300      	movs	r3, #0
 8006f62:	76fb      	strb	r3, [r7, #27]
 8006f64:	e00e      	b.n	8006f84 <UART_SetConfig+0x284>
 8006f66:	2302      	movs	r3, #2
 8006f68:	76fb      	strb	r3, [r7, #27]
 8006f6a:	e00b      	b.n	8006f84 <UART_SetConfig+0x284>
 8006f6c:	2304      	movs	r3, #4
 8006f6e:	76fb      	strb	r3, [r7, #27]
 8006f70:	e008      	b.n	8006f84 <UART_SetConfig+0x284>
 8006f72:	2308      	movs	r3, #8
 8006f74:	76fb      	strb	r3, [r7, #27]
 8006f76:	e005      	b.n	8006f84 <UART_SetConfig+0x284>
 8006f78:	2310      	movs	r3, #16
 8006f7a:	76fb      	strb	r3, [r7, #27]
 8006f7c:	bf00      	nop
 8006f7e:	e001      	b.n	8006f84 <UART_SetConfig+0x284>
 8006f80:	2310      	movs	r3, #16
 8006f82:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a16      	ldr	r2, [pc, #88]	; (8006fe4 <UART_SetConfig+0x2e4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	f040 8080 	bne.w	8007090 <UART_SetConfig+0x390>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f90:	7efb      	ldrb	r3, [r7, #27]
 8006f92:	2b08      	cmp	r3, #8
 8006f94:	d836      	bhi.n	8007004 <UART_SetConfig+0x304>
 8006f96:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <UART_SetConfig+0x29c>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08006fc1 	.word	0x08006fc1
 8006fa0:	08007005 	.word	0x08007005
 8006fa4:	08006fc9 	.word	0x08006fc9
 8006fa8:	08007005 	.word	0x08007005
 8006fac:	08006fcf 	.word	0x08006fcf
 8006fb0:	08007005 	.word	0x08007005
 8006fb4:	08007005 	.word	0x08007005
 8006fb8:	08007005 	.word	0x08007005
 8006fbc:	08006fd7 	.word	0x08006fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc0:	f7fd fadc 	bl	800457c <HAL_RCC_GetPCLK1Freq>
 8006fc4:	6178      	str	r0, [r7, #20]
        break;
 8006fc6:	e022      	b.n	800700e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fc8:	4b0d      	ldr	r3, [pc, #52]	; (8007000 <UART_SetConfig+0x300>)
 8006fca:	617b      	str	r3, [r7, #20]
        break;
 8006fcc:	e01f      	b.n	800700e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fce:	f7fd fa3f 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8006fd2:	6178      	str	r0, [r7, #20]
        break;
 8006fd4:	e01b      	b.n	800700e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fda:	617b      	str	r3, [r7, #20]
        break;
 8006fdc:	e017      	b.n	800700e <UART_SetConfig+0x30e>
 8006fde:	bf00      	nop
 8006fe0:	efff69f3 	.word	0xefff69f3
 8006fe4:	40008000 	.word	0x40008000
 8006fe8:	40013800 	.word	0x40013800
 8006fec:	40021000 	.word	0x40021000
 8006ff0:	40004400 	.word	0x40004400
 8006ff4:	40004800 	.word	0x40004800
 8006ff8:	40004c00 	.word	0x40004c00
 8006ffc:	40005000 	.word	0x40005000
 8007000:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	76bb      	strb	r3, [r7, #26]
        break;
 800700c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 80eb 	beq.w	80071ec <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	4613      	mov	r3, r2
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	441a      	add	r2, r3
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	429a      	cmp	r2, r3
 8007024:	d805      	bhi.n	8007032 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	429a      	cmp	r2, r3
 8007030:	d202      	bcs.n	8007038 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	76bb      	strb	r3, [r7, #26]
 8007036:	e0d9      	b.n	80071ec <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	461a      	mov	r2, r3
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	021d      	lsls	r5, r3, #8
 8007042:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8007046:	0214      	lsls	r4, r2, #8
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	085b      	lsrs	r3, r3, #1
 800704e:	461a      	mov	r2, r3
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	18a0      	adds	r0, r4, r2
 8007056:	eb45 0103 	adc.w	r1, r5, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f04f 0400 	mov.w	r4, #0
 8007062:	461a      	mov	r2, r3
 8007064:	4623      	mov	r3, r4
 8007066:	f7f9 fdf5 	bl	8000c54 <__aeabi_uldivmod>
 800706a:	4603      	mov	r3, r0
 800706c:	460c      	mov	r4, r1
 800706e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007076:	d308      	bcc.n	800708a <UART_SetConfig+0x38a>
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800707e:	d204      	bcs.n	800708a <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	60da      	str	r2, [r3, #12]
 8007088:	e0b0      	b.n	80071ec <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	76bb      	strb	r3, [r7, #26]
 800708e:	e0ad      	b.n	80071ec <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007098:	d15c      	bne.n	8007154 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800709a:	7efb      	ldrb	r3, [r7, #27]
 800709c:	2b08      	cmp	r3, #8
 800709e:	d828      	bhi.n	80070f2 <UART_SetConfig+0x3f2>
 80070a0:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <UART_SetConfig+0x3a8>)
 80070a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a6:	bf00      	nop
 80070a8:	080070cd 	.word	0x080070cd
 80070ac:	080070d5 	.word	0x080070d5
 80070b0:	080070dd 	.word	0x080070dd
 80070b4:	080070f3 	.word	0x080070f3
 80070b8:	080070e3 	.word	0x080070e3
 80070bc:	080070f3 	.word	0x080070f3
 80070c0:	080070f3 	.word	0x080070f3
 80070c4:	080070f3 	.word	0x080070f3
 80070c8:	080070eb 	.word	0x080070eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070cc:	f7fd fa56 	bl	800457c <HAL_RCC_GetPCLK1Freq>
 80070d0:	6178      	str	r0, [r7, #20]
        break;
 80070d2:	e013      	b.n	80070fc <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070d4:	f7fd fa68 	bl	80045a8 <HAL_RCC_GetPCLK2Freq>
 80070d8:	6178      	str	r0, [r7, #20]
        break;
 80070da:	e00f      	b.n	80070fc <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070dc:	4b49      	ldr	r3, [pc, #292]	; (8007204 <UART_SetConfig+0x504>)
 80070de:	617b      	str	r3, [r7, #20]
        break;
 80070e0:	e00c      	b.n	80070fc <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070e2:	f7fd f9b5 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80070e6:	6178      	str	r0, [r7, #20]
        break;
 80070e8:	e008      	b.n	80070fc <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ee:	617b      	str	r3, [r7, #20]
        break;
 80070f0:	e004      	b.n	80070fc <UART_SetConfig+0x3fc>
      default:
        pclk = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	76bb      	strb	r3, [r7, #26]
        break;
 80070fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d074      	beq.n	80071ec <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	005a      	lsls	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	085b      	lsrs	r3, r3, #1
 800710c:	441a      	add	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	fbb2 f3f3 	udiv	r3, r2, r3
 8007116:	b29b      	uxth	r3, r3
 8007118:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b0f      	cmp	r3, #15
 800711e:	d916      	bls.n	800714e <UART_SetConfig+0x44e>
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007126:	d212      	bcs.n	800714e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	b29b      	uxth	r3, r3
 800712c:	f023 030f 	bic.w	r3, r3, #15
 8007130:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	085b      	lsrs	r3, r3, #1
 8007136:	b29b      	uxth	r3, r3
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	b29a      	uxth	r2, r3
 800713e:	89fb      	ldrh	r3, [r7, #14]
 8007140:	4313      	orrs	r3, r2
 8007142:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	89fa      	ldrh	r2, [r7, #14]
 800714a:	60da      	str	r2, [r3, #12]
 800714c:	e04e      	b.n	80071ec <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	76bb      	strb	r3, [r7, #26]
 8007152:	e04b      	b.n	80071ec <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007154:	7efb      	ldrb	r3, [r7, #27]
 8007156:	2b08      	cmp	r3, #8
 8007158:	d827      	bhi.n	80071aa <UART_SetConfig+0x4aa>
 800715a:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <UART_SetConfig+0x460>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	08007185 	.word	0x08007185
 8007164:	0800718d 	.word	0x0800718d
 8007168:	08007195 	.word	0x08007195
 800716c:	080071ab 	.word	0x080071ab
 8007170:	0800719b 	.word	0x0800719b
 8007174:	080071ab 	.word	0x080071ab
 8007178:	080071ab 	.word	0x080071ab
 800717c:	080071ab 	.word	0x080071ab
 8007180:	080071a3 	.word	0x080071a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007184:	f7fd f9fa 	bl	800457c <HAL_RCC_GetPCLK1Freq>
 8007188:	6178      	str	r0, [r7, #20]
        break;
 800718a:	e013      	b.n	80071b4 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800718c:	f7fd fa0c 	bl	80045a8 <HAL_RCC_GetPCLK2Freq>
 8007190:	6178      	str	r0, [r7, #20]
        break;
 8007192:	e00f      	b.n	80071b4 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007194:	4b1b      	ldr	r3, [pc, #108]	; (8007204 <UART_SetConfig+0x504>)
 8007196:	617b      	str	r3, [r7, #20]
        break;
 8007198:	e00c      	b.n	80071b4 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800719a:	f7fd f959 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800719e:	6178      	str	r0, [r7, #20]
        break;
 80071a0:	e008      	b.n	80071b4 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071a6:	617b      	str	r3, [r7, #20]
        break;
 80071a8:	e004      	b.n	80071b4 <UART_SetConfig+0x4b4>
      default:
        pclk = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	76bb      	strb	r3, [r7, #26]
        break;
 80071b2:	bf00      	nop
    }

    if (pclk != 0U)
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d018      	beq.n	80071ec <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	085a      	lsrs	r2, r3, #1
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	441a      	add	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2b0f      	cmp	r3, #15
 80071d4:	d908      	bls.n	80071e8 <UART_SetConfig+0x4e8>
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071dc:	d204      	bcs.n	80071e8 <UART_SetConfig+0x4e8>
      {
        huart->Instance->BRR = usartdiv;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	60da      	str	r2, [r3, #12]
 80071e6:	e001      	b.n	80071ec <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80071f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3720      	adds	r7, #32
 80071fe:	46bd      	mov	sp, r7
 8007200:	bdb0      	pop	{r4, r5, r7, pc}
 8007202:	bf00      	nop
 8007204:	00f42400 	.word	0x00f42400

08007208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00a      	beq.n	8007232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6812      	ldr	r2, [r2, #0]
 8007224:	6852      	ldr	r2, [r2, #4]
 8007226:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800722e:	430a      	orrs	r2, r1
 8007230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6812      	ldr	r2, [r2, #0]
 8007246:	6852      	ldr	r2, [r2, #4]
 8007248:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007250:	430a      	orrs	r2, r1
 8007252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00a      	beq.n	8007276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6812      	ldr	r2, [r2, #0]
 8007268:	6852      	ldr	r2, [r2, #4]
 800726a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007272:	430a      	orrs	r2, r1
 8007274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	6852      	ldr	r2, [r2, #4]
 800728c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007294:	430a      	orrs	r2, r1
 8007296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	f003 0310 	and.w	r3, r3, #16
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00a      	beq.n	80072ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	6812      	ldr	r2, [r2, #0]
 80072ac:	6892      	ldr	r2, [r2, #8]
 80072ae:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072b6:	430a      	orrs	r2, r1
 80072b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	6812      	ldr	r2, [r2, #0]
 80072ce:	6892      	ldr	r2, [r2, #8]
 80072d0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80072d8:	430a      	orrs	r2, r1
 80072da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01a      	beq.n	800731e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	6812      	ldr	r2, [r2, #0]
 80072f0:	6852      	ldr	r2, [r2, #4]
 80072f2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80072fa:	430a      	orrs	r2, r1
 80072fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007306:	d10a      	bne.n	800731e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6812      	ldr	r2, [r2, #0]
 8007310:	6852      	ldr	r2, [r2, #4]
 8007312:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800731a:	430a      	orrs	r2, r1
 800731c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	6812      	ldr	r2, [r2, #0]
 8007332:	6852      	ldr	r2, [r2, #4]
 8007334:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800733c:	430a      	orrs	r2, r1
 800733e:	605a      	str	r2, [r3, #4]
  }
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af02      	add	r7, sp, #8
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800735c:	f7fa fc7e 	bl	8001c5c <HAL_GetTick>
 8007360:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0308 	and.w	r3, r3, #8
 800736c:	2b08      	cmp	r3, #8
 800736e:	d10e      	bne.n	800738e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f82d 	bl	80073de <UART_WaitOnFlagUntilTimeout>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e023      	b.n	80073d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0304 	and.w	r3, r3, #4
 8007398:	2b04      	cmp	r3, #4
 800739a:	d10e      	bne.n	80073ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800739c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f817 	bl	80073de <UART_WaitOnFlagUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e00d      	b.n	80073d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2220      	movs	r2, #32
 80073c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	60f8      	str	r0, [r7, #12]
 80073e6:	60b9      	str	r1, [r7, #8]
 80073e8:	603b      	str	r3, [r7, #0]
 80073ea:	4613      	mov	r3, r2
 80073ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ee:	e05e      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073f6:	d05a      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f8:	f7fa fc30 	bl	8001c5c <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	1ad2      	subs	r2, r2, r3
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	429a      	cmp	r2, r3
 8007406:	d802      	bhi.n	800740e <UART_WaitOnFlagUntilTimeout+0x30>
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d11b      	bne.n	8007446 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	6812      	ldr	r2, [r2, #0]
 8007416:	6812      	ldr	r2, [r2, #0]
 8007418:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800741c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	6812      	ldr	r2, [r2, #0]
 8007426:	6892      	ldr	r2, [r2, #8]
 8007428:	f022 0201 	bic.w	r2, r2, #1
 800742c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2220      	movs	r2, #32
 8007432:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2220      	movs	r2, #32
 8007438:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e043      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0304 	and.w	r3, r3, #4
 8007450:	2b00      	cmp	r3, #0
 8007452:	d02c      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800745e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007462:	d124      	bne.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800746c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	6812      	ldr	r2, [r2, #0]
 8007476:	6812      	ldr	r2, [r2, #0]
 8007478:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800747c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	6812      	ldr	r2, [r2, #0]
 8007486:	6892      	ldr	r2, [r2, #8]
 8007488:	f022 0201 	bic.w	r2, r2, #1
 800748c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2220      	movs	r2, #32
 8007492:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2220      	movs	r2, #32
 8007498:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e00f      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69da      	ldr	r2, [r3, #28]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	401a      	ands	r2, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	bf0c      	ite	eq
 80074be:	2301      	moveq	r3, #1
 80074c0:	2300      	movne	r3, #0
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d091      	beq.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b085      	sub	sp, #20
 80074da:	af00      	add	r7, sp, #0
 80074dc:	4603      	mov	r3, r0
 80074de:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80074e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074e8:	2b84      	cmp	r3, #132	; 0x84
 80074ea:	d005      	beq.n	80074f8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80074ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	3303      	adds	r3, #3
 80074f6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80074f8:	68fb      	ldr	r3, [r7, #12]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800750a:	f000 fec3 	bl	8008294 <vTaskStartScheduler>
  
  return osOK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	bd80      	pop	{r7, pc}

08007514 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007516:	b089      	sub	sp, #36	; 0x24
 8007518:	af04      	add	r7, sp, #16
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d020      	beq.n	8007568 <osThreadCreate+0x54>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d01c      	beq.n	8007568 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685c      	ldr	r4, [r3, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681d      	ldr	r5, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	691e      	ldr	r6, [r3, #16]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007540:	4618      	mov	r0, r3
 8007542:	f7ff ffc8 	bl	80074d6 <makeFreeRtosPriority>
 8007546:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007550:	9202      	str	r2, [sp, #8]
 8007552:	9301      	str	r3, [sp, #4]
 8007554:	9100      	str	r1, [sp, #0]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	4632      	mov	r2, r6
 800755a:	4629      	mov	r1, r5
 800755c:	4620      	mov	r0, r4
 800755e:	f000 fcd5 	bl	8007f0c <xTaskCreateStatic>
 8007562:	4603      	mov	r3, r0
 8007564:	60fb      	str	r3, [r7, #12]
 8007566:	e01c      	b.n	80075a2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685c      	ldr	r4, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007574:	b29e      	uxth	r6, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff ffaa 	bl	80074d6 <makeFreeRtosPriority>
 8007582:	4602      	mov	r2, r0
 8007584:	f107 030c 	add.w	r3, r7, #12
 8007588:	9301      	str	r3, [sp, #4]
 800758a:	9200      	str	r2, [sp, #0]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	4632      	mov	r2, r6
 8007590:	4629      	mov	r1, r5
 8007592:	4620      	mov	r0, r4
 8007594:	f000 fd14 	bl	8007fc0 <xTaskCreate>
 8007598:	4603      	mov	r3, r0
 800759a:	2b01      	cmp	r3, #1
 800759c:	d001      	beq.n	80075a2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	e000      	b.n	80075a4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80075a2:	68fb      	ldr	r3, [r7, #12]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075ac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <osDelay+0x16>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	e000      	b.n	80075c4 <osDelay+0x18>
 80075c2:	2301      	movs	r3, #1
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 fe31 	bl	800822c <vTaskDelay>
  
  return osOK;
 80075ca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f103 0208 	add.w	r2, r3, #8
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f103 0208 	add.w	r2, r3, #8
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f103 0208 	add.w	r2, r3, #8
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800762e:	b480      	push	{r7}
 8007630:	b085      	sub	sp, #20
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	601a      	str	r2, [r3, #0]
}
 800766a:	bf00      	nop
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007676:	b480      	push	{r7}
 8007678:	b085      	sub	sp, #20
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800768c:	d103      	bne.n	8007696 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	e00c      	b.n	80076b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3308      	adds	r3, #8
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	e002      	b.n	80076a4 <vListInsert+0x2e>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	60fb      	str	r3, [r7, #12]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d9f6      	bls.n	800769e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	601a      	str	r2, [r3, #0]
}
 80076dc:	bf00      	nop
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	6892      	ldr	r2, [r2, #8]
 80076fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	6852      	ldr	r2, [r2, #4]
 8007708:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	429a      	cmp	r2, r3
 8007712:	d103      	bne.n	800771c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	1e5a      	subs	r2, r3, #1
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3b04      	subs	r3, #4
 800774c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3b04      	subs	r3, #4
 800775a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f023 0201 	bic.w	r2, r3, #1
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3b04      	subs	r3, #4
 800776a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800776c:	4a0c      	ldr	r2, [pc, #48]	; (80077a0 <pxPortInitialiseStack+0x64>)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3b14      	subs	r3, #20
 8007776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3b04      	subs	r3, #4
 8007782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f06f 0202 	mvn.w	r2, #2
 800778a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3b20      	subs	r3, #32
 8007790:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007792:	68fb      	ldr	r3, [r7, #12]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	080077a5 	.word	0x080077a5

080077a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077ae:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <prvTaskExitError+0x50>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077b6:	d009      	beq.n	80077cc <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	e7fe      	b.n	80077ca <prvTaskExitError+0x26>
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077de:	bf00      	nop
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d0fc      	beq.n	80077e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	2000000c 	.word	0x2000000c
	...

08007800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007800:	4b07      	ldr	r3, [pc, #28]	; (8007820 <pxCurrentTCBConst2>)
 8007802:	6819      	ldr	r1, [r3, #0]
 8007804:	6808      	ldr	r0, [r1, #0]
 8007806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800780a:	f380 8809 	msr	PSP, r0
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f04f 0000 	mov.w	r0, #0
 8007816:	f380 8811 	msr	BASEPRI, r0
 800781a:	4770      	bx	lr
 800781c:	f3af 8000 	nop.w

08007820 <pxCurrentTCBConst2>:
 8007820:	20000ecc 	.word	0x20000ecc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop

08007828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007828:	4808      	ldr	r0, [pc, #32]	; (800784c <prvPortStartFirstTask+0x24>)
 800782a:	6800      	ldr	r0, [r0, #0]
 800782c:	6800      	ldr	r0, [r0, #0]
 800782e:	f380 8808 	msr	MSP, r0
 8007832:	f04f 0000 	mov.w	r0, #0
 8007836:	f380 8814 	msr	CONTROL, r0
 800783a:	b662      	cpsie	i
 800783c:	b661      	cpsie	f
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	df00      	svc	0
 8007848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800784a:	bf00      	nop
 800784c:	e000ed08 	.word	0xe000ed08

08007850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007856:	4b44      	ldr	r3, [pc, #272]	; (8007968 <xPortStartScheduler+0x118>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a44      	ldr	r2, [pc, #272]	; (800796c <xPortStartScheduler+0x11c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d109      	bne.n	8007874 <xPortStartScheduler+0x24>
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	613b      	str	r3, [r7, #16]
 8007872:	e7fe      	b.n	8007872 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007874:	4b3c      	ldr	r3, [pc, #240]	; (8007968 <xPortStartScheduler+0x118>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a3d      	ldr	r2, [pc, #244]	; (8007970 <xPortStartScheduler+0x120>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d109      	bne.n	8007892 <xPortStartScheduler+0x42>
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	e7fe      	b.n	8007890 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007892:	4b38      	ldr	r3, [pc, #224]	; (8007974 <xPortStartScheduler+0x124>)
 8007894:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	22ff      	movs	r2, #255	; 0xff
 80078a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	4b30      	ldr	r3, [pc, #192]	; (8007978 <xPortStartScheduler+0x128>)
 80078b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078ba:	4b30      	ldr	r3, [pc, #192]	; (800797c <xPortStartScheduler+0x12c>)
 80078bc:	2207      	movs	r2, #7
 80078be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078c0:	e009      	b.n	80078d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80078c2:	4b2e      	ldr	r3, [pc, #184]	; (800797c <xPortStartScheduler+0x12c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	4a2c      	ldr	r2, [pc, #176]	; (800797c <xPortStartScheduler+0x12c>)
 80078ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078d6:	78fb      	ldrb	r3, [r7, #3]
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078de:	2b80      	cmp	r3, #128	; 0x80
 80078e0:	d0ef      	beq.n	80078c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078e2:	4b26      	ldr	r3, [pc, #152]	; (800797c <xPortStartScheduler+0x12c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f1c3 0307 	rsb	r3, r3, #7
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d009      	beq.n	8007902 <xPortStartScheduler+0xb2>
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	60bb      	str	r3, [r7, #8]
 8007900:	e7fe      	b.n	8007900 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007902:	4b1e      	ldr	r3, [pc, #120]	; (800797c <xPortStartScheduler+0x12c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	021b      	lsls	r3, r3, #8
 8007908:	4a1c      	ldr	r2, [pc, #112]	; (800797c <xPortStartScheduler+0x12c>)
 800790a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800790c:	4b1b      	ldr	r3, [pc, #108]	; (800797c <xPortStartScheduler+0x12c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007914:	4a19      	ldr	r2, [pc, #100]	; (800797c <xPortStartScheduler+0x12c>)
 8007916:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	b2da      	uxtb	r2, r3
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007920:	4a17      	ldr	r2, [pc, #92]	; (8007980 <xPortStartScheduler+0x130>)
 8007922:	4b17      	ldr	r3, [pc, #92]	; (8007980 <xPortStartScheduler+0x130>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800792a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800792c:	4a14      	ldr	r2, [pc, #80]	; (8007980 <xPortStartScheduler+0x130>)
 800792e:	4b14      	ldr	r3, [pc, #80]	; (8007980 <xPortStartScheduler+0x130>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007936:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007938:	f000 f8d6 	bl	8007ae8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800793c:	4b11      	ldr	r3, [pc, #68]	; (8007984 <xPortStartScheduler+0x134>)
 800793e:	2200      	movs	r2, #0
 8007940:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007942:	f000 f8f5 	bl	8007b30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007946:	4a10      	ldr	r2, [pc, #64]	; (8007988 <xPortStartScheduler+0x138>)
 8007948:	4b0f      	ldr	r3, [pc, #60]	; (8007988 <xPortStartScheduler+0x138>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007950:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007952:	f7ff ff69 	bl	8007828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007956:	f000 fe5d 	bl	8008614 <vTaskSwitchContext>
	prvTaskExitError();
 800795a:	f7ff ff23 	bl	80077a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	e000ed00 	.word	0xe000ed00
 800796c:	410fc271 	.word	0x410fc271
 8007970:	410fc270 	.word	0x410fc270
 8007974:	e000e400 	.word	0xe000e400
 8007978:	200002ec 	.word	0x200002ec
 800797c:	200002f0 	.word	0x200002f0
 8007980:	e000ed20 	.word	0xe000ed20
 8007984:	2000000c 	.word	0x2000000c
 8007988:	e000ef34 	.word	0xe000ef34

0800798c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079a4:	4b0e      	ldr	r3, [pc, #56]	; (80079e0 <vPortEnterCritical+0x54>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3301      	adds	r3, #1
 80079aa:	4a0d      	ldr	r2, [pc, #52]	; (80079e0 <vPortEnterCritical+0x54>)
 80079ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079ae:	4b0c      	ldr	r3, [pc, #48]	; (80079e0 <vPortEnterCritical+0x54>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d10e      	bne.n	80079d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079b6:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <vPortEnterCritical+0x58>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d009      	beq.n	80079d4 <vPortEnterCritical+0x48>
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	603b      	str	r3, [r7, #0]
 80079d2:	e7fe      	b.n	80079d2 <vPortEnterCritical+0x46>
	}
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	2000000c 	.word	0x2000000c
 80079e4:	e000ed04 	.word	0xe000ed04

080079e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079ee:	4b11      	ldr	r3, [pc, #68]	; (8007a34 <vPortExitCritical+0x4c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <vPortExitCritical+0x22>
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	607b      	str	r3, [r7, #4]
 8007a08:	e7fe      	b.n	8007a08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007a0a:	4b0a      	ldr	r3, [pc, #40]	; (8007a34 <vPortExitCritical+0x4c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	4a08      	ldr	r2, [pc, #32]	; (8007a34 <vPortExitCritical+0x4c>)
 8007a12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a14:	4b07      	ldr	r3, [pc, #28]	; (8007a34 <vPortExitCritical+0x4c>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d104      	bne.n	8007a26 <vPortExitCritical+0x3e>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	2000000c 	.word	0x2000000c
	...

08007a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a40:	f3ef 8009 	mrs	r0, PSP
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <pxCurrentTCBConst>)
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	f01e 0f10 	tst.w	lr, #16
 8007a50:	bf08      	it	eq
 8007a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5a:	6010      	str	r0, [r2, #0]
 8007a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a64:	f380 8811 	msr	BASEPRI, r0
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f000 fdd0 	bl	8008614 <vTaskSwitchContext>
 8007a74:	f04f 0000 	mov.w	r0, #0
 8007a78:	f380 8811 	msr	BASEPRI, r0
 8007a7c:	bc09      	pop	{r0, r3}
 8007a7e:	6819      	ldr	r1, [r3, #0]
 8007a80:	6808      	ldr	r0, [r1, #0]
 8007a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a86:	f01e 0f10 	tst.w	lr, #16
 8007a8a:	bf08      	it	eq
 8007a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a90:	f380 8809 	msr	PSP, r0
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	f3af 8000 	nop.w

08007aa0 <pxCurrentTCBConst>:
 8007aa0:	20000ecc 	.word	0x20000ecc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop

08007aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ac0:	f000 fcf0 	bl	80084a4 <xTaskIncrementTick>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007aca:	4b06      	ldr	r3, [pc, #24]	; (8007ae4 <SysTick_Handler+0x3c>)
 8007acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	e000ed04 	.word	0xe000ed04

08007ae8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007aec:	4b0b      	ldr	r3, [pc, #44]	; (8007b1c <vPortSetupTimerInterrupt+0x34>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007af2:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <vPortSetupTimerInterrupt+0x38>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007af8:	4a0a      	ldr	r2, [pc, #40]	; (8007b24 <vPortSetupTimerInterrupt+0x3c>)
 8007afa:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <vPortSetupTimerInterrupt+0x40>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	490b      	ldr	r1, [pc, #44]	; (8007b2c <vPortSetupTimerInterrupt+0x44>)
 8007b00:	fba1 1303 	umull	r1, r3, r1, r3
 8007b04:	099b      	lsrs	r3, r3, #6
 8007b06:	3b01      	subs	r3, #1
 8007b08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b0a:	4b04      	ldr	r3, [pc, #16]	; (8007b1c <vPortSetupTimerInterrupt+0x34>)
 8007b0c:	2207      	movs	r2, #7
 8007b0e:	601a      	str	r2, [r3, #0]
}
 8007b10:	bf00      	nop
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	e000e010 	.word	0xe000e010
 8007b20:	e000e018 	.word	0xe000e018
 8007b24:	e000e014 	.word	0xe000e014
 8007b28:	20000000 	.word	0x20000000
 8007b2c:	10624dd3 	.word	0x10624dd3

08007b30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b40 <vPortEnableVFP+0x10>
 8007b34:	6801      	ldr	r1, [r0, #0]
 8007b36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b3a:	6001      	str	r1, [r0, #0]
 8007b3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b3e:	bf00      	nop
 8007b40:	e000ed88 	.word	0xe000ed88

08007b44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	; 0x28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b50:	f000 fbfe 	bl	8008350 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b54:	4b59      	ldr	r3, [pc, #356]	; (8007cbc <pvPortMalloc+0x178>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b5c:	f000 f91a 	bl	8007d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b60:	4b57      	ldr	r3, [pc, #348]	; (8007cc0 <pvPortMalloc+0x17c>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4013      	ands	r3, r2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f040 8091 	bne.w	8007c90 <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d01c      	beq.n	8007bae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007b74:	2208      	movs	r2, #8
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4413      	add	r3, r2
 8007b7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f003 0307 	and.w	r3, r3, #7
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d013      	beq.n	8007bae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f023 0307 	bic.w	r3, r3, #7
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <pvPortMalloc+0x6a>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	e7fe      	b.n	8007bac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d06d      	beq.n	8007c90 <pvPortMalloc+0x14c>
 8007bb4:	4b43      	ldr	r3, [pc, #268]	; (8007cc4 <pvPortMalloc+0x180>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d868      	bhi.n	8007c90 <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bbe:	4b42      	ldr	r3, [pc, #264]	; (8007cc8 <pvPortMalloc+0x184>)
 8007bc0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bc2:	4b41      	ldr	r3, [pc, #260]	; (8007cc8 <pvPortMalloc+0x184>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bc8:	e004      	b.n	8007bd4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d203      	bcs.n	8007be6 <pvPortMalloc+0xa2>
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1f1      	bne.n	8007bca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007be6:	4b35      	ldr	r3, [pc, #212]	; (8007cbc <pvPortMalloc+0x178>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d04f      	beq.n	8007c90 <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2208      	movs	r2, #8
 8007bf6:	4413      	add	r3, r2
 8007bf8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	1ad2      	subs	r2, r2, r3
 8007c0a:	2308      	movs	r3, #8
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d91e      	bls.n	8007c50 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4413      	add	r3, r2
 8007c18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	f003 0307 	and.w	r3, r3, #7
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d009      	beq.n	8007c38 <pvPortMalloc+0xf4>
 8007c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	613b      	str	r3, [r7, #16]
 8007c36:	e7fe      	b.n	8007c36 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	1ad2      	subs	r2, r2, r3
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c4a:	69b8      	ldr	r0, [r7, #24]
 8007c4c:	f000 f904 	bl	8007e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c50:	4b1c      	ldr	r3, [pc, #112]	; (8007cc4 <pvPortMalloc+0x180>)
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	4a1a      	ldr	r2, [pc, #104]	; (8007cc4 <pvPortMalloc+0x180>)
 8007c5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c5e:	4b19      	ldr	r3, [pc, #100]	; (8007cc4 <pvPortMalloc+0x180>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	4b1a      	ldr	r3, [pc, #104]	; (8007ccc <pvPortMalloc+0x188>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d203      	bcs.n	8007c72 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c6a:	4b16      	ldr	r3, [pc, #88]	; (8007cc4 <pvPortMalloc+0x180>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a17      	ldr	r2, [pc, #92]	; (8007ccc <pvPortMalloc+0x188>)
 8007c70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	4b12      	ldr	r3, [pc, #72]	; (8007cc0 <pvPortMalloc+0x17c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c86:	4b12      	ldr	r3, [pc, #72]	; (8007cd0 <pvPortMalloc+0x18c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	4a10      	ldr	r2, [pc, #64]	; (8007cd0 <pvPortMalloc+0x18c>)
 8007c8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c90:	f000 fb6c 	bl	800836c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d009      	beq.n	8007cb2 <pvPortMalloc+0x16e>
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	e7fe      	b.n	8007cb0 <pvPortMalloc+0x16c>
	return pvReturn;
 8007cb2:	69fb      	ldr	r3, [r7, #28]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3728      	adds	r7, #40	; 0x28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	20000eb4 	.word	0x20000eb4
 8007cc0:	20000ec8 	.word	0x20000ec8
 8007cc4:	20000eb8 	.word	0x20000eb8
 8007cc8:	20000eac 	.word	0x20000eac
 8007ccc:	20000ebc 	.word	0x20000ebc
 8007cd0:	20000ec0 	.word	0x20000ec0

08007cd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d04b      	beq.n	8007d7e <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ce6:	2308      	movs	r3, #8
 8007ce8:	425b      	negs	r3, r3
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	4413      	add	r3, r2
 8007cee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	4b23      	ldr	r3, [pc, #140]	; (8007d88 <vPortFree+0xb4>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d109      	bne.n	8007d16 <vPortFree+0x42>
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	e7fe      	b.n	8007d14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d009      	beq.n	8007d32 <vPortFree+0x5e>
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	60bb      	str	r3, [r7, #8]
 8007d30:	e7fe      	b.n	8007d30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <vPortFree+0xb4>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01e      	beq.n	8007d7e <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d11a      	bne.n	8007d7e <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	4b0e      	ldr	r3, [pc, #56]	; (8007d88 <vPortFree+0xb4>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	43db      	mvns	r3, r3
 8007d52:	401a      	ands	r2, r3
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d58:	f000 fafa 	bl	8008350 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <vPortFree+0xb8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4413      	add	r3, r2
 8007d66:	4a09      	ldr	r2, [pc, #36]	; (8007d8c <vPortFree+0xb8>)
 8007d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d6a:	6938      	ldr	r0, [r7, #16]
 8007d6c:	f000 f874 	bl	8007e58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d70:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <vPortFree+0xbc>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3301      	adds	r3, #1
 8007d76:	4a06      	ldr	r2, [pc, #24]	; (8007d90 <vPortFree+0xbc>)
 8007d78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d7a:	f000 faf7 	bl	800836c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d7e:	bf00      	nop
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20000ec8 	.word	0x20000ec8
 8007d8c:	20000eb8 	.word	0x20000eb8
 8007d90:	20000ec4 	.word	0x20000ec4

08007d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007da0:	4b27      	ldr	r3, [pc, #156]	; (8007e40 <prvHeapInit+0xac>)
 8007da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00c      	beq.n	8007dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3307      	adds	r3, #7
 8007db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	4a1f      	ldr	r2, [pc, #124]	; (8007e40 <prvHeapInit+0xac>)
 8007dc4:	4413      	add	r3, r2
 8007dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dcc:	4a1d      	ldr	r2, [pc, #116]	; (8007e44 <prvHeapInit+0xb0>)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dd2:	4b1c      	ldr	r3, [pc, #112]	; (8007e44 <prvHeapInit+0xb0>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	4413      	add	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007de0:	2208      	movs	r2, #8
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0307 	bic.w	r3, r3, #7
 8007dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4a15      	ldr	r2, [pc, #84]	; (8007e48 <prvHeapInit+0xb4>)
 8007df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <prvHeapInit+0xb4>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dfe:	4b12      	ldr	r3, [pc, #72]	; (8007e48 <prvHeapInit+0xb4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	1ad2      	subs	r2, r2, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e14:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <prvHeapInit+0xb4>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	4a0a      	ldr	r2, [pc, #40]	; (8007e4c <prvHeapInit+0xb8>)
 8007e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	4a09      	ldr	r2, [pc, #36]	; (8007e50 <prvHeapInit+0xbc>)
 8007e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e2c:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <prvHeapInit+0xc0>)
 8007e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e32:	601a      	str	r2, [r3, #0]
}
 8007e34:	bf00      	nop
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	200002f4 	.word	0x200002f4
 8007e44:	20000eac 	.word	0x20000eac
 8007e48:	20000eb4 	.word	0x20000eb4
 8007e4c:	20000ebc 	.word	0x20000ebc
 8007e50:	20000eb8 	.word	0x20000eb8
 8007e54:	20000ec8 	.word	0x20000ec8

08007e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e60:	4b28      	ldr	r3, [pc, #160]	; (8007f04 <prvInsertBlockIntoFreeList+0xac>)
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	e002      	b.n	8007e6c <prvInsertBlockIntoFreeList+0x14>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d3f7      	bcc.n	8007e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	441a      	add	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d108      	bne.n	8007e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	441a      	add	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	441a      	add	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d118      	bne.n	8007ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <prvInsertBlockIntoFreeList+0xb0>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d00d      	beq.n	8007ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	441a      	add	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	e008      	b.n	8007ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e003      	b.n	8007ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d002      	beq.n	8007ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ef6:	bf00      	nop
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	20000eac 	.word	0x20000eac
 8007f08:	20000eb4 	.word	0x20000eb4

08007f0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08e      	sub	sp, #56	; 0x38
 8007f10:	af04      	add	r7, sp, #16
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d109      	bne.n	8007f34 <xTaskCreateStatic+0x28>
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	623b      	str	r3, [r7, #32]
 8007f32:	e7fe      	b.n	8007f32 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d109      	bne.n	8007f4e <xTaskCreateStatic+0x42>
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	61fb      	str	r3, [r7, #28]
 8007f4c:	e7fe      	b.n	8007f4c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f4e:	2354      	movs	r3, #84	; 0x54
 8007f50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	2b54      	cmp	r3, #84	; 0x54
 8007f56:	d009      	beq.n	8007f6c <xTaskCreateStatic+0x60>
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	61bb      	str	r3, [r7, #24]
 8007f6a:	e7fe      	b.n	8007f6a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d01e      	beq.n	8007fb2 <xTaskCreateStatic+0xa6>
 8007f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d01b      	beq.n	8007fb2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9303      	str	r3, [sp, #12]
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	9302      	str	r3, [sp, #8]
 8007f94:	f107 0314 	add.w	r3, r7, #20
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	68b9      	ldr	r1, [r7, #8]
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 f850 	bl	800804a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fac:	f000 f8d4 	bl	8008158 <prvAddNewTaskToReadyList>
 8007fb0:	e001      	b.n	8007fb6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fb6:	697b      	ldr	r3, [r7, #20]
	}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3728      	adds	r7, #40	; 0x28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08c      	sub	sp, #48	; 0x30
 8007fc4:	af04      	add	r7, sp, #16
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fd0:	88fb      	ldrh	r3, [r7, #6]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7ff fdb5 	bl	8007b44 <pvPortMalloc>
 8007fda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00e      	beq.n	8008000 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fe2:	2054      	movs	r0, #84	; 0x54
 8007fe4:	f7ff fdae 	bl	8007b44 <pvPortMalloc>
 8007fe8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d003      	beq.n	8007ff8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8007ff6:	e005      	b.n	8008004 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ff8:	6978      	ldr	r0, [r7, #20]
 8007ffa:	f7ff fe6b 	bl	8007cd4 <vPortFree>
 8007ffe:	e001      	b.n	8008004 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008000:	2300      	movs	r3, #0
 8008002:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d017      	beq.n	800803a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008012:	88fa      	ldrh	r2, [r7, #6]
 8008014:	2300      	movs	r3, #0
 8008016:	9303      	str	r3, [sp, #12]
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	9302      	str	r3, [sp, #8]
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	68b9      	ldr	r1, [r7, #8]
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f80e 	bl	800804a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800802e:	69f8      	ldr	r0, [r7, #28]
 8008030:	f000 f892 	bl	8008158 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008034:	2301      	movs	r3, #1
 8008036:	61bb      	str	r3, [r7, #24]
 8008038:	e002      	b.n	8008040 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800803a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800803e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008040:	69bb      	ldr	r3, [r7, #24]
	}
 8008042:	4618      	mov	r0, r3
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b088      	sub	sp, #32
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
 8008056:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008062:	3b01      	subs	r3, #1
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	f023 0307 	bic.w	r3, r3, #7
 8008070:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	f003 0307 	and.w	r3, r3, #7
 8008078:	2b00      	cmp	r3, #0
 800807a:	d009      	beq.n	8008090 <prvInitialiseNewTask+0x46>
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	617b      	str	r3, [r7, #20]
 800808e:	e7fe      	b.n	800808e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d01f      	beq.n	80080d6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008096:	2300      	movs	r3, #0
 8008098:	61fb      	str	r3, [r7, #28]
 800809a:	e012      	b.n	80080c2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	4413      	add	r3, r2
 80080a2:	7819      	ldrb	r1, [r3, #0]
 80080a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	4413      	add	r3, r2
 80080aa:	3334      	adds	r3, #52	; 0x34
 80080ac:	460a      	mov	r2, r1
 80080ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	4413      	add	r3, r2
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d006      	beq.n	80080ca <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	3301      	adds	r3, #1
 80080c0:	61fb      	str	r3, [r7, #28]
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	2b0f      	cmp	r3, #15
 80080c6:	d9e9      	bls.n	800809c <prvInitialiseNewTask+0x52>
 80080c8:	e000      	b.n	80080cc <prvInitialiseNewTask+0x82>
			{
				break;
 80080ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080d4:	e003      	b.n	80080de <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	2b06      	cmp	r3, #6
 80080e2:	d901      	bls.n	80080e8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080e4:	2306      	movs	r3, #6
 80080e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	2200      	movs	r2, #0
 80080f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	3304      	adds	r3, #4
 80080fe:	4618      	mov	r0, r3
 8008100:	f7ff fa88 	bl	8007614 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008106:	3318      	adds	r3, #24
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff fa83 	bl	8007614 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008112:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	f1c3 0207 	rsb	r2, r3, #7
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008122:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	2200      	movs	r2, #0
 8008128:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800812a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	68f9      	ldr	r1, [r7, #12]
 8008136:	69b8      	ldr	r0, [r7, #24]
 8008138:	f7ff fb00 	bl	800773c <pxPortInitialiseStack>
 800813c:	4602      	mov	r2, r0
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800814c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800814e:	bf00      	nop
 8008150:	3720      	adds	r7, #32
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008160:	f7ff fc14 	bl	800798c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008164:	4b2a      	ldr	r3, [pc, #168]	; (8008210 <prvAddNewTaskToReadyList+0xb8>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3301      	adds	r3, #1
 800816a:	4a29      	ldr	r2, [pc, #164]	; (8008210 <prvAddNewTaskToReadyList+0xb8>)
 800816c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800816e:	4b29      	ldr	r3, [pc, #164]	; (8008214 <prvAddNewTaskToReadyList+0xbc>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d109      	bne.n	800818a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008176:	4a27      	ldr	r2, [pc, #156]	; (8008214 <prvAddNewTaskToReadyList+0xbc>)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800817c:	4b24      	ldr	r3, [pc, #144]	; (8008210 <prvAddNewTaskToReadyList+0xb8>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d110      	bne.n	80081a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008184:	f000 fab8 	bl	80086f8 <prvInitialiseTaskLists>
 8008188:	e00d      	b.n	80081a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800818a:	4b23      	ldr	r3, [pc, #140]	; (8008218 <prvAddNewTaskToReadyList+0xc0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d109      	bne.n	80081a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008192:	4b20      	ldr	r3, [pc, #128]	; (8008214 <prvAddNewTaskToReadyList+0xbc>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	429a      	cmp	r2, r3
 800819e:	d802      	bhi.n	80081a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081a0:	4a1c      	ldr	r2, [pc, #112]	; (8008214 <prvAddNewTaskToReadyList+0xbc>)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081a6:	4b1d      	ldr	r3, [pc, #116]	; (800821c <prvAddNewTaskToReadyList+0xc4>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3301      	adds	r3, #1
 80081ac:	4a1b      	ldr	r2, [pc, #108]	; (800821c <prvAddNewTaskToReadyList+0xc4>)
 80081ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b4:	2201      	movs	r2, #1
 80081b6:	409a      	lsls	r2, r3
 80081b8:	4b19      	ldr	r3, [pc, #100]	; (8008220 <prvAddNewTaskToReadyList+0xc8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4313      	orrs	r3, r2
 80081be:	4a18      	ldr	r2, [pc, #96]	; (8008220 <prvAddNewTaskToReadyList+0xc8>)
 80081c0:	6013      	str	r3, [r2, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c6:	4613      	mov	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4a15      	ldr	r2, [pc, #84]	; (8008224 <prvAddNewTaskToReadyList+0xcc>)
 80081d0:	441a      	add	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	3304      	adds	r3, #4
 80081d6:	4619      	mov	r1, r3
 80081d8:	4610      	mov	r0, r2
 80081da:	f7ff fa28 	bl	800762e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081de:	f7ff fc03 	bl	80079e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081e2:	4b0d      	ldr	r3, [pc, #52]	; (8008218 <prvAddNewTaskToReadyList+0xc0>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00e      	beq.n	8008208 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081ea:	4b0a      	ldr	r3, [pc, #40]	; (8008214 <prvAddNewTaskToReadyList+0xbc>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d207      	bcs.n	8008208 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081f8:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <prvAddNewTaskToReadyList+0xd0>)
 80081fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	20000fcc 	.word	0x20000fcc
 8008214:	20000ecc 	.word	0x20000ecc
 8008218:	20000fd8 	.word	0x20000fd8
 800821c:	20000fe8 	.word	0x20000fe8
 8008220:	20000fd4 	.word	0x20000fd4
 8008224:	20000ed0 	.word	0x20000ed0
 8008228:	e000ed04 	.word	0xe000ed04

0800822c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008234:	2300      	movs	r3, #0
 8008236:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d016      	beq.n	800826c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800823e:	4b13      	ldr	r3, [pc, #76]	; (800828c <vTaskDelay+0x60>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d009      	beq.n	800825a <vTaskDelay+0x2e>
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	60bb      	str	r3, [r7, #8]
 8008258:	e7fe      	b.n	8008258 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800825a:	f000 f879 	bl	8008350 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800825e:	2100      	movs	r1, #0
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fb03 	bl	800886c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008266:	f000 f881 	bl	800836c <xTaskResumeAll>
 800826a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d107      	bne.n	8008282 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008272:	4b07      	ldr	r3, [pc, #28]	; (8008290 <vTaskDelay+0x64>)
 8008274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008282:	bf00      	nop
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20000ff4 	.word	0x20000ff4
 8008290:	e000ed04 	.word	0xe000ed04

08008294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b08a      	sub	sp, #40	; 0x28
 8008298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082a2:	463a      	mov	r2, r7
 80082a4:	1d39      	adds	r1, r7, #4
 80082a6:	f107 0308 	add.w	r3, r7, #8
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7f8 fe5a 	bl	8000f64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	9202      	str	r2, [sp, #8]
 80082b8:	9301      	str	r3, [sp, #4]
 80082ba:	2300      	movs	r3, #0
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	2300      	movs	r3, #0
 80082c0:	460a      	mov	r2, r1
 80082c2:	491d      	ldr	r1, [pc, #116]	; (8008338 <vTaskStartScheduler+0xa4>)
 80082c4:	481d      	ldr	r0, [pc, #116]	; (800833c <vTaskStartScheduler+0xa8>)
 80082c6:	f7ff fe21 	bl	8007f0c <xTaskCreateStatic>
 80082ca:	4602      	mov	r2, r0
 80082cc:	4b1c      	ldr	r3, [pc, #112]	; (8008340 <vTaskStartScheduler+0xac>)
 80082ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082d0:	4b1b      	ldr	r3, [pc, #108]	; (8008340 <vTaskStartScheduler+0xac>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082d8:	2301      	movs	r3, #1
 80082da:	617b      	str	r3, [r7, #20]
 80082dc:	e001      	b.n	80082e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d115      	bne.n	8008314 <vTaskStartScheduler+0x80>
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	613b      	str	r3, [r7, #16]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082fa:	4b12      	ldr	r3, [pc, #72]	; (8008344 <vTaskStartScheduler+0xb0>)
 80082fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008300:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008302:	4b11      	ldr	r3, [pc, #68]	; (8008348 <vTaskStartScheduler+0xb4>)
 8008304:	2201      	movs	r2, #1
 8008306:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008308:	4b10      	ldr	r3, [pc, #64]	; (800834c <vTaskStartScheduler+0xb8>)
 800830a:	2200      	movs	r2, #0
 800830c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800830e:	f7ff fa9f 	bl	8007850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008312:	e00d      	b.n	8008330 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800831a:	d109      	bne.n	8008330 <vTaskStartScheduler+0x9c>
 800831c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008320:	f383 8811 	msr	BASEPRI, r3
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	60fb      	str	r3, [r7, #12]
 800832e:	e7fe      	b.n	800832e <vTaskStartScheduler+0x9a>
}
 8008330:	bf00      	nop
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	0800a32c 	.word	0x0800a32c
 800833c:	080086c9 	.word	0x080086c9
 8008340:	20000ff0 	.word	0x20000ff0
 8008344:	20000fec 	.word	0x20000fec
 8008348:	20000fd8 	.word	0x20000fd8
 800834c:	20000fd0 	.word	0x20000fd0

08008350 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008354:	4b04      	ldr	r3, [pc, #16]	; (8008368 <vTaskSuspendAll+0x18>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3301      	adds	r3, #1
 800835a:	4a03      	ldr	r2, [pc, #12]	; (8008368 <vTaskSuspendAll+0x18>)
 800835c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800835e:	bf00      	nop
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	20000ff4 	.word	0x20000ff4

0800836c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008376:	2300      	movs	r3, #0
 8008378:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800837a:	4b41      	ldr	r3, [pc, #260]	; (8008480 <xTaskResumeAll+0x114>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d109      	bne.n	8008396 <xTaskResumeAll+0x2a>
 8008382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	603b      	str	r3, [r7, #0]
 8008394:	e7fe      	b.n	8008394 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008396:	f7ff faf9 	bl	800798c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800839a:	4b39      	ldr	r3, [pc, #228]	; (8008480 <xTaskResumeAll+0x114>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3b01      	subs	r3, #1
 80083a0:	4a37      	ldr	r2, [pc, #220]	; (8008480 <xTaskResumeAll+0x114>)
 80083a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083a4:	4b36      	ldr	r3, [pc, #216]	; (8008480 <xTaskResumeAll+0x114>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d161      	bne.n	8008470 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083ac:	4b35      	ldr	r3, [pc, #212]	; (8008484 <xTaskResumeAll+0x118>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d05d      	beq.n	8008470 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083b4:	e02e      	b.n	8008414 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083b6:	4b34      	ldr	r3, [pc, #208]	; (8008488 <xTaskResumeAll+0x11c>)
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3318      	adds	r3, #24
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7ff f990 	bl	80076e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	3304      	adds	r3, #4
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7ff f98b 	bl	80076e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d6:	2201      	movs	r2, #1
 80083d8:	409a      	lsls	r2, r3
 80083da:	4b2c      	ldr	r3, [pc, #176]	; (800848c <xTaskResumeAll+0x120>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4313      	orrs	r3, r2
 80083e0:	4a2a      	ldr	r2, [pc, #168]	; (800848c <xTaskResumeAll+0x120>)
 80083e2:	6013      	str	r3, [r2, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e8:	4613      	mov	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4a27      	ldr	r2, [pc, #156]	; (8008490 <xTaskResumeAll+0x124>)
 80083f2:	441a      	add	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	3304      	adds	r3, #4
 80083f8:	4619      	mov	r1, r3
 80083fa:	4610      	mov	r0, r2
 80083fc:	f7ff f917 	bl	800762e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008404:	4b23      	ldr	r3, [pc, #140]	; (8008494 <xTaskResumeAll+0x128>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840a:	429a      	cmp	r2, r3
 800840c:	d302      	bcc.n	8008414 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800840e:	4b22      	ldr	r3, [pc, #136]	; (8008498 <xTaskResumeAll+0x12c>)
 8008410:	2201      	movs	r2, #1
 8008412:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008414:	4b1c      	ldr	r3, [pc, #112]	; (8008488 <xTaskResumeAll+0x11c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1cc      	bne.n	80083b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008422:	f000 fa03 	bl	800882c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008426:	4b1d      	ldr	r3, [pc, #116]	; (800849c <xTaskResumeAll+0x130>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d010      	beq.n	8008454 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008432:	f000 f837 	bl	80084a4 <xTaskIncrementTick>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800843c:	4b16      	ldr	r3, [pc, #88]	; (8008498 <xTaskResumeAll+0x12c>)
 800843e:	2201      	movs	r2, #1
 8008440:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	3b01      	subs	r3, #1
 8008446:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1f1      	bne.n	8008432 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 800844e:	4b13      	ldr	r3, [pc, #76]	; (800849c <xTaskResumeAll+0x130>)
 8008450:	2200      	movs	r2, #0
 8008452:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008454:	4b10      	ldr	r3, [pc, #64]	; (8008498 <xTaskResumeAll+0x12c>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d009      	beq.n	8008470 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800845c:	2301      	movs	r3, #1
 800845e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008460:	4b0f      	ldr	r3, [pc, #60]	; (80084a0 <xTaskResumeAll+0x134>)
 8008462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008470:	f7ff faba 	bl	80079e8 <vPortExitCritical>

	return xAlreadyYielded;
 8008474:	68bb      	ldr	r3, [r7, #8]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20000ff4 	.word	0x20000ff4
 8008484:	20000fcc 	.word	0x20000fcc
 8008488:	20000f8c 	.word	0x20000f8c
 800848c:	20000fd4 	.word	0x20000fd4
 8008490:	20000ed0 	.word	0x20000ed0
 8008494:	20000ecc 	.word	0x20000ecc
 8008498:	20000fe0 	.word	0x20000fe0
 800849c:	20000fdc 	.word	0x20000fdc
 80084a0:	e000ed04 	.word	0xe000ed04

080084a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084aa:	2300      	movs	r3, #0
 80084ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ae:	4b4e      	ldr	r3, [pc, #312]	; (80085e8 <xTaskIncrementTick+0x144>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f040 808d 	bne.w	80085d2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084b8:	4b4c      	ldr	r3, [pc, #304]	; (80085ec <xTaskIncrementTick+0x148>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3301      	adds	r3, #1
 80084be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084c0:	4a4a      	ldr	r2, [pc, #296]	; (80085ec <xTaskIncrementTick+0x148>)
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d11f      	bne.n	800850c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80084cc:	4b48      	ldr	r3, [pc, #288]	; (80085f0 <xTaskIncrementTick+0x14c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <xTaskIncrementTick+0x46>
 80084d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	603b      	str	r3, [r7, #0]
 80084e8:	e7fe      	b.n	80084e8 <xTaskIncrementTick+0x44>
 80084ea:	4b41      	ldr	r3, [pc, #260]	; (80085f0 <xTaskIncrementTick+0x14c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	4b40      	ldr	r3, [pc, #256]	; (80085f4 <xTaskIncrementTick+0x150>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a3e      	ldr	r2, [pc, #248]	; (80085f0 <xTaskIncrementTick+0x14c>)
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	4a3e      	ldr	r2, [pc, #248]	; (80085f4 <xTaskIncrementTick+0x150>)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	4b3e      	ldr	r3, [pc, #248]	; (80085f8 <xTaskIncrementTick+0x154>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3301      	adds	r3, #1
 8008504:	4a3c      	ldr	r2, [pc, #240]	; (80085f8 <xTaskIncrementTick+0x154>)
 8008506:	6013      	str	r3, [r2, #0]
 8008508:	f000 f990 	bl	800882c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800850c:	4b3b      	ldr	r3, [pc, #236]	; (80085fc <xTaskIncrementTick+0x158>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	429a      	cmp	r2, r3
 8008514:	d348      	bcc.n	80085a8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008516:	4b36      	ldr	r3, [pc, #216]	; (80085f0 <xTaskIncrementTick+0x14c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d104      	bne.n	800852a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008520:	4b36      	ldr	r3, [pc, #216]	; (80085fc <xTaskIncrementTick+0x158>)
 8008522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008526:	601a      	str	r2, [r3, #0]
					break;
 8008528:	e03e      	b.n	80085a8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800852a:	4b31      	ldr	r3, [pc, #196]	; (80085f0 <xTaskIncrementTick+0x14c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	429a      	cmp	r2, r3
 8008540:	d203      	bcs.n	800854a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008542:	4a2e      	ldr	r2, [pc, #184]	; (80085fc <xTaskIncrementTick+0x158>)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008548:	e02e      	b.n	80085a8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	3304      	adds	r3, #4
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff f8ca 	bl	80076e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008558:	2b00      	cmp	r3, #0
 800855a:	d004      	beq.n	8008566 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	3318      	adds	r3, #24
 8008560:	4618      	mov	r0, r3
 8008562:	f7ff f8c1 	bl	80076e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856a:	2201      	movs	r2, #1
 800856c:	409a      	lsls	r2, r3
 800856e:	4b24      	ldr	r3, [pc, #144]	; (8008600 <xTaskIncrementTick+0x15c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4313      	orrs	r3, r2
 8008574:	4a22      	ldr	r2, [pc, #136]	; (8008600 <xTaskIncrementTick+0x15c>)
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800857c:	4613      	mov	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4a1f      	ldr	r2, [pc, #124]	; (8008604 <xTaskIncrementTick+0x160>)
 8008586:	441a      	add	r2, r3
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	3304      	adds	r3, #4
 800858c:	4619      	mov	r1, r3
 800858e:	4610      	mov	r0, r2
 8008590:	f7ff f84d 	bl	800762e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008598:	4b1b      	ldr	r3, [pc, #108]	; (8008608 <xTaskIncrementTick+0x164>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859e:	429a      	cmp	r2, r3
 80085a0:	d3b9      	bcc.n	8008516 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80085a2:	2301      	movs	r3, #1
 80085a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085a6:	e7b6      	b.n	8008516 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085a8:	4b17      	ldr	r3, [pc, #92]	; (8008608 <xTaskIncrementTick+0x164>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ae:	4915      	ldr	r1, [pc, #84]	; (8008604 <xTaskIncrementTick+0x160>)
 80085b0:	4613      	mov	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	440b      	add	r3, r1
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d901      	bls.n	80085c4 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 80085c0:	2301      	movs	r3, #1
 80085c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80085c4:	4b11      	ldr	r3, [pc, #68]	; (800860c <xTaskIncrementTick+0x168>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d007      	beq.n	80085dc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80085cc:	2301      	movs	r3, #1
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	e004      	b.n	80085dc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80085d2:	4b0f      	ldr	r3, [pc, #60]	; (8008610 <xTaskIncrementTick+0x16c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3301      	adds	r3, #1
 80085d8:	4a0d      	ldr	r2, [pc, #52]	; (8008610 <xTaskIncrementTick+0x16c>)
 80085da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80085dc:	697b      	ldr	r3, [r7, #20]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3718      	adds	r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20000ff4 	.word	0x20000ff4
 80085ec:	20000fd0 	.word	0x20000fd0
 80085f0:	20000f84 	.word	0x20000f84
 80085f4:	20000f88 	.word	0x20000f88
 80085f8:	20000fe4 	.word	0x20000fe4
 80085fc:	20000fec 	.word	0x20000fec
 8008600:	20000fd4 	.word	0x20000fd4
 8008604:	20000ed0 	.word	0x20000ed0
 8008608:	20000ecc 	.word	0x20000ecc
 800860c:	20000fe0 	.word	0x20000fe0
 8008610:	20000fdc 	.word	0x20000fdc

08008614 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008614:	b480      	push	{r7}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800861a:	4b26      	ldr	r3, [pc, #152]	; (80086b4 <vTaskSwitchContext+0xa0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008622:	4b25      	ldr	r3, [pc, #148]	; (80086b8 <vTaskSwitchContext+0xa4>)
 8008624:	2201      	movs	r2, #1
 8008626:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008628:	e03e      	b.n	80086a8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800862a:	4b23      	ldr	r3, [pc, #140]	; (80086b8 <vTaskSwitchContext+0xa4>)
 800862c:	2200      	movs	r2, #0
 800862e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008630:	4b22      	ldr	r3, [pc, #136]	; (80086bc <vTaskSwitchContext+0xa8>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	fab3 f383 	clz	r3, r3
 800863c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800863e:	7afb      	ldrb	r3, [r7, #11]
 8008640:	f1c3 031f 	rsb	r3, r3, #31
 8008644:	617b      	str	r3, [r7, #20]
 8008646:	491e      	ldr	r1, [pc, #120]	; (80086c0 <vTaskSwitchContext+0xac>)
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	4613      	mov	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	440b      	add	r3, r1
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <vTaskSwitchContext+0x5a>
	__asm volatile
 800865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	607b      	str	r3, [r7, #4]
 800866c:	e7fe      	b.n	800866c <vTaskSwitchContext+0x58>
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	4613      	mov	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4a11      	ldr	r2, [pc, #68]	; (80086c0 <vTaskSwitchContext+0xac>)
 800867a:	4413      	add	r3, r2
 800867c:	613b      	str	r3, [r7, #16]
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	605a      	str	r2, [r3, #4]
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	3308      	adds	r3, #8
 8008690:	429a      	cmp	r2, r3
 8008692:	d104      	bne.n	800869e <vTaskSwitchContext+0x8a>
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	605a      	str	r2, [r3, #4]
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	4a07      	ldr	r2, [pc, #28]	; (80086c4 <vTaskSwitchContext+0xb0>)
 80086a6:	6013      	str	r3, [r2, #0]
}
 80086a8:	bf00      	nop
 80086aa:	371c      	adds	r7, #28
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	20000ff4 	.word	0x20000ff4
 80086b8:	20000fe0 	.word	0x20000fe0
 80086bc:	20000fd4 	.word	0x20000fd4
 80086c0:	20000ed0 	.word	0x20000ed0
 80086c4:	20000ecc 	.word	0x20000ecc

080086c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086d0:	f000 f852 	bl	8008778 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086d4:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <prvIdleTask+0x28>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d9f9      	bls.n	80086d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80086dc:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <prvIdleTask+0x2c>)
 80086de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086ec:	e7f0      	b.n	80086d0 <prvIdleTask+0x8>
 80086ee:	bf00      	nop
 80086f0:	20000ed0 	.word	0x20000ed0
 80086f4:	e000ed04 	.word	0xe000ed04

080086f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086fe:	2300      	movs	r3, #0
 8008700:	607b      	str	r3, [r7, #4]
 8008702:	e00c      	b.n	800871e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4a12      	ldr	r2, [pc, #72]	; (8008758 <prvInitialiseTaskLists+0x60>)
 8008710:	4413      	add	r3, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe ff5e 	bl	80075d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3301      	adds	r3, #1
 800871c:	607b      	str	r3, [r7, #4]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b06      	cmp	r3, #6
 8008722:	d9ef      	bls.n	8008704 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008724:	480d      	ldr	r0, [pc, #52]	; (800875c <prvInitialiseTaskLists+0x64>)
 8008726:	f7fe ff55 	bl	80075d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800872a:	480d      	ldr	r0, [pc, #52]	; (8008760 <prvInitialiseTaskLists+0x68>)
 800872c:	f7fe ff52 	bl	80075d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008730:	480c      	ldr	r0, [pc, #48]	; (8008764 <prvInitialiseTaskLists+0x6c>)
 8008732:	f7fe ff4f 	bl	80075d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008736:	480c      	ldr	r0, [pc, #48]	; (8008768 <prvInitialiseTaskLists+0x70>)
 8008738:	f7fe ff4c 	bl	80075d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800873c:	480b      	ldr	r0, [pc, #44]	; (800876c <prvInitialiseTaskLists+0x74>)
 800873e:	f7fe ff49 	bl	80075d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008742:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <prvInitialiseTaskLists+0x78>)
 8008744:	4a05      	ldr	r2, [pc, #20]	; (800875c <prvInitialiseTaskLists+0x64>)
 8008746:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008748:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <prvInitialiseTaskLists+0x7c>)
 800874a:	4a05      	ldr	r2, [pc, #20]	; (8008760 <prvInitialiseTaskLists+0x68>)
 800874c:	601a      	str	r2, [r3, #0]
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20000ed0 	.word	0x20000ed0
 800875c:	20000f5c 	.word	0x20000f5c
 8008760:	20000f70 	.word	0x20000f70
 8008764:	20000f8c 	.word	0x20000f8c
 8008768:	20000fa0 	.word	0x20000fa0
 800876c:	20000fb8 	.word	0x20000fb8
 8008770:	20000f84 	.word	0x20000f84
 8008774:	20000f88 	.word	0x20000f88

08008778 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800877e:	e019      	b.n	80087b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008780:	f7ff f904 	bl	800798c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008784:	4b0f      	ldr	r3, [pc, #60]	; (80087c4 <prvCheckTasksWaitingTermination+0x4c>)
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3304      	adds	r3, #4
 8008790:	4618      	mov	r0, r3
 8008792:	f7fe ffa9 	bl	80076e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008796:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <prvCheckTasksWaitingTermination+0x50>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3b01      	subs	r3, #1
 800879c:	4a0a      	ldr	r2, [pc, #40]	; (80087c8 <prvCheckTasksWaitingTermination+0x50>)
 800879e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087a0:	4b0a      	ldr	r3, [pc, #40]	; (80087cc <prvCheckTasksWaitingTermination+0x54>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	4a09      	ldr	r2, [pc, #36]	; (80087cc <prvCheckTasksWaitingTermination+0x54>)
 80087a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087aa:	f7ff f91d 	bl	80079e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f80e 	bl	80087d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087b4:	4b05      	ldr	r3, [pc, #20]	; (80087cc <prvCheckTasksWaitingTermination+0x54>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e1      	bne.n	8008780 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087bc:	bf00      	nop
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	20000fa0 	.word	0x20000fa0
 80087c8:	20000fcc 	.word	0x20000fcc
 80087cc:	20000fb4 	.word	0x20000fb4

080087d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d108      	bne.n	80087f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7ff fa74 	bl	8007cd4 <vPortFree>
				vPortFree( pxTCB );
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7ff fa71 	bl	8007cd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087f2:	e017      	b.n	8008824 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d103      	bne.n	8008806 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7ff fa68 	bl	8007cd4 <vPortFree>
	}
 8008804:	e00e      	b.n	8008824 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800880c:	2b02      	cmp	r3, #2
 800880e:	d009      	beq.n	8008824 <prvDeleteTCB+0x54>
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	60fb      	str	r3, [r7, #12]
 8008822:	e7fe      	b.n	8008822 <prvDeleteTCB+0x52>
	}
 8008824:	bf00      	nop
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008832:	4b0c      	ldr	r3, [pc, #48]	; (8008864 <prvResetNextTaskUnblockTime+0x38>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d104      	bne.n	8008846 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800883c:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <prvResetNextTaskUnblockTime+0x3c>)
 800883e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008842:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008844:	e008      	b.n	8008858 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008846:	4b07      	ldr	r3, [pc, #28]	; (8008864 <prvResetNextTaskUnblockTime+0x38>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	4a04      	ldr	r2, [pc, #16]	; (8008868 <prvResetNextTaskUnblockTime+0x3c>)
 8008856:	6013      	str	r3, [r2, #0]
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	20000f84 	.word	0x20000f84
 8008868:	20000fec 	.word	0x20000fec

0800886c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008876:	4b29      	ldr	r3, [pc, #164]	; (800891c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800887c:	4b28      	ldr	r3, [pc, #160]	; (8008920 <prvAddCurrentTaskToDelayedList+0xb4>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3304      	adds	r3, #4
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe ff30 	bl	80076e8 <uxListRemove>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10b      	bne.n	80088a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800888e:	4b24      	ldr	r3, [pc, #144]	; (8008920 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008894:	2201      	movs	r2, #1
 8008896:	fa02 f303 	lsl.w	r3, r2, r3
 800889a:	43da      	mvns	r2, r3
 800889c:	4b21      	ldr	r3, [pc, #132]	; (8008924 <prvAddCurrentTaskToDelayedList+0xb8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4013      	ands	r3, r2
 80088a2:	4a20      	ldr	r2, [pc, #128]	; (8008924 <prvAddCurrentTaskToDelayedList+0xb8>)
 80088a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088ac:	d10a      	bne.n	80088c4 <prvAddCurrentTaskToDelayedList+0x58>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d007      	beq.n	80088c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088b4:	4b1a      	ldr	r3, [pc, #104]	; (8008920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3304      	adds	r3, #4
 80088ba:	4619      	mov	r1, r3
 80088bc:	481a      	ldr	r0, [pc, #104]	; (8008928 <prvAddCurrentTaskToDelayedList+0xbc>)
 80088be:	f7fe feb6 	bl	800762e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088c2:	e026      	b.n	8008912 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4413      	add	r3, r2
 80088ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088cc:	4b14      	ldr	r3, [pc, #80]	; (8008920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d209      	bcs.n	80088f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088dc:	4b13      	ldr	r3, [pc, #76]	; (800892c <prvAddCurrentTaskToDelayedList+0xc0>)
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	4b0f      	ldr	r3, [pc, #60]	; (8008920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3304      	adds	r3, #4
 80088e6:	4619      	mov	r1, r3
 80088e8:	4610      	mov	r0, r2
 80088ea:	f7fe fec4 	bl	8007676 <vListInsert>
}
 80088ee:	e010      	b.n	8008912 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088f0:	4b0f      	ldr	r3, [pc, #60]	; (8008930 <prvAddCurrentTaskToDelayedList+0xc4>)
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3304      	adds	r3, #4
 80088fa:	4619      	mov	r1, r3
 80088fc:	4610      	mov	r0, r2
 80088fe:	f7fe feba 	bl	8007676 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008902:	4b0c      	ldr	r3, [pc, #48]	; (8008934 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	429a      	cmp	r2, r3
 800890a:	d202      	bcs.n	8008912 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800890c:	4a09      	ldr	r2, [pc, #36]	; (8008934 <prvAddCurrentTaskToDelayedList+0xc8>)
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	6013      	str	r3, [r2, #0]
}
 8008912:	bf00      	nop
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20000fd0 	.word	0x20000fd0
 8008920:	20000ecc 	.word	0x20000ecc
 8008924:	20000fd4 	.word	0x20000fd4
 8008928:	20000fb8 	.word	0x20000fb8
 800892c:	20000f88 	.word	0x20000f88
 8008930:	20000f84 	.word	0x20000f84
 8008934:	20000fec 	.word	0x20000fec

08008938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008970 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800893c:	f7f9 f930 	bl	8001ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008940:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008942:	e003      	b.n	800894c <LoopCopyDataInit>

08008944 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008944:	4b0b      	ldr	r3, [pc, #44]	; (8008974 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008946:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008948:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800894a:	3104      	adds	r1, #4

0800894c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800894c:	480a      	ldr	r0, [pc, #40]	; (8008978 <LoopForever+0xa>)
	ldr	r3, =_edata
 800894e:	4b0b      	ldr	r3, [pc, #44]	; (800897c <LoopForever+0xe>)
	adds	r2, r0, r1
 8008950:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008952:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008954:	d3f6      	bcc.n	8008944 <CopyDataInit>
	ldr	r2, =_sbss
 8008956:	4a0a      	ldr	r2, [pc, #40]	; (8008980 <LoopForever+0x12>)
	b	LoopFillZerobss
 8008958:	e002      	b.n	8008960 <LoopFillZerobss>

0800895a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800895a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800895c:	f842 3b04 	str.w	r3, [r2], #4

08008960 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008960:	4b08      	ldr	r3, [pc, #32]	; (8008984 <LoopForever+0x16>)
	cmp	r2, r3
 8008962:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008964:	d3f9      	bcc.n	800895a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008966:	f000 f817 	bl	8008998 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800896a:	f7f8 fc87 	bl	800127c <main>

0800896e <LoopForever>:

LoopForever:
    b LoopForever
 800896e:	e7fe      	b.n	800896e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008970:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8008974:	0800a598 	.word	0x0800a598
	ldr	r0, =_sdata
 8008978:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800897c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8008980:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8008984:	20001d80 	.word	0x20001d80

08008988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008988:	e7fe      	b.n	8008988 <ADC1_2_IRQHandler>
	...

0800898c <__errno>:
 800898c:	4b01      	ldr	r3, [pc, #4]	; (8008994 <__errno+0x8>)
 800898e:	6818      	ldr	r0, [r3, #0]
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	20000010 	.word	0x20000010

08008998 <__libc_init_array>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	4e0d      	ldr	r6, [pc, #52]	; (80089d0 <__libc_init_array+0x38>)
 800899c:	4c0d      	ldr	r4, [pc, #52]	; (80089d4 <__libc_init_array+0x3c>)
 800899e:	1ba4      	subs	r4, r4, r6
 80089a0:	10a4      	asrs	r4, r4, #2
 80089a2:	2500      	movs	r5, #0
 80089a4:	42a5      	cmp	r5, r4
 80089a6:	d109      	bne.n	80089bc <__libc_init_array+0x24>
 80089a8:	4e0b      	ldr	r6, [pc, #44]	; (80089d8 <__libc_init_array+0x40>)
 80089aa:	4c0c      	ldr	r4, [pc, #48]	; (80089dc <__libc_init_array+0x44>)
 80089ac:	f001 fc98 	bl	800a2e0 <_init>
 80089b0:	1ba4      	subs	r4, r4, r6
 80089b2:	10a4      	asrs	r4, r4, #2
 80089b4:	2500      	movs	r5, #0
 80089b6:	42a5      	cmp	r5, r4
 80089b8:	d105      	bne.n	80089c6 <__libc_init_array+0x2e>
 80089ba:	bd70      	pop	{r4, r5, r6, pc}
 80089bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089c0:	4798      	blx	r3
 80089c2:	3501      	adds	r5, #1
 80089c4:	e7ee      	b.n	80089a4 <__libc_init_array+0xc>
 80089c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089ca:	4798      	blx	r3
 80089cc:	3501      	adds	r5, #1
 80089ce:	e7f2      	b.n	80089b6 <__libc_init_array+0x1e>
 80089d0:	0800a590 	.word	0x0800a590
 80089d4:	0800a590 	.word	0x0800a590
 80089d8:	0800a590 	.word	0x0800a590
 80089dc:	0800a594 	.word	0x0800a594

080089e0 <memcpy>:
 80089e0:	b510      	push	{r4, lr}
 80089e2:	1e43      	subs	r3, r0, #1
 80089e4:	440a      	add	r2, r1
 80089e6:	4291      	cmp	r1, r2
 80089e8:	d100      	bne.n	80089ec <memcpy+0xc>
 80089ea:	bd10      	pop	{r4, pc}
 80089ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089f4:	e7f7      	b.n	80089e6 <memcpy+0x6>

080089f6 <memset>:
 80089f6:	4402      	add	r2, r0
 80089f8:	4603      	mov	r3, r0
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d100      	bne.n	8008a00 <memset+0xa>
 80089fe:	4770      	bx	lr
 8008a00:	f803 1b01 	strb.w	r1, [r3], #1
 8008a04:	e7f9      	b.n	80089fa <memset+0x4>
	...

08008a08 <siprintf>:
 8008a08:	b40e      	push	{r1, r2, r3}
 8008a0a:	b500      	push	{lr}
 8008a0c:	b09c      	sub	sp, #112	; 0x70
 8008a0e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8008a12:	ab1d      	add	r3, sp, #116	; 0x74
 8008a14:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008a18:	9002      	str	r0, [sp, #8]
 8008a1a:	9006      	str	r0, [sp, #24]
 8008a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a20:	480a      	ldr	r0, [pc, #40]	; (8008a4c <siprintf+0x44>)
 8008a22:	9104      	str	r1, [sp, #16]
 8008a24:	9107      	str	r1, [sp, #28]
 8008a26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a2e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8008a32:	6800      	ldr	r0, [r0, #0]
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	a902      	add	r1, sp, #8
 8008a38:	f000 f866 	bl	8008b08 <_svfiprintf_r>
 8008a3c:	9b02      	ldr	r3, [sp, #8]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	701a      	strb	r2, [r3, #0]
 8008a42:	b01c      	add	sp, #112	; 0x70
 8008a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a48:	b003      	add	sp, #12
 8008a4a:	4770      	bx	lr
 8008a4c:	20000010 	.word	0x20000010

08008a50 <__ssputs_r>:
 8008a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a54:	688e      	ldr	r6, [r1, #8]
 8008a56:	429e      	cmp	r6, r3
 8008a58:	4682      	mov	sl, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	4691      	mov	r9, r2
 8008a5e:	4698      	mov	r8, r3
 8008a60:	d835      	bhi.n	8008ace <__ssputs_r+0x7e>
 8008a62:	898a      	ldrh	r2, [r1, #12]
 8008a64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a68:	d031      	beq.n	8008ace <__ssputs_r+0x7e>
 8008a6a:	6825      	ldr	r5, [r4, #0]
 8008a6c:	6909      	ldr	r1, [r1, #16]
 8008a6e:	1a6f      	subs	r7, r5, r1
 8008a70:	6965      	ldr	r5, [r4, #20]
 8008a72:	2302      	movs	r3, #2
 8008a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a78:	fb95 f5f3 	sdiv	r5, r5, r3
 8008a7c:	f108 0301 	add.w	r3, r8, #1
 8008a80:	443b      	add	r3, r7
 8008a82:	429d      	cmp	r5, r3
 8008a84:	bf38      	it	cc
 8008a86:	461d      	movcc	r5, r3
 8008a88:	0553      	lsls	r3, r2, #21
 8008a8a:	d531      	bpl.n	8008af0 <__ssputs_r+0xa0>
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	f000 fb2d 	bl	80090ec <_malloc_r>
 8008a92:	4606      	mov	r6, r0
 8008a94:	b950      	cbnz	r0, 8008aac <__ssputs_r+0x5c>
 8008a96:	230c      	movs	r3, #12
 8008a98:	f8ca 3000 	str.w	r3, [sl]
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aa2:	81a3      	strh	r3, [r4, #12]
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aac:	463a      	mov	r2, r7
 8008aae:	6921      	ldr	r1, [r4, #16]
 8008ab0:	f7ff ff96 	bl	80089e0 <memcpy>
 8008ab4:	89a3      	ldrh	r3, [r4, #12]
 8008ab6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008abe:	81a3      	strh	r3, [r4, #12]
 8008ac0:	6126      	str	r6, [r4, #16]
 8008ac2:	6165      	str	r5, [r4, #20]
 8008ac4:	443e      	add	r6, r7
 8008ac6:	1bed      	subs	r5, r5, r7
 8008ac8:	6026      	str	r6, [r4, #0]
 8008aca:	60a5      	str	r5, [r4, #8]
 8008acc:	4646      	mov	r6, r8
 8008ace:	4546      	cmp	r6, r8
 8008ad0:	bf28      	it	cs
 8008ad2:	4646      	movcs	r6, r8
 8008ad4:	4632      	mov	r2, r6
 8008ad6:	4649      	mov	r1, r9
 8008ad8:	6820      	ldr	r0, [r4, #0]
 8008ada:	f000 fa9f 	bl	800901c <memmove>
 8008ade:	68a3      	ldr	r3, [r4, #8]
 8008ae0:	1b9b      	subs	r3, r3, r6
 8008ae2:	60a3      	str	r3, [r4, #8]
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	441e      	add	r6, r3
 8008ae8:	6026      	str	r6, [r4, #0]
 8008aea:	2000      	movs	r0, #0
 8008aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af0:	462a      	mov	r2, r5
 8008af2:	f000 fb59 	bl	80091a8 <_realloc_r>
 8008af6:	4606      	mov	r6, r0
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d1e1      	bne.n	8008ac0 <__ssputs_r+0x70>
 8008afc:	6921      	ldr	r1, [r4, #16]
 8008afe:	4650      	mov	r0, sl
 8008b00:	f000 faa6 	bl	8009050 <_free_r>
 8008b04:	e7c7      	b.n	8008a96 <__ssputs_r+0x46>
	...

08008b08 <_svfiprintf_r>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	b09d      	sub	sp, #116	; 0x74
 8008b0e:	4680      	mov	r8, r0
 8008b10:	9303      	str	r3, [sp, #12]
 8008b12:	898b      	ldrh	r3, [r1, #12]
 8008b14:	061c      	lsls	r4, r3, #24
 8008b16:	460d      	mov	r5, r1
 8008b18:	4616      	mov	r6, r2
 8008b1a:	d50f      	bpl.n	8008b3c <_svfiprintf_r+0x34>
 8008b1c:	690b      	ldr	r3, [r1, #16]
 8008b1e:	b96b      	cbnz	r3, 8008b3c <_svfiprintf_r+0x34>
 8008b20:	2140      	movs	r1, #64	; 0x40
 8008b22:	f000 fae3 	bl	80090ec <_malloc_r>
 8008b26:	6028      	str	r0, [r5, #0]
 8008b28:	6128      	str	r0, [r5, #16]
 8008b2a:	b928      	cbnz	r0, 8008b38 <_svfiprintf_r+0x30>
 8008b2c:	230c      	movs	r3, #12
 8008b2e:	f8c8 3000 	str.w	r3, [r8]
 8008b32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b36:	e0c5      	b.n	8008cc4 <_svfiprintf_r+0x1bc>
 8008b38:	2340      	movs	r3, #64	; 0x40
 8008b3a:	616b      	str	r3, [r5, #20]
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b40:	2320      	movs	r3, #32
 8008b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b46:	2330      	movs	r3, #48	; 0x30
 8008b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b4c:	f04f 0b01 	mov.w	fp, #1
 8008b50:	4637      	mov	r7, r6
 8008b52:	463c      	mov	r4, r7
 8008b54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d13c      	bne.n	8008bd6 <_svfiprintf_r+0xce>
 8008b5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008b60:	d00b      	beq.n	8008b7a <_svfiprintf_r+0x72>
 8008b62:	4653      	mov	r3, sl
 8008b64:	4632      	mov	r2, r6
 8008b66:	4629      	mov	r1, r5
 8008b68:	4640      	mov	r0, r8
 8008b6a:	f7ff ff71 	bl	8008a50 <__ssputs_r>
 8008b6e:	3001      	adds	r0, #1
 8008b70:	f000 80a3 	beq.w	8008cba <_svfiprintf_r+0x1b2>
 8008b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b76:	4453      	add	r3, sl
 8008b78:	9309      	str	r3, [sp, #36]	; 0x24
 8008b7a:	783b      	ldrb	r3, [r7, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 809c 	beq.w	8008cba <_svfiprintf_r+0x1b2>
 8008b82:	2300      	movs	r3, #0
 8008b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b88:	9304      	str	r3, [sp, #16]
 8008b8a:	9307      	str	r3, [sp, #28]
 8008b8c:	9205      	str	r2, [sp, #20]
 8008b8e:	9306      	str	r3, [sp, #24]
 8008b90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b94:	931a      	str	r3, [sp, #104]	; 0x68
 8008b96:	2205      	movs	r2, #5
 8008b98:	7821      	ldrb	r1, [r4, #0]
 8008b9a:	4850      	ldr	r0, [pc, #320]	; (8008cdc <_svfiprintf_r+0x1d4>)
 8008b9c:	f7f7 fb20 	bl	80001e0 <memchr>
 8008ba0:	1c67      	adds	r7, r4, #1
 8008ba2:	9b04      	ldr	r3, [sp, #16]
 8008ba4:	b9d8      	cbnz	r0, 8008bde <_svfiprintf_r+0xd6>
 8008ba6:	06d9      	lsls	r1, r3, #27
 8008ba8:	bf44      	itt	mi
 8008baa:	2220      	movmi	r2, #32
 8008bac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008bb0:	071a      	lsls	r2, r3, #28
 8008bb2:	bf44      	itt	mi
 8008bb4:	222b      	movmi	r2, #43	; 0x2b
 8008bb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008bba:	7822      	ldrb	r2, [r4, #0]
 8008bbc:	2a2a      	cmp	r2, #42	; 0x2a
 8008bbe:	d016      	beq.n	8008bee <_svfiprintf_r+0xe6>
 8008bc0:	9a07      	ldr	r2, [sp, #28]
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	200a      	movs	r0, #10
 8008bc6:	4627      	mov	r7, r4
 8008bc8:	3401      	adds	r4, #1
 8008bca:	783b      	ldrb	r3, [r7, #0]
 8008bcc:	3b30      	subs	r3, #48	; 0x30
 8008bce:	2b09      	cmp	r3, #9
 8008bd0:	d951      	bls.n	8008c76 <_svfiprintf_r+0x16e>
 8008bd2:	b1c9      	cbz	r1, 8008c08 <_svfiprintf_r+0x100>
 8008bd4:	e011      	b.n	8008bfa <_svfiprintf_r+0xf2>
 8008bd6:	2b25      	cmp	r3, #37	; 0x25
 8008bd8:	d0c0      	beq.n	8008b5c <_svfiprintf_r+0x54>
 8008bda:	4627      	mov	r7, r4
 8008bdc:	e7b9      	b.n	8008b52 <_svfiprintf_r+0x4a>
 8008bde:	4a3f      	ldr	r2, [pc, #252]	; (8008cdc <_svfiprintf_r+0x1d4>)
 8008be0:	1a80      	subs	r0, r0, r2
 8008be2:	fa0b f000 	lsl.w	r0, fp, r0
 8008be6:	4318      	orrs	r0, r3
 8008be8:	9004      	str	r0, [sp, #16]
 8008bea:	463c      	mov	r4, r7
 8008bec:	e7d3      	b.n	8008b96 <_svfiprintf_r+0x8e>
 8008bee:	9a03      	ldr	r2, [sp, #12]
 8008bf0:	1d11      	adds	r1, r2, #4
 8008bf2:	6812      	ldr	r2, [r2, #0]
 8008bf4:	9103      	str	r1, [sp, #12]
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	db01      	blt.n	8008bfe <_svfiprintf_r+0xf6>
 8008bfa:	9207      	str	r2, [sp, #28]
 8008bfc:	e004      	b.n	8008c08 <_svfiprintf_r+0x100>
 8008bfe:	4252      	negs	r2, r2
 8008c00:	f043 0302 	orr.w	r3, r3, #2
 8008c04:	9207      	str	r2, [sp, #28]
 8008c06:	9304      	str	r3, [sp, #16]
 8008c08:	783b      	ldrb	r3, [r7, #0]
 8008c0a:	2b2e      	cmp	r3, #46	; 0x2e
 8008c0c:	d10e      	bne.n	8008c2c <_svfiprintf_r+0x124>
 8008c0e:	787b      	ldrb	r3, [r7, #1]
 8008c10:	2b2a      	cmp	r3, #42	; 0x2a
 8008c12:	f107 0101 	add.w	r1, r7, #1
 8008c16:	d132      	bne.n	8008c7e <_svfiprintf_r+0x176>
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	1d1a      	adds	r2, r3, #4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	9203      	str	r2, [sp, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	bfb8      	it	lt
 8008c24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008c28:	3702      	adds	r7, #2
 8008c2a:	9305      	str	r3, [sp, #20]
 8008c2c:	4c2c      	ldr	r4, [pc, #176]	; (8008ce0 <_svfiprintf_r+0x1d8>)
 8008c2e:	7839      	ldrb	r1, [r7, #0]
 8008c30:	2203      	movs	r2, #3
 8008c32:	4620      	mov	r0, r4
 8008c34:	f7f7 fad4 	bl	80001e0 <memchr>
 8008c38:	b138      	cbz	r0, 8008c4a <_svfiprintf_r+0x142>
 8008c3a:	2340      	movs	r3, #64	; 0x40
 8008c3c:	1b00      	subs	r0, r0, r4
 8008c3e:	fa03 f000 	lsl.w	r0, r3, r0
 8008c42:	9b04      	ldr	r3, [sp, #16]
 8008c44:	4303      	orrs	r3, r0
 8008c46:	9304      	str	r3, [sp, #16]
 8008c48:	3701      	adds	r7, #1
 8008c4a:	7839      	ldrb	r1, [r7, #0]
 8008c4c:	4825      	ldr	r0, [pc, #148]	; (8008ce4 <_svfiprintf_r+0x1dc>)
 8008c4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c52:	2206      	movs	r2, #6
 8008c54:	1c7e      	adds	r6, r7, #1
 8008c56:	f7f7 fac3 	bl	80001e0 <memchr>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d035      	beq.n	8008cca <_svfiprintf_r+0x1c2>
 8008c5e:	4b22      	ldr	r3, [pc, #136]	; (8008ce8 <_svfiprintf_r+0x1e0>)
 8008c60:	b9fb      	cbnz	r3, 8008ca2 <_svfiprintf_r+0x19a>
 8008c62:	9b03      	ldr	r3, [sp, #12]
 8008c64:	3307      	adds	r3, #7
 8008c66:	f023 0307 	bic.w	r3, r3, #7
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	9303      	str	r3, [sp, #12]
 8008c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c70:	444b      	add	r3, r9
 8008c72:	9309      	str	r3, [sp, #36]	; 0x24
 8008c74:	e76c      	b.n	8008b50 <_svfiprintf_r+0x48>
 8008c76:	fb00 3202 	mla	r2, r0, r2, r3
 8008c7a:	2101      	movs	r1, #1
 8008c7c:	e7a3      	b.n	8008bc6 <_svfiprintf_r+0xbe>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	9305      	str	r3, [sp, #20]
 8008c82:	4618      	mov	r0, r3
 8008c84:	240a      	movs	r4, #10
 8008c86:	460f      	mov	r7, r1
 8008c88:	3101      	adds	r1, #1
 8008c8a:	783a      	ldrb	r2, [r7, #0]
 8008c8c:	3a30      	subs	r2, #48	; 0x30
 8008c8e:	2a09      	cmp	r2, #9
 8008c90:	d903      	bls.n	8008c9a <_svfiprintf_r+0x192>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d0ca      	beq.n	8008c2c <_svfiprintf_r+0x124>
 8008c96:	9005      	str	r0, [sp, #20]
 8008c98:	e7c8      	b.n	8008c2c <_svfiprintf_r+0x124>
 8008c9a:	fb04 2000 	mla	r0, r4, r0, r2
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e7f1      	b.n	8008c86 <_svfiprintf_r+0x17e>
 8008ca2:	ab03      	add	r3, sp, #12
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	462a      	mov	r2, r5
 8008ca8:	4b10      	ldr	r3, [pc, #64]	; (8008cec <_svfiprintf_r+0x1e4>)
 8008caa:	a904      	add	r1, sp, #16
 8008cac:	4640      	mov	r0, r8
 8008cae:	f3af 8000 	nop.w
 8008cb2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008cb6:	4681      	mov	r9, r0
 8008cb8:	d1d9      	bne.n	8008c6e <_svfiprintf_r+0x166>
 8008cba:	89ab      	ldrh	r3, [r5, #12]
 8008cbc:	065b      	lsls	r3, r3, #25
 8008cbe:	f53f af38 	bmi.w	8008b32 <_svfiprintf_r+0x2a>
 8008cc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cc4:	b01d      	add	sp, #116	; 0x74
 8008cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cca:	ab03      	add	r3, sp, #12
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	462a      	mov	r2, r5
 8008cd0:	4b06      	ldr	r3, [pc, #24]	; (8008cec <_svfiprintf_r+0x1e4>)
 8008cd2:	a904      	add	r1, sp, #16
 8008cd4:	4640      	mov	r0, r8
 8008cd6:	f000 f881 	bl	8008ddc <_printf_i>
 8008cda:	e7ea      	b.n	8008cb2 <_svfiprintf_r+0x1aa>
 8008cdc:	0800a37c 	.word	0x0800a37c
 8008ce0:	0800a382 	.word	0x0800a382
 8008ce4:	0800a386 	.word	0x0800a386
 8008ce8:	00000000 	.word	0x00000000
 8008cec:	08008a51 	.word	0x08008a51

08008cf0 <_printf_common>:
 8008cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf4:	4691      	mov	r9, r2
 8008cf6:	461f      	mov	r7, r3
 8008cf8:	688a      	ldr	r2, [r1, #8]
 8008cfa:	690b      	ldr	r3, [r1, #16]
 8008cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d00:	4293      	cmp	r3, r2
 8008d02:	bfb8      	it	lt
 8008d04:	4613      	movlt	r3, r2
 8008d06:	f8c9 3000 	str.w	r3, [r9]
 8008d0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d0e:	4606      	mov	r6, r0
 8008d10:	460c      	mov	r4, r1
 8008d12:	b112      	cbz	r2, 8008d1a <_printf_common+0x2a>
 8008d14:	3301      	adds	r3, #1
 8008d16:	f8c9 3000 	str.w	r3, [r9]
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	0699      	lsls	r1, r3, #26
 8008d1e:	bf42      	ittt	mi
 8008d20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008d24:	3302      	addmi	r3, #2
 8008d26:	f8c9 3000 	strmi.w	r3, [r9]
 8008d2a:	6825      	ldr	r5, [r4, #0]
 8008d2c:	f015 0506 	ands.w	r5, r5, #6
 8008d30:	d107      	bne.n	8008d42 <_printf_common+0x52>
 8008d32:	f104 0a19 	add.w	sl, r4, #25
 8008d36:	68e3      	ldr	r3, [r4, #12]
 8008d38:	f8d9 2000 	ldr.w	r2, [r9]
 8008d3c:	1a9b      	subs	r3, r3, r2
 8008d3e:	429d      	cmp	r5, r3
 8008d40:	db29      	blt.n	8008d96 <_printf_common+0xa6>
 8008d42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008d46:	6822      	ldr	r2, [r4, #0]
 8008d48:	3300      	adds	r3, #0
 8008d4a:	bf18      	it	ne
 8008d4c:	2301      	movne	r3, #1
 8008d4e:	0692      	lsls	r2, r2, #26
 8008d50:	d42e      	bmi.n	8008db0 <_printf_common+0xc0>
 8008d52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d56:	4639      	mov	r1, r7
 8008d58:	4630      	mov	r0, r6
 8008d5a:	47c0      	blx	r8
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	d021      	beq.n	8008da4 <_printf_common+0xb4>
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	68e5      	ldr	r5, [r4, #12]
 8008d64:	f8d9 2000 	ldr.w	r2, [r9]
 8008d68:	f003 0306 	and.w	r3, r3, #6
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	bf08      	it	eq
 8008d70:	1aad      	subeq	r5, r5, r2
 8008d72:	68a3      	ldr	r3, [r4, #8]
 8008d74:	6922      	ldr	r2, [r4, #16]
 8008d76:	bf0c      	ite	eq
 8008d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d7c:	2500      	movne	r5, #0
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	bfc4      	itt	gt
 8008d82:	1a9b      	subgt	r3, r3, r2
 8008d84:	18ed      	addgt	r5, r5, r3
 8008d86:	f04f 0900 	mov.w	r9, #0
 8008d8a:	341a      	adds	r4, #26
 8008d8c:	454d      	cmp	r5, r9
 8008d8e:	d11b      	bne.n	8008dc8 <_printf_common+0xd8>
 8008d90:	2000      	movs	r0, #0
 8008d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d96:	2301      	movs	r3, #1
 8008d98:	4652      	mov	r2, sl
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	47c0      	blx	r8
 8008da0:	3001      	adds	r0, #1
 8008da2:	d103      	bne.n	8008dac <_printf_common+0xbc>
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dac:	3501      	adds	r5, #1
 8008dae:	e7c2      	b.n	8008d36 <_printf_common+0x46>
 8008db0:	18e1      	adds	r1, r4, r3
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	2030      	movs	r0, #48	; 0x30
 8008db6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dba:	4422      	add	r2, r4
 8008dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dc4:	3302      	adds	r3, #2
 8008dc6:	e7c4      	b.n	8008d52 <_printf_common+0x62>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	4622      	mov	r2, r4
 8008dcc:	4639      	mov	r1, r7
 8008dce:	4630      	mov	r0, r6
 8008dd0:	47c0      	blx	r8
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	d0e6      	beq.n	8008da4 <_printf_common+0xb4>
 8008dd6:	f109 0901 	add.w	r9, r9, #1
 8008dda:	e7d7      	b.n	8008d8c <_printf_common+0x9c>

08008ddc <_printf_i>:
 8008ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008de0:	4617      	mov	r7, r2
 8008de2:	7e0a      	ldrb	r2, [r1, #24]
 8008de4:	b085      	sub	sp, #20
 8008de6:	2a6e      	cmp	r2, #110	; 0x6e
 8008de8:	4698      	mov	r8, r3
 8008dea:	4606      	mov	r6, r0
 8008dec:	460c      	mov	r4, r1
 8008dee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008df0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8008df4:	f000 80bc 	beq.w	8008f70 <_printf_i+0x194>
 8008df8:	d81a      	bhi.n	8008e30 <_printf_i+0x54>
 8008dfa:	2a63      	cmp	r2, #99	; 0x63
 8008dfc:	d02e      	beq.n	8008e5c <_printf_i+0x80>
 8008dfe:	d80a      	bhi.n	8008e16 <_printf_i+0x3a>
 8008e00:	2a00      	cmp	r2, #0
 8008e02:	f000 80c8 	beq.w	8008f96 <_printf_i+0x1ba>
 8008e06:	2a58      	cmp	r2, #88	; 0x58
 8008e08:	f000 808a 	beq.w	8008f20 <_printf_i+0x144>
 8008e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e10:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8008e14:	e02a      	b.n	8008e6c <_printf_i+0x90>
 8008e16:	2a64      	cmp	r2, #100	; 0x64
 8008e18:	d001      	beq.n	8008e1e <_printf_i+0x42>
 8008e1a:	2a69      	cmp	r2, #105	; 0x69
 8008e1c:	d1f6      	bne.n	8008e0c <_printf_i+0x30>
 8008e1e:	6821      	ldr	r1, [r4, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008e26:	d023      	beq.n	8008e70 <_printf_i+0x94>
 8008e28:	1d11      	adds	r1, r2, #4
 8008e2a:	6019      	str	r1, [r3, #0]
 8008e2c:	6813      	ldr	r3, [r2, #0]
 8008e2e:	e027      	b.n	8008e80 <_printf_i+0xa4>
 8008e30:	2a73      	cmp	r2, #115	; 0x73
 8008e32:	f000 80b4 	beq.w	8008f9e <_printf_i+0x1c2>
 8008e36:	d808      	bhi.n	8008e4a <_printf_i+0x6e>
 8008e38:	2a6f      	cmp	r2, #111	; 0x6f
 8008e3a:	d02a      	beq.n	8008e92 <_printf_i+0xb6>
 8008e3c:	2a70      	cmp	r2, #112	; 0x70
 8008e3e:	d1e5      	bne.n	8008e0c <_printf_i+0x30>
 8008e40:	680a      	ldr	r2, [r1, #0]
 8008e42:	f042 0220 	orr.w	r2, r2, #32
 8008e46:	600a      	str	r2, [r1, #0]
 8008e48:	e003      	b.n	8008e52 <_printf_i+0x76>
 8008e4a:	2a75      	cmp	r2, #117	; 0x75
 8008e4c:	d021      	beq.n	8008e92 <_printf_i+0xb6>
 8008e4e:	2a78      	cmp	r2, #120	; 0x78
 8008e50:	d1dc      	bne.n	8008e0c <_printf_i+0x30>
 8008e52:	2278      	movs	r2, #120	; 0x78
 8008e54:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008e58:	496e      	ldr	r1, [pc, #440]	; (8009014 <_printf_i+0x238>)
 8008e5a:	e064      	b.n	8008f26 <_printf_i+0x14a>
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8008e62:	1d11      	adds	r1, r2, #4
 8008e64:	6019      	str	r1, [r3, #0]
 8008e66:	6813      	ldr	r3, [r2, #0]
 8008e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e0a3      	b.n	8008fb8 <_printf_i+0x1dc>
 8008e70:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008e74:	f102 0104 	add.w	r1, r2, #4
 8008e78:	6019      	str	r1, [r3, #0]
 8008e7a:	d0d7      	beq.n	8008e2c <_printf_i+0x50>
 8008e7c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	da03      	bge.n	8008e8c <_printf_i+0xb0>
 8008e84:	222d      	movs	r2, #45	; 0x2d
 8008e86:	425b      	negs	r3, r3
 8008e88:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008e8c:	4962      	ldr	r1, [pc, #392]	; (8009018 <_printf_i+0x23c>)
 8008e8e:	220a      	movs	r2, #10
 8008e90:	e017      	b.n	8008ec2 <_printf_i+0xe6>
 8008e92:	6820      	ldr	r0, [r4, #0]
 8008e94:	6819      	ldr	r1, [r3, #0]
 8008e96:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008e9a:	d003      	beq.n	8008ea4 <_printf_i+0xc8>
 8008e9c:	1d08      	adds	r0, r1, #4
 8008e9e:	6018      	str	r0, [r3, #0]
 8008ea0:	680b      	ldr	r3, [r1, #0]
 8008ea2:	e006      	b.n	8008eb2 <_printf_i+0xd6>
 8008ea4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ea8:	f101 0004 	add.w	r0, r1, #4
 8008eac:	6018      	str	r0, [r3, #0]
 8008eae:	d0f7      	beq.n	8008ea0 <_printf_i+0xc4>
 8008eb0:	880b      	ldrh	r3, [r1, #0]
 8008eb2:	4959      	ldr	r1, [pc, #356]	; (8009018 <_printf_i+0x23c>)
 8008eb4:	2a6f      	cmp	r2, #111	; 0x6f
 8008eb6:	bf14      	ite	ne
 8008eb8:	220a      	movne	r2, #10
 8008eba:	2208      	moveq	r2, #8
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8008ec2:	6865      	ldr	r5, [r4, #4]
 8008ec4:	60a5      	str	r5, [r4, #8]
 8008ec6:	2d00      	cmp	r5, #0
 8008ec8:	f2c0 809c 	blt.w	8009004 <_printf_i+0x228>
 8008ecc:	6820      	ldr	r0, [r4, #0]
 8008ece:	f020 0004 	bic.w	r0, r0, #4
 8008ed2:	6020      	str	r0, [r4, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d13f      	bne.n	8008f58 <_printf_i+0x17c>
 8008ed8:	2d00      	cmp	r5, #0
 8008eda:	f040 8095 	bne.w	8009008 <_printf_i+0x22c>
 8008ede:	4675      	mov	r5, lr
 8008ee0:	2a08      	cmp	r2, #8
 8008ee2:	d10b      	bne.n	8008efc <_printf_i+0x120>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	07da      	lsls	r2, r3, #31
 8008ee8:	d508      	bpl.n	8008efc <_printf_i+0x120>
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	6862      	ldr	r2, [r4, #4]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	bfde      	ittt	le
 8008ef2:	2330      	movle	r3, #48	; 0x30
 8008ef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ef8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008efc:	ebae 0305 	sub.w	r3, lr, r5
 8008f00:	6123      	str	r3, [r4, #16]
 8008f02:	f8cd 8000 	str.w	r8, [sp]
 8008f06:	463b      	mov	r3, r7
 8008f08:	aa03      	add	r2, sp, #12
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f7ff feef 	bl	8008cf0 <_printf_common>
 8008f12:	3001      	adds	r0, #1
 8008f14:	d155      	bne.n	8008fc2 <_printf_i+0x1e6>
 8008f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f1a:	b005      	add	sp, #20
 8008f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f20:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008f24:	493c      	ldr	r1, [pc, #240]	; (8009018 <_printf_i+0x23c>)
 8008f26:	6822      	ldr	r2, [r4, #0]
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008f2e:	f100 0504 	add.w	r5, r0, #4
 8008f32:	601d      	str	r5, [r3, #0]
 8008f34:	d001      	beq.n	8008f3a <_printf_i+0x15e>
 8008f36:	6803      	ldr	r3, [r0, #0]
 8008f38:	e002      	b.n	8008f40 <_printf_i+0x164>
 8008f3a:	0655      	lsls	r5, r2, #25
 8008f3c:	d5fb      	bpl.n	8008f36 <_printf_i+0x15a>
 8008f3e:	8803      	ldrh	r3, [r0, #0]
 8008f40:	07d0      	lsls	r0, r2, #31
 8008f42:	bf44      	itt	mi
 8008f44:	f042 0220 	orrmi.w	r2, r2, #32
 8008f48:	6022      	strmi	r2, [r4, #0]
 8008f4a:	b91b      	cbnz	r3, 8008f54 <_printf_i+0x178>
 8008f4c:	6822      	ldr	r2, [r4, #0]
 8008f4e:	f022 0220 	bic.w	r2, r2, #32
 8008f52:	6022      	str	r2, [r4, #0]
 8008f54:	2210      	movs	r2, #16
 8008f56:	e7b1      	b.n	8008ebc <_printf_i+0xe0>
 8008f58:	4675      	mov	r5, lr
 8008f5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f5e:	fb02 3310 	mls	r3, r2, r0, r3
 8008f62:	5ccb      	ldrb	r3, [r1, r3]
 8008f64:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d1f5      	bne.n	8008f5a <_printf_i+0x17e>
 8008f6e:	e7b7      	b.n	8008ee0 <_printf_i+0x104>
 8008f70:	6808      	ldr	r0, [r1, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	6949      	ldr	r1, [r1, #20]
 8008f76:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008f7a:	d004      	beq.n	8008f86 <_printf_i+0x1aa>
 8008f7c:	1d10      	adds	r0, r2, #4
 8008f7e:	6018      	str	r0, [r3, #0]
 8008f80:	6813      	ldr	r3, [r2, #0]
 8008f82:	6019      	str	r1, [r3, #0]
 8008f84:	e007      	b.n	8008f96 <_printf_i+0x1ba>
 8008f86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f8a:	f102 0004 	add.w	r0, r2, #4
 8008f8e:	6018      	str	r0, [r3, #0]
 8008f90:	6813      	ldr	r3, [r2, #0]
 8008f92:	d0f6      	beq.n	8008f82 <_printf_i+0x1a6>
 8008f94:	8019      	strh	r1, [r3, #0]
 8008f96:	2300      	movs	r3, #0
 8008f98:	6123      	str	r3, [r4, #16]
 8008f9a:	4675      	mov	r5, lr
 8008f9c:	e7b1      	b.n	8008f02 <_printf_i+0x126>
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	1d11      	adds	r1, r2, #4
 8008fa2:	6019      	str	r1, [r3, #0]
 8008fa4:	6815      	ldr	r5, [r2, #0]
 8008fa6:	6862      	ldr	r2, [r4, #4]
 8008fa8:	2100      	movs	r1, #0
 8008faa:	4628      	mov	r0, r5
 8008fac:	f7f7 f918 	bl	80001e0 <memchr>
 8008fb0:	b108      	cbz	r0, 8008fb6 <_printf_i+0x1da>
 8008fb2:	1b40      	subs	r0, r0, r5
 8008fb4:	6060      	str	r0, [r4, #4]
 8008fb6:	6863      	ldr	r3, [r4, #4]
 8008fb8:	6123      	str	r3, [r4, #16]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc0:	e79f      	b.n	8008f02 <_printf_i+0x126>
 8008fc2:	6923      	ldr	r3, [r4, #16]
 8008fc4:	462a      	mov	r2, r5
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	4630      	mov	r0, r6
 8008fca:	47c0      	blx	r8
 8008fcc:	3001      	adds	r0, #1
 8008fce:	d0a2      	beq.n	8008f16 <_printf_i+0x13a>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	079b      	lsls	r3, r3, #30
 8008fd4:	d507      	bpl.n	8008fe6 <_printf_i+0x20a>
 8008fd6:	2500      	movs	r5, #0
 8008fd8:	f104 0919 	add.w	r9, r4, #25
 8008fdc:	68e3      	ldr	r3, [r4, #12]
 8008fde:	9a03      	ldr	r2, [sp, #12]
 8008fe0:	1a9b      	subs	r3, r3, r2
 8008fe2:	429d      	cmp	r5, r3
 8008fe4:	db05      	blt.n	8008ff2 <_printf_i+0x216>
 8008fe6:	68e0      	ldr	r0, [r4, #12]
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	4298      	cmp	r0, r3
 8008fec:	bfb8      	it	lt
 8008fee:	4618      	movlt	r0, r3
 8008ff0:	e793      	b.n	8008f1a <_printf_i+0x13e>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	464a      	mov	r2, r9
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	47c0      	blx	r8
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d08a      	beq.n	8008f16 <_printf_i+0x13a>
 8009000:	3501      	adds	r5, #1
 8009002:	e7eb      	b.n	8008fdc <_printf_i+0x200>
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1a7      	bne.n	8008f58 <_printf_i+0x17c>
 8009008:	780b      	ldrb	r3, [r1, #0]
 800900a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800900e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009012:	e765      	b.n	8008ee0 <_printf_i+0x104>
 8009014:	0800a39e 	.word	0x0800a39e
 8009018:	0800a38d 	.word	0x0800a38d

0800901c <memmove>:
 800901c:	4288      	cmp	r0, r1
 800901e:	b510      	push	{r4, lr}
 8009020:	eb01 0302 	add.w	r3, r1, r2
 8009024:	d803      	bhi.n	800902e <memmove+0x12>
 8009026:	1e42      	subs	r2, r0, #1
 8009028:	4299      	cmp	r1, r3
 800902a:	d10c      	bne.n	8009046 <memmove+0x2a>
 800902c:	bd10      	pop	{r4, pc}
 800902e:	4298      	cmp	r0, r3
 8009030:	d2f9      	bcs.n	8009026 <memmove+0xa>
 8009032:	1881      	adds	r1, r0, r2
 8009034:	1ad2      	subs	r2, r2, r3
 8009036:	42d3      	cmn	r3, r2
 8009038:	d100      	bne.n	800903c <memmove+0x20>
 800903a:	bd10      	pop	{r4, pc}
 800903c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009040:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009044:	e7f7      	b.n	8009036 <memmove+0x1a>
 8009046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800904a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800904e:	e7eb      	b.n	8009028 <memmove+0xc>

08009050 <_free_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	4605      	mov	r5, r0
 8009054:	2900      	cmp	r1, #0
 8009056:	d045      	beq.n	80090e4 <_free_r+0x94>
 8009058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800905c:	1f0c      	subs	r4, r1, #4
 800905e:	2b00      	cmp	r3, #0
 8009060:	bfb8      	it	lt
 8009062:	18e4      	addlt	r4, r4, r3
 8009064:	f000 f8d6 	bl	8009214 <__malloc_lock>
 8009068:	4a1f      	ldr	r2, [pc, #124]	; (80090e8 <_free_r+0x98>)
 800906a:	6813      	ldr	r3, [r2, #0]
 800906c:	4610      	mov	r0, r2
 800906e:	b933      	cbnz	r3, 800907e <_free_r+0x2e>
 8009070:	6063      	str	r3, [r4, #4]
 8009072:	6014      	str	r4, [r2, #0]
 8009074:	4628      	mov	r0, r5
 8009076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800907a:	f000 b8cc 	b.w	8009216 <__malloc_unlock>
 800907e:	42a3      	cmp	r3, r4
 8009080:	d90c      	bls.n	800909c <_free_r+0x4c>
 8009082:	6821      	ldr	r1, [r4, #0]
 8009084:	1862      	adds	r2, r4, r1
 8009086:	4293      	cmp	r3, r2
 8009088:	bf04      	itt	eq
 800908a:	681a      	ldreq	r2, [r3, #0]
 800908c:	685b      	ldreq	r3, [r3, #4]
 800908e:	6063      	str	r3, [r4, #4]
 8009090:	bf04      	itt	eq
 8009092:	1852      	addeq	r2, r2, r1
 8009094:	6022      	streq	r2, [r4, #0]
 8009096:	6004      	str	r4, [r0, #0]
 8009098:	e7ec      	b.n	8009074 <_free_r+0x24>
 800909a:	4613      	mov	r3, r2
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	b10a      	cbz	r2, 80090a4 <_free_r+0x54>
 80090a0:	42a2      	cmp	r2, r4
 80090a2:	d9fa      	bls.n	800909a <_free_r+0x4a>
 80090a4:	6819      	ldr	r1, [r3, #0]
 80090a6:	1858      	adds	r0, r3, r1
 80090a8:	42a0      	cmp	r0, r4
 80090aa:	d10b      	bne.n	80090c4 <_free_r+0x74>
 80090ac:	6820      	ldr	r0, [r4, #0]
 80090ae:	4401      	add	r1, r0
 80090b0:	1858      	adds	r0, r3, r1
 80090b2:	4282      	cmp	r2, r0
 80090b4:	6019      	str	r1, [r3, #0]
 80090b6:	d1dd      	bne.n	8009074 <_free_r+0x24>
 80090b8:	6810      	ldr	r0, [r2, #0]
 80090ba:	6852      	ldr	r2, [r2, #4]
 80090bc:	605a      	str	r2, [r3, #4]
 80090be:	4401      	add	r1, r0
 80090c0:	6019      	str	r1, [r3, #0]
 80090c2:	e7d7      	b.n	8009074 <_free_r+0x24>
 80090c4:	d902      	bls.n	80090cc <_free_r+0x7c>
 80090c6:	230c      	movs	r3, #12
 80090c8:	602b      	str	r3, [r5, #0]
 80090ca:	e7d3      	b.n	8009074 <_free_r+0x24>
 80090cc:	6820      	ldr	r0, [r4, #0]
 80090ce:	1821      	adds	r1, r4, r0
 80090d0:	428a      	cmp	r2, r1
 80090d2:	bf04      	itt	eq
 80090d4:	6811      	ldreq	r1, [r2, #0]
 80090d6:	6852      	ldreq	r2, [r2, #4]
 80090d8:	6062      	str	r2, [r4, #4]
 80090da:	bf04      	itt	eq
 80090dc:	1809      	addeq	r1, r1, r0
 80090de:	6021      	streq	r1, [r4, #0]
 80090e0:	605c      	str	r4, [r3, #4]
 80090e2:	e7c7      	b.n	8009074 <_free_r+0x24>
 80090e4:	bd38      	pop	{r3, r4, r5, pc}
 80090e6:	bf00      	nop
 80090e8:	20000ff8 	.word	0x20000ff8

080090ec <_malloc_r>:
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	1ccd      	adds	r5, r1, #3
 80090f0:	f025 0503 	bic.w	r5, r5, #3
 80090f4:	3508      	adds	r5, #8
 80090f6:	2d0c      	cmp	r5, #12
 80090f8:	bf38      	it	cc
 80090fa:	250c      	movcc	r5, #12
 80090fc:	2d00      	cmp	r5, #0
 80090fe:	4606      	mov	r6, r0
 8009100:	db01      	blt.n	8009106 <_malloc_r+0x1a>
 8009102:	42a9      	cmp	r1, r5
 8009104:	d903      	bls.n	800910e <_malloc_r+0x22>
 8009106:	230c      	movs	r3, #12
 8009108:	6033      	str	r3, [r6, #0]
 800910a:	2000      	movs	r0, #0
 800910c:	bd70      	pop	{r4, r5, r6, pc}
 800910e:	f000 f881 	bl	8009214 <__malloc_lock>
 8009112:	4a23      	ldr	r2, [pc, #140]	; (80091a0 <_malloc_r+0xb4>)
 8009114:	6814      	ldr	r4, [r2, #0]
 8009116:	4621      	mov	r1, r4
 8009118:	b991      	cbnz	r1, 8009140 <_malloc_r+0x54>
 800911a:	4c22      	ldr	r4, [pc, #136]	; (80091a4 <_malloc_r+0xb8>)
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	b91b      	cbnz	r3, 8009128 <_malloc_r+0x3c>
 8009120:	4630      	mov	r0, r6
 8009122:	f000 f867 	bl	80091f4 <_sbrk_r>
 8009126:	6020      	str	r0, [r4, #0]
 8009128:	4629      	mov	r1, r5
 800912a:	4630      	mov	r0, r6
 800912c:	f000 f862 	bl	80091f4 <_sbrk_r>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d126      	bne.n	8009182 <_malloc_r+0x96>
 8009134:	230c      	movs	r3, #12
 8009136:	6033      	str	r3, [r6, #0]
 8009138:	4630      	mov	r0, r6
 800913a:	f000 f86c 	bl	8009216 <__malloc_unlock>
 800913e:	e7e4      	b.n	800910a <_malloc_r+0x1e>
 8009140:	680b      	ldr	r3, [r1, #0]
 8009142:	1b5b      	subs	r3, r3, r5
 8009144:	d41a      	bmi.n	800917c <_malloc_r+0x90>
 8009146:	2b0b      	cmp	r3, #11
 8009148:	d90f      	bls.n	800916a <_malloc_r+0x7e>
 800914a:	600b      	str	r3, [r1, #0]
 800914c:	50cd      	str	r5, [r1, r3]
 800914e:	18cc      	adds	r4, r1, r3
 8009150:	4630      	mov	r0, r6
 8009152:	f000 f860 	bl	8009216 <__malloc_unlock>
 8009156:	f104 000b 	add.w	r0, r4, #11
 800915a:	1d23      	adds	r3, r4, #4
 800915c:	f020 0007 	bic.w	r0, r0, #7
 8009160:	1ac3      	subs	r3, r0, r3
 8009162:	d01b      	beq.n	800919c <_malloc_r+0xb0>
 8009164:	425a      	negs	r2, r3
 8009166:	50e2      	str	r2, [r4, r3]
 8009168:	bd70      	pop	{r4, r5, r6, pc}
 800916a:	428c      	cmp	r4, r1
 800916c:	bf0d      	iteet	eq
 800916e:	6863      	ldreq	r3, [r4, #4]
 8009170:	684b      	ldrne	r3, [r1, #4]
 8009172:	6063      	strne	r3, [r4, #4]
 8009174:	6013      	streq	r3, [r2, #0]
 8009176:	bf18      	it	ne
 8009178:	460c      	movne	r4, r1
 800917a:	e7e9      	b.n	8009150 <_malloc_r+0x64>
 800917c:	460c      	mov	r4, r1
 800917e:	6849      	ldr	r1, [r1, #4]
 8009180:	e7ca      	b.n	8009118 <_malloc_r+0x2c>
 8009182:	1cc4      	adds	r4, r0, #3
 8009184:	f024 0403 	bic.w	r4, r4, #3
 8009188:	42a0      	cmp	r0, r4
 800918a:	d005      	beq.n	8009198 <_malloc_r+0xac>
 800918c:	1a21      	subs	r1, r4, r0
 800918e:	4630      	mov	r0, r6
 8009190:	f000 f830 	bl	80091f4 <_sbrk_r>
 8009194:	3001      	adds	r0, #1
 8009196:	d0cd      	beq.n	8009134 <_malloc_r+0x48>
 8009198:	6025      	str	r5, [r4, #0]
 800919a:	e7d9      	b.n	8009150 <_malloc_r+0x64>
 800919c:	bd70      	pop	{r4, r5, r6, pc}
 800919e:	bf00      	nop
 80091a0:	20000ff8 	.word	0x20000ff8
 80091a4:	20000ffc 	.word	0x20000ffc

080091a8 <_realloc_r>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	4607      	mov	r7, r0
 80091ac:	4614      	mov	r4, r2
 80091ae:	460e      	mov	r6, r1
 80091b0:	b921      	cbnz	r1, 80091bc <_realloc_r+0x14>
 80091b2:	4611      	mov	r1, r2
 80091b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80091b8:	f7ff bf98 	b.w	80090ec <_malloc_r>
 80091bc:	b922      	cbnz	r2, 80091c8 <_realloc_r+0x20>
 80091be:	f7ff ff47 	bl	8009050 <_free_r>
 80091c2:	4625      	mov	r5, r4
 80091c4:	4628      	mov	r0, r5
 80091c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091c8:	f000 f826 	bl	8009218 <_malloc_usable_size_r>
 80091cc:	4284      	cmp	r4, r0
 80091ce:	d90f      	bls.n	80091f0 <_realloc_r+0x48>
 80091d0:	4621      	mov	r1, r4
 80091d2:	4638      	mov	r0, r7
 80091d4:	f7ff ff8a 	bl	80090ec <_malloc_r>
 80091d8:	4605      	mov	r5, r0
 80091da:	2800      	cmp	r0, #0
 80091dc:	d0f2      	beq.n	80091c4 <_realloc_r+0x1c>
 80091de:	4631      	mov	r1, r6
 80091e0:	4622      	mov	r2, r4
 80091e2:	f7ff fbfd 	bl	80089e0 <memcpy>
 80091e6:	4631      	mov	r1, r6
 80091e8:	4638      	mov	r0, r7
 80091ea:	f7ff ff31 	bl	8009050 <_free_r>
 80091ee:	e7e9      	b.n	80091c4 <_realloc_r+0x1c>
 80091f0:	4635      	mov	r5, r6
 80091f2:	e7e7      	b.n	80091c4 <_realloc_r+0x1c>

080091f4 <_sbrk_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4c06      	ldr	r4, [pc, #24]	; (8009210 <_sbrk_r+0x1c>)
 80091f8:	2300      	movs	r3, #0
 80091fa:	4605      	mov	r5, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	6023      	str	r3, [r4, #0]
 8009200:	f7f8 fca2 	bl	8001b48 <_sbrk>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d102      	bne.n	800920e <_sbrk_r+0x1a>
 8009208:	6823      	ldr	r3, [r4, #0]
 800920a:	b103      	cbz	r3, 800920e <_sbrk_r+0x1a>
 800920c:	602b      	str	r3, [r5, #0]
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	20001d7c 	.word	0x20001d7c

08009214 <__malloc_lock>:
 8009214:	4770      	bx	lr

08009216 <__malloc_unlock>:
 8009216:	4770      	bx	lr

08009218 <_malloc_usable_size_r>:
 8009218:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800921c:	2800      	cmp	r0, #0
 800921e:	f1a0 0004 	sub.w	r0, r0, #4
 8009222:	bfbc      	itt	lt
 8009224:	580b      	ldrlt	r3, [r1, r0]
 8009226:	18c0      	addlt	r0, r0, r3
 8009228:	4770      	bx	lr
 800922a:	0000      	movs	r0, r0
 800922c:	0000      	movs	r0, r0
	...

08009230 <tan>:
 8009230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009232:	ec51 0b10 	vmov	r0, r1, d0
 8009236:	4a14      	ldr	r2, [pc, #80]	; (8009288 <tan+0x58>)
 8009238:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800923c:	4293      	cmp	r3, r2
 800923e:	dc05      	bgt.n	800924c <tan+0x1c>
 8009240:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8009280 <tan+0x50>
 8009244:	2001      	movs	r0, #1
 8009246:	f000 fd67 	bl	8009d18 <__kernel_tan>
 800924a:	e009      	b.n	8009260 <tan+0x30>
 800924c:	4a0f      	ldr	r2, [pc, #60]	; (800928c <tan+0x5c>)
 800924e:	4293      	cmp	r3, r2
 8009250:	dd09      	ble.n	8009266 <tan+0x36>
 8009252:	ee10 2a10 	vmov	r2, s0
 8009256:	460b      	mov	r3, r1
 8009258:	f7f7 f816 	bl	8000288 <__aeabi_dsub>
 800925c:	ec41 0b10 	vmov	d0, r0, r1
 8009260:	b005      	add	sp, #20
 8009262:	f85d fb04 	ldr.w	pc, [sp], #4
 8009266:	4668      	mov	r0, sp
 8009268:	f000 f812 	bl	8009290 <__ieee754_rem_pio2>
 800926c:	0040      	lsls	r0, r0, #1
 800926e:	f000 0002 	and.w	r0, r0, #2
 8009272:	f1c0 0001 	rsb	r0, r0, #1
 8009276:	ed9d 1b02 	vldr	d1, [sp, #8]
 800927a:	ed9d 0b00 	vldr	d0, [sp]
 800927e:	e7e2      	b.n	8009246 <tan+0x16>
	...
 8009288:	3fe921fb 	.word	0x3fe921fb
 800928c:	7fefffff 	.word	0x7fefffff

08009290 <__ieee754_rem_pio2>:
 8009290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	ec57 6b10 	vmov	r6, r7, d0
 8009298:	4bc3      	ldr	r3, [pc, #780]	; (80095a8 <__ieee754_rem_pio2+0x318>)
 800929a:	b08d      	sub	sp, #52	; 0x34
 800929c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80092a0:	4598      	cmp	r8, r3
 80092a2:	4604      	mov	r4, r0
 80092a4:	9704      	str	r7, [sp, #16]
 80092a6:	dc07      	bgt.n	80092b8 <__ieee754_rem_pio2+0x28>
 80092a8:	2200      	movs	r2, #0
 80092aa:	2300      	movs	r3, #0
 80092ac:	ed84 0b00 	vstr	d0, [r4]
 80092b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80092b4:	2500      	movs	r5, #0
 80092b6:	e027      	b.n	8009308 <__ieee754_rem_pio2+0x78>
 80092b8:	4bbc      	ldr	r3, [pc, #752]	; (80095ac <__ieee754_rem_pio2+0x31c>)
 80092ba:	4598      	cmp	r8, r3
 80092bc:	dc75      	bgt.n	80093aa <__ieee754_rem_pio2+0x11a>
 80092be:	9b04      	ldr	r3, [sp, #16]
 80092c0:	4dbb      	ldr	r5, [pc, #748]	; (80095b0 <__ieee754_rem_pio2+0x320>)
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	ee10 0a10 	vmov	r0, s0
 80092c8:	a3a9      	add	r3, pc, #676	; (adr r3, 8009570 <__ieee754_rem_pio2+0x2e0>)
 80092ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ce:	4639      	mov	r1, r7
 80092d0:	dd36      	ble.n	8009340 <__ieee754_rem_pio2+0xb0>
 80092d2:	f7f6 ffd9 	bl	8000288 <__aeabi_dsub>
 80092d6:	45a8      	cmp	r8, r5
 80092d8:	4606      	mov	r6, r0
 80092da:	460f      	mov	r7, r1
 80092dc:	d018      	beq.n	8009310 <__ieee754_rem_pio2+0x80>
 80092de:	a3a6      	add	r3, pc, #664	; (adr r3, 8009578 <__ieee754_rem_pio2+0x2e8>)
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f7f6 ffd0 	bl	8000288 <__aeabi_dsub>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	e9c4 2300 	strd	r2, r3, [r4]
 80092f0:	4630      	mov	r0, r6
 80092f2:	4639      	mov	r1, r7
 80092f4:	f7f6 ffc8 	bl	8000288 <__aeabi_dsub>
 80092f8:	a39f      	add	r3, pc, #636	; (adr r3, 8009578 <__ieee754_rem_pio2+0x2e8>)
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	f7f6 ffc3 	bl	8000288 <__aeabi_dsub>
 8009302:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009306:	2501      	movs	r5, #1
 8009308:	4628      	mov	r0, r5
 800930a:	b00d      	add	sp, #52	; 0x34
 800930c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009310:	a39b      	add	r3, pc, #620	; (adr r3, 8009580 <__ieee754_rem_pio2+0x2f0>)
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	f7f6 ffb7 	bl	8000288 <__aeabi_dsub>
 800931a:	a39b      	add	r3, pc, #620	; (adr r3, 8009588 <__ieee754_rem_pio2+0x2f8>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	4606      	mov	r6, r0
 8009322:	460f      	mov	r7, r1
 8009324:	f7f6 ffb0 	bl	8000288 <__aeabi_dsub>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	e9c4 2300 	strd	r2, r3, [r4]
 8009330:	4630      	mov	r0, r6
 8009332:	4639      	mov	r1, r7
 8009334:	f7f6 ffa8 	bl	8000288 <__aeabi_dsub>
 8009338:	a393      	add	r3, pc, #588	; (adr r3, 8009588 <__ieee754_rem_pio2+0x2f8>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	e7de      	b.n	80092fe <__ieee754_rem_pio2+0x6e>
 8009340:	f7f6 ffa4 	bl	800028c <__adddf3>
 8009344:	45a8      	cmp	r8, r5
 8009346:	4606      	mov	r6, r0
 8009348:	460f      	mov	r7, r1
 800934a:	d016      	beq.n	800937a <__ieee754_rem_pio2+0xea>
 800934c:	a38a      	add	r3, pc, #552	; (adr r3, 8009578 <__ieee754_rem_pio2+0x2e8>)
 800934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009352:	f7f6 ff9b 	bl	800028c <__adddf3>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	e9c4 2300 	strd	r2, r3, [r4]
 800935e:	4630      	mov	r0, r6
 8009360:	4639      	mov	r1, r7
 8009362:	f7f6 ff91 	bl	8000288 <__aeabi_dsub>
 8009366:	a384      	add	r3, pc, #528	; (adr r3, 8009578 <__ieee754_rem_pio2+0x2e8>)
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	f7f6 ff8e 	bl	800028c <__adddf3>
 8009370:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009374:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009378:	e7c6      	b.n	8009308 <__ieee754_rem_pio2+0x78>
 800937a:	a381      	add	r3, pc, #516	; (adr r3, 8009580 <__ieee754_rem_pio2+0x2f0>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	f7f6 ff84 	bl	800028c <__adddf3>
 8009384:	a380      	add	r3, pc, #512	; (adr r3, 8009588 <__ieee754_rem_pio2+0x2f8>)
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	4606      	mov	r6, r0
 800938c:	460f      	mov	r7, r1
 800938e:	f7f6 ff7d 	bl	800028c <__adddf3>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	e9c4 2300 	strd	r2, r3, [r4]
 800939a:	4630      	mov	r0, r6
 800939c:	4639      	mov	r1, r7
 800939e:	f7f6 ff73 	bl	8000288 <__aeabi_dsub>
 80093a2:	a379      	add	r3, pc, #484	; (adr r3, 8009588 <__ieee754_rem_pio2+0x2f8>)
 80093a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a8:	e7e0      	b.n	800936c <__ieee754_rem_pio2+0xdc>
 80093aa:	4b82      	ldr	r3, [pc, #520]	; (80095b4 <__ieee754_rem_pio2+0x324>)
 80093ac:	4598      	cmp	r8, r3
 80093ae:	f300 80d0 	bgt.w	8009552 <__ieee754_rem_pio2+0x2c2>
 80093b2:	f000 fe81 	bl	800a0b8 <fabs>
 80093b6:	ec57 6b10 	vmov	r6, r7, d0
 80093ba:	ee10 0a10 	vmov	r0, s0
 80093be:	a374      	add	r3, pc, #464	; (adr r3, 8009590 <__ieee754_rem_pio2+0x300>)
 80093c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c4:	4639      	mov	r1, r7
 80093c6:	f7f7 f913 	bl	80005f0 <__aeabi_dmul>
 80093ca:	2200      	movs	r2, #0
 80093cc:	4b7a      	ldr	r3, [pc, #488]	; (80095b8 <__ieee754_rem_pio2+0x328>)
 80093ce:	f7f6 ff5d 	bl	800028c <__adddf3>
 80093d2:	f7f7 fba7 	bl	8000b24 <__aeabi_d2iz>
 80093d6:	4605      	mov	r5, r0
 80093d8:	f7f7 f8a4 	bl	8000524 <__aeabi_i2d>
 80093dc:	a364      	add	r3, pc, #400	; (adr r3, 8009570 <__ieee754_rem_pio2+0x2e0>)
 80093de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093e6:	f7f7 f903 	bl	80005f0 <__aeabi_dmul>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	4630      	mov	r0, r6
 80093f0:	4639      	mov	r1, r7
 80093f2:	f7f6 ff49 	bl	8000288 <__aeabi_dsub>
 80093f6:	a360      	add	r3, pc, #384	; (adr r3, 8009578 <__ieee754_rem_pio2+0x2e8>)
 80093f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fc:	4682      	mov	sl, r0
 80093fe:	468b      	mov	fp, r1
 8009400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009404:	f7f7 f8f4 	bl	80005f0 <__aeabi_dmul>
 8009408:	2d1f      	cmp	r5, #31
 800940a:	4606      	mov	r6, r0
 800940c:	460f      	mov	r7, r1
 800940e:	dc2a      	bgt.n	8009466 <__ieee754_rem_pio2+0x1d6>
 8009410:	1e6a      	subs	r2, r5, #1
 8009412:	4b6a      	ldr	r3, [pc, #424]	; (80095bc <__ieee754_rem_pio2+0x32c>)
 8009414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009418:	4598      	cmp	r8, r3
 800941a:	d024      	beq.n	8009466 <__ieee754_rem_pio2+0x1d6>
 800941c:	4632      	mov	r2, r6
 800941e:	463b      	mov	r3, r7
 8009420:	4650      	mov	r0, sl
 8009422:	4659      	mov	r1, fp
 8009424:	f7f6 ff30 	bl	8000288 <__aeabi_dsub>
 8009428:	e9c4 0100 	strd	r0, r1, [r4]
 800942c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009430:	4650      	mov	r0, sl
 8009432:	4642      	mov	r2, r8
 8009434:	464b      	mov	r3, r9
 8009436:	4659      	mov	r1, fp
 8009438:	f7f6 ff26 	bl	8000288 <__aeabi_dsub>
 800943c:	463b      	mov	r3, r7
 800943e:	4632      	mov	r2, r6
 8009440:	f7f6 ff22 	bl	8000288 <__aeabi_dsub>
 8009444:	9b04      	ldr	r3, [sp, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800944c:	f6bf af5c 	bge.w	8009308 <__ieee754_rem_pio2+0x78>
 8009450:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009454:	6063      	str	r3, [r4, #4]
 8009456:	f8c4 8000 	str.w	r8, [r4]
 800945a:	60a0      	str	r0, [r4, #8]
 800945c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009460:	60e3      	str	r3, [r4, #12]
 8009462:	426d      	negs	r5, r5
 8009464:	e750      	b.n	8009308 <__ieee754_rem_pio2+0x78>
 8009466:	4632      	mov	r2, r6
 8009468:	463b      	mov	r3, r7
 800946a:	4650      	mov	r0, sl
 800946c:	4659      	mov	r1, fp
 800946e:	f7f6 ff0b 	bl	8000288 <__aeabi_dsub>
 8009472:	ea4f 5228 	mov.w	r2, r8, asr #20
 8009476:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	2b10      	cmp	r3, #16
 800947e:	e9c4 0100 	strd	r0, r1, [r4]
 8009482:	9205      	str	r2, [sp, #20]
 8009484:	ddd2      	ble.n	800942c <__ieee754_rem_pio2+0x19c>
 8009486:	a33e      	add	r3, pc, #248	; (adr r3, 8009580 <__ieee754_rem_pio2+0x2f0>)
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009490:	f7f7 f8ae 	bl	80005f0 <__aeabi_dmul>
 8009494:	4606      	mov	r6, r0
 8009496:	460f      	mov	r7, r1
 8009498:	4602      	mov	r2, r0
 800949a:	460b      	mov	r3, r1
 800949c:	4650      	mov	r0, sl
 800949e:	4659      	mov	r1, fp
 80094a0:	f7f6 fef2 	bl	8000288 <__aeabi_dsub>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	4680      	mov	r8, r0
 80094aa:	4689      	mov	r9, r1
 80094ac:	4650      	mov	r0, sl
 80094ae:	4659      	mov	r1, fp
 80094b0:	f7f6 feea 	bl	8000288 <__aeabi_dsub>
 80094b4:	4632      	mov	r2, r6
 80094b6:	463b      	mov	r3, r7
 80094b8:	f7f6 fee6 	bl	8000288 <__aeabi_dsub>
 80094bc:	a332      	add	r3, pc, #200	; (adr r3, 8009588 <__ieee754_rem_pio2+0x2f8>)
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	4606      	mov	r6, r0
 80094c4:	460f      	mov	r7, r1
 80094c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ca:	f7f7 f891 	bl	80005f0 <__aeabi_dmul>
 80094ce:	4632      	mov	r2, r6
 80094d0:	463b      	mov	r3, r7
 80094d2:	f7f6 fed9 	bl	8000288 <__aeabi_dsub>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4606      	mov	r6, r0
 80094dc:	460f      	mov	r7, r1
 80094de:	4640      	mov	r0, r8
 80094e0:	4649      	mov	r1, r9
 80094e2:	f7f6 fed1 	bl	8000288 <__aeabi_dsub>
 80094e6:	9a05      	ldr	r2, [sp, #20]
 80094e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	2b31      	cmp	r3, #49	; 0x31
 80094f0:	e9c4 0100 	strd	r0, r1, [r4]
 80094f4:	dd2a      	ble.n	800954c <__ieee754_rem_pio2+0x2bc>
 80094f6:	a328      	add	r3, pc, #160	; (adr r3, 8009598 <__ieee754_rem_pio2+0x308>)
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009500:	f7f7 f876 	bl	80005f0 <__aeabi_dmul>
 8009504:	4606      	mov	r6, r0
 8009506:	460f      	mov	r7, r1
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4640      	mov	r0, r8
 800950e:	4649      	mov	r1, r9
 8009510:	f7f6 feba 	bl	8000288 <__aeabi_dsub>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	4682      	mov	sl, r0
 800951a:	468b      	mov	fp, r1
 800951c:	4640      	mov	r0, r8
 800951e:	4649      	mov	r1, r9
 8009520:	f7f6 feb2 	bl	8000288 <__aeabi_dsub>
 8009524:	4632      	mov	r2, r6
 8009526:	463b      	mov	r3, r7
 8009528:	f7f6 feae 	bl	8000288 <__aeabi_dsub>
 800952c:	a31c      	add	r3, pc, #112	; (adr r3, 80095a0 <__ieee754_rem_pio2+0x310>)
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	4606      	mov	r6, r0
 8009534:	460f      	mov	r7, r1
 8009536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800953a:	f7f7 f859 	bl	80005f0 <__aeabi_dmul>
 800953e:	4632      	mov	r2, r6
 8009540:	463b      	mov	r3, r7
 8009542:	f7f6 fea1 	bl	8000288 <__aeabi_dsub>
 8009546:	4606      	mov	r6, r0
 8009548:	460f      	mov	r7, r1
 800954a:	e767      	b.n	800941c <__ieee754_rem_pio2+0x18c>
 800954c:	46c2      	mov	sl, r8
 800954e:	46cb      	mov	fp, r9
 8009550:	e76c      	b.n	800942c <__ieee754_rem_pio2+0x19c>
 8009552:	4b1b      	ldr	r3, [pc, #108]	; (80095c0 <__ieee754_rem_pio2+0x330>)
 8009554:	4598      	cmp	r8, r3
 8009556:	dd35      	ble.n	80095c4 <__ieee754_rem_pio2+0x334>
 8009558:	ee10 2a10 	vmov	r2, s0
 800955c:	463b      	mov	r3, r7
 800955e:	4630      	mov	r0, r6
 8009560:	4639      	mov	r1, r7
 8009562:	f7f6 fe91 	bl	8000288 <__aeabi_dsub>
 8009566:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800956a:	e9c4 0100 	strd	r0, r1, [r4]
 800956e:	e6a1      	b.n	80092b4 <__ieee754_rem_pio2+0x24>
 8009570:	54400000 	.word	0x54400000
 8009574:	3ff921fb 	.word	0x3ff921fb
 8009578:	1a626331 	.word	0x1a626331
 800957c:	3dd0b461 	.word	0x3dd0b461
 8009580:	1a600000 	.word	0x1a600000
 8009584:	3dd0b461 	.word	0x3dd0b461
 8009588:	2e037073 	.word	0x2e037073
 800958c:	3ba3198a 	.word	0x3ba3198a
 8009590:	6dc9c883 	.word	0x6dc9c883
 8009594:	3fe45f30 	.word	0x3fe45f30
 8009598:	2e000000 	.word	0x2e000000
 800959c:	3ba3198a 	.word	0x3ba3198a
 80095a0:	252049c1 	.word	0x252049c1
 80095a4:	397b839a 	.word	0x397b839a
 80095a8:	3fe921fb 	.word	0x3fe921fb
 80095ac:	4002d97b 	.word	0x4002d97b
 80095b0:	3ff921fb 	.word	0x3ff921fb
 80095b4:	413921fb 	.word	0x413921fb
 80095b8:	3fe00000 	.word	0x3fe00000
 80095bc:	0800a3b0 	.word	0x0800a3b0
 80095c0:	7fefffff 	.word	0x7fefffff
 80095c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80095c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80095cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80095d0:	4630      	mov	r0, r6
 80095d2:	460f      	mov	r7, r1
 80095d4:	f7f7 faa6 	bl	8000b24 <__aeabi_d2iz>
 80095d8:	f7f6 ffa4 	bl	8000524 <__aeabi_i2d>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	4630      	mov	r0, r6
 80095e2:	4639      	mov	r1, r7
 80095e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80095e8:	f7f6 fe4e 	bl	8000288 <__aeabi_dsub>
 80095ec:	2200      	movs	r2, #0
 80095ee:	4b1f      	ldr	r3, [pc, #124]	; (800966c <__ieee754_rem_pio2+0x3dc>)
 80095f0:	f7f6 fffe 	bl	80005f0 <__aeabi_dmul>
 80095f4:	460f      	mov	r7, r1
 80095f6:	4606      	mov	r6, r0
 80095f8:	f7f7 fa94 	bl	8000b24 <__aeabi_d2iz>
 80095fc:	f7f6 ff92 	bl	8000524 <__aeabi_i2d>
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	4630      	mov	r0, r6
 8009606:	4639      	mov	r1, r7
 8009608:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800960c:	f7f6 fe3c 	bl	8000288 <__aeabi_dsub>
 8009610:	2200      	movs	r2, #0
 8009612:	4b16      	ldr	r3, [pc, #88]	; (800966c <__ieee754_rem_pio2+0x3dc>)
 8009614:	f7f6 ffec 	bl	80005f0 <__aeabi_dmul>
 8009618:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800961c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009620:	f04f 0803 	mov.w	r8, #3
 8009624:	2600      	movs	r6, #0
 8009626:	2700      	movs	r7, #0
 8009628:	4632      	mov	r2, r6
 800962a:	463b      	mov	r3, r7
 800962c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009630:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8009634:	f7f7 fa44 	bl	8000ac0 <__aeabi_dcmpeq>
 8009638:	b9b0      	cbnz	r0, 8009668 <__ieee754_rem_pio2+0x3d8>
 800963a:	4b0d      	ldr	r3, [pc, #52]	; (8009670 <__ieee754_rem_pio2+0x3e0>)
 800963c:	9301      	str	r3, [sp, #4]
 800963e:	2302      	movs	r3, #2
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	462a      	mov	r2, r5
 8009644:	4643      	mov	r3, r8
 8009646:	4621      	mov	r1, r4
 8009648:	a806      	add	r0, sp, #24
 800964a:	f000 f815 	bl	8009678 <__kernel_rem_pio2>
 800964e:	9b04      	ldr	r3, [sp, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	4605      	mov	r5, r0
 8009654:	f6bf ae58 	bge.w	8009308 <__ieee754_rem_pio2+0x78>
 8009658:	6863      	ldr	r3, [r4, #4]
 800965a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800965e:	6063      	str	r3, [r4, #4]
 8009660:	68e3      	ldr	r3, [r4, #12]
 8009662:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009666:	e6fb      	b.n	8009460 <__ieee754_rem_pio2+0x1d0>
 8009668:	46d0      	mov	r8, sl
 800966a:	e7dd      	b.n	8009628 <__ieee754_rem_pio2+0x398>
 800966c:	41700000 	.word	0x41700000
 8009670:	0800a430 	.word	0x0800a430
 8009674:	00000000 	.word	0x00000000

08009678 <__kernel_rem_pio2>:
 8009678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	ed2d 8b02 	vpush	{d8}
 8009680:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009684:	1ed4      	subs	r4, r2, #3
 8009686:	9306      	str	r3, [sp, #24]
 8009688:	9102      	str	r1, [sp, #8]
 800968a:	4bc3      	ldr	r3, [pc, #780]	; (8009998 <__kernel_rem_pio2+0x320>)
 800968c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800968e:	9009      	str	r0, [sp, #36]	; 0x24
 8009690:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	9b06      	ldr	r3, [sp, #24]
 8009698:	3b01      	subs	r3, #1
 800969a:	9304      	str	r3, [sp, #16]
 800969c:	2318      	movs	r3, #24
 800969e:	fb94 f4f3 	sdiv	r4, r4, r3
 80096a2:	f06f 0317 	mvn.w	r3, #23
 80096a6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80096aa:	fb04 3303 	mla	r3, r4, r3, r3
 80096ae:	eb03 0a02 	add.w	sl, r3, r2
 80096b2:	9b00      	ldr	r3, [sp, #0]
 80096b4:	9a04      	ldr	r2, [sp, #16]
 80096b6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009988 <__kernel_rem_pio2+0x310>
 80096ba:	eb03 0802 	add.w	r8, r3, r2
 80096be:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80096c0:	1aa7      	subs	r7, r4, r2
 80096c2:	ae20      	add	r6, sp, #128	; 0x80
 80096c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80096c8:	2500      	movs	r5, #0
 80096ca:	4545      	cmp	r5, r8
 80096cc:	dd13      	ble.n	80096f6 <__kernel_rem_pio2+0x7e>
 80096ce:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009988 <__kernel_rem_pio2+0x310>
 80096d2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80096d6:	2600      	movs	r6, #0
 80096d8:	9b00      	ldr	r3, [sp, #0]
 80096da:	429e      	cmp	r6, r3
 80096dc:	dc32      	bgt.n	8009744 <__kernel_rem_pio2+0xcc>
 80096de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e0:	9303      	str	r3, [sp, #12]
 80096e2:	9b06      	ldr	r3, [sp, #24]
 80096e4:	199d      	adds	r5, r3, r6
 80096e6:	ab20      	add	r3, sp, #128	; 0x80
 80096e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80096ec:	9308      	str	r3, [sp, #32]
 80096ee:	ec59 8b18 	vmov	r8, r9, d8
 80096f2:	2700      	movs	r7, #0
 80096f4:	e01f      	b.n	8009736 <__kernel_rem_pio2+0xbe>
 80096f6:	42ef      	cmn	r7, r5
 80096f8:	d407      	bmi.n	800970a <__kernel_rem_pio2+0x92>
 80096fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80096fe:	f7f6 ff11 	bl	8000524 <__aeabi_i2d>
 8009702:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009706:	3501      	adds	r5, #1
 8009708:	e7df      	b.n	80096ca <__kernel_rem_pio2+0x52>
 800970a:	ec51 0b18 	vmov	r0, r1, d8
 800970e:	e7f8      	b.n	8009702 <__kernel_rem_pio2+0x8a>
 8009710:	9908      	ldr	r1, [sp, #32]
 8009712:	9d03      	ldr	r5, [sp, #12]
 8009714:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009718:	9108      	str	r1, [sp, #32]
 800971a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800971e:	9503      	str	r5, [sp, #12]
 8009720:	f7f6 ff66 	bl	80005f0 <__aeabi_dmul>
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	4640      	mov	r0, r8
 800972a:	4649      	mov	r1, r9
 800972c:	f7f6 fdae 	bl	800028c <__adddf3>
 8009730:	3701      	adds	r7, #1
 8009732:	4680      	mov	r8, r0
 8009734:	4689      	mov	r9, r1
 8009736:	9b04      	ldr	r3, [sp, #16]
 8009738:	429f      	cmp	r7, r3
 800973a:	dde9      	ble.n	8009710 <__kernel_rem_pio2+0x98>
 800973c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009740:	3601      	adds	r6, #1
 8009742:	e7c9      	b.n	80096d8 <__kernel_rem_pio2+0x60>
 8009744:	9b00      	ldr	r3, [sp, #0]
 8009746:	9f00      	ldr	r7, [sp, #0]
 8009748:	aa0c      	add	r2, sp, #48	; 0x30
 800974a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800974e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009750:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009752:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009756:	930a      	str	r3, [sp, #40]	; 0x28
 8009758:	ab98      	add	r3, sp, #608	; 0x260
 800975a:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800975e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009762:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009766:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800976a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800976e:	9308      	str	r3, [sp, #32]
 8009770:	9a08      	ldr	r2, [sp, #32]
 8009772:	ab98      	add	r3, sp, #608	; 0x260
 8009774:	4413      	add	r3, r2
 8009776:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 800977a:	2600      	movs	r6, #0
 800977c:	1bbb      	subs	r3, r7, r6
 800977e:	2b00      	cmp	r3, #0
 8009780:	dc77      	bgt.n	8009872 <__kernel_rem_pio2+0x1fa>
 8009782:	ec49 8b10 	vmov	d0, r8, r9
 8009786:	4650      	mov	r0, sl
 8009788:	f000 fd22 	bl	800a1d0 <scalbn>
 800978c:	ec55 4b10 	vmov	r4, r5, d0
 8009790:	2200      	movs	r2, #0
 8009792:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009796:	ee10 0a10 	vmov	r0, s0
 800979a:	4629      	mov	r1, r5
 800979c:	f7f6 ff28 	bl	80005f0 <__aeabi_dmul>
 80097a0:	ec41 0b10 	vmov	d0, r0, r1
 80097a4:	f000 fc90 	bl	800a0c8 <floor>
 80097a8:	2200      	movs	r2, #0
 80097aa:	ec51 0b10 	vmov	r0, r1, d0
 80097ae:	4b7b      	ldr	r3, [pc, #492]	; (800999c <__kernel_rem_pio2+0x324>)
 80097b0:	f7f6 ff1e 	bl	80005f0 <__aeabi_dmul>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	4620      	mov	r0, r4
 80097ba:	4629      	mov	r1, r5
 80097bc:	f7f6 fd64 	bl	8000288 <__aeabi_dsub>
 80097c0:	460d      	mov	r5, r1
 80097c2:	4604      	mov	r4, r0
 80097c4:	f7f7 f9ae 	bl	8000b24 <__aeabi_d2iz>
 80097c8:	9003      	str	r0, [sp, #12]
 80097ca:	f7f6 feab 	bl	8000524 <__aeabi_i2d>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4620      	mov	r0, r4
 80097d4:	4629      	mov	r1, r5
 80097d6:	f7f6 fd57 	bl	8000288 <__aeabi_dsub>
 80097da:	f1ba 0f00 	cmp.w	sl, #0
 80097de:	4680      	mov	r8, r0
 80097e0:	4689      	mov	r9, r1
 80097e2:	dd6b      	ble.n	80098bc <__kernel_rem_pio2+0x244>
 80097e4:	1e7a      	subs	r2, r7, #1
 80097e6:	ab0c      	add	r3, sp, #48	; 0x30
 80097e8:	f1ca 0118 	rsb	r1, sl, #24
 80097ec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80097f0:	9c03      	ldr	r4, [sp, #12]
 80097f2:	fa40 f301 	asr.w	r3, r0, r1
 80097f6:	441c      	add	r4, r3
 80097f8:	408b      	lsls	r3, r1
 80097fa:	1ac0      	subs	r0, r0, r3
 80097fc:	ab0c      	add	r3, sp, #48	; 0x30
 80097fe:	9403      	str	r4, [sp, #12]
 8009800:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009804:	f1ca 0317 	rsb	r3, sl, #23
 8009808:	fa40 fb03 	asr.w	fp, r0, r3
 800980c:	f1bb 0f00 	cmp.w	fp, #0
 8009810:	dd62      	ble.n	80098d8 <__kernel_rem_pio2+0x260>
 8009812:	9b03      	ldr	r3, [sp, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	3301      	adds	r3, #1
 8009818:	9303      	str	r3, [sp, #12]
 800981a:	4614      	mov	r4, r2
 800981c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009820:	4297      	cmp	r7, r2
 8009822:	f300 8089 	bgt.w	8009938 <__kernel_rem_pio2+0x2c0>
 8009826:	f1ba 0f00 	cmp.w	sl, #0
 800982a:	dd07      	ble.n	800983c <__kernel_rem_pio2+0x1c4>
 800982c:	f1ba 0f01 	cmp.w	sl, #1
 8009830:	f000 8096 	beq.w	8009960 <__kernel_rem_pio2+0x2e8>
 8009834:	f1ba 0f02 	cmp.w	sl, #2
 8009838:	f000 809c 	beq.w	8009974 <__kernel_rem_pio2+0x2fc>
 800983c:	f1bb 0f02 	cmp.w	fp, #2
 8009840:	d14a      	bne.n	80098d8 <__kernel_rem_pio2+0x260>
 8009842:	4642      	mov	r2, r8
 8009844:	464b      	mov	r3, r9
 8009846:	2000      	movs	r0, #0
 8009848:	4955      	ldr	r1, [pc, #340]	; (80099a0 <__kernel_rem_pio2+0x328>)
 800984a:	f7f6 fd1d 	bl	8000288 <__aeabi_dsub>
 800984e:	4680      	mov	r8, r0
 8009850:	4689      	mov	r9, r1
 8009852:	2c00      	cmp	r4, #0
 8009854:	d040      	beq.n	80098d8 <__kernel_rem_pio2+0x260>
 8009856:	4650      	mov	r0, sl
 8009858:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009990 <__kernel_rem_pio2+0x318>
 800985c:	f000 fcb8 	bl	800a1d0 <scalbn>
 8009860:	4640      	mov	r0, r8
 8009862:	4649      	mov	r1, r9
 8009864:	ec53 2b10 	vmov	r2, r3, d0
 8009868:	f7f6 fd0e 	bl	8000288 <__aeabi_dsub>
 800986c:	4680      	mov	r8, r0
 800986e:	4689      	mov	r9, r1
 8009870:	e032      	b.n	80098d8 <__kernel_rem_pio2+0x260>
 8009872:	2200      	movs	r2, #0
 8009874:	4b4b      	ldr	r3, [pc, #300]	; (80099a4 <__kernel_rem_pio2+0x32c>)
 8009876:	4640      	mov	r0, r8
 8009878:	4649      	mov	r1, r9
 800987a:	f7f6 feb9 	bl	80005f0 <__aeabi_dmul>
 800987e:	f7f7 f951 	bl	8000b24 <__aeabi_d2iz>
 8009882:	f7f6 fe4f 	bl	8000524 <__aeabi_i2d>
 8009886:	2200      	movs	r2, #0
 8009888:	4b47      	ldr	r3, [pc, #284]	; (80099a8 <__kernel_rem_pio2+0x330>)
 800988a:	4604      	mov	r4, r0
 800988c:	460d      	mov	r5, r1
 800988e:	f7f6 feaf 	bl	80005f0 <__aeabi_dmul>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	4640      	mov	r0, r8
 8009898:	4649      	mov	r1, r9
 800989a:	f7f6 fcf5 	bl	8000288 <__aeabi_dsub>
 800989e:	f7f7 f941 	bl	8000b24 <__aeabi_d2iz>
 80098a2:	ab0c      	add	r3, sp, #48	; 0x30
 80098a4:	4629      	mov	r1, r5
 80098a6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80098aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80098ae:	4620      	mov	r0, r4
 80098b0:	f7f6 fcec 	bl	800028c <__adddf3>
 80098b4:	3601      	adds	r6, #1
 80098b6:	4680      	mov	r8, r0
 80098b8:	4689      	mov	r9, r1
 80098ba:	e75f      	b.n	800977c <__kernel_rem_pio2+0x104>
 80098bc:	d106      	bne.n	80098cc <__kernel_rem_pio2+0x254>
 80098be:	1e7b      	subs	r3, r7, #1
 80098c0:	aa0c      	add	r2, sp, #48	; 0x30
 80098c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80098c6:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80098ca:	e79f      	b.n	800980c <__kernel_rem_pio2+0x194>
 80098cc:	2200      	movs	r2, #0
 80098ce:	4b37      	ldr	r3, [pc, #220]	; (80099ac <__kernel_rem_pio2+0x334>)
 80098d0:	f7f7 f914 	bl	8000afc <__aeabi_dcmpge>
 80098d4:	bb68      	cbnz	r0, 8009932 <__kernel_rem_pio2+0x2ba>
 80098d6:	4683      	mov	fp, r0
 80098d8:	2200      	movs	r2, #0
 80098da:	2300      	movs	r3, #0
 80098dc:	4640      	mov	r0, r8
 80098de:	4649      	mov	r1, r9
 80098e0:	f7f7 f8ee 	bl	8000ac0 <__aeabi_dcmpeq>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	f000 80c1 	beq.w	8009a6c <__kernel_rem_pio2+0x3f4>
 80098ea:	1e7c      	subs	r4, r7, #1
 80098ec:	4623      	mov	r3, r4
 80098ee:	2200      	movs	r2, #0
 80098f0:	9900      	ldr	r1, [sp, #0]
 80098f2:	428b      	cmp	r3, r1
 80098f4:	da5c      	bge.n	80099b0 <__kernel_rem_pio2+0x338>
 80098f6:	2a00      	cmp	r2, #0
 80098f8:	f040 808b 	bne.w	8009a12 <__kernel_rem_pio2+0x39a>
 80098fc:	2401      	movs	r4, #1
 80098fe:	f06f 0203 	mvn.w	r2, #3
 8009902:	fb02 f304 	mul.w	r3, r2, r4
 8009906:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009908:	58cb      	ldr	r3, [r1, r3]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d056      	beq.n	80099bc <__kernel_rem_pio2+0x344>
 800990e:	9b08      	ldr	r3, [sp, #32]
 8009910:	aa98      	add	r2, sp, #608	; 0x260
 8009912:	4413      	add	r3, r2
 8009914:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8009918:	9b06      	ldr	r3, [sp, #24]
 800991a:	19dd      	adds	r5, r3, r7
 800991c:	ab20      	add	r3, sp, #128	; 0x80
 800991e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009922:	19e3      	adds	r3, r4, r7
 8009924:	1c7e      	adds	r6, r7, #1
 8009926:	9303      	str	r3, [sp, #12]
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	429e      	cmp	r6, r3
 800992c:	dd48      	ble.n	80099c0 <__kernel_rem_pio2+0x348>
 800992e:	461f      	mov	r7, r3
 8009930:	e712      	b.n	8009758 <__kernel_rem_pio2+0xe0>
 8009932:	f04f 0b02 	mov.w	fp, #2
 8009936:	e76c      	b.n	8009812 <__kernel_rem_pio2+0x19a>
 8009938:	ab0c      	add	r3, sp, #48	; 0x30
 800993a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800993e:	b94c      	cbnz	r4, 8009954 <__kernel_rem_pio2+0x2dc>
 8009940:	b12b      	cbz	r3, 800994e <__kernel_rem_pio2+0x2d6>
 8009942:	a80c      	add	r0, sp, #48	; 0x30
 8009944:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009948:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800994c:	2301      	movs	r3, #1
 800994e:	3201      	adds	r2, #1
 8009950:	461c      	mov	r4, r3
 8009952:	e765      	b.n	8009820 <__kernel_rem_pio2+0x1a8>
 8009954:	a80c      	add	r0, sp, #48	; 0x30
 8009956:	1acb      	subs	r3, r1, r3
 8009958:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800995c:	4623      	mov	r3, r4
 800995e:	e7f6      	b.n	800994e <__kernel_rem_pio2+0x2d6>
 8009960:	1e7a      	subs	r2, r7, #1
 8009962:	ab0c      	add	r3, sp, #48	; 0x30
 8009964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009968:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800996c:	a90c      	add	r1, sp, #48	; 0x30
 800996e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009972:	e763      	b.n	800983c <__kernel_rem_pio2+0x1c4>
 8009974:	1e7a      	subs	r2, r7, #1
 8009976:	ab0c      	add	r3, sp, #48	; 0x30
 8009978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009980:	e7f4      	b.n	800996c <__kernel_rem_pio2+0x2f4>
 8009982:	bf00      	nop
 8009984:	f3af 8000 	nop.w
	...
 8009994:	3ff00000 	.word	0x3ff00000
 8009998:	0800a578 	.word	0x0800a578
 800999c:	40200000 	.word	0x40200000
 80099a0:	3ff00000 	.word	0x3ff00000
 80099a4:	3e700000 	.word	0x3e700000
 80099a8:	41700000 	.word	0x41700000
 80099ac:	3fe00000 	.word	0x3fe00000
 80099b0:	a90c      	add	r1, sp, #48	; 0x30
 80099b2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80099b6:	3b01      	subs	r3, #1
 80099b8:	430a      	orrs	r2, r1
 80099ba:	e799      	b.n	80098f0 <__kernel_rem_pio2+0x278>
 80099bc:	3401      	adds	r4, #1
 80099be:	e7a0      	b.n	8009902 <__kernel_rem_pio2+0x28a>
 80099c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80099c6:	f7f6 fdad 	bl	8000524 <__aeabi_i2d>
 80099ca:	e8e5 0102 	strd	r0, r1, [r5], #8
 80099ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d0:	9508      	str	r5, [sp, #32]
 80099d2:	461c      	mov	r4, r3
 80099d4:	2700      	movs	r7, #0
 80099d6:	f04f 0800 	mov.w	r8, #0
 80099da:	f04f 0900 	mov.w	r9, #0
 80099de:	9b04      	ldr	r3, [sp, #16]
 80099e0:	429f      	cmp	r7, r3
 80099e2:	dd03      	ble.n	80099ec <__kernel_rem_pio2+0x374>
 80099e4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80099e8:	3601      	adds	r6, #1
 80099ea:	e79d      	b.n	8009928 <__kernel_rem_pio2+0x2b0>
 80099ec:	9908      	ldr	r1, [sp, #32]
 80099ee:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80099f2:	9108      	str	r1, [sp, #32]
 80099f4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80099f8:	f7f6 fdfa 	bl	80005f0 <__aeabi_dmul>
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	4640      	mov	r0, r8
 8009a02:	4649      	mov	r1, r9
 8009a04:	f7f6 fc42 	bl	800028c <__adddf3>
 8009a08:	3701      	adds	r7, #1
 8009a0a:	4680      	mov	r8, r0
 8009a0c:	4689      	mov	r9, r1
 8009a0e:	e7e6      	b.n	80099de <__kernel_rem_pio2+0x366>
 8009a10:	3c01      	subs	r4, #1
 8009a12:	ab0c      	add	r3, sp, #48	; 0x30
 8009a14:	f1aa 0a18 	sub.w	sl, sl, #24
 8009a18:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0f7      	beq.n	8009a10 <__kernel_rem_pio2+0x398>
 8009a20:	4650      	mov	r0, sl
 8009a22:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8009cf8 <__kernel_rem_pio2+0x680>
 8009a26:	f000 fbd3 	bl	800a1d0 <scalbn>
 8009a2a:	00e5      	lsls	r5, r4, #3
 8009a2c:	ab98      	add	r3, sp, #608	; 0x260
 8009a2e:	eb03 0905 	add.w	r9, r3, r5
 8009a32:	ec57 6b10 	vmov	r6, r7, d0
 8009a36:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8009a3a:	46a0      	mov	r8, r4
 8009a3c:	f1b8 0f00 	cmp.w	r8, #0
 8009a40:	da4d      	bge.n	8009ade <__kernel_rem_pio2+0x466>
 8009a42:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8009d00 <__kernel_rem_pio2+0x688>
 8009a46:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9304      	str	r3, [sp, #16]
 8009a4e:	4657      	mov	r7, sl
 8009a50:	9b04      	ldr	r3, [sp, #16]
 8009a52:	ebb4 0903 	subs.w	r9, r4, r3
 8009a56:	d476      	bmi.n	8009b46 <__kernel_rem_pio2+0x4ce>
 8009a58:	4bab      	ldr	r3, [pc, #684]	; (8009d08 <__kernel_rem_pio2+0x690>)
 8009a5a:	461e      	mov	r6, r3
 8009a5c:	ab70      	add	r3, sp, #448	; 0x1c0
 8009a5e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009a62:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009a66:	f04f 0800 	mov.w	r8, #0
 8009a6a:	e05e      	b.n	8009b2a <__kernel_rem_pio2+0x4b2>
 8009a6c:	f1ca 0000 	rsb	r0, sl, #0
 8009a70:	ec49 8b10 	vmov	d0, r8, r9
 8009a74:	f000 fbac 	bl	800a1d0 <scalbn>
 8009a78:	ec55 4b10 	vmov	r4, r5, d0
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	4ba3      	ldr	r3, [pc, #652]	; (8009d0c <__kernel_rem_pio2+0x694>)
 8009a80:	ee10 0a10 	vmov	r0, s0
 8009a84:	4629      	mov	r1, r5
 8009a86:	f7f7 f839 	bl	8000afc <__aeabi_dcmpge>
 8009a8a:	b1f8      	cbz	r0, 8009acc <__kernel_rem_pio2+0x454>
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	4ba0      	ldr	r3, [pc, #640]	; (8009d10 <__kernel_rem_pio2+0x698>)
 8009a90:	4620      	mov	r0, r4
 8009a92:	4629      	mov	r1, r5
 8009a94:	f7f6 fdac 	bl	80005f0 <__aeabi_dmul>
 8009a98:	f7f7 f844 	bl	8000b24 <__aeabi_d2iz>
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	f7f6 fd41 	bl	8000524 <__aeabi_i2d>
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	4b99      	ldr	r3, [pc, #612]	; (8009d0c <__kernel_rem_pio2+0x694>)
 8009aa6:	f7f6 fda3 	bl	80005f0 <__aeabi_dmul>
 8009aaa:	460b      	mov	r3, r1
 8009aac:	4602      	mov	r2, r0
 8009aae:	4629      	mov	r1, r5
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f7f6 fbe9 	bl	8000288 <__aeabi_dsub>
 8009ab6:	f7f7 f835 	bl	8000b24 <__aeabi_d2iz>
 8009aba:	1c7c      	adds	r4, r7, #1
 8009abc:	ab0c      	add	r3, sp, #48	; 0x30
 8009abe:	f10a 0a18 	add.w	sl, sl, #24
 8009ac2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009ac6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8009aca:	e7a9      	b.n	8009a20 <__kernel_rem_pio2+0x3a8>
 8009acc:	4620      	mov	r0, r4
 8009ace:	4629      	mov	r1, r5
 8009ad0:	f7f7 f828 	bl	8000b24 <__aeabi_d2iz>
 8009ad4:	ab0c      	add	r3, sp, #48	; 0x30
 8009ad6:	463c      	mov	r4, r7
 8009ad8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009adc:	e7a0      	b.n	8009a20 <__kernel_rem_pio2+0x3a8>
 8009ade:	ab0c      	add	r3, sp, #48	; 0x30
 8009ae0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009ae4:	f7f6 fd1e 	bl	8000524 <__aeabi_i2d>
 8009ae8:	4632      	mov	r2, r6
 8009aea:	463b      	mov	r3, r7
 8009aec:	f7f6 fd80 	bl	80005f0 <__aeabi_dmul>
 8009af0:	2200      	movs	r2, #0
 8009af2:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8009af6:	4b86      	ldr	r3, [pc, #536]	; (8009d10 <__kernel_rem_pio2+0x698>)
 8009af8:	4630      	mov	r0, r6
 8009afa:	4639      	mov	r1, r7
 8009afc:	f7f6 fd78 	bl	80005f0 <__aeabi_dmul>
 8009b00:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009b04:	4606      	mov	r6, r0
 8009b06:	460f      	mov	r7, r1
 8009b08:	e798      	b.n	8009a3c <__kernel_rem_pio2+0x3c4>
 8009b0a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009b0e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8009b12:	f7f6 fd6d 	bl	80005f0 <__aeabi_dmul>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b1e:	f7f6 fbb5 	bl	800028c <__adddf3>
 8009b22:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b26:	f108 0801 	add.w	r8, r8, #1
 8009b2a:	9b00      	ldr	r3, [sp, #0]
 8009b2c:	4598      	cmp	r8, r3
 8009b2e:	dc02      	bgt.n	8009b36 <__kernel_rem_pio2+0x4be>
 8009b30:	9b04      	ldr	r3, [sp, #16]
 8009b32:	4598      	cmp	r8, r3
 8009b34:	dde9      	ble.n	8009b0a <__kernel_rem_pio2+0x492>
 8009b36:	9b04      	ldr	r3, [sp, #16]
 8009b38:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	ecaa 7b02 	vstmia	sl!, {d7}
 8009b42:	9304      	str	r3, [sp, #16]
 8009b44:	e784      	b.n	8009a50 <__kernel_rem_pio2+0x3d8>
 8009b46:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009b48:	2b03      	cmp	r3, #3
 8009b4a:	d85d      	bhi.n	8009c08 <__kernel_rem_pio2+0x590>
 8009b4c:	e8df f003 	tbb	[pc, r3]
 8009b50:	0226264b 	.word	0x0226264b
 8009b54:	ab98      	add	r3, sp, #608	; 0x260
 8009b56:	441d      	add	r5, r3
 8009b58:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8009b5c:	462e      	mov	r6, r5
 8009b5e:	46a2      	mov	sl, r4
 8009b60:	f1ba 0f00 	cmp.w	sl, #0
 8009b64:	dc6e      	bgt.n	8009c44 <__kernel_rem_pio2+0x5cc>
 8009b66:	462e      	mov	r6, r5
 8009b68:	46a2      	mov	sl, r4
 8009b6a:	f1ba 0f01 	cmp.w	sl, #1
 8009b6e:	f300 808a 	bgt.w	8009c86 <__kernel_rem_pio2+0x60e>
 8009b72:	2000      	movs	r0, #0
 8009b74:	2100      	movs	r1, #0
 8009b76:	2c01      	cmp	r4, #1
 8009b78:	f300 80a6 	bgt.w	8009cc8 <__kernel_rem_pio2+0x650>
 8009b7c:	f1bb 0f00 	cmp.w	fp, #0
 8009b80:	f040 80a8 	bne.w	8009cd4 <__kernel_rem_pio2+0x65c>
 8009b84:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8009b88:	9c02      	ldr	r4, [sp, #8]
 8009b8a:	e9c4 2300 	strd	r2, r3, [r4]
 8009b8e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8009b92:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8009b96:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009b9a:	e035      	b.n	8009c08 <__kernel_rem_pio2+0x590>
 8009b9c:	3508      	adds	r5, #8
 8009b9e:	ab48      	add	r3, sp, #288	; 0x120
 8009ba0:	441d      	add	r5, r3
 8009ba2:	4626      	mov	r6, r4
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	2e00      	cmp	r6, #0
 8009baa:	da3c      	bge.n	8009c26 <__kernel_rem_pio2+0x5ae>
 8009bac:	f1bb 0f00 	cmp.w	fp, #0
 8009bb0:	d03f      	beq.n	8009c32 <__kernel_rem_pio2+0x5ba>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bb8:	9d02      	ldr	r5, [sp, #8]
 8009bba:	e9c5 2300 	strd	r2, r3, [r5]
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009bc6:	f7f6 fb5f 	bl	8000288 <__aeabi_dsub>
 8009bca:	ae4a      	add	r6, sp, #296	; 0x128
 8009bcc:	2501      	movs	r5, #1
 8009bce:	42ac      	cmp	r4, r5
 8009bd0:	da32      	bge.n	8009c38 <__kernel_rem_pio2+0x5c0>
 8009bd2:	f1bb 0f00 	cmp.w	fp, #0
 8009bd6:	d002      	beq.n	8009bde <__kernel_rem_pio2+0x566>
 8009bd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bdc:	4619      	mov	r1, r3
 8009bde:	9b02      	ldr	r3, [sp, #8]
 8009be0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009be4:	e010      	b.n	8009c08 <__kernel_rem_pio2+0x590>
 8009be6:	ab98      	add	r3, sp, #608	; 0x260
 8009be8:	441d      	add	r5, r3
 8009bea:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8009bee:	2000      	movs	r0, #0
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	2c00      	cmp	r4, #0
 8009bf4:	da11      	bge.n	8009c1a <__kernel_rem_pio2+0x5a2>
 8009bf6:	f1bb 0f00 	cmp.w	fp, #0
 8009bfa:	d002      	beq.n	8009c02 <__kernel_rem_pio2+0x58a>
 8009bfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c00:	4619      	mov	r1, r3
 8009c02:	9b02      	ldr	r3, [sp, #8]
 8009c04:	e9c3 0100 	strd	r0, r1, [r3]
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	f003 0007 	and.w	r0, r3, #7
 8009c0e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009c12:	ecbd 8b02 	vpop	{d8}
 8009c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009c1e:	f7f6 fb35 	bl	800028c <__adddf3>
 8009c22:	3c01      	subs	r4, #1
 8009c24:	e7e5      	b.n	8009bf2 <__kernel_rem_pio2+0x57a>
 8009c26:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009c2a:	f7f6 fb2f 	bl	800028c <__adddf3>
 8009c2e:	3e01      	subs	r6, #1
 8009c30:	e7ba      	b.n	8009ba8 <__kernel_rem_pio2+0x530>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	e7bf      	b.n	8009bb8 <__kernel_rem_pio2+0x540>
 8009c38:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009c3c:	f7f6 fb26 	bl	800028c <__adddf3>
 8009c40:	3501      	adds	r5, #1
 8009c42:	e7c4      	b.n	8009bce <__kernel_rem_pio2+0x556>
 8009c44:	ed16 7b02 	vldr	d7, [r6, #-8]
 8009c48:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8009c4c:	ec53 2b17 	vmov	r2, r3, d7
 8009c50:	4640      	mov	r0, r8
 8009c52:	4649      	mov	r1, r9
 8009c54:	ed8d 7b00 	vstr	d7, [sp]
 8009c58:	f7f6 fb18 	bl	800028c <__adddf3>
 8009c5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c60:	4602      	mov	r2, r0
 8009c62:	460b      	mov	r3, r1
 8009c64:	4640      	mov	r0, r8
 8009c66:	4649      	mov	r1, r9
 8009c68:	f7f6 fb0e 	bl	8000288 <__aeabi_dsub>
 8009c6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c70:	f7f6 fb0c 	bl	800028c <__adddf3>
 8009c74:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009c78:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8009c7c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009c80:	ed06 7b02 	vstr	d7, [r6, #-8]
 8009c84:	e76c      	b.n	8009b60 <__kernel_rem_pio2+0x4e8>
 8009c86:	ed16 7b02 	vldr	d7, [r6, #-8]
 8009c8a:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8009c8e:	ec53 2b17 	vmov	r2, r3, d7
 8009c92:	4640      	mov	r0, r8
 8009c94:	4649      	mov	r1, r9
 8009c96:	ed8d 7b00 	vstr	d7, [sp]
 8009c9a:	f7f6 faf7 	bl	800028c <__adddf3>
 8009c9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	4649      	mov	r1, r9
 8009caa:	f7f6 faed 	bl	8000288 <__aeabi_dsub>
 8009cae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cb2:	f7f6 faeb 	bl	800028c <__adddf3>
 8009cb6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009cba:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8009cbe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009cc2:	ed06 7b02 	vstr	d7, [r6, #-8]
 8009cc6:	e750      	b.n	8009b6a <__kernel_rem_pio2+0x4f2>
 8009cc8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009ccc:	f7f6 fade 	bl	800028c <__adddf3>
 8009cd0:	3c01      	subs	r4, #1
 8009cd2:	e750      	b.n	8009b76 <__kernel_rem_pio2+0x4fe>
 8009cd4:	9a02      	ldr	r2, [sp, #8]
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	6013      	str	r3, [r2, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6110      	str	r0, [r2, #16]
 8009cde:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009ce2:	6053      	str	r3, [r2, #4]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	6093      	str	r3, [r2, #8]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009cee:	60d3      	str	r3, [r2, #12]
 8009cf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cf4:	6153      	str	r3, [r2, #20]
 8009cf6:	e787      	b.n	8009c08 <__kernel_rem_pio2+0x590>
 8009cf8:	00000000 	.word	0x00000000
 8009cfc:	3ff00000 	.word	0x3ff00000
	...
 8009d08:	0800a538 	.word	0x0800a538
 8009d0c:	41700000 	.word	0x41700000
 8009d10:	3e700000 	.word	0x3e700000
 8009d14:	00000000 	.word	0x00000000

08009d18 <__kernel_tan>:
 8009d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1c:	ec5b ab10 	vmov	sl, fp, d0
 8009d20:	4bc1      	ldr	r3, [pc, #772]	; (800a028 <__kernel_tan+0x310>)
 8009d22:	b089      	sub	sp, #36	; 0x24
 8009d24:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8009d28:	429f      	cmp	r7, r3
 8009d2a:	ec59 8b11 	vmov	r8, r9, d1
 8009d2e:	4606      	mov	r6, r0
 8009d30:	f8cd b008 	str.w	fp, [sp, #8]
 8009d34:	dc23      	bgt.n	8009d7e <__kernel_tan+0x66>
 8009d36:	ee10 0a10 	vmov	r0, s0
 8009d3a:	4659      	mov	r1, fp
 8009d3c:	f7f6 fef2 	bl	8000b24 <__aeabi_d2iz>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d146      	bne.n	8009dd2 <__kernel_tan+0xba>
 8009d44:	4653      	mov	r3, sl
 8009d46:	431f      	orrs	r7, r3
 8009d48:	1c73      	adds	r3, r6, #1
 8009d4a:	433b      	orrs	r3, r7
 8009d4c:	d110      	bne.n	8009d70 <__kernel_tan+0x58>
 8009d4e:	ec4b ab10 	vmov	d0, sl, fp
 8009d52:	f000 f9b1 	bl	800a0b8 <fabs>
 8009d56:	49b5      	ldr	r1, [pc, #724]	; (800a02c <__kernel_tan+0x314>)
 8009d58:	ec53 2b10 	vmov	r2, r3, d0
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	f7f6 fd71 	bl	8000844 <__aeabi_ddiv>
 8009d62:	4682      	mov	sl, r0
 8009d64:	468b      	mov	fp, r1
 8009d66:	ec4b ab10 	vmov	d0, sl, fp
 8009d6a:	b009      	add	sp, #36	; 0x24
 8009d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d70:	2e01      	cmp	r6, #1
 8009d72:	d0f8      	beq.n	8009d66 <__kernel_tan+0x4e>
 8009d74:	4652      	mov	r2, sl
 8009d76:	465b      	mov	r3, fp
 8009d78:	2000      	movs	r0, #0
 8009d7a:	49ad      	ldr	r1, [pc, #692]	; (800a030 <__kernel_tan+0x318>)
 8009d7c:	e7ef      	b.n	8009d5e <__kernel_tan+0x46>
 8009d7e:	4bad      	ldr	r3, [pc, #692]	; (800a034 <__kernel_tan+0x31c>)
 8009d80:	429f      	cmp	r7, r3
 8009d82:	dd26      	ble.n	8009dd2 <__kernel_tan+0xba>
 8009d84:	9b02      	ldr	r3, [sp, #8]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	da09      	bge.n	8009d9e <__kernel_tan+0x86>
 8009d8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d8e:	469b      	mov	fp, r3
 8009d90:	ee10 aa10 	vmov	sl, s0
 8009d94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d98:	ee11 8a10 	vmov	r8, s2
 8009d9c:	4699      	mov	r9, r3
 8009d9e:	4652      	mov	r2, sl
 8009da0:	465b      	mov	r3, fp
 8009da2:	a183      	add	r1, pc, #524	; (adr r1, 8009fb0 <__kernel_tan+0x298>)
 8009da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009da8:	f7f6 fa6e 	bl	8000288 <__aeabi_dsub>
 8009dac:	4642      	mov	r2, r8
 8009dae:	464b      	mov	r3, r9
 8009db0:	4604      	mov	r4, r0
 8009db2:	460d      	mov	r5, r1
 8009db4:	a180      	add	r1, pc, #512	; (adr r1, 8009fb8 <__kernel_tan+0x2a0>)
 8009db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dba:	f7f6 fa65 	bl	8000288 <__aeabi_dsub>
 8009dbe:	4622      	mov	r2, r4
 8009dc0:	462b      	mov	r3, r5
 8009dc2:	f7f6 fa63 	bl	800028c <__adddf3>
 8009dc6:	f04f 0800 	mov.w	r8, #0
 8009dca:	4682      	mov	sl, r0
 8009dcc:	468b      	mov	fp, r1
 8009dce:	f04f 0900 	mov.w	r9, #0
 8009dd2:	4652      	mov	r2, sl
 8009dd4:	465b      	mov	r3, fp
 8009dd6:	4650      	mov	r0, sl
 8009dd8:	4659      	mov	r1, fp
 8009dda:	f7f6 fc09 	bl	80005f0 <__aeabi_dmul>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	e9cd 0100 	strd	r0, r1, [sp]
 8009de6:	f7f6 fc03 	bl	80005f0 <__aeabi_dmul>
 8009dea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dee:	4604      	mov	r4, r0
 8009df0:	460d      	mov	r5, r1
 8009df2:	4650      	mov	r0, sl
 8009df4:	4659      	mov	r1, fp
 8009df6:	f7f6 fbfb 	bl	80005f0 <__aeabi_dmul>
 8009dfa:	a371      	add	r3, pc, #452	; (adr r3, 8009fc0 <__kernel_tan+0x2a8>)
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e04:	4620      	mov	r0, r4
 8009e06:	4629      	mov	r1, r5
 8009e08:	f7f6 fbf2 	bl	80005f0 <__aeabi_dmul>
 8009e0c:	a36e      	add	r3, pc, #440	; (adr r3, 8009fc8 <__kernel_tan+0x2b0>)
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	f7f6 fa3b 	bl	800028c <__adddf3>
 8009e16:	4622      	mov	r2, r4
 8009e18:	462b      	mov	r3, r5
 8009e1a:	f7f6 fbe9 	bl	80005f0 <__aeabi_dmul>
 8009e1e:	a36c      	add	r3, pc, #432	; (adr r3, 8009fd0 <__kernel_tan+0x2b8>)
 8009e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e24:	f7f6 fa32 	bl	800028c <__adddf3>
 8009e28:	4622      	mov	r2, r4
 8009e2a:	462b      	mov	r3, r5
 8009e2c:	f7f6 fbe0 	bl	80005f0 <__aeabi_dmul>
 8009e30:	a369      	add	r3, pc, #420	; (adr r3, 8009fd8 <__kernel_tan+0x2c0>)
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	f7f6 fa29 	bl	800028c <__adddf3>
 8009e3a:	4622      	mov	r2, r4
 8009e3c:	462b      	mov	r3, r5
 8009e3e:	f7f6 fbd7 	bl	80005f0 <__aeabi_dmul>
 8009e42:	a367      	add	r3, pc, #412	; (adr r3, 8009fe0 <__kernel_tan+0x2c8>)
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	f7f6 fa20 	bl	800028c <__adddf3>
 8009e4c:	4622      	mov	r2, r4
 8009e4e:	462b      	mov	r3, r5
 8009e50:	f7f6 fbce 	bl	80005f0 <__aeabi_dmul>
 8009e54:	a364      	add	r3, pc, #400	; (adr r3, 8009fe8 <__kernel_tan+0x2d0>)
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	f7f6 fa17 	bl	800028c <__adddf3>
 8009e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e62:	f7f6 fbc5 	bl	80005f0 <__aeabi_dmul>
 8009e66:	a362      	add	r3, pc, #392	; (adr r3, 8009ff0 <__kernel_tan+0x2d8>)
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e70:	4620      	mov	r0, r4
 8009e72:	4629      	mov	r1, r5
 8009e74:	f7f6 fbbc 	bl	80005f0 <__aeabi_dmul>
 8009e78:	a35f      	add	r3, pc, #380	; (adr r3, 8009ff8 <__kernel_tan+0x2e0>)
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	f7f6 fa05 	bl	800028c <__adddf3>
 8009e82:	4622      	mov	r2, r4
 8009e84:	462b      	mov	r3, r5
 8009e86:	f7f6 fbb3 	bl	80005f0 <__aeabi_dmul>
 8009e8a:	a35d      	add	r3, pc, #372	; (adr r3, 800a000 <__kernel_tan+0x2e8>)
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	f7f6 f9fc 	bl	800028c <__adddf3>
 8009e94:	4622      	mov	r2, r4
 8009e96:	462b      	mov	r3, r5
 8009e98:	f7f6 fbaa 	bl	80005f0 <__aeabi_dmul>
 8009e9c:	a35a      	add	r3, pc, #360	; (adr r3, 800a008 <__kernel_tan+0x2f0>)
 8009e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea2:	f7f6 f9f3 	bl	800028c <__adddf3>
 8009ea6:	4622      	mov	r2, r4
 8009ea8:	462b      	mov	r3, r5
 8009eaa:	f7f6 fba1 	bl	80005f0 <__aeabi_dmul>
 8009eae:	a358      	add	r3, pc, #352	; (adr r3, 800a010 <__kernel_tan+0x2f8>)
 8009eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb4:	f7f6 f9ea 	bl	800028c <__adddf3>
 8009eb8:	4622      	mov	r2, r4
 8009eba:	462b      	mov	r3, r5
 8009ebc:	f7f6 fb98 	bl	80005f0 <__aeabi_dmul>
 8009ec0:	a355      	add	r3, pc, #340	; (adr r3, 800a018 <__kernel_tan+0x300>)
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	f7f6 f9e1 	bl	800028c <__adddf3>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ed2:	f7f6 f9db 	bl	800028c <__adddf3>
 8009ed6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eda:	f7f6 fb89 	bl	80005f0 <__aeabi_dmul>
 8009ede:	4642      	mov	r2, r8
 8009ee0:	464b      	mov	r3, r9
 8009ee2:	f7f6 f9d3 	bl	800028c <__adddf3>
 8009ee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eea:	f7f6 fb81 	bl	80005f0 <__aeabi_dmul>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	f7f6 f9c9 	bl	800028c <__adddf3>
 8009efa:	a349      	add	r3, pc, #292	; (adr r3, 800a020 <__kernel_tan+0x308>)
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	4604      	mov	r4, r0
 8009f02:	460d      	mov	r5, r1
 8009f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f08:	f7f6 fb72 	bl	80005f0 <__aeabi_dmul>
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	462b      	mov	r3, r5
 8009f10:	f7f6 f9bc 	bl	800028c <__adddf3>
 8009f14:	e9cd 0100 	strd	r0, r1, [sp]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	4659      	mov	r1, fp
 8009f1e:	4650      	mov	r0, sl
 8009f20:	f7f6 f9b4 	bl	800028c <__adddf3>
 8009f24:	4b43      	ldr	r3, [pc, #268]	; (800a034 <__kernel_tan+0x31c>)
 8009f26:	429f      	cmp	r7, r3
 8009f28:	4604      	mov	r4, r0
 8009f2a:	460d      	mov	r5, r1
 8009f2c:	f340 8084 	ble.w	800a038 <__kernel_tan+0x320>
 8009f30:	4630      	mov	r0, r6
 8009f32:	f7f6 faf7 	bl	8000524 <__aeabi_i2d>
 8009f36:	4622      	mov	r2, r4
 8009f38:	4680      	mov	r8, r0
 8009f3a:	4689      	mov	r9, r1
 8009f3c:	462b      	mov	r3, r5
 8009f3e:	4620      	mov	r0, r4
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7f6 fb55 	bl	80005f0 <__aeabi_dmul>
 8009f46:	4642      	mov	r2, r8
 8009f48:	4606      	mov	r6, r0
 8009f4a:	460f      	mov	r7, r1
 8009f4c:	464b      	mov	r3, r9
 8009f4e:	4620      	mov	r0, r4
 8009f50:	4629      	mov	r1, r5
 8009f52:	f7f6 f99b 	bl	800028c <__adddf3>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	f7f6 fc71 	bl	8000844 <__aeabi_ddiv>
 8009f62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f66:	f7f6 f98f 	bl	8000288 <__aeabi_dsub>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4650      	mov	r0, sl
 8009f70:	4659      	mov	r1, fp
 8009f72:	f7f6 f989 	bl	8000288 <__aeabi_dsub>
 8009f76:	4602      	mov	r2, r0
 8009f78:	460b      	mov	r3, r1
 8009f7a:	f7f6 f987 	bl	800028c <__adddf3>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	4640      	mov	r0, r8
 8009f84:	4649      	mov	r1, r9
 8009f86:	f7f6 f97f 	bl	8000288 <__aeabi_dsub>
 8009f8a:	9b02      	ldr	r3, [sp, #8]
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	1798      	asrs	r0, r3, #30
 8009f90:	f000 0002 	and.w	r0, r0, #2
 8009f94:	f1c0 0001 	rsb	r0, r0, #1
 8009f98:	460d      	mov	r5, r1
 8009f9a:	f7f6 fac3 	bl	8000524 <__aeabi_i2d>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	f7f6 fb23 	bl	80005f0 <__aeabi_dmul>
 8009faa:	e6da      	b.n	8009d62 <__kernel_tan+0x4a>
 8009fac:	f3af 8000 	nop.w
 8009fb0:	54442d18 	.word	0x54442d18
 8009fb4:	3fe921fb 	.word	0x3fe921fb
 8009fb8:	33145c07 	.word	0x33145c07
 8009fbc:	3c81a626 	.word	0x3c81a626
 8009fc0:	74bf7ad4 	.word	0x74bf7ad4
 8009fc4:	3efb2a70 	.word	0x3efb2a70
 8009fc8:	32f0a7e9 	.word	0x32f0a7e9
 8009fcc:	3f12b80f 	.word	0x3f12b80f
 8009fd0:	1a8d1068 	.word	0x1a8d1068
 8009fd4:	3f3026f7 	.word	0x3f3026f7
 8009fd8:	fee08315 	.word	0xfee08315
 8009fdc:	3f57dbc8 	.word	0x3f57dbc8
 8009fe0:	e96e8493 	.word	0xe96e8493
 8009fe4:	3f8226e3 	.word	0x3f8226e3
 8009fe8:	1bb341fe 	.word	0x1bb341fe
 8009fec:	3faba1ba 	.word	0x3faba1ba
 8009ff0:	db605373 	.word	0xdb605373
 8009ff4:	bef375cb 	.word	0xbef375cb
 8009ff8:	a03792a6 	.word	0xa03792a6
 8009ffc:	3f147e88 	.word	0x3f147e88
 800a000:	f2f26501 	.word	0xf2f26501
 800a004:	3f4344d8 	.word	0x3f4344d8
 800a008:	c9560328 	.word	0xc9560328
 800a00c:	3f6d6d22 	.word	0x3f6d6d22
 800a010:	8406d637 	.word	0x8406d637
 800a014:	3f9664f4 	.word	0x3f9664f4
 800a018:	1110fe7a 	.word	0x1110fe7a
 800a01c:	3fc11111 	.word	0x3fc11111
 800a020:	55555563 	.word	0x55555563
 800a024:	3fd55555 	.word	0x3fd55555
 800a028:	3e2fffff 	.word	0x3e2fffff
 800a02c:	3ff00000 	.word	0x3ff00000
 800a030:	bff00000 	.word	0xbff00000
 800a034:	3fe59427 	.word	0x3fe59427
 800a038:	2e01      	cmp	r6, #1
 800a03a:	d036      	beq.n	800a0aa <__kernel_tan+0x392>
 800a03c:	460f      	mov	r7, r1
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	2000      	movs	r0, #0
 800a044:	491a      	ldr	r1, [pc, #104]	; (800a0b0 <__kernel_tan+0x398>)
 800a046:	f7f6 fbfd 	bl	8000844 <__aeabi_ddiv>
 800a04a:	2600      	movs	r6, #0
 800a04c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a050:	4652      	mov	r2, sl
 800a052:	465b      	mov	r3, fp
 800a054:	4630      	mov	r0, r6
 800a056:	4639      	mov	r1, r7
 800a058:	f7f6 f916 	bl	8000288 <__aeabi_dsub>
 800a05c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a068:	f7f6 f90e 	bl	8000288 <__aeabi_dsub>
 800a06c:	4632      	mov	r2, r6
 800a06e:	462b      	mov	r3, r5
 800a070:	f7f6 fabe 	bl	80005f0 <__aeabi_dmul>
 800a074:	4632      	mov	r2, r6
 800a076:	4682      	mov	sl, r0
 800a078:	468b      	mov	fp, r1
 800a07a:	462b      	mov	r3, r5
 800a07c:	4630      	mov	r0, r6
 800a07e:	4639      	mov	r1, r7
 800a080:	f7f6 fab6 	bl	80005f0 <__aeabi_dmul>
 800a084:	2200      	movs	r2, #0
 800a086:	4b0b      	ldr	r3, [pc, #44]	; (800a0b4 <__kernel_tan+0x39c>)
 800a088:	f7f6 f900 	bl	800028c <__adddf3>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4650      	mov	r0, sl
 800a092:	4659      	mov	r1, fp
 800a094:	f7f6 f8fa 	bl	800028c <__adddf3>
 800a098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a09c:	f7f6 faa8 	bl	80005f0 <__aeabi_dmul>
 800a0a0:	4632      	mov	r2, r6
 800a0a2:	462b      	mov	r3, r5
 800a0a4:	f7f6 f8f2 	bl	800028c <__adddf3>
 800a0a8:	e65b      	b.n	8009d62 <__kernel_tan+0x4a>
 800a0aa:	4682      	mov	sl, r0
 800a0ac:	468b      	mov	fp, r1
 800a0ae:	e65a      	b.n	8009d66 <__kernel_tan+0x4e>
 800a0b0:	bff00000 	.word	0xbff00000
 800a0b4:	3ff00000 	.word	0x3ff00000

0800a0b8 <fabs>:
 800a0b8:	ec53 2b10 	vmov	r2, r3, d0
 800a0bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0c0:	ec43 2b10 	vmov	d0, r2, r3
 800a0c4:	4770      	bx	lr
	...

0800a0c8 <floor>:
 800a0c8:	ec51 0b10 	vmov	r0, r1, d0
 800a0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a0d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a0d8:	2e13      	cmp	r6, #19
 800a0da:	ee10 8a10 	vmov	r8, s0
 800a0de:	460c      	mov	r4, r1
 800a0e0:	ee10 5a10 	vmov	r5, s0
 800a0e4:	dc35      	bgt.n	800a152 <floor+0x8a>
 800a0e6:	2e00      	cmp	r6, #0
 800a0e8:	da17      	bge.n	800a11a <floor+0x52>
 800a0ea:	a335      	add	r3, pc, #212	; (adr r3, 800a1c0 <floor+0xf8>)
 800a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f0:	f7f6 f8cc 	bl	800028c <__adddf3>
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	f7f6 fd0a 	bl	8000b10 <__aeabi_dcmpgt>
 800a0fc:	b150      	cbz	r0, 800a114 <floor+0x4c>
 800a0fe:	2c00      	cmp	r4, #0
 800a100:	da5a      	bge.n	800a1b8 <floor+0xf0>
 800a102:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a106:	ea53 0308 	orrs.w	r3, r3, r8
 800a10a:	4b2f      	ldr	r3, [pc, #188]	; (800a1c8 <floor+0x100>)
 800a10c:	f04f 0500 	mov.w	r5, #0
 800a110:	bf18      	it	ne
 800a112:	461c      	movne	r4, r3
 800a114:	4621      	mov	r1, r4
 800a116:	4628      	mov	r0, r5
 800a118:	e025      	b.n	800a166 <floor+0x9e>
 800a11a:	4f2c      	ldr	r7, [pc, #176]	; (800a1cc <floor+0x104>)
 800a11c:	4137      	asrs	r7, r6
 800a11e:	ea01 0307 	and.w	r3, r1, r7
 800a122:	4303      	orrs	r3, r0
 800a124:	d01f      	beq.n	800a166 <floor+0x9e>
 800a126:	a326      	add	r3, pc, #152	; (adr r3, 800a1c0 <floor+0xf8>)
 800a128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12c:	f7f6 f8ae 	bl	800028c <__adddf3>
 800a130:	2200      	movs	r2, #0
 800a132:	2300      	movs	r3, #0
 800a134:	f7f6 fcec 	bl	8000b10 <__aeabi_dcmpgt>
 800a138:	2800      	cmp	r0, #0
 800a13a:	d0eb      	beq.n	800a114 <floor+0x4c>
 800a13c:	2c00      	cmp	r4, #0
 800a13e:	bfbe      	ittt	lt
 800a140:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a144:	fa43 f606 	asrlt.w	r6, r3, r6
 800a148:	19a4      	addlt	r4, r4, r6
 800a14a:	ea24 0407 	bic.w	r4, r4, r7
 800a14e:	2500      	movs	r5, #0
 800a150:	e7e0      	b.n	800a114 <floor+0x4c>
 800a152:	2e33      	cmp	r6, #51	; 0x33
 800a154:	dd0b      	ble.n	800a16e <floor+0xa6>
 800a156:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a15a:	d104      	bne.n	800a166 <floor+0x9e>
 800a15c:	ee10 2a10 	vmov	r2, s0
 800a160:	460b      	mov	r3, r1
 800a162:	f7f6 f893 	bl	800028c <__adddf3>
 800a166:	ec41 0b10 	vmov	d0, r0, r1
 800a16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a16e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a176:	fa23 f707 	lsr.w	r7, r3, r7
 800a17a:	4238      	tst	r0, r7
 800a17c:	d0f3      	beq.n	800a166 <floor+0x9e>
 800a17e:	a310      	add	r3, pc, #64	; (adr r3, 800a1c0 <floor+0xf8>)
 800a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a184:	f7f6 f882 	bl	800028c <__adddf3>
 800a188:	2200      	movs	r2, #0
 800a18a:	2300      	movs	r3, #0
 800a18c:	f7f6 fcc0 	bl	8000b10 <__aeabi_dcmpgt>
 800a190:	2800      	cmp	r0, #0
 800a192:	d0bf      	beq.n	800a114 <floor+0x4c>
 800a194:	2c00      	cmp	r4, #0
 800a196:	da02      	bge.n	800a19e <floor+0xd6>
 800a198:	2e14      	cmp	r6, #20
 800a19a:	d103      	bne.n	800a1a4 <floor+0xdc>
 800a19c:	3401      	adds	r4, #1
 800a19e:	ea25 0507 	bic.w	r5, r5, r7
 800a1a2:	e7b7      	b.n	800a114 <floor+0x4c>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a1aa:	fa03 f606 	lsl.w	r6, r3, r6
 800a1ae:	4435      	add	r5, r6
 800a1b0:	45a8      	cmp	r8, r5
 800a1b2:	bf88      	it	hi
 800a1b4:	18e4      	addhi	r4, r4, r3
 800a1b6:	e7f2      	b.n	800a19e <floor+0xd6>
 800a1b8:	2500      	movs	r5, #0
 800a1ba:	462c      	mov	r4, r5
 800a1bc:	e7aa      	b.n	800a114 <floor+0x4c>
 800a1be:	bf00      	nop
 800a1c0:	8800759c 	.word	0x8800759c
 800a1c4:	7e37e43c 	.word	0x7e37e43c
 800a1c8:	bff00000 	.word	0xbff00000
 800a1cc:	000fffff 	.word	0x000fffff

0800a1d0 <scalbn>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	ec55 4b10 	vmov	r4, r5, d0
 800a1d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a1da:	4606      	mov	r6, r0
 800a1dc:	462b      	mov	r3, r5
 800a1de:	b9b2      	cbnz	r2, 800a20e <scalbn+0x3e>
 800a1e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a1e4:	4323      	orrs	r3, r4
 800a1e6:	d03c      	beq.n	800a262 <scalbn+0x92>
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	4b33      	ldr	r3, [pc, #204]	; (800a2b8 <scalbn+0xe8>)
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	ee10 0a10 	vmov	r0, s0
 800a1f2:	f7f6 f9fd 	bl	80005f0 <__aeabi_dmul>
 800a1f6:	4a31      	ldr	r2, [pc, #196]	; (800a2bc <scalbn+0xec>)
 800a1f8:	4296      	cmp	r6, r2
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	460d      	mov	r5, r1
 800a1fe:	460b      	mov	r3, r1
 800a200:	da13      	bge.n	800a22a <scalbn+0x5a>
 800a202:	a329      	add	r3, pc, #164	; (adr r3, 800a2a8 <scalbn+0xd8>)
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	f7f6 f9f2 	bl	80005f0 <__aeabi_dmul>
 800a20c:	e00a      	b.n	800a224 <scalbn+0x54>
 800a20e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a212:	428a      	cmp	r2, r1
 800a214:	d10c      	bne.n	800a230 <scalbn+0x60>
 800a216:	ee10 2a10 	vmov	r2, s0
 800a21a:	462b      	mov	r3, r5
 800a21c:	4620      	mov	r0, r4
 800a21e:	4629      	mov	r1, r5
 800a220:	f7f6 f834 	bl	800028c <__adddf3>
 800a224:	4604      	mov	r4, r0
 800a226:	460d      	mov	r5, r1
 800a228:	e01b      	b.n	800a262 <scalbn+0x92>
 800a22a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a22e:	3a36      	subs	r2, #54	; 0x36
 800a230:	4432      	add	r2, r6
 800a232:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a236:	428a      	cmp	r2, r1
 800a238:	dd0b      	ble.n	800a252 <scalbn+0x82>
 800a23a:	ec45 4b11 	vmov	d1, r4, r5
 800a23e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800a2b0 <scalbn+0xe0>
 800a242:	f000 f83f 	bl	800a2c4 <copysign>
 800a246:	a31a      	add	r3, pc, #104	; (adr r3, 800a2b0 <scalbn+0xe0>)
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	ec51 0b10 	vmov	r0, r1, d0
 800a250:	e7da      	b.n	800a208 <scalbn+0x38>
 800a252:	2a00      	cmp	r2, #0
 800a254:	dd08      	ble.n	800a268 <scalbn+0x98>
 800a256:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a25a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a25e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a262:	ec45 4b10 	vmov	d0, r4, r5
 800a266:	bd70      	pop	{r4, r5, r6, pc}
 800a268:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a26c:	da0d      	bge.n	800a28a <scalbn+0xba>
 800a26e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a272:	429e      	cmp	r6, r3
 800a274:	ec45 4b11 	vmov	d1, r4, r5
 800a278:	dce1      	bgt.n	800a23e <scalbn+0x6e>
 800a27a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800a2a8 <scalbn+0xd8>
 800a27e:	f000 f821 	bl	800a2c4 <copysign>
 800a282:	a309      	add	r3, pc, #36	; (adr r3, 800a2a8 <scalbn+0xd8>)
 800a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a288:	e7e0      	b.n	800a24c <scalbn+0x7c>
 800a28a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a28e:	3236      	adds	r2, #54	; 0x36
 800a290:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a294:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a298:	4620      	mov	r0, r4
 800a29a:	4629      	mov	r1, r5
 800a29c:	2200      	movs	r2, #0
 800a29e:	4b08      	ldr	r3, [pc, #32]	; (800a2c0 <scalbn+0xf0>)
 800a2a0:	e7b2      	b.n	800a208 <scalbn+0x38>
 800a2a2:	bf00      	nop
 800a2a4:	f3af 8000 	nop.w
 800a2a8:	c2f8f359 	.word	0xc2f8f359
 800a2ac:	01a56e1f 	.word	0x01a56e1f
 800a2b0:	8800759c 	.word	0x8800759c
 800a2b4:	7e37e43c 	.word	0x7e37e43c
 800a2b8:	43500000 	.word	0x43500000
 800a2bc:	ffff3cb0 	.word	0xffff3cb0
 800a2c0:	3c900000 	.word	0x3c900000

0800a2c4 <copysign>:
 800a2c4:	ec53 2b10 	vmov	r2, r3, d0
 800a2c8:	ee11 0a90 	vmov	r0, s3
 800a2cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a2d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a2d4:	ea41 0300 	orr.w	r3, r1, r0
 800a2d8:	ec43 2b10 	vmov	d0, r2, r3
 800a2dc:	4770      	bx	lr
	...

0800a2e0 <_init>:
 800a2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e2:	bf00      	nop
 800a2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2e6:	bc08      	pop	{r3}
 800a2e8:	469e      	mov	lr, r3
 800a2ea:	4770      	bx	lr

0800a2ec <_fini>:
 800a2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ee:	bf00      	nop
 800a2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2f2:	bc08      	pop	{r3}
 800a2f4:	469e      	mov	lr, r3
 800a2f6:	4770      	bx	lr
