
RTOS_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006370  08006370  00016370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006378  08006378  00016378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800637c  0800637c  0001637c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08006380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000015f0  20000010  08006390  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001600  08006390  00021600  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018943  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002fc1  00000000  00000000  00038983  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000014e0  00000000  00000000  0003b948  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000013a8  00000000  00000000  0003ce28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000aa28  00000000  00000000  0003e1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007435  00000000  00000000  00048bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005002d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005740  00000000  00000000  000500ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006250 	.word	0x08006250

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006250 	.word	0x08006250

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetTimerTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetTimerTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000532:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000534:	bf00      	nop
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	20000280 	.word	0x20000280
 8000544:	200002d4 	.word	0x200002d4

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b092      	sub	sp, #72	; 0x48
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fadf 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f857 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f8fd 	bl	8000754 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055a:	f000 f8cb 	bl	80006f4 <MX_USART2_UART_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of periodicTimer */
  osTimerDef(periodicTimer, PTCallback);
 800055e:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <main+0x9c>)
 8000560:	643b      	str	r3, [r7, #64]	; 0x40
 8000562:	2300      	movs	r3, #0
 8000564:	647b      	str	r3, [r7, #68]	; 0x44
  periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);
 8000566:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800056a:	2200      	movs	r2, #0
 800056c:	2101      	movs	r1, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f003 f91e 	bl	80037b0 <osTimerCreate>
 8000574:	4602      	mov	r2, r0
 8000576:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <main+0xa0>)
 8000578:	601a      	str	r2, [r3, #0]

  /* definition and creation of onceTimer */
  osTimerDef(onceTimer, OTCallbaclk);
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <main+0xa4>)
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
 800057e:	2300      	movs	r3, #0
 8000580:	63fb      	str	r3, [r7, #60]	; 0x3c
  onceTimerHandle = osTimerCreate(osTimer(onceTimer), osTimerOnce, NULL);
 8000582:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f003 f910 	bl	80037b0 <osTimerCreate>
 8000590:	4602      	mov	r2, r0
 8000592:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <main+0xa8>)
 8000594:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uartTask */
  osThreadDef(uartTask, UartTask, osPriorityNormal, 0, 128);
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <main+0xac>)
 8000598:	f107 041c 	add.w	r4, r7, #28
 800059c:	461d      	mov	r5, r3
 800059e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 f89d 	bl	80036f0 <osThreadCreate>
 80005b6:	4602      	mov	r2, r0
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <main+0xb0>)
 80005ba:	601a      	str	r2, [r3, #0]

  /* definition and creation of ledTask */
  osThreadDef(ledTask, LedTask, osPriorityIdle, 0, 128);
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <main+0xb4>)
 80005be:	463c      	mov	r4, r7
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 80005ce:	463b      	mov	r3, r7
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 f88c 	bl	80036f0 <osThreadCreate>
 80005d8:	4602      	mov	r2, r0
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <main+0xb8>)
 80005dc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005de:	f003 f880 	bl	80036e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <main+0x9a>
 80005e4:	0800086d 	.word	0x0800086d
 80005e8:	2000156c 	.word	0x2000156c
 80005ec:	08000891 	.word	0x08000891
 80005f0:	200014e0 	.word	0x200014e0
 80005f4:	08006274 	.word	0x08006274
 80005f8:	200014e4 	.word	0x200014e4
 80005fc:	08006298 	.word	0x08006298
 8000600:	200014dc 	.word	0x200014dc

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b0b8      	sub	sp, #224	; 0xe0
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800060e:	2244      	movs	r2, #68	; 0x44
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f005 fe13 	bl	800623e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000628:	463b      	mov	r3, r7
 800062a:	2288      	movs	r2, #136	; 0x88
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 fe05 	bl	800623e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000634:	2310      	movs	r3, #16
 8000636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800063a:	2301      	movs	r3, #1
 800063c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000646:	2360      	movs	r3, #96	; 0x60
 8000648:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000652:	2301      	movs	r3, #1
 8000654:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800065e:	2328      	movs	r3, #40	; 0x28
 8000660:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000664:	2307      	movs	r3, #7
 8000666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fd9c 	bl	80011b8 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000686:	f000 f92d 	bl	80008e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2303      	movs	r3, #3
 8000692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006ac:	2104      	movs	r1, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f968 	bl	8001984 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006ba:	f000 f913 	bl	80008e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006be:	2302      	movs	r3, #2
 80006c0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fb91 	bl	8001df0 <HAL_RCCEx_PeriphCLKConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006d4:	f000 f906 	bl	80008e4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006dc:	f000 fd16 	bl	800110c <HAL_PWREx_ControlVoltageScaling>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006e6:	f000 f8fd 	bl	80008e4 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	37e0      	adds	r7, #224	; 0xe0
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_USART2_UART_Init+0x58>)
 80006fa:	4a15      	ldr	r2, [pc, #84]	; (8000750 <MX_USART2_UART_Init+0x5c>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_USART2_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART2_UART_Init+0x58>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000738:	f002 fadc 	bl	8002cf4 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000742:	f000 f8cf 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200014e8 	.word	0x200014e8
 8000750:	40004400 	.word	0x40004400

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	4a1f      	ldr	r2, [pc, #124]	; (80007e8 <MX_GPIO_Init+0x94>)
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_GPIO_Init+0x94>)
 800076e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_GPIO_Init+0x94>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <MX_GPIO_Init+0x94>)
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_GPIO_Init+0x94>)
 8000786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_GPIO_Init+0x94>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2120      	movs	r1, #32
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f000 fc8d 	bl	80010c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	480c      	ldr	r0, [pc, #48]	; (80007ec <MX_GPIO_Init+0x98>)
 80007bc:	f000 fac0 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007c0:	2320      	movs	r3, #32
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f000 fab1 	bl	8000d40 <HAL_GPIO_Init>

}
 80007de:	bf00      	nop
 80007e0:	3720      	adds	r7, #32
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000
 80007ec:	48000800 	.word	0x48000800

080007f0 <UartTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_UartTask */
void UartTask(void const * argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osTimerStart(periodicTimerHandle, 1000);
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <UartTask+0x2c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000800:	4618      	mov	r0, r3
 8000802:	f003 f809 	bl	8003818 <osTimerStart>
	  /* Infinite loop */
	  for(;;)
	  {
		HAL_UART_Transmit(&huart2, "Sending from UART TASK\n", 23, 100);
 8000806:	2364      	movs	r3, #100	; 0x64
 8000808:	2217      	movs	r2, #23
 800080a:	4905      	ldr	r1, [pc, #20]	; (8000820 <UartTask+0x30>)
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <UartTask+0x34>)
 800080e:	f002 fabf 	bl	8002d90 <HAL_UART_Transmit>
	    osDelay(2000);
 8000812:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000816:	f002 ffb7 	bl	8003788 <osDelay>
		HAL_UART_Transmit(&huart2, "Sending from UART TASK\n", 23, 100);
 800081a:	e7f4      	b.n	8000806 <UartTask+0x16>
 800081c:	2000156c 	.word	0x2000156c
 8000820:	080062b4 	.word	0x080062b4
 8000824:	200014e8 	.word	0x200014e8

08000828 <LedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedTask */
void LedTask(void const * argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTask */
  /* Infinite loop */
	for(;;)
	  {
		  if (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))  // if the button is pressed
 8000830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <LedTask+0x3c>)
 8000836:	f000 fc2b 	bl	8001090 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d10c      	bne.n	800085a <LedTask+0x32>
			{
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);  // set the LED
 8000840:	2201      	movs	r2, #1
 8000842:	2120      	movs	r1, #32
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f000 fc3a 	bl	80010c0 <HAL_GPIO_WritePin>
			  osTimerStart(onceTimerHandle, 4000);
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <LedTask+0x40>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000854:	4618      	mov	r0, r3
 8000856:	f002 ffdf 	bl	8003818 <osTimerStart>
			}
	    osDelay(20);
 800085a:	2014      	movs	r0, #20
 800085c:	f002 ff94 	bl	8003788 <osDelay>
		  if (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))  // if the button is pressed
 8000860:	e7e6      	b.n	8000830 <LedTask+0x8>
 8000862:	bf00      	nop
 8000864:	48000800 	.word	0x48000800
 8000868:	200014e0 	.word	0x200014e0

0800086c <PTCallback>:
  /* USER CODE END LedTask */
}

/* PTCallback function */
void PTCallback(void const * argument)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PTCallback */
	HAL_UART_Transmit(&huart2, "Sending from PERIODIC TIMER\n", 28, 100);
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	221c      	movs	r2, #28
 8000878:	4903      	ldr	r1, [pc, #12]	; (8000888 <PTCallback+0x1c>)
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <PTCallback+0x20>)
 800087c:	f002 fa88 	bl	8002d90 <HAL_UART_Transmit>
  /* USER CODE END PTCallback */
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	080062cc 	.word	0x080062cc
 800088c:	200014e8 	.word	0x200014e8

08000890 <OTCallbaclk>:

/* OTCallbaclk function */
void OTCallbaclk(void const * argument)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OTCallbaclk */
  HAL_UART_Transmit(&huart2, "Sending from ONE_SHOOT TIMER\n", 28, 100);
 8000898:	2364      	movs	r3, #100	; 0x64
 800089a:	221c      	movs	r2, #28
 800089c:	4906      	ldr	r1, [pc, #24]	; (80008b8 <OTCallbaclk+0x28>)
 800089e:	4807      	ldr	r0, [pc, #28]	; (80008bc <OTCallbaclk+0x2c>)
 80008a0:	f002 fa76 	bl	8002d90 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);  // Reset
 80008a4:	2200      	movs	r2, #0
 80008a6:	2120      	movs	r1, #32
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ac:	f000 fc08 	bl	80010c0 <HAL_GPIO_WritePin>
  /* USER CODE END OTCallbaclk */
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	080062ec 	.word	0x080062ec
 80008bc:	200014e8 	.word	0x200014e8

080008c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d2:	f000 f935 	bl	8000b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40012c00 	.word	0x40012c00

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ea:	e7fe      	b.n	80008ea <Error_Handler+0x6>

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <HAL_MspInit+0x4c>)
 80008f4:	4b10      	ldr	r3, [pc, #64]	; (8000938 <HAL_MspInit+0x4c>)
 80008f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6613      	str	r3, [r2, #96]	; 0x60
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_MspInit+0x4c>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <HAL_MspInit+0x4c>)
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_MspInit+0x4c>)
 800090e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6593      	str	r3, [r2, #88]	; 0x58
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_MspInit+0x4c>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	210f      	movs	r1, #15
 8000926:	f06f 0001 	mvn.w	r0, #1
 800092a:	f000 f9df 	bl	8000cec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <HAL_UART_MspInit+0x7c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d128      	bne.n	80009b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <HAL_UART_MspInit+0x80>)
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_UART_MspInit+0x80>)
 8000962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	6593      	str	r3, [r2, #88]	; 0x58
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_UART_MspInit+0x80>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4a11      	ldr	r2, [pc, #68]	; (80009bc <HAL_UART_MspInit+0x80>)
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_UART_MspInit+0x80>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_UART_MspInit+0x80>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800098e:	230c      	movs	r3, #12
 8000990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099e:	2307      	movs	r3, #7
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f000 f9c8 	bl	8000d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40004400 	.word	0x40004400
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	; 0x30
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	2019      	movs	r0, #25
 80009d6:	f000 f989 	bl	8000cec <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009da:	2019      	movs	r0, #25
 80009dc:	f000 f9a2 	bl	8000d24 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009e0:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <HAL_InitTick+0x9c>)
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <HAL_InitTick+0x9c>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009ea:	6613      	str	r3, [r2, #96]	; 0x60
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <HAL_InitTick+0x9c>)
 80009ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f8:	f107 0210 	add.w	r2, r7, #16
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 f962 	bl	8001ccc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a08:	f001 f94a 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 8000a0c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a10:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <HAL_InitTick+0xa0>)
 8000a12:	fba2 2303 	umull	r2, r3, r2, r3
 8000a16:	0c9b      	lsrs	r3, r3, #18
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <HAL_InitTick+0xa8>)
 8000a20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a3e:	f001 fe87 	bl	8002750 <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d104      	bne.n	8000a52 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a48:	4806      	ldr	r0, [pc, #24]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a4a:	f001 fee3 	bl	8002814 <HAL_TIM_Base_Start_IT>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	e000      	b.n	8000a54 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3730      	adds	r7, #48	; 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	431bde83 	.word	0x431bde83
 8000a64:	20001570 	.word	0x20001570
 8000a68:	40012c00 	.word	0x40012c00

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a9e:	f001 ff29 	bl	80028f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20001570 	.word	0x20001570

08000aac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ab0:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <SystemInit+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <SystemInit+0x5c>)
 8000ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <SystemInit+0x60>)
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <SystemInit+0x60>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <SystemInit+0x60>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <SystemInit+0x60>)
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <SystemInit+0x60>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000adc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ae0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <SystemInit+0x60>)
 8000ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ae8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <SystemInit+0x60>)
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <SystemInit+0x60>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <SystemInit+0x60>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	f000 f8db 	bl	8000cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff ff4d 	bl	80009c0 <HAL_InitTick>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	71fb      	strb	r3, [r7, #7]
 8000b30:	e001      	b.n	8000b36 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b32:	f7ff fedb 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	200015bc 	.word	0x200015bc

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200015bc 	.word	0x200015bc

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	4909      	ldr	r1, [pc, #36]	; (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	095b      	lsrs	r3, r3, #5
 8000bfe:	79fa      	ldrb	r2, [r7, #7]
 8000c00:	f002 021f 	and.w	r2, r2, #31
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	490d      	ldr	r1, [pc, #52]	; (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	4909      	ldr	r1, [pc, #36]	; (8000c70 <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	2201      	movs	r2, #1
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	1e5a      	subs	r2, r3, #1
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cba:	2101      	movs	r1, #1
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	1e59      	subs	r1, r3, #1
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff4e 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfe:	f7ff ff63 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	6978      	ldr	r0, [r7, #20]
 8000d0a:	f7ff ffb3 	bl	8000c74 <NVIC_EncodePriority>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff82 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d1c:	bf00      	nop
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff56 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4e:	e17f      	b.n	8001050 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	2101      	movs	r1, #1
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 8171 	beq.w	800104a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d00b      	beq.n	8000d88 <HAL_GPIO_Init+0x48>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d007      	beq.n	8000d88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d7c:	2b11      	cmp	r3, #17
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b12      	cmp	r3, #18
 8000d86:	d130      	bne.n	8000dea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	091b      	lsrs	r3, r3, #4
 8000dd4:	f003 0201 	and.w	r2, r3, #1
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	d118      	bne.n	8000e28 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	08db      	lsrs	r3, r3, #3
 8000e12:	f003 0201 	and.w	r2, r3, #1
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x128>
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b12      	cmp	r3, #18
 8000e66:	d123      	bne.n	8000eb0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3208      	adds	r2, #8
 8000e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	220f      	movs	r2, #15
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	6939      	ldr	r1, [r7, #16]
 8000eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0203 	and.w	r2, r3, #3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f000 80ac 	beq.w	800104a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	4a5e      	ldr	r2, [pc, #376]	; (800106c <HAL_GPIO_Init+0x32c>)
 8000ef4:	4b5d      	ldr	r3, [pc, #372]	; (800106c <HAL_GPIO_Init+0x32c>)
 8000ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6613      	str	r3, [r2, #96]	; 0x60
 8000efe:	4b5b      	ldr	r3, [pc, #364]	; (800106c <HAL_GPIO_Init+0x32c>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f0a:	4a59      	ldr	r2, [pc, #356]	; (8001070 <HAL_GPIO_Init+0x330>)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	220f      	movs	r2, #15
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f34:	d025      	beq.n	8000f82 <HAL_GPIO_Init+0x242>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4e      	ldr	r2, [pc, #312]	; (8001074 <HAL_GPIO_Init+0x334>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d01f      	beq.n	8000f7e <HAL_GPIO_Init+0x23e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4d      	ldr	r2, [pc, #308]	; (8001078 <HAL_GPIO_Init+0x338>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0x23a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4c      	ldr	r2, [pc, #304]	; (800107c <HAL_GPIO_Init+0x33c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x236>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4b      	ldr	r2, [pc, #300]	; (8001080 <HAL_GPIO_Init+0x340>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00d      	beq.n	8000f72 <HAL_GPIO_Init+0x232>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4a      	ldr	r2, [pc, #296]	; (8001084 <HAL_GPIO_Init+0x344>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x22e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a49      	ldr	r2, [pc, #292]	; (8001088 <HAL_GPIO_Init+0x348>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x22a>
 8000f66:	2306      	movs	r3, #6
 8000f68:	e00c      	b.n	8000f84 <HAL_GPIO_Init+0x244>
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	e00a      	b.n	8000f84 <HAL_GPIO_Init+0x244>
 8000f6e:	2305      	movs	r3, #5
 8000f70:	e008      	b.n	8000f84 <HAL_GPIO_Init+0x244>
 8000f72:	2304      	movs	r3, #4
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x244>
 8000f76:	2303      	movs	r3, #3
 8000f78:	e004      	b.n	8000f84 <HAL_GPIO_Init+0x244>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_Init+0x244>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <HAL_GPIO_Init+0x244>
 8000f82:	2300      	movs	r3, #0
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	f002 0203 	and.w	r2, r2, #3
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	4093      	lsls	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f94:	4936      	ldr	r1, [pc, #216]	; (8001070 <HAL_GPIO_Init+0x330>)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fa2:	4b3a      	ldr	r3, [pc, #232]	; (800108c <HAL_GPIO_Init+0x34c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fc6:	4a31      	ldr	r2, [pc, #196]	; (800108c <HAL_GPIO_Init+0x34c>)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <HAL_GPIO_Init+0x34c>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ff0:	4a26      	ldr	r2, [pc, #152]	; (800108c <HAL_GPIO_Init+0x34c>)
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <HAL_GPIO_Init+0x34c>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <HAL_GPIO_Init+0x34c>)
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_GPIO_Init+0x34c>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001044:	4a11      	ldr	r2, [pc, #68]	; (800108c <HAL_GPIO_Init+0x34c>)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa22 f303 	lsr.w	r3, r2, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	f47f ae78 	bne.w	8000d50 <HAL_GPIO_Init+0x10>
  }
}
 8001060:	bf00      	nop
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40021000 	.word	0x40021000
 8001070:	40010000 	.word	0x40010000
 8001074:	48000400 	.word	0x48000400
 8001078:	48000800 	.word	0x48000800
 800107c:	48000c00 	.word	0x48000c00
 8001080:	48001000 	.word	0x48001000
 8001084:	48001400 	.word	0x48001400
 8001088:	48001800 	.word	0x48001800
 800108c:	40010400 	.word	0x40010400

08001090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e001      	b.n	80010b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
 80010cc:	4613      	mov	r3, r2
 80010ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d0:	787b      	ldrb	r3, [r7, #1]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <HAL_PWREx_GetVoltageRange+0x18>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40007000 	.word	0x40007000

0800110c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800111a:	d130      	bne.n	800117e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001128:	d038      	beq.n	800119c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800112a:	4a20      	ldr	r2, [pc, #128]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001134:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001138:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2232      	movs	r2, #50	; 0x32
 8001140:	fb02 f303 	mul.w	r3, r2, r3
 8001144:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	0c9b      	lsrs	r3, r3, #18
 800114c:	3301      	adds	r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001150:	e002      	b.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3b01      	subs	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001164:	d102      	bne.n	800116c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f2      	bne.n	8001152 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001178:	d110      	bne.n	800119c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e00f      	b.n	800119e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800118a:	d007      	beq.n	800119c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40007000 	.word	0x40007000
 80011b0:	20000000 	.word	0x20000000
 80011b4:	431bde83 	.word	0x431bde83

080011b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e3d4      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ca:	4ba1      	ldr	r3, [pc, #644]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d4:	4b9e      	ldr	r3, [pc, #632]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 80e4 	beq.w	80013b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <HAL_RCC_OscConfig+0x4a>
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2b0c      	cmp	r3, #12
 80011f6:	f040 808b 	bne.w	8001310 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	f040 8087 	bne.w	8001310 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001202:	4b93      	ldr	r3, [pc, #588]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_RCC_OscConfig+0x62>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e3ac      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1a      	ldr	r2, [r3, #32]
 800121e:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d004      	beq.n	8001234 <HAL_RCC_OscConfig+0x7c>
 800122a:	4b89      	ldr	r3, [pc, #548]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001232:	e005      	b.n	8001240 <HAL_RCC_OscConfig+0x88>
 8001234:	4b86      	ldr	r3, [pc, #536]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001240:	429a      	cmp	r2, r3
 8001242:	d923      	bls.n	800128c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fd71 	bl	8001d30 <RCC_SetFlashLatencyFromMSIRange>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e38d      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001258:	4a7d      	ldr	r2, [pc, #500]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800125a:	4b7d      	ldr	r3, [pc, #500]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	497a      	ldr	r1, [pc, #488]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001266:	4b7a      	ldr	r3, [pc, #488]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001276:	4976      	ldr	r1, [pc, #472]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001278:	4b75      	ldr	r3, [pc, #468]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	4313      	orrs	r3, r2
 8001288:	604b      	str	r3, [r1, #4]
 800128a:	e025      	b.n	80012d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800128c:	4a70      	ldr	r2, [pc, #448]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800128e:	4b70      	ldr	r3, [pc, #448]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	496d      	ldr	r1, [pc, #436]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800129a:	4b6d      	ldr	r3, [pc, #436]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012aa:	4969      	ldr	r1, [pc, #420]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 80012ac:	4b68      	ldr	r3, [pc, #416]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	4313      	orrs	r3, r2
 80012bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d109      	bne.n	80012d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fd31 	bl	8001d30 <RCC_SetFlashLatencyFromMSIRange>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e34d      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012d8:	f000 fc36 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 80012dc:	4601      	mov	r1, r0
 80012de:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	4a5a      	ldr	r2, [pc, #360]	; (8001454 <HAL_RCC_OscConfig+0x29c>)
 80012ea:	5cd3      	ldrb	r3, [r2, r3]
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	fa21 f303 	lsr.w	r3, r1, r3
 80012f4:	4a58      	ldr	r2, [pc, #352]	; (8001458 <HAL_RCC_OscConfig+0x2a0>)
 80012f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012f8:	4b58      	ldr	r3, [pc, #352]	; (800145c <HAL_RCC_OscConfig+0x2a4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fb5f 	bl	80009c0 <HAL_InitTick>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d052      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	e331      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d032      	beq.n	800137e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001318:	4a4d      	ldr	r2, [pc, #308]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800131a:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001324:	f7ff fc20 	bl	8000b68 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800132c:	f7ff fc1c 	bl	8000b68 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e31a      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800133e:	4b44      	ldr	r3, [pc, #272]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134a:	4a41      	ldr	r2, [pc, #260]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800134c:	4b40      	ldr	r3, [pc, #256]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	493e      	ldr	r1, [pc, #248]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001358:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001368:	4939      	ldr	r1, [pc, #228]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800136a:	4b39      	ldr	r3, [pc, #228]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
 800137c:	e01a      	b.n	80013b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800137e:	4a34      	ldr	r2, [pc, #208]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001380:	4b33      	ldr	r3, [pc, #204]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800138a:	f7ff fbed 	bl	8000b68 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001392:	f7ff fbe9 	bl	8000b68 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e2e7      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f0      	bne.n	8001392 <HAL_RCC_OscConfig+0x1da>
 80013b0:	e000      	b.n	80013b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d074      	beq.n	80014aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d005      	beq.n	80013d2 <HAL_RCC_OscConfig+0x21a>
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b0c      	cmp	r3, #12
 80013ca:	d10e      	bne.n	80013ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d10b      	bne.n	80013ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d064      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2f0>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d160      	bne.n	80014a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e2c4      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x24a>
 80013f4:	4a16      	ldr	r2, [pc, #88]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e01d      	b.n	800143e <HAL_RCC_OscConfig+0x286>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800140a:	d10c      	bne.n	8001426 <HAL_RCC_OscConfig+0x26e>
 800140c:	4a10      	ldr	r2, [pc, #64]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	e00b      	b.n	800143e <HAL_RCC_OscConfig+0x286>
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_RCC_OscConfig+0x298>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d01c      	beq.n	8001480 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fb8f 	bl	8000b68 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144c:	e011      	b.n	8001472 <HAL_RCC_OscConfig+0x2ba>
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	08006328 	.word	0x08006328
 8001458:	20000000 	.word	0x20000000
 800145c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fb82 	bl	8000b68 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e280      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001472:	4baf      	ldr	r3, [pc, #700]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x2a8>
 800147e:	e014      	b.n	80014aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fb72 	bl	8000b68 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fb6e 	bl	8000b68 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e26c      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800149a:	4ba5      	ldr	r3, [pc, #660]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x2d0>
 80014a6:	e000      	b.n	80014aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d060      	beq.n	8001578 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_OscConfig+0x310>
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	d119      	bne.n	80014f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d116      	bne.n	80014f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c8:	4b99      	ldr	r3, [pc, #612]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_OscConfig+0x328>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e249      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e0:	4993      	ldr	r1, [pc, #588]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 80014e2:	4b93      	ldr	r3, [pc, #588]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	061b      	lsls	r3, r3, #24
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f4:	e040      	b.n	8001578 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d023      	beq.n	8001546 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fe:	4a8c      	ldr	r2, [pc, #560]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 8001500:	4b8b      	ldr	r3, [pc, #556]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150a:	f7ff fb2d 	bl	8000b68 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001512:	f7ff fb29 	bl	8000b68 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e227      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001524:	4b82      	ldr	r3, [pc, #520]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	497f      	ldr	r1, [pc, #508]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 8001532:	4b7f      	ldr	r3, [pc, #508]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	061b      	lsls	r3, r3, #24
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
 8001544:	e018      	b.n	8001578 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001546:	4a7a      	ldr	r2, [pc, #488]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 8001548:	4b79      	ldr	r3, [pc, #484]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fb09 	bl	8000b68 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155a:	f7ff fb05 	bl	8000b68 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e203      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800156c:	4b70      	ldr	r3, [pc, #448]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f0      	bne.n	800155a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d03c      	beq.n	80015fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d01c      	beq.n	80015c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158c:	4a68      	ldr	r2, [pc, #416]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 800158e:	4b68      	ldr	r3, [pc, #416]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 8001590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159c:	f7ff fae4 	bl	8000b68 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fae0 	bl	8000b68 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e1de      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015b6:	4b5e      	ldr	r3, [pc, #376]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 80015b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0ef      	beq.n	80015a4 <HAL_RCC_OscConfig+0x3ec>
 80015c4:	e01b      	b.n	80015fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c6:	4a5a      	ldr	r2, [pc, #360]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 80015c8:	4b59      	ldr	r3, [pc, #356]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 80015ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d6:	f7ff fac7 	bl	8000b68 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015de:	f7ff fac3 	bl	8000b68 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e1c1      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f0:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 80015f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1ef      	bne.n	80015de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 80a6 	beq.w	8001758 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001610:	4b47      	ldr	r3, [pc, #284]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10d      	bne.n	8001638 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161c:	4a44      	ldr	r2, [pc, #272]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 800161e:	4b44      	ldr	r3, [pc, #272]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001626:	6593      	str	r3, [r2, #88]	; 0x58
 8001628:	4b41      	ldr	r3, [pc, #260]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001634:	2301      	movs	r3, #1
 8001636:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001638:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <HAL_RCC_OscConfig+0x57c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d118      	bne.n	8001676 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001644:	4a3b      	ldr	r2, [pc, #236]	; (8001734 <HAL_RCC_OscConfig+0x57c>)
 8001646:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <HAL_RCC_OscConfig+0x57c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001650:	f7ff fa8a 	bl	8000b68 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001658:	f7ff fa86 	bl	8000b68 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e184      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166a:	4b32      	ldr	r3, [pc, #200]	; (8001734 <HAL_RCC_OscConfig+0x57c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d108      	bne.n	8001690 <HAL_RCC_OscConfig+0x4d8>
 800167e:	4a2c      	ldr	r2, [pc, #176]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800168e:	e024      	b.n	80016da <HAL_RCC_OscConfig+0x522>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b05      	cmp	r3, #5
 8001696:	d110      	bne.n	80016ba <HAL_RCC_OscConfig+0x502>
 8001698:	4a25      	ldr	r2, [pc, #148]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 800169c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a8:	4a21      	ldr	r2, [pc, #132]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 80016ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b8:	e00f      	b.n	80016da <HAL_RCC_OscConfig+0x522>
 80016ba:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 80016be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ca:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d2:	f023 0304 	bic.w	r3, r3, #4
 80016d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d016      	beq.n	8001710 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e2:	f7ff fa41 	bl	8000b68 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e8:	e00a      	b.n	8001700 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7ff fa3d 	bl	8000b68 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e139      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_RCC_OscConfig+0x578>)
 8001702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0ed      	beq.n	80016ea <HAL_RCC_OscConfig+0x532>
 800170e:	e01a      	b.n	8001746 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff fa2a 	bl	8000b68 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001716:	e00f      	b.n	8001738 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001718:	f7ff fa26 	bl	8000b68 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	; 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d906      	bls.n	8001738 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e122      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001738:	4b90      	ldr	r3, [pc, #576]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1e8      	bne.n	8001718 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001746:	7ffb      	ldrb	r3, [r7, #31]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800174c:	4a8b      	ldr	r2, [pc, #556]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 800174e:	4b8b      	ldr	r3, [pc, #556]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001756:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 8108 	beq.w	8001972 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	2b02      	cmp	r3, #2
 8001768:	f040 80d0 	bne.w	800190c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800176c:	4b83      	ldr	r3, [pc, #524]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0203 	and.w	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	429a      	cmp	r2, r3
 800177e:	d130      	bne.n	80017e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	3b01      	subs	r3, #1
 800178c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d127      	bne.n	80017e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d11f      	bne.n	80017e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017ac:	2a07      	cmp	r2, #7
 80017ae:	bf14      	ite	ne
 80017b0:	2201      	movne	r2, #1
 80017b2:	2200      	moveq	r2, #0
 80017b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d113      	bne.n	80017e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	3b01      	subs	r3, #1
 80017c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d109      	bne.n	80017e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	085b      	lsrs	r3, r3, #1
 80017da:	3b01      	subs	r3, #1
 80017dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d06e      	beq.n	80018c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b0c      	cmp	r3, #12
 80017e6:	d069      	beq.n	80018bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017e8:	4b64      	ldr	r3, [pc, #400]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d105      	bne.n	8001800 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017f4:	4b61      	ldr	r3, [pc, #388]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0b7      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001804:	4a5d      	ldr	r2, [pc, #372]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 8001806:	4b5d      	ldr	r3, [pc, #372]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800180e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001810:	f7ff f9aa 	bl	8000b68 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff f9a6 	bl	8000b68 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0a4      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182a:	4b54      	ldr	r3, [pc, #336]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001836:	4851      	ldr	r0, [pc, #324]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 8001838:	4b50      	ldr	r3, [pc, #320]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	4b50      	ldr	r3, [pc, #320]	; (8001980 <HAL_RCC_OscConfig+0x7c8>)
 800183e:	4013      	ands	r3, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001848:	3a01      	subs	r2, #1
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	4311      	orrs	r1, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001852:	0212      	lsls	r2, r2, #8
 8001854:	4311      	orrs	r1, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800185a:	0852      	lsrs	r2, r2, #1
 800185c:	3a01      	subs	r2, #1
 800185e:	0552      	lsls	r2, r2, #21
 8001860:	4311      	orrs	r1, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001866:	0852      	lsrs	r2, r2, #1
 8001868:	3a01      	subs	r2, #1
 800186a:	0652      	lsls	r2, r2, #25
 800186c:	4311      	orrs	r1, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001872:	0912      	lsrs	r2, r2, #4
 8001874:	0452      	lsls	r2, r2, #17
 8001876:	430a      	orrs	r2, r1
 8001878:	4313      	orrs	r3, r2
 800187a:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800187c:	4a3f      	ldr	r2, [pc, #252]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 800187e:	4b3f      	ldr	r3, [pc, #252]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001886:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001888:	4a3c      	ldr	r2, [pc, #240]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 800188a:	4b3c      	ldr	r3, [pc, #240]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001892:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001894:	f7ff f968 	bl	8000b68 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff f964 	bl	8000b68 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e062      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ae:	4b33      	ldr	r3, [pc, #204]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ba:	e05a      	b.n	8001972 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e059      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c0:	4b2e      	ldr	r3, [pc, #184]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d152      	bne.n	8001972 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018cc:	4a2b      	ldr	r2, [pc, #172]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 80018ce:	4b2b      	ldr	r3, [pc, #172]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d8:	4a28      	ldr	r2, [pc, #160]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 80018da:	4b28      	ldr	r3, [pc, #160]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018e4:	f7ff f940 	bl	8000b68 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f93c 	bl	8000b68 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e03a      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fe:	4b1f      	ldr	r3, [pc, #124]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x734>
 800190a:	e032      	b.n	8001972 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d02d      	beq.n	800196e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001912:	4a1a      	ldr	r2, [pc, #104]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800191c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d105      	bne.n	8001936 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800192a:	4a14      	ldr	r2, [pc, #80]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f023 0303 	bic.w	r3, r3, #3
 8001934:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001936:	4a11      	ldr	r2, [pc, #68]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001944:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001946:	f7ff f90f 	bl	8000b68 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194e:	f7ff f90b 	bl	8000b68 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e009      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_RCC_OscConfig+0x7c4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x796>
 800196c:	e001      	b.n	8001972 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000
 8001980:	f99d808c 	.word	0xf99d808c

08001984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0c8      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001998:	4b66      	ldr	r3, [pc, #408]	; (8001b34 <HAL_RCC_ClockConfig+0x1b0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0207 	and.w	r2, r3, #7
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d210      	bcs.n	80019c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4963      	ldr	r1, [pc, #396]	; (8001b34 <HAL_RCC_ClockConfig+0x1b0>)
 80019a8:	4b62      	ldr	r3, [pc, #392]	; (8001b34 <HAL_RCC_ClockConfig+0x1b0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f023 0207 	bic.w	r2, r3, #7
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b6:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <HAL_RCC_ClockConfig+0x1b0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0207 	and.w	r2, r3, #7
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0b0      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d04c      	beq.n	8001a6e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d107      	bne.n	80019ec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019dc:	4b56      	ldr	r3, [pc, #344]	; (8001b38 <HAL_RCC_ClockConfig+0x1b4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d121      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e09e      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d107      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f4:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_RCC_ClockConfig+0x1b4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d115      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e092      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a0c:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <HAL_RCC_ClockConfig+0x1b4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e086      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1c:	4b46      	ldr	r3, [pc, #280]	; (8001b38 <HAL_RCC_ClockConfig+0x1b4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e07e      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a2c:	4942      	ldr	r1, [pc, #264]	; (8001b38 <HAL_RCC_ClockConfig+0x1b4>)
 8001a2e:	4b42      	ldr	r3, [pc, #264]	; (8001b38 <HAL_RCC_ClockConfig+0x1b4>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 0203 	bic.w	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a3e:	f7ff f893 	bl	8000b68 <HAL_GetTick>
 8001a42:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a46:	f7ff f88f 	bl	8000b68 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e066      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5c:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <HAL_RCC_ClockConfig+0x1b4>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 020c 	and.w	r2, r3, #12
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d1eb      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d008      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7a:	492f      	ldr	r1, [pc, #188]	; (8001b38 <HAL_RCC_ClockConfig+0x1b4>)
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_RCC_ClockConfig+0x1b4>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <HAL_RCC_ClockConfig+0x1b0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0207 	and.w	r2, r3, #7
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d910      	bls.n	8001abc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4926      	ldr	r1, [pc, #152]	; (8001b34 <HAL_RCC_ClockConfig+0x1b0>)
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <HAL_RCC_ClockConfig+0x1b0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 0207 	bic.w	r2, r3, #7
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <HAL_RCC_ClockConfig+0x1b0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0207 	and.w	r2, r3, #7
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e036      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac8:	491b      	ldr	r1, [pc, #108]	; (8001b38 <HAL_RCC_ClockConfig+0x1b4>)
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_RCC_ClockConfig+0x1b4>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ae6:	4914      	ldr	r1, [pc, #80]	; (8001b38 <HAL_RCC_ClockConfig+0x1b4>)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <HAL_RCC_ClockConfig+0x1b4>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001afa:	f000 f825 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8001afe:	4601      	mov	r1, r0
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	fa21 f303 	lsr.w	r3, r1, r3
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe ff4e 	bl	80009c0 <HAL_InitTick>
 8001b24:	4603      	mov	r3, r0
 8001b26:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b28:	7afb      	ldrb	r3, [r7, #11]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40022000 	.word	0x40022000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	08006328 	.word	0x08006328
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000004 	.word	0x20000004

08001b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b60:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x34>
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	d121      	bne.n	8001bba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d11e      	bne.n	8001bba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b7c:	4b33      	ldr	r3, [pc, #204]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	e005      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b98:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ba4:	4a2a      	ldr	r2, [pc, #168]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10d      	bne.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d102      	bne.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	e004      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bcc:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d133      	bne.n	8001c3e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d002      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0xa4>
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCC_GetSysClockFreq+0xaa>
 8001bea:	e005      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bee:	617b      	str	r3, [r7, #20]
      break;
 8001bf0:	e005      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bf4:	617b      	str	r3, [r7, #20]
      break;
 8001bf6:	e002      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	617b      	str	r3, [r7, #20]
      break;
 8001bfc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	3301      	adds	r3, #1
 8001c0a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	fb02 f203 	mul.w	r2, r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	0e5b      	lsrs	r3, r3, #25
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c3e:	69bb      	ldr	r3, [r7, #24]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3724      	adds	r7, #36	; 0x24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08006340 	.word	0x08006340
 8001c54:	00f42400 	.word	0x00f42400
 8001c58:	007a1200 	.word	0x007a1200

08001c5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000000 	.word	0x20000000

08001c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c78:	f7ff fff0 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001c7c:	4601      	mov	r1, r0
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	08006338 	.word	0x08006338

08001ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ca4:	f7ff ffda 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001ca8:	4601      	mov	r1, r0
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0adb      	lsrs	r3, r3, #11
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	08006338 	.word	0x08006338

08001ccc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	220f      	movs	r2, #15
 8001cda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0203 	and.w	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	08db      	lsrs	r3, r3, #3
 8001d06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <HAL_RCC_GetClockConfig+0x60>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0207 	and.w	r2, r3, #7
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	601a      	str	r2, [r3, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40022000 	.word	0x40022000

08001d30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d48:	f7ff f9d2 	bl	80010f0 <HAL_PWREx_GetVoltageRange>
 8001d4c:	6178      	str	r0, [r7, #20]
 8001d4e:	e014      	b.n	8001d7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d68:	f7ff f9c2 	bl	80010f0 <HAL_PWREx_GetVoltageRange>
 8001d6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d80:	d10b      	bne.n	8001d9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b80      	cmp	r3, #128	; 0x80
 8001d86:	d919      	bls.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d8c:	d902      	bls.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d8e:	2302      	movs	r3, #2
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	e013      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d94:	2301      	movs	r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	e010      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b80      	cmp	r3, #128	; 0x80
 8001d9e:	d902      	bls.n	8001da6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001da0:	2303      	movs	r3, #3
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	e00a      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b80      	cmp	r3, #128	; 0x80
 8001daa:	d102      	bne.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dac:	2302      	movs	r3, #2
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	e004      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b70      	cmp	r3, #112	; 0x70
 8001db6:	d101      	bne.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001db8:	2301      	movs	r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dbc:	490b      	ldr	r1, [pc, #44]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 0207 	bic.w	r2, r3, #7
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0207 	and.w	r2, r3, #7
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001df8:	2300      	movs	r3, #0
 8001dfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d03f      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e14:	d01c      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e1a:	d802      	bhi.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00e      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001e20:	e01f      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001e22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e26:	d003      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001e28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e2c:	d01c      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001e2e:	e018      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e30:	4a85      	ldr	r2, [pc, #532]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e32:	4b85      	ldr	r3, [pc, #532]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e3c:	e015      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 fab9 	bl	80023bc <RCCEx_PLLSAI1_Config>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e4e:	e00c      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3320      	adds	r3, #32
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fba0 	bl	800259c <RCCEx_PLLSAI2_Config>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e60:	e003      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	74fb      	strb	r3, [r7, #19]
      break;
 8001e66:	e000      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e6a:	7cfb      	ldrb	r3, [r7, #19]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10b      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e70:	4975      	ldr	r1, [pc, #468]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e72:	4b75      	ldr	r3, [pc, #468]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e80:	4313      	orrs	r3, r2
 8001e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e86:	e001      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e88:	7cfb      	ldrb	r3, [r7, #19]
 8001e8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d03f      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea0:	d01c      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001ea2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea6:	d802      	bhi.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00e      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001eac:	e01f      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001eae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001eb2:	d003      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001eb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001eb8:	d01c      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001eba:	e018      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ebc:	4a62      	ldr	r2, [pc, #392]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ebe:	4b62      	ldr	r3, [pc, #392]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ec8:	e015      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 fa73 	bl	80023bc <RCCEx_PLLSAI1_Config>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eda:	e00c      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3320      	adds	r3, #32
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fb5a 	bl	800259c <RCCEx_PLLSAI2_Config>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eec:	e003      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ef6:	7cfb      	ldrb	r3, [r7, #19]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10b      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001efc:	4952      	ldr	r1, [pc, #328]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001efe:	4b52      	ldr	r3, [pc, #328]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f12:	e001      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f14:	7cfb      	ldrb	r3, [r7, #19]
 8001f16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80a0 	beq.w	8002066 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f2a:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f40:	4a41      	ldr	r2, [pc, #260]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f4c:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f5c:	4a3b      	ldr	r2, [pc, #236]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f68:	f7fe fdfe 	bl	8000b68 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f6e:	e009      	b.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f70:	f7fe fdfa 	bl	8000b68 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d902      	bls.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	74fb      	strb	r3, [r7, #19]
        break;
 8001f82:	e005      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f84:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0ef      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d15c      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f96:	4b2c      	ldr	r3, [pc, #176]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01f      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d019      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fb4:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fc0:	4a21      	ldr	r2, [pc, #132]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fd0:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fe0:	4a19      	ldr	r2, [pc, #100]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d016      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fdb9 	bl	8000b68 <HAL_GetTick>
 8001ff6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff8:	e00b      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7fe fdb5 	bl	8000b68 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	; 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d902      	bls.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	74fb      	strb	r3, [r7, #19]
            break;
 8002010:	e006      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ec      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002020:	7cfb      	ldrb	r3, [r7, #19]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10c      	bne.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002026:	4908      	ldr	r1, [pc, #32]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800203e:	e009      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002040:	7cfb      	ldrb	r3, [r7, #19]
 8002042:	74bb      	strb	r3, [r7, #18]
 8002044:	e006      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002054:	7c7b      	ldrb	r3, [r7, #17]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d105      	bne.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205a:	4a9e      	ldr	r2, [pc, #632]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800205c:	4b9d      	ldr	r3, [pc, #628]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002064:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002072:	4998      	ldr	r1, [pc, #608]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002074:	4b97      	ldr	r3, [pc, #604]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002094:	498f      	ldr	r1, [pc, #572]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002096:	4b8f      	ldr	r3, [pc, #572]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209c:	f023 020c 	bic.w	r2, r3, #12
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020b6:	4987      	ldr	r1, [pc, #540]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020b8:	4b86      	ldr	r3, [pc, #536]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020d8:	497e      	ldr	r1, [pc, #504]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020da:	4b7e      	ldr	r3, [pc, #504]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020fa:	4976      	ldr	r1, [pc, #472]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020fc:	4b75      	ldr	r3, [pc, #468]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800211c:	496d      	ldr	r1, [pc, #436]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800211e:	4b6d      	ldr	r3, [pc, #436]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002124:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800213e:	4965      	ldr	r1, [pc, #404]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002140:	4b64      	ldr	r3, [pc, #400]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002160:	495c      	ldr	r1, [pc, #368]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002162:	4b5c      	ldr	r3, [pc, #368]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002182:	4954      	ldr	r1, [pc, #336]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002184:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021a4:	494b      	ldr	r1, [pc, #300]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021a6:	4b4b      	ldr	r3, [pc, #300]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021c6:	4943      	ldr	r1, [pc, #268]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021c8:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d028      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021e8:	493a      	ldr	r1, [pc, #232]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ea:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002206:	d106      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002208:	4a32      	ldr	r2, [pc, #200]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800220a:	4b32      	ldr	r3, [pc, #200]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002212:	60d3      	str	r3, [r2, #12]
 8002214:	e011      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800221a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800221e:	d10c      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3304      	adds	r3, #4
 8002224:	2101      	movs	r1, #1
 8002226:	4618      	mov	r0, r3
 8002228:	f000 f8c8 	bl	80023bc <RCCEx_PLLSAI1_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002236:	7cfb      	ldrb	r3, [r7, #19]
 8002238:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d028      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002246:	4923      	ldr	r1, [pc, #140]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002248:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002264:	d106      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002266:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002270:	60d3      	str	r3, [r2, #12]
 8002272:	e011      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800227c:	d10c      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3304      	adds	r3, #4
 8002282:	2101      	movs	r1, #1
 8002284:	4618      	mov	r0, r3
 8002286:	f000 f899 	bl	80023bc <RCCEx_PLLSAI1_Config>
 800228a:	4603      	mov	r3, r0
 800228c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002294:	7cfb      	ldrb	r3, [r7, #19]
 8002296:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d02b      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022a4:	490b      	ldr	r1, [pc, #44]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022c2:	d109      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c4:	4a03      	ldr	r2, [pc, #12]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022c6:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ce:	60d3      	str	r3, [r2, #12]
 80022d0:	e014      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022e0:	d10c      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2101      	movs	r1, #1
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 f867 	bl	80023bc <RCCEx_PLLSAI1_Config>
 80022ee:	4603      	mov	r3, r0
 80022f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022f2:	7cfb      	ldrb	r3, [r7, #19]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d02f      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002308:	492b      	ldr	r1, [pc, #172]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800230a:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002326:	d10d      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3304      	adds	r3, #4
 800232c:	2102      	movs	r1, #2
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f844 	bl	80023bc <RCCEx_PLLSAI1_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d014      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800233e:	7cfb      	ldrb	r3, [r7, #19]
 8002340:	74bb      	strb	r3, [r7, #18]
 8002342:	e011      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800234c:	d10c      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3320      	adds	r3, #32
 8002352:	2102      	movs	r1, #2
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f921 	bl	800259c <RCCEx_PLLSAI2_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002374:	4910      	ldr	r1, [pc, #64]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00b      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002396:	4908      	ldr	r1, [pc, #32]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000

080023bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023ca:	4b73      	ldr	r3, [pc, #460]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d018      	beq.n	8002408 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023d6:	4b70      	ldr	r3, [pc, #448]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0203 	and.w	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d10d      	bne.n	8002402 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
       ||
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023ee:	4b6a      	ldr	r3, [pc, #424]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
       ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d044      	beq.n	800248c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	e041      	b.n	800248c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d00c      	beq.n	800242a <RCCEx_PLLSAI1_Config+0x6e>
 8002410:	2b03      	cmp	r3, #3
 8002412:	d013      	beq.n	800243c <RCCEx_PLLSAI1_Config+0x80>
 8002414:	2b01      	cmp	r3, #1
 8002416:	d120      	bne.n	800245a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002418:	4b5f      	ldr	r3, [pc, #380]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11d      	bne.n	8002460 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002428:	e01a      	b.n	8002460 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800242a:	4b5b      	ldr	r3, [pc, #364]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243a:	e013      	b.n	8002464 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800243c:	4b56      	ldr	r3, [pc, #344]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10f      	bne.n	8002468 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002458:	e006      	b.n	8002468 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
      break;
 800245e:	e004      	b.n	800246a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002460:	bf00      	nop
 8002462:	e002      	b.n	800246a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002464:	bf00      	nop
 8002466:	e000      	b.n	800246a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002468:	bf00      	nop
    }

    if(status == HAL_OK)
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10d      	bne.n	800248c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002470:	4849      	ldr	r0, [pc, #292]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002472:	4b49      	ldr	r3, [pc, #292]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	430b      	orrs	r3, r1
 8002488:	4313      	orrs	r3, r2
 800248a:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d17d      	bne.n	800258e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002492:	4a41      	ldr	r2, [pc, #260]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002494:	4b40      	ldr	r3, [pc, #256]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800249c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800249e:	f7fe fb63 	bl	8000b68 <HAL_GetTick>
 80024a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024a4:	e009      	b.n	80024ba <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024a6:	f7fe fb5f 	bl	8000b68 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d902      	bls.n	80024ba <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	73fb      	strb	r3, [r7, #15]
        break;
 80024b8:	e005      	b.n	80024c6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ba:	4b37      	ldr	r3, [pc, #220]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1ef      	bne.n	80024a6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d160      	bne.n	800258e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d111      	bne.n	80024f6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024d2:	4831      	ldr	r0, [pc, #196]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024d4:	4b30      	ldr	r3, [pc, #192]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80024dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6892      	ldr	r2, [r2, #8]
 80024e4:	0211      	lsls	r1, r2, #8
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68d2      	ldr	r2, [r2, #12]
 80024ea:	0912      	lsrs	r2, r2, #4
 80024ec:	0452      	lsls	r2, r2, #17
 80024ee:	430a      	orrs	r2, r1
 80024f0:	4313      	orrs	r3, r2
 80024f2:	6103      	str	r3, [r0, #16]
 80024f4:	e027      	b.n	8002546 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d112      	bne.n	8002522 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024fc:	4826      	ldr	r0, [pc, #152]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024fe:	4b26      	ldr	r3, [pc, #152]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002506:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6892      	ldr	r2, [r2, #8]
 800250e:	0211      	lsls	r1, r2, #8
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6912      	ldr	r2, [r2, #16]
 8002514:	0852      	lsrs	r2, r2, #1
 8002516:	3a01      	subs	r2, #1
 8002518:	0552      	lsls	r2, r2, #21
 800251a:	430a      	orrs	r2, r1
 800251c:	4313      	orrs	r3, r2
 800251e:	6103      	str	r3, [r0, #16]
 8002520:	e011      	b.n	8002546 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002522:	481d      	ldr	r0, [pc, #116]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002524:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800252c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6892      	ldr	r2, [r2, #8]
 8002534:	0211      	lsls	r1, r2, #8
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6952      	ldr	r2, [r2, #20]
 800253a:	0852      	lsrs	r2, r2, #1
 800253c:	3a01      	subs	r2, #1
 800253e:	0652      	lsls	r2, r2, #25
 8002540:	430a      	orrs	r2, r1
 8002542:	4313      	orrs	r3, r2
 8002544:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002546:	4a14      	ldr	r2, [pc, #80]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002550:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7fe fb09 	bl	8000b68 <HAL_GetTick>
 8002556:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002558:	e009      	b.n	800256e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800255a:	f7fe fb05 	bl	8000b68 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d902      	bls.n	800256e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	73fb      	strb	r3, [r7, #15]
          break;
 800256c:	e005      	b.n	800257a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0ef      	beq.n	800255a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d106      	bne.n	800258e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002580:	4905      	ldr	r1, [pc, #20]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002582:	4b05      	ldr	r3, [pc, #20]	; (8002598 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000

0800259c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025aa:	4b68      	ldr	r3, [pc, #416]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d018      	beq.n	80025e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025b6:	4b65      	ldr	r3, [pc, #404]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0203 	and.w	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d10d      	bne.n	80025e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
       ||
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025ce:	4b5f      	ldr	r3, [pc, #380]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
       ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d044      	beq.n	800266c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	e041      	b.n	800266c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d00c      	beq.n	800260a <RCCEx_PLLSAI2_Config+0x6e>
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d013      	beq.n	800261c <RCCEx_PLLSAI2_Config+0x80>
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d120      	bne.n	800263a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025f8:	4b54      	ldr	r3, [pc, #336]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d11d      	bne.n	8002640 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002608:	e01a      	b.n	8002640 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800260a:	4b50      	ldr	r3, [pc, #320]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	2b00      	cmp	r3, #0
 8002614:	d116      	bne.n	8002644 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800261a:	e013      	b.n	8002644 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800261c:	4b4b      	ldr	r3, [pc, #300]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10f      	bne.n	8002648 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002628:	4b48      	ldr	r3, [pc, #288]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d109      	bne.n	8002648 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002638:	e006      	b.n	8002648 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
      break;
 800263e:	e004      	b.n	800264a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002640:	bf00      	nop
 8002642:	e002      	b.n	800264a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002644:	bf00      	nop
 8002646:	e000      	b.n	800264a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002648:	bf00      	nop
    }

    if(status == HAL_OK)
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002650:	483e      	ldr	r0, [pc, #248]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002652:	4b3e      	ldr	r3, [pc, #248]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6819      	ldr	r1, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	430b      	orrs	r3, r1
 8002668:	4313      	orrs	r3, r2
 800266a:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d167      	bne.n	8002742 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002672:	4a36      	ldr	r2, [pc, #216]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002674:	4b35      	ldr	r3, [pc, #212]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800267e:	f7fe fa73 	bl	8000b68 <HAL_GetTick>
 8002682:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002684:	e009      	b.n	800269a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002686:	f7fe fa6f 	bl	8000b68 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d902      	bls.n	800269a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	73fb      	strb	r3, [r7, #15]
        break;
 8002698:	e005      	b.n	80026a6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800269a:	4b2c      	ldr	r3, [pc, #176]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ef      	bne.n	8002686 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d14a      	bne.n	8002742 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d111      	bne.n	80026d6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026b2:	4826      	ldr	r0, [pc, #152]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 80026b4:	4b25      	ldr	r3, [pc, #148]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6892      	ldr	r2, [r2, #8]
 80026c4:	0211      	lsls	r1, r2, #8
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68d2      	ldr	r2, [r2, #12]
 80026ca:	0912      	lsrs	r2, r2, #4
 80026cc:	0452      	lsls	r2, r2, #17
 80026ce:	430a      	orrs	r2, r1
 80026d0:	4313      	orrs	r3, r2
 80026d2:	6143      	str	r3, [r0, #20]
 80026d4:	e011      	b.n	80026fa <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026d6:	481d      	ldr	r0, [pc, #116]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 80026d8:	4b1c      	ldr	r3, [pc, #112]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6892      	ldr	r2, [r2, #8]
 80026e8:	0211      	lsls	r1, r2, #8
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6912      	ldr	r2, [r2, #16]
 80026ee:	0852      	lsrs	r2, r2, #1
 80026f0:	3a01      	subs	r2, #1
 80026f2:	0652      	lsls	r2, r2, #25
 80026f4:	430a      	orrs	r2, r1
 80026f6:	4313      	orrs	r3, r2
 80026f8:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026fa:	4a14      	ldr	r2, [pc, #80]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002704:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002706:	f7fe fa2f 	bl	8000b68 <HAL_GetTick>
 800270a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800270c:	e009      	b.n	8002722 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800270e:	f7fe fa2b 	bl	8000b68 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d902      	bls.n	8002722 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	73fb      	strb	r3, [r7, #15]
          break;
 8002720:	e005      	b.n	800272e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0ef      	beq.n	800270e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d106      	bne.n	8002742 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002734:	4905      	ldr	r1, [pc, #20]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002742:	7bfb      	ldrb	r3, [r7, #15]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e049      	b.n	80027f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f841 	bl	80027fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3304      	adds	r3, #4
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f000 f9f8 	bl	8002b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d001      	beq.n	800282c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e04f      	b.n	80028cc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	68d2      	ldr	r2, [r2, #12]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a23      	ldr	r2, [pc, #140]	; (80028d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01d      	beq.n	800288a <HAL_TIM_Base_Start_IT+0x76>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002856:	d018      	beq.n	800288a <HAL_TIM_Base_Start_IT+0x76>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <HAL_TIM_Base_Start_IT+0xc8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_TIM_Base_Start_IT+0x76>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1e      	ldr	r2, [pc, #120]	; (80028e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00e      	beq.n	800288a <HAL_TIM_Base_Start_IT+0x76>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d009      	beq.n	800288a <HAL_TIM_Base_Start_IT+0x76>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1b      	ldr	r2, [pc, #108]	; (80028e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d004      	beq.n	800288a <HAL_TIM_Base_Start_IT+0x76>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a19      	ldr	r2, [pc, #100]	; (80028ec <HAL_TIM_Base_Start_IT+0xd8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d115      	bne.n	80028b6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002892:	4013      	ands	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b06      	cmp	r3, #6
 800289a:	d015      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0xb4>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a2:	d011      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b4:	e008      	b.n	80028c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e000      	b.n	80028ca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800
 80028e4:	40000c00 	.word	0x40000c00
 80028e8:	40013400 	.word	0x40013400
 80028ec:	40014000 	.word	0x40014000
 80028f0:	00010007 	.word	0x00010007

080028f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b02      	cmp	r3, #2
 8002908:	d122      	bne.n	8002950 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b02      	cmp	r3, #2
 8002916:	d11b      	bne.n	8002950 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0202 	mvn.w	r2, #2
 8002920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f905 	bl	8002b46 <HAL_TIM_IC_CaptureCallback>
 800293c:	e005      	b.n	800294a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8f7 	bl	8002b32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f908 	bl	8002b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b04      	cmp	r3, #4
 800295c:	d122      	bne.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b04      	cmp	r3, #4
 800296a:	d11b      	bne.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0204 	mvn.w	r2, #4
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8db 	bl	8002b46 <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f8cd 	bl	8002b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f8de 	bl	8002b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d122      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d11b      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0208 	mvn.w	r2, #8
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2204      	movs	r2, #4
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8b1 	bl	8002b46 <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8a3 	bl	8002b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f8b4 	bl	8002b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d122      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d11b      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0210 	mvn.w	r2, #16
 8002a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2208      	movs	r2, #8
 8002a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f887 	bl	8002b46 <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f879 	bl	8002b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f88a 	bl	8002b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10e      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0201 	mvn.w	r2, #1
 8002a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fd ff24 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	2b80      	cmp	r3, #128	; 0x80
 8002a84:	d10e      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a90:	2b80      	cmp	r3, #128	; 0x80
 8002a92:	d107      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f914 	bl	8002ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab2:	d10e      	bne.n	8002ad2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abe:	2b80      	cmp	r3, #128	; 0x80
 8002ac0:	d107      	bne.n	8002ad2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f907 	bl	8002ce0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002adc:	2b40      	cmp	r3, #64	; 0x40
 8002ade:	d10e      	bne.n	8002afe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d107      	bne.n	8002afe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f838 	bl	8002b6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d10e      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d107      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0220 	mvn.w	r2, #32
 8002b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f8c7 	bl	8002cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a40      	ldr	r2, [pc, #256]	; (8002c98 <TIM_Base_SetConfig+0x114>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d013      	beq.n	8002bc4 <TIM_Base_SetConfig+0x40>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba2:	d00f      	beq.n	8002bc4 <TIM_Base_SetConfig+0x40>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a3d      	ldr	r2, [pc, #244]	; (8002c9c <TIM_Base_SetConfig+0x118>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00b      	beq.n	8002bc4 <TIM_Base_SetConfig+0x40>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a3c      	ldr	r2, [pc, #240]	; (8002ca0 <TIM_Base_SetConfig+0x11c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d007      	beq.n	8002bc4 <TIM_Base_SetConfig+0x40>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a3b      	ldr	r2, [pc, #236]	; (8002ca4 <TIM_Base_SetConfig+0x120>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d003      	beq.n	8002bc4 <TIM_Base_SetConfig+0x40>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a3a      	ldr	r2, [pc, #232]	; (8002ca8 <TIM_Base_SetConfig+0x124>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d108      	bne.n	8002bd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <TIM_Base_SetConfig+0x114>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d01f      	beq.n	8002c1e <TIM_Base_SetConfig+0x9a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be4:	d01b      	beq.n	8002c1e <TIM_Base_SetConfig+0x9a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a2c      	ldr	r2, [pc, #176]	; (8002c9c <TIM_Base_SetConfig+0x118>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d017      	beq.n	8002c1e <TIM_Base_SetConfig+0x9a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a2b      	ldr	r2, [pc, #172]	; (8002ca0 <TIM_Base_SetConfig+0x11c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <TIM_Base_SetConfig+0x9a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	; (8002ca4 <TIM_Base_SetConfig+0x120>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00f      	beq.n	8002c1e <TIM_Base_SetConfig+0x9a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a29      	ldr	r2, [pc, #164]	; (8002ca8 <TIM_Base_SetConfig+0x124>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00b      	beq.n	8002c1e <TIM_Base_SetConfig+0x9a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a28      	ldr	r2, [pc, #160]	; (8002cac <TIM_Base_SetConfig+0x128>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <TIM_Base_SetConfig+0x9a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a27      	ldr	r2, [pc, #156]	; (8002cb0 <TIM_Base_SetConfig+0x12c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d003      	beq.n	8002c1e <TIM_Base_SetConfig+0x9a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a26      	ldr	r2, [pc, #152]	; (8002cb4 <TIM_Base_SetConfig+0x130>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d108      	bne.n	8002c30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <TIM_Base_SetConfig+0x114>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00f      	beq.n	8002c7c <TIM_Base_SetConfig+0xf8>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <TIM_Base_SetConfig+0x124>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00b      	beq.n	8002c7c <TIM_Base_SetConfig+0xf8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a11      	ldr	r2, [pc, #68]	; (8002cac <TIM_Base_SetConfig+0x128>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d007      	beq.n	8002c7c <TIM_Base_SetConfig+0xf8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a10      	ldr	r2, [pc, #64]	; (8002cb0 <TIM_Base_SetConfig+0x12c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d003      	beq.n	8002c7c <TIM_Base_SetConfig+0xf8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <TIM_Base_SetConfig+0x130>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d103      	bne.n	8002c84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	615a      	str	r2, [r3, #20]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40000800 	.word	0x40000800
 8002ca4:	40000c00 	.word	0x40000c00
 8002ca8:	40013400 	.word	0x40013400
 8002cac:	40014000 	.word	0x40014000
 8002cb0:	40014400 	.word	0x40014400
 8002cb4:	40014800 	.word	0x40014800

08002cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e040      	b.n	8002d88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fd fe10 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f8c0 	bl	8002eb8 <UART_SetConfig>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e022      	b.n	8002d88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fb38 	bl	80033c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	6852      	ldr	r2, [r2, #4]
 8002d5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	6892      	ldr	r2, [r2, #8]
 8002d6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fbbf 	bl	8003504 <UART_CheckIdleState>
 8002d86:	4603      	mov	r3, r0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	f040 8082 	bne.w	8002eae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_UART_Transmit+0x26>
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e07a      	b.n	8002eb0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_UART_Transmit+0x38>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e073      	b.n	8002eb0 <HAL_UART_Transmit+0x120>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2221      	movs	r2, #33	; 0x21
 8002ddc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dde:	f7fd fec3 	bl	8000b68 <HAL_GetTick>
 8002de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	88fa      	ldrh	r2, [r7, #6]
 8002de8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	88fa      	ldrh	r2, [r7, #6]
 8002df0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfc:	d108      	bne.n	8002e10 <HAL_UART_Transmit+0x80>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d104      	bne.n	8002e10 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	e003      	b.n	8002e18 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e20:	e02d      	b.n	8002e7e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fbb2 	bl	8003596 <UART_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e039      	b.n	8002eb0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10b      	bne.n	8002e5a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	8812      	ldrh	r2, [r2, #0]
 8002e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	3302      	adds	r3, #2
 8002e56:	61bb      	str	r3, [r7, #24]
 8002e58:	e008      	b.n	8002e6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	b292      	uxth	r2, r2
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1cb      	bne.n	8002e22 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2140      	movs	r1, #64	; 0x40
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fb7e 	bl	8003596 <UART_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e005      	b.n	8002eb0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb8:	b5b0      	push	{r4, r5, r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6819      	ldr	r1, [r3, #0]
 8002ee6:	4bac      	ldr	r3, [pc, #688]	; (8003198 <UART_SetConfig+0x2e0>)
 8002ee8:	400b      	ands	r3, r1
 8002eea:	69f9      	ldr	r1, [r7, #28]
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	6852      	ldr	r2, [r2, #4]
 8002efa:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68d2      	ldr	r2, [r2, #12]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4aa2      	ldr	r2, [pc, #648]	; (800319c <UART_SetConfig+0x2e4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	6892      	ldr	r2, [r2, #8]
 8002f2a:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a99      	ldr	r2, [pc, #612]	; (80031a0 <UART_SetConfig+0x2e8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d122      	bne.n	8002f84 <UART_SetConfig+0xcc>
 8002f3e:	4b99      	ldr	r3, [pc, #612]	; (80031a4 <UART_SetConfig+0x2ec>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d817      	bhi.n	8002f7c <UART_SetConfig+0xc4>
 8002f4c:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <UART_SetConfig+0x9c>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002f65 	.word	0x08002f65
 8002f58:	08002f71 	.word	0x08002f71
 8002f5c:	08002f6b 	.word	0x08002f6b
 8002f60:	08002f77 	.word	0x08002f77
 8002f64:	2301      	movs	r3, #1
 8002f66:	76fb      	strb	r3, [r7, #27]
 8002f68:	e0e8      	b.n	800313c <UART_SetConfig+0x284>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	76fb      	strb	r3, [r7, #27]
 8002f6e:	e0e5      	b.n	800313c <UART_SetConfig+0x284>
 8002f70:	2304      	movs	r3, #4
 8002f72:	76fb      	strb	r3, [r7, #27]
 8002f74:	e0e2      	b.n	800313c <UART_SetConfig+0x284>
 8002f76:	2308      	movs	r3, #8
 8002f78:	76fb      	strb	r3, [r7, #27]
 8002f7a:	e0df      	b.n	800313c <UART_SetConfig+0x284>
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	76fb      	strb	r3, [r7, #27]
 8002f80:	bf00      	nop
 8002f82:	e0db      	b.n	800313c <UART_SetConfig+0x284>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a87      	ldr	r2, [pc, #540]	; (80031a8 <UART_SetConfig+0x2f0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d134      	bne.n	8002ff8 <UART_SetConfig+0x140>
 8002f8e:	4b85      	ldr	r3, [pc, #532]	; (80031a4 <UART_SetConfig+0x2ec>)
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b0c      	cmp	r3, #12
 8002f9a:	d829      	bhi.n	8002ff0 <UART_SetConfig+0x138>
 8002f9c:	a201      	add	r2, pc, #4	; (adr r2, 8002fa4 <UART_SetConfig+0xec>)
 8002f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa2:	bf00      	nop
 8002fa4:	08002fd9 	.word	0x08002fd9
 8002fa8:	08002ff1 	.word	0x08002ff1
 8002fac:	08002ff1 	.word	0x08002ff1
 8002fb0:	08002ff1 	.word	0x08002ff1
 8002fb4:	08002fe5 	.word	0x08002fe5
 8002fb8:	08002ff1 	.word	0x08002ff1
 8002fbc:	08002ff1 	.word	0x08002ff1
 8002fc0:	08002ff1 	.word	0x08002ff1
 8002fc4:	08002fdf 	.word	0x08002fdf
 8002fc8:	08002ff1 	.word	0x08002ff1
 8002fcc:	08002ff1 	.word	0x08002ff1
 8002fd0:	08002ff1 	.word	0x08002ff1
 8002fd4:	08002feb 	.word	0x08002feb
 8002fd8:	2300      	movs	r3, #0
 8002fda:	76fb      	strb	r3, [r7, #27]
 8002fdc:	e0ae      	b.n	800313c <UART_SetConfig+0x284>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	76fb      	strb	r3, [r7, #27]
 8002fe2:	e0ab      	b.n	800313c <UART_SetConfig+0x284>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	76fb      	strb	r3, [r7, #27]
 8002fe8:	e0a8      	b.n	800313c <UART_SetConfig+0x284>
 8002fea:	2308      	movs	r3, #8
 8002fec:	76fb      	strb	r3, [r7, #27]
 8002fee:	e0a5      	b.n	800313c <UART_SetConfig+0x284>
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	76fb      	strb	r3, [r7, #27]
 8002ff4:	bf00      	nop
 8002ff6:	e0a1      	b.n	800313c <UART_SetConfig+0x284>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a6b      	ldr	r2, [pc, #428]	; (80031ac <UART_SetConfig+0x2f4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d120      	bne.n	8003044 <UART_SetConfig+0x18c>
 8003002:	4b68      	ldr	r3, [pc, #416]	; (80031a4 <UART_SetConfig+0x2ec>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003008:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800300c:	2b10      	cmp	r3, #16
 800300e:	d00f      	beq.n	8003030 <UART_SetConfig+0x178>
 8003010:	2b10      	cmp	r3, #16
 8003012:	d802      	bhi.n	800301a <UART_SetConfig+0x162>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <UART_SetConfig+0x16c>
 8003018:	e010      	b.n	800303c <UART_SetConfig+0x184>
 800301a:	2b20      	cmp	r3, #32
 800301c:	d005      	beq.n	800302a <UART_SetConfig+0x172>
 800301e:	2b30      	cmp	r3, #48	; 0x30
 8003020:	d009      	beq.n	8003036 <UART_SetConfig+0x17e>
 8003022:	e00b      	b.n	800303c <UART_SetConfig+0x184>
 8003024:	2300      	movs	r3, #0
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e088      	b.n	800313c <UART_SetConfig+0x284>
 800302a:	2302      	movs	r3, #2
 800302c:	76fb      	strb	r3, [r7, #27]
 800302e:	e085      	b.n	800313c <UART_SetConfig+0x284>
 8003030:	2304      	movs	r3, #4
 8003032:	76fb      	strb	r3, [r7, #27]
 8003034:	e082      	b.n	800313c <UART_SetConfig+0x284>
 8003036:	2308      	movs	r3, #8
 8003038:	76fb      	strb	r3, [r7, #27]
 800303a:	e07f      	b.n	800313c <UART_SetConfig+0x284>
 800303c:	2310      	movs	r3, #16
 800303e:	76fb      	strb	r3, [r7, #27]
 8003040:	bf00      	nop
 8003042:	e07b      	b.n	800313c <UART_SetConfig+0x284>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a59      	ldr	r2, [pc, #356]	; (80031b0 <UART_SetConfig+0x2f8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d120      	bne.n	8003090 <UART_SetConfig+0x1d8>
 800304e:	4b55      	ldr	r3, [pc, #340]	; (80031a4 <UART_SetConfig+0x2ec>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003054:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d00f      	beq.n	800307c <UART_SetConfig+0x1c4>
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d802      	bhi.n	8003066 <UART_SetConfig+0x1ae>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <UART_SetConfig+0x1b8>
 8003064:	e010      	b.n	8003088 <UART_SetConfig+0x1d0>
 8003066:	2b80      	cmp	r3, #128	; 0x80
 8003068:	d005      	beq.n	8003076 <UART_SetConfig+0x1be>
 800306a:	2bc0      	cmp	r3, #192	; 0xc0
 800306c:	d009      	beq.n	8003082 <UART_SetConfig+0x1ca>
 800306e:	e00b      	b.n	8003088 <UART_SetConfig+0x1d0>
 8003070:	2300      	movs	r3, #0
 8003072:	76fb      	strb	r3, [r7, #27]
 8003074:	e062      	b.n	800313c <UART_SetConfig+0x284>
 8003076:	2302      	movs	r3, #2
 8003078:	76fb      	strb	r3, [r7, #27]
 800307a:	e05f      	b.n	800313c <UART_SetConfig+0x284>
 800307c:	2304      	movs	r3, #4
 800307e:	76fb      	strb	r3, [r7, #27]
 8003080:	e05c      	b.n	800313c <UART_SetConfig+0x284>
 8003082:	2308      	movs	r3, #8
 8003084:	76fb      	strb	r3, [r7, #27]
 8003086:	e059      	b.n	800313c <UART_SetConfig+0x284>
 8003088:	2310      	movs	r3, #16
 800308a:	76fb      	strb	r3, [r7, #27]
 800308c:	bf00      	nop
 800308e:	e055      	b.n	800313c <UART_SetConfig+0x284>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a47      	ldr	r2, [pc, #284]	; (80031b4 <UART_SetConfig+0x2fc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d124      	bne.n	80030e4 <UART_SetConfig+0x22c>
 800309a:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <UART_SetConfig+0x2ec>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a8:	d012      	beq.n	80030d0 <UART_SetConfig+0x218>
 80030aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ae:	d802      	bhi.n	80030b6 <UART_SetConfig+0x1fe>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <UART_SetConfig+0x20c>
 80030b4:	e012      	b.n	80030dc <UART_SetConfig+0x224>
 80030b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ba:	d006      	beq.n	80030ca <UART_SetConfig+0x212>
 80030bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030c0:	d009      	beq.n	80030d6 <UART_SetConfig+0x21e>
 80030c2:	e00b      	b.n	80030dc <UART_SetConfig+0x224>
 80030c4:	2300      	movs	r3, #0
 80030c6:	76fb      	strb	r3, [r7, #27]
 80030c8:	e038      	b.n	800313c <UART_SetConfig+0x284>
 80030ca:	2302      	movs	r3, #2
 80030cc:	76fb      	strb	r3, [r7, #27]
 80030ce:	e035      	b.n	800313c <UART_SetConfig+0x284>
 80030d0:	2304      	movs	r3, #4
 80030d2:	76fb      	strb	r3, [r7, #27]
 80030d4:	e032      	b.n	800313c <UART_SetConfig+0x284>
 80030d6:	2308      	movs	r3, #8
 80030d8:	76fb      	strb	r3, [r7, #27]
 80030da:	e02f      	b.n	800313c <UART_SetConfig+0x284>
 80030dc:	2310      	movs	r3, #16
 80030de:	76fb      	strb	r3, [r7, #27]
 80030e0:	bf00      	nop
 80030e2:	e02b      	b.n	800313c <UART_SetConfig+0x284>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2c      	ldr	r2, [pc, #176]	; (800319c <UART_SetConfig+0x2e4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d124      	bne.n	8003138 <UART_SetConfig+0x280>
 80030ee:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <UART_SetConfig+0x2ec>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fc:	d012      	beq.n	8003124 <UART_SetConfig+0x26c>
 80030fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003102:	d802      	bhi.n	800310a <UART_SetConfig+0x252>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <UART_SetConfig+0x260>
 8003108:	e012      	b.n	8003130 <UART_SetConfig+0x278>
 800310a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310e:	d006      	beq.n	800311e <UART_SetConfig+0x266>
 8003110:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003114:	d009      	beq.n	800312a <UART_SetConfig+0x272>
 8003116:	e00b      	b.n	8003130 <UART_SetConfig+0x278>
 8003118:	2300      	movs	r3, #0
 800311a:	76fb      	strb	r3, [r7, #27]
 800311c:	e00e      	b.n	800313c <UART_SetConfig+0x284>
 800311e:	2302      	movs	r3, #2
 8003120:	76fb      	strb	r3, [r7, #27]
 8003122:	e00b      	b.n	800313c <UART_SetConfig+0x284>
 8003124:	2304      	movs	r3, #4
 8003126:	76fb      	strb	r3, [r7, #27]
 8003128:	e008      	b.n	800313c <UART_SetConfig+0x284>
 800312a:	2308      	movs	r3, #8
 800312c:	76fb      	strb	r3, [r7, #27]
 800312e:	e005      	b.n	800313c <UART_SetConfig+0x284>
 8003130:	2310      	movs	r3, #16
 8003132:	76fb      	strb	r3, [r7, #27]
 8003134:	bf00      	nop
 8003136:	e001      	b.n	800313c <UART_SetConfig+0x284>
 8003138:	2310      	movs	r3, #16
 800313a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a16      	ldr	r2, [pc, #88]	; (800319c <UART_SetConfig+0x2e4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	f040 8080 	bne.w	8003248 <UART_SetConfig+0x390>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003148:	7efb      	ldrb	r3, [r7, #27]
 800314a:	2b08      	cmp	r3, #8
 800314c:	d836      	bhi.n	80031bc <UART_SetConfig+0x304>
 800314e:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <UART_SetConfig+0x29c>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	08003179 	.word	0x08003179
 8003158:	080031bd 	.word	0x080031bd
 800315c:	08003181 	.word	0x08003181
 8003160:	080031bd 	.word	0x080031bd
 8003164:	08003187 	.word	0x08003187
 8003168:	080031bd 	.word	0x080031bd
 800316c:	080031bd 	.word	0x080031bd
 8003170:	080031bd 	.word	0x080031bd
 8003174:	0800318f 	.word	0x0800318f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003178:	f7fe fd7c 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 800317c:	6178      	str	r0, [r7, #20]
        break;
 800317e:	e022      	b.n	80031c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003180:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <UART_SetConfig+0x300>)
 8003182:	617b      	str	r3, [r7, #20]
        break;
 8003184:	e01f      	b.n	80031c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003186:	f7fe fcdf 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 800318a:	6178      	str	r0, [r7, #20]
        break;
 800318c:	e01b      	b.n	80031c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800318e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003192:	617b      	str	r3, [r7, #20]
        break;
 8003194:	e017      	b.n	80031c6 <UART_SetConfig+0x30e>
 8003196:	bf00      	nop
 8003198:	efff69f3 	.word	0xefff69f3
 800319c:	40008000 	.word	0x40008000
 80031a0:	40013800 	.word	0x40013800
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40004400 	.word	0x40004400
 80031ac:	40004800 	.word	0x40004800
 80031b0:	40004c00 	.word	0x40004c00
 80031b4:	40005000 	.word	0x40005000
 80031b8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	76bb      	strb	r3, [r7, #26]
        break;
 80031c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80eb 	beq.w	80033a4 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	441a      	add	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d805      	bhi.n	80031ea <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d202      	bcs.n	80031f0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	76bb      	strb	r3, [r7, #26]
 80031ee:	e0d9      	b.n	80033a4 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	021d      	lsls	r5, r3, #8
 80031fa:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80031fe:	0214      	lsls	r4, r2, #8
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	461a      	mov	r2, r3
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	18a0      	adds	r0, r4, r2
 800320e:	eb45 0103 	adc.w	r1, r5, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f04f 0400 	mov.w	r4, #0
 800321a:	461a      	mov	r2, r3
 800321c:	4623      	mov	r3, r4
 800321e:	f7fc ffd7 	bl	80001d0 <__aeabi_uldivmod>
 8003222:	4603      	mov	r3, r0
 8003224:	460c      	mov	r4, r1
 8003226:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800322e:	d308      	bcc.n	8003242 <UART_SetConfig+0x38a>
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003236:	d204      	bcs.n	8003242 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	60da      	str	r2, [r3, #12]
 8003240:	e0b0      	b.n	80033a4 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	76bb      	strb	r3, [r7, #26]
 8003246:	e0ad      	b.n	80033a4 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003250:	d15c      	bne.n	800330c <UART_SetConfig+0x454>
  {
    switch (clocksource)
 8003252:	7efb      	ldrb	r3, [r7, #27]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d828      	bhi.n	80032aa <UART_SetConfig+0x3f2>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <UART_SetConfig+0x3a8>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003285 	.word	0x08003285
 8003264:	0800328d 	.word	0x0800328d
 8003268:	08003295 	.word	0x08003295
 800326c:	080032ab 	.word	0x080032ab
 8003270:	0800329b 	.word	0x0800329b
 8003274:	080032ab 	.word	0x080032ab
 8003278:	080032ab 	.word	0x080032ab
 800327c:	080032ab 	.word	0x080032ab
 8003280:	080032a3 	.word	0x080032a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003284:	f7fe fcf6 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 8003288:	6178      	str	r0, [r7, #20]
        break;
 800328a:	e013      	b.n	80032b4 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800328c:	f7fe fd08 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 8003290:	6178      	str	r0, [r7, #20]
        break;
 8003292:	e00f      	b.n	80032b4 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003294:	4b49      	ldr	r3, [pc, #292]	; (80033bc <UART_SetConfig+0x504>)
 8003296:	617b      	str	r3, [r7, #20]
        break;
 8003298:	e00c      	b.n	80032b4 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800329a:	f7fe fc55 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 800329e:	6178      	str	r0, [r7, #20]
        break;
 80032a0:	e008      	b.n	80032b4 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a6:	617b      	str	r3, [r7, #20]
        break;
 80032a8:	e004      	b.n	80032b4 <UART_SetConfig+0x3fc>
      default:
        pclk = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	76bb      	strb	r3, [r7, #26]
        break;
 80032b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d074      	beq.n	80033a4 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	005a      	lsls	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	441a      	add	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	2b0f      	cmp	r3, #15
 80032d6:	d916      	bls.n	8003306 <UART_SetConfig+0x44e>
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032de:	d212      	bcs.n	8003306 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f023 030f 	bic.w	r3, r3, #15
 80032e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	89fb      	ldrh	r3, [r7, #14]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	89fa      	ldrh	r2, [r7, #14]
 8003302:	60da      	str	r2, [r3, #12]
 8003304:	e04e      	b.n	80033a4 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	76bb      	strb	r3, [r7, #26]
 800330a:	e04b      	b.n	80033a4 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800330c:	7efb      	ldrb	r3, [r7, #27]
 800330e:	2b08      	cmp	r3, #8
 8003310:	d827      	bhi.n	8003362 <UART_SetConfig+0x4aa>
 8003312:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <UART_SetConfig+0x460>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	0800333d 	.word	0x0800333d
 800331c:	08003345 	.word	0x08003345
 8003320:	0800334d 	.word	0x0800334d
 8003324:	08003363 	.word	0x08003363
 8003328:	08003353 	.word	0x08003353
 800332c:	08003363 	.word	0x08003363
 8003330:	08003363 	.word	0x08003363
 8003334:	08003363 	.word	0x08003363
 8003338:	0800335b 	.word	0x0800335b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800333c:	f7fe fc9a 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 8003340:	6178      	str	r0, [r7, #20]
        break;
 8003342:	e013      	b.n	800336c <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003344:	f7fe fcac 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 8003348:	6178      	str	r0, [r7, #20]
        break;
 800334a:	e00f      	b.n	800336c <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <UART_SetConfig+0x504>)
 800334e:	617b      	str	r3, [r7, #20]
        break;
 8003350:	e00c      	b.n	800336c <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003352:	f7fe fbf9 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8003356:	6178      	str	r0, [r7, #20]
        break;
 8003358:	e008      	b.n	800336c <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800335a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800335e:	617b      	str	r3, [r7, #20]
        break;
 8003360:	e004      	b.n	800336c <UART_SetConfig+0x4b4>
      default:
        pclk = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	76bb      	strb	r3, [r7, #26]
        break;
 800336a:	bf00      	nop
    }

    if (pclk != 0U)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d018      	beq.n	80033a4 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	085a      	lsrs	r2, r3, #1
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	441a      	add	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	fbb2 f3f3 	udiv	r3, r2, r3
 8003384:	b29b      	uxth	r3, r3
 8003386:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b0f      	cmp	r3, #15
 800338c:	d908      	bls.n	80033a0 <UART_SetConfig+0x4e8>
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d204      	bcs.n	80033a0 <UART_SetConfig+0x4e8>
      {
        huart->Instance->BRR = usartdiv;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	e001      	b.n	80033a4 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bdb0      	pop	{r4, r5, r7, pc}
 80033ba:	bf00      	nop
 80033bc:	00f42400 	.word	0x00f42400

080033c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	6852      	ldr	r2, [r2, #4]
 80033de:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	6852      	ldr	r2, [r2, #4]
 8003400:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	6852      	ldr	r2, [r2, #4]
 8003422:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	6852      	ldr	r2, [r2, #4]
 8003444:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800344c:	430a      	orrs	r2, r1
 800344e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	6892      	ldr	r2, [r2, #8]
 8003466:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800346e:	430a      	orrs	r2, r1
 8003470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	6892      	ldr	r2, [r2, #8]
 8003488:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003490:	430a      	orrs	r2, r1
 8003492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01a      	beq.n	80034d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	6852      	ldr	r2, [r2, #4]
 80034aa:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034be:	d10a      	bne.n	80034d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	6852      	ldr	r2, [r2, #4]
 80034ca:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	6852      	ldr	r2, [r2, #4]
 80034ec:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034f4:	430a      	orrs	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]
  }
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af02      	add	r7, sp, #8
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003514:	f7fd fb28 	bl	8000b68 <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b08      	cmp	r3, #8
 8003526:	d10e      	bne.n	8003546 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f82d 	bl	8003596 <UART_WaitOnFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e023      	b.n	800358e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b04      	cmp	r3, #4
 8003552:	d10e      	bne.n	8003572 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f817 	bl	8003596 <UART_WaitOnFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e00d      	b.n	800358e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a6:	e05e      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ae:	d05a      	beq.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b0:	f7fd fada 	bl	8000b68 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	1ad2      	subs	r2, r2, r3
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d802      	bhi.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d11b      	bne.n	80035fe <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	6892      	ldr	r2, [r2, #8]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e043      	b.n	8003686 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d02c      	beq.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800361a:	d124      	bne.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003624:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003634:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	6892      	ldr	r2, [r2, #8]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e00f      	b.n	8003686 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	401a      	ands	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	429a      	cmp	r2, r3
 8003674:	bf0c      	ite	eq
 8003676:	2301      	moveq	r3, #1
 8003678:	2300      	movne	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	429a      	cmp	r2, r3
 8003682:	d091      	beq.n	80035a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	4603      	mov	r3, r0
 8003696:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800369c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036a0:	2b84      	cmp	r3, #132	; 0x84
 80036a2:	d005      	beq.n	80036b0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80036a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	3303      	adds	r3, #3
 80036ae:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80036b0:	68fb      	ldr	r3, [r7, #12]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036c4:	f3ef 8305 	mrs	r3, IPSR
 80036c8:	607b      	str	r3, [r7, #4]
  return(result);
 80036ca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80036e6:	f001 fc4f 	bl	8004f88 <vTaskStartScheduler>
  
  return osOK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80036f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f2:	b089      	sub	sp, #36	; 0x24
 80036f4:	af04      	add	r7, sp, #16
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d020      	beq.n	8003744 <osThreadCreate+0x54>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d01c      	beq.n	8003744 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685c      	ldr	r4, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681d      	ldr	r5, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691e      	ldr	r6, [r3, #16]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ffb6 	bl	800368e <makeFreeRtosPriority>
 8003722:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800372c:	9202      	str	r2, [sp, #8]
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	9100      	str	r1, [sp, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	4632      	mov	r2, r6
 8003736:	4629      	mov	r1, r5
 8003738:	4620      	mov	r0, r4
 800373a:	f001 fa61 	bl	8004c00 <xTaskCreateStatic>
 800373e:	4603      	mov	r3, r0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	e01c      	b.n	800377e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685c      	ldr	r4, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003750:	b29e      	uxth	r6, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff98 	bl	800368e <makeFreeRtosPriority>
 800375e:	4602      	mov	r2, r0
 8003760:	f107 030c 	add.w	r3, r7, #12
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	9200      	str	r2, [sp, #0]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	4632      	mov	r2, r6
 800376c:	4629      	mov	r1, r5
 800376e:	4620      	mov	r0, r4
 8003770:	f001 faa0 	bl	8004cb4 <xTaskCreate>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d001      	beq.n	800377e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800377e:	68fb      	ldr	r3, [r7, #12]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003788 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <osDelay+0x16>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	e000      	b.n	80037a0 <osDelay+0x18>
 800379e:	2301      	movs	r3, #1
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 fbbd 	bl	8004f20 <vTaskDelay>
  
  return osOK;
 80037a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	460b      	mov	r3, r1
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d013      	beq.n	80037ee <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80037c6:	7afb      	ldrb	r3, [r7, #11]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <osTimerCreate+0x20>
 80037cc:	2101      	movs	r1, #1
 80037ce:	e000      	b.n	80037d2 <osTimerCreate+0x22>
 80037d0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80037da:	9201      	str	r2, [sp, #4]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	460a      	mov	r2, r1
 80037e2:	2101      	movs	r1, #1
 80037e4:	480b      	ldr	r0, [pc, #44]	; (8003814 <osTimerCreate+0x64>)
 80037e6:	f002 f974 	bl	8005ad2 <xTimerCreateStatic>
 80037ea:	4603      	mov	r3, r0
 80037ec:	e00e      	b.n	800380c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80037ee:	7afb      	ldrb	r3, [r7, #11]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <osTimerCreate+0x48>
 80037f4:	2201      	movs	r2, #1
 80037f6:	e000      	b.n	80037fa <osTimerCreate+0x4a>
 80037f8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2101      	movs	r1, #1
 8003804:	4803      	ldr	r0, [pc, #12]	; (8003814 <osTimerCreate+0x64>)
 8003806:	f002 f943 	bl	8005a90 <xTimerCreate>
 800380a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	0800630c 	.word	0x0800630c

08003818 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af02      	add	r7, sp, #8
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <osTimerStart+0x20>
    ticks = 1;
 8003834:	2301      	movs	r3, #1
 8003836:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8003838:	f7ff ff41 	bl	80036be <inHandlerMode>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01b      	beq.n	800387a <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8003842:	f107 020c 	add.w	r2, r7, #12
 8003846:	2300      	movs	r3, #0
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	2109      	movs	r1, #9
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f002 f9b5 	bl	8005bc0 <xTimerGenericCommand>
 8003856:	4603      	mov	r3, r0
 8003858:	2b01      	cmp	r3, #1
 800385a:	d002      	beq.n	8003862 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 800385c:	23ff      	movs	r3, #255	; 0xff
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e018      	b.n	8003894 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d015      	beq.n	8003894 <osTimerStart+0x7c>
 8003868:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <osTimerStart+0x88>)
 800386a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	e00c      	b.n	8003894 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800387a:	2300      	movs	r3, #0
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	2300      	movs	r3, #0
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	2104      	movs	r1, #4
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f002 f99b 	bl	8005bc0 <xTimerGenericCommand>
 800388a:	4603      	mov	r3, r0
 800388c:	2b01      	cmp	r3, #1
 800388e:	d001      	beq.n	8003894 <osTimerStart+0x7c>
      result = osErrorOS;
 8003890:	23ff      	movs	r3, #255	; 0xff
 8003892:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8003894:	697b      	ldr	r3, [r7, #20]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	e000ed04 	.word	0xe000ed04

080038a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f103 0208 	add.w	r2, r3, #8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f103 0208 	add.w	r2, r3, #8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f103 0208 	add.w	r2, r3, #8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003946:	b480      	push	{r7}
 8003948:	b085      	sub	sp, #20
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800395c:	d103      	bne.n	8003966 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e00c      	b.n	8003980 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3308      	adds	r3, #8
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	e002      	b.n	8003974 <vListInsert+0x2e>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	429a      	cmp	r2, r3
 800397e:	d9f6      	bls.n	800396e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	601a      	str	r2, [r3, #0]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6892      	ldr	r2, [r2, #8]
 80039ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6852      	ldr	r2, [r2, #4]
 80039d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d103      	bne.n	80039ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	1e5a      	subs	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3b04      	subs	r3, #4
 8003a1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3b04      	subs	r3, #4
 8003a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f023 0201 	bic.w	r2, r3, #1
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3b04      	subs	r3, #4
 8003a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a3c:	4a0c      	ldr	r2, [pc, #48]	; (8003a70 <pxPortInitialiseStack+0x64>)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3b14      	subs	r3, #20
 8003a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3b04      	subs	r3, #4
 8003a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f06f 0202 	mvn.w	r2, #2
 8003a5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3b20      	subs	r3, #32
 8003a60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a62:	68fb      	ldr	r3, [r7, #12]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	08003a75 	.word	0x08003a75

08003a74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a7e:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <prvTaskExitError+0x50>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a86:	d009      	beq.n	8003a9c <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	e7fe      	b.n	8003a9a <prvTaskExitError+0x26>
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003aae:	bf00      	nop
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0fc      	beq.n	8003ab0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	2000000c 	.word	0x2000000c
	...

08003ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ad0:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <pxCurrentTCBConst2>)
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	6808      	ldr	r0, [r1, #0]
 8003ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ada:	f380 8809 	msr	PSP, r0
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f04f 0000 	mov.w	r0, #0
 8003ae6:	f380 8811 	msr	BASEPRI, r0
 8003aea:	4770      	bx	lr
 8003aec:	f3af 8000 	nop.w

08003af0 <pxCurrentTCBConst2>:
 8003af0:	200012b4 	.word	0x200012b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop

08003af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003af8:	4808      	ldr	r0, [pc, #32]	; (8003b1c <prvPortStartFirstTask+0x24>)
 8003afa:	6800      	ldr	r0, [r0, #0]
 8003afc:	6800      	ldr	r0, [r0, #0]
 8003afe:	f380 8808 	msr	MSP, r0
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f380 8814 	msr	CONTROL, r0
 8003b0a:	b662      	cpsie	i
 8003b0c:	b661      	cpsie	f
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	df00      	svc	0
 8003b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b1a:	bf00      	nop
 8003b1c:	e000ed08 	.word	0xe000ed08

08003b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b26:	4b44      	ldr	r3, [pc, #272]	; (8003c38 <xPortStartScheduler+0x118>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a44      	ldr	r2, [pc, #272]	; (8003c3c <xPortStartScheduler+0x11c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d109      	bne.n	8003b44 <xPortStartScheduler+0x24>
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e7fe      	b.n	8003b42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b44:	4b3c      	ldr	r3, [pc, #240]	; (8003c38 <xPortStartScheduler+0x118>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a3d      	ldr	r2, [pc, #244]	; (8003c40 <xPortStartScheduler+0x120>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d109      	bne.n	8003b62 <xPortStartScheduler+0x42>
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e7fe      	b.n	8003b60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b62:	4b38      	ldr	r3, [pc, #224]	; (8003c44 <xPortStartScheduler+0x124>)
 8003b64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	22ff      	movs	r2, #255	; 0xff
 8003b72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <xPortStartScheduler+0x128>)
 8003b88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b8a:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003b8c:	2207      	movs	r2, #7
 8003b8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b90:	e009      	b.n	8003ba6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003b92:	4b2e      	ldr	r3, [pc, #184]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	4a2c      	ldr	r2, [pc, #176]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003b9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bae:	2b80      	cmp	r3, #128	; 0x80
 8003bb0:	d0ef      	beq.n	8003b92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bb2:	4b26      	ldr	r3, [pc, #152]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1c3 0307 	rsb	r3, r3, #7
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d009      	beq.n	8003bd2 <xPortStartScheduler+0xb2>
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	e7fe      	b.n	8003bd0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bd2:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003bda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003be4:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003be6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003bf0:	4a17      	ldr	r2, [pc, #92]	; (8003c50 <xPortStartScheduler+0x130>)
 8003bf2:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <xPortStartScheduler+0x130>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bfa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003bfc:	4a14      	ldr	r2, [pc, #80]	; (8003c50 <xPortStartScheduler+0x130>)
 8003bfe:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <xPortStartScheduler+0x130>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c08:	f000 f8d6 	bl	8003db8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <xPortStartScheduler+0x134>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c12:	f000 f8f5 	bl	8003e00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c16:	4a10      	ldr	r2, [pc, #64]	; (8003c58 <xPortStartScheduler+0x138>)
 8003c18:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <xPortStartScheduler+0x138>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c22:	f7ff ff69 	bl	8003af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c26:	f001 fb85 	bl	8005334 <vTaskSwitchContext>
	prvTaskExitError();
 8003c2a:	f7ff ff23 	bl	8003a74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	e000ed00 	.word	0xe000ed00
 8003c3c:	410fc271 	.word	0x410fc271
 8003c40:	410fc270 	.word	0x410fc270
 8003c44:	e000e400 	.word	0xe000e400
 8003c48:	200006d4 	.word	0x200006d4
 8003c4c:	200006d8 	.word	0x200006d8
 8003c50:	e000ed20 	.word	0xe000ed20
 8003c54:	2000000c 	.word	0x2000000c
 8003c58:	e000ef34 	.word	0xe000ef34

08003c5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c74:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <vPortEnterCritical+0x54>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	4a0d      	ldr	r2, [pc, #52]	; (8003cb0 <vPortEnterCritical+0x54>)
 8003c7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <vPortEnterCritical+0x54>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d10e      	bne.n	8003ca4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <vPortEnterCritical+0x58>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <vPortEnterCritical+0x48>
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	e7fe      	b.n	8003ca2 <vPortEnterCritical+0x46>
	}
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	2000000c 	.word	0x2000000c
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <vPortExitCritical+0x4c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <vPortExitCritical+0x22>
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	607b      	str	r3, [r7, #4]
 8003cd8:	e7fe      	b.n	8003cd8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003cda:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <vPortExitCritical+0x4c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <vPortExitCritical+0x4c>)
 8003ce2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <vPortExitCritical+0x4c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d104      	bne.n	8003cf6 <vPortExitCritical+0x3e>
 8003cec:	2300      	movs	r3, #0
 8003cee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	2000000c 	.word	0x2000000c
	...

08003d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d10:	f3ef 8009 	mrs	r0, PSP
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <pxCurrentTCBConst>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	f01e 0f10 	tst.w	lr, #16
 8003d20:	bf08      	it	eq
 8003d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2a:	6010      	str	r0, [r2, #0]
 8003d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d34:	f380 8811 	msr	BASEPRI, r0
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f001 faf8 	bl	8005334 <vTaskSwitchContext>
 8003d44:	f04f 0000 	mov.w	r0, #0
 8003d48:	f380 8811 	msr	BASEPRI, r0
 8003d4c:	bc09      	pop	{r0, r3}
 8003d4e:	6819      	ldr	r1, [r3, #0]
 8003d50:	6808      	ldr	r0, [r1, #0]
 8003d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d56:	f01e 0f10 	tst.w	lr, #16
 8003d5a:	bf08      	it	eq
 8003d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d60:	f380 8809 	msr	PSP, r0
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	f3af 8000 	nop.w

08003d70 <pxCurrentTCBConst>:
 8003d70:	200012b4 	.word	0x200012b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop

08003d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d90:	f001 fa18 	bl	80051c4 <xTaskIncrementTick>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <SysTick_Handler+0x3c>)
 8003d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	2300      	movs	r3, #0
 8003da4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	e000ed04 	.word	0xe000ed04

08003db8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <vPortSetupTimerInterrupt+0x34>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <vPortSetupTimerInterrupt+0x38>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dc8:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <vPortSetupTimerInterrupt+0x3c>)
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <vPortSetupTimerInterrupt+0x40>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	490b      	ldr	r1, [pc, #44]	; (8003dfc <vPortSetupTimerInterrupt+0x44>)
 8003dd0:	fba1 1303 	umull	r1, r3, r1, r3
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <vPortSetupTimerInterrupt+0x34>)
 8003ddc:	2207      	movs	r2, #7
 8003dde:	601a      	str	r2, [r3, #0]
}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	e000e010 	.word	0xe000e010
 8003df0:	e000e018 	.word	0xe000e018
 8003df4:	e000e014 	.word	0xe000e014
 8003df8:	20000000 	.word	0x20000000
 8003dfc:	10624dd3 	.word	0x10624dd3

08003e00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e10 <vPortEnableVFP+0x10>
 8003e04:	6801      	ldr	r1, [r0, #0]
 8003e06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e0a:	6001      	str	r1, [r0, #0]
 8003e0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e0e:	bf00      	nop
 8003e10:	e000ed88 	.word	0xe000ed88

08003e14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003e1a:	f3ef 8305 	mrs	r3, IPSR
 8003e1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b0f      	cmp	r3, #15
 8003e24:	d913      	bls.n	8003e4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e26:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <vPortValidateInterruptPriority+0x6c>)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e30:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <vPortValidateInterruptPriority+0x70>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	7afa      	ldrb	r2, [r7, #11]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d209      	bcs.n	8003e4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	e7fe      	b.n	8003e4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <vPortValidateInterruptPriority+0x74>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e56:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <vPortValidateInterruptPriority+0x78>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d909      	bls.n	8003e72 <vPortValidateInterruptPriority+0x5e>
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	e7fe      	b.n	8003e70 <vPortValidateInterruptPriority+0x5c>
	}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	e000e3f0 	.word	0xe000e3f0
 8003e84:	200006d4 	.word	0x200006d4
 8003e88:	e000ed0c 	.word	0xe000ed0c
 8003e8c:	200006d8 	.word	0x200006d8

08003e90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e9c:	f001 f8d8 	bl	8005050 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ea0:	4b59      	ldr	r3, [pc, #356]	; (8004008 <pvPortMalloc+0x178>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ea8:	f000 f91a 	bl	80040e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003eac:	4b57      	ldr	r3, [pc, #348]	; (800400c <pvPortMalloc+0x17c>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f040 8091 	bne.w	8003fdc <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01c      	beq.n	8003efa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d013      	beq.n	8003efa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f023 0307 	bic.w	r3, r3, #7
 8003ed8:	3308      	adds	r3, #8
 8003eda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <pvPortMalloc+0x6a>
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	e7fe      	b.n	8003ef8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d06d      	beq.n	8003fdc <pvPortMalloc+0x14c>
 8003f00:	4b43      	ldr	r3, [pc, #268]	; (8004010 <pvPortMalloc+0x180>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d868      	bhi.n	8003fdc <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f0a:	4b42      	ldr	r3, [pc, #264]	; (8004014 <pvPortMalloc+0x184>)
 8003f0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f0e:	4b41      	ldr	r3, [pc, #260]	; (8004014 <pvPortMalloc+0x184>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f14:	e004      	b.n	8003f20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d203      	bcs.n	8003f32 <pvPortMalloc+0xa2>
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f1      	bne.n	8003f16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f32:	4b35      	ldr	r3, [pc, #212]	; (8004008 <pvPortMalloc+0x178>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d04f      	beq.n	8003fdc <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2208      	movs	r2, #8
 8003f42:	4413      	add	r3, r2
 8003f44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	1ad2      	subs	r2, r2, r3
 8003f56:	2308      	movs	r3, #8
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d91e      	bls.n	8003f9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4413      	add	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d009      	beq.n	8003f84 <pvPortMalloc+0xf4>
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	e7fe      	b.n	8003f82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	1ad2      	subs	r2, r2, r3
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f96:	69b8      	ldr	r0, [r7, #24]
 8003f98:	f000 f904 	bl	80041a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f9c:	4b1c      	ldr	r3, [pc, #112]	; (8004010 <pvPortMalloc+0x180>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	4a1a      	ldr	r2, [pc, #104]	; (8004010 <pvPortMalloc+0x180>)
 8003fa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003faa:	4b19      	ldr	r3, [pc, #100]	; (8004010 <pvPortMalloc+0x180>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <pvPortMalloc+0x188>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d203      	bcs.n	8003fbe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fb6:	4b16      	ldr	r3, [pc, #88]	; (8004010 <pvPortMalloc+0x180>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a17      	ldr	r2, [pc, #92]	; (8004018 <pvPortMalloc+0x188>)
 8003fbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	4b12      	ldr	r3, [pc, #72]	; (800400c <pvPortMalloc+0x17c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003fd2:	4b12      	ldr	r3, [pc, #72]	; (800401c <pvPortMalloc+0x18c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	4a10      	ldr	r2, [pc, #64]	; (800401c <pvPortMalloc+0x18c>)
 8003fda:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fdc:	f001 f846 	bl	800506c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <pvPortMalloc+0x16e>
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e7fe      	b.n	8003ffc <pvPortMalloc+0x16c>
	return pvReturn;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3728      	adds	r7, #40	; 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	2000129c 	.word	0x2000129c
 800400c:	200012b0 	.word	0x200012b0
 8004010:	200012a0 	.word	0x200012a0
 8004014:	20001294 	.word	0x20001294
 8004018:	200012a4 	.word	0x200012a4
 800401c:	200012a8 	.word	0x200012a8

08004020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d04b      	beq.n	80040ca <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004032:	2308      	movs	r3, #8
 8004034:	425b      	negs	r3, r3
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4413      	add	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <vPortFree+0xb4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <vPortFree+0x42>
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	e7fe      	b.n	8004060 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <vPortFree+0x5e>
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	e7fe      	b.n	800407c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <vPortFree+0xb4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01e      	beq.n	80040ca <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d11a      	bne.n	80040ca <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <vPortFree+0xb4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	43db      	mvns	r3, r3
 800409e:	401a      	ands	r2, r3
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80040a4:	f000 ffd4 	bl	8005050 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <vPortFree+0xb8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4413      	add	r3, r2
 80040b2:	4a09      	ldr	r2, [pc, #36]	; (80040d8 <vPortFree+0xb8>)
 80040b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040b6:	6938      	ldr	r0, [r7, #16]
 80040b8:	f000 f874 	bl	80041a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80040bc:	4b07      	ldr	r3, [pc, #28]	; (80040dc <vPortFree+0xbc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3301      	adds	r3, #1
 80040c2:	4a06      	ldr	r2, [pc, #24]	; (80040dc <vPortFree+0xbc>)
 80040c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80040c6:	f000 ffd1 	bl	800506c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040ca:	bf00      	nop
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	200012b0 	.word	0x200012b0
 80040d8:	200012a0 	.word	0x200012a0
 80040dc:	200012ac 	.word	0x200012ac

080040e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80040ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040ec:	4b27      	ldr	r3, [pc, #156]	; (800418c <prvHeapInit+0xac>)
 80040ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00c      	beq.n	8004114 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3307      	adds	r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0307 	bic.w	r3, r3, #7
 8004106:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	4a1f      	ldr	r2, [pc, #124]	; (800418c <prvHeapInit+0xac>)
 8004110:	4413      	add	r3, r2
 8004112:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004118:	4a1d      	ldr	r2, [pc, #116]	; (8004190 <prvHeapInit+0xb0>)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800411e:	4b1c      	ldr	r3, [pc, #112]	; (8004190 <prvHeapInit+0xb0>)
 8004120:	2200      	movs	r2, #0
 8004122:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	4413      	add	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800412c:	2208      	movs	r2, #8
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0307 	bic.w	r3, r3, #7
 800413a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4a15      	ldr	r2, [pc, #84]	; (8004194 <prvHeapInit+0xb4>)
 8004140:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004142:	4b14      	ldr	r3, [pc, #80]	; (8004194 <prvHeapInit+0xb4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2200      	movs	r2, #0
 8004148:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <prvHeapInit+0xb4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	1ad2      	subs	r2, r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <prvHeapInit+0xb4>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <prvHeapInit+0xb8>)
 800416e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4a09      	ldr	r2, [pc, #36]	; (800419c <prvHeapInit+0xbc>)
 8004176:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <prvHeapInit+0xc0>)
 800417a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800417e:	601a      	str	r2, [r3, #0]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	200006dc 	.word	0x200006dc
 8004190:	20001294 	.word	0x20001294
 8004194:	2000129c 	.word	0x2000129c
 8004198:	200012a4 	.word	0x200012a4
 800419c:	200012a0 	.word	0x200012a0
 80041a0:	200012b0 	.word	0x200012b0

080041a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041ac:	4b28      	ldr	r3, [pc, #160]	; (8004250 <prvInsertBlockIntoFreeList+0xac>)
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e002      	b.n	80041b8 <prvInsertBlockIntoFreeList+0x14>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d3f7      	bcc.n	80041b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	441a      	add	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d108      	bne.n	80041e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	441a      	add	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	441a      	add	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d118      	bne.n	800422c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4b15      	ldr	r3, [pc, #84]	; (8004254 <prvInsertBlockIntoFreeList+0xb0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d00d      	beq.n	8004222 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	441a      	add	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e008      	b.n	8004234 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004222:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <prvInsertBlockIntoFreeList+0xb0>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	e003      	b.n	8004234 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d002      	beq.n	8004242 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20001294 	.word	0x20001294
 8004254:	2000129c 	.word	0x2000129c

08004258 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <xQueueGenericReset+0x28>
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	e7fe      	b.n	800427e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004280:	f7ff fcec 	bl	8003c5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428c:	68f9      	ldr	r1, [r7, #12]
 800428e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004290:	fb01 f303 	mul.w	r3, r1, r3
 8004294:	441a      	add	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	3b01      	subs	r3, #1
 80042b2:	68f9      	ldr	r1, [r7, #12]
 80042b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	441a      	add	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	22ff      	movs	r2, #255	; 0xff
 80042c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	22ff      	movs	r2, #255	; 0xff
 80042cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d114      	bne.n	8004300 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01a      	beq.n	8004314 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3310      	adds	r3, #16
 80042e2:	4618      	mov	r0, r3
 80042e4:	f001 f8ce 	bl	8005484 <xTaskRemoveFromEventList>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d012      	beq.n	8004314 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042ee:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <xQueueGenericReset+0xcc>)
 80042f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	e009      	b.n	8004314 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3310      	adds	r3, #16
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff facd 	bl	80038a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3324      	adds	r3, #36	; 0x24
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff fac8 	bl	80038a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004314:	f7ff fcd0 	bl	8003cb8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004318:	2301      	movs	r3, #1
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	e000ed04 	.word	0xe000ed04

08004328 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08e      	sub	sp, #56	; 0x38
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d109      	bne.n	8004350 <xQueueGenericCreateStatic+0x28>
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
 800434e:	e7fe      	b.n	800434e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <xQueueGenericCreateStatic+0x42>
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
 8004368:	e7fe      	b.n	8004368 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <xQueueGenericCreateStatic+0x4e>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <xQueueGenericCreateStatic+0x52>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <xQueueGenericCreateStatic+0x54>
 800437a:	2300      	movs	r3, #0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d109      	bne.n	8004394 <xQueueGenericCreateStatic+0x6c>
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	623b      	str	r3, [r7, #32]
 8004392:	e7fe      	b.n	8004392 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <xQueueGenericCreateStatic+0x78>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <xQueueGenericCreateStatic+0x7c>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <xQueueGenericCreateStatic+0x7e>
 80043a4:	2300      	movs	r3, #0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <xQueueGenericCreateStatic+0x96>
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e7fe      	b.n	80043bc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043be:	2348      	movs	r3, #72	; 0x48
 80043c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b48      	cmp	r3, #72	; 0x48
 80043c6:	d009      	beq.n	80043dc <xQueueGenericCreateStatic+0xb4>
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	e7fe      	b.n	80043da <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00d      	beq.n	8004404 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f805 	bl	800440e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004406:	4618      	mov	r0, r3
 8004408:	3730      	adds	r7, #48	; 0x30
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d103      	bne.n	800442a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	e002      	b.n	8004430 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800443c:	2101      	movs	r1, #1
 800443e:	69b8      	ldr	r0, [r7, #24]
 8004440:	f7ff ff0a 	bl	8004258 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08e      	sub	sp, #56	; 0x38
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800445a:	2300      	movs	r3, #0
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <xQueueGenericSend+0x30>
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
 800447a:	e7fe      	b.n	800447a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <xQueueGenericSend+0x3e>
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <xQueueGenericSend+0x42>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <xQueueGenericSend+0x44>
 800448e:	2300      	movs	r3, #0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <xQueueGenericSend+0x5c>
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
 80044a6:	e7fe      	b.n	80044a6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d103      	bne.n	80044b6 <xQueueGenericSend+0x6a>
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <xQueueGenericSend+0x6e>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <xQueueGenericSend+0x70>
 80044ba:	2300      	movs	r3, #0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d109      	bne.n	80044d4 <xQueueGenericSend+0x88>
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	623b      	str	r3, [r7, #32]
 80044d2:	e7fe      	b.n	80044d2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044d4:	f001 f98c 	bl	80057f0 <xTaskGetSchedulerState>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d102      	bne.n	80044e4 <xQueueGenericSend+0x98>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <xQueueGenericSend+0x9c>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <xQueueGenericSend+0x9e>
 80044e8:	2300      	movs	r3, #0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <xQueueGenericSend+0xb6>
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	e7fe      	b.n	8004500 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004502:	f7ff fbab 	bl	8003c5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <xQueueGenericSend+0xcc>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d129      	bne.n	800456c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800451e:	f000 fa03 	bl	8004928 <prvCopyDataToQueue>
 8004522:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	2b00      	cmp	r3, #0
 800452a:	d010      	beq.n	800454e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	3324      	adds	r3, #36	; 0x24
 8004530:	4618      	mov	r0, r3
 8004532:	f000 ffa7 	bl	8005484 <xTaskRemoveFromEventList>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d013      	beq.n	8004564 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800453c:	4b3f      	ldr	r3, [pc, #252]	; (800463c <xQueueGenericSend+0x1f0>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	e00a      	b.n	8004564 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004554:	4b39      	ldr	r3, [pc, #228]	; (800463c <xQueueGenericSend+0x1f0>)
 8004556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004564:	f7ff fba8 	bl	8003cb8 <vPortExitCritical>
				return pdPASS;
 8004568:	2301      	movs	r3, #1
 800456a:	e063      	b.n	8004634 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d103      	bne.n	800457a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004572:	f7ff fba1 	bl	8003cb8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004576:	2300      	movs	r3, #0
 8004578:	e05c      	b.n	8004634 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800457a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	4618      	mov	r0, r3
 8004586:	f000 ffdf 	bl	8005548 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800458a:	2301      	movs	r3, #1
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800458e:	f7ff fb93 	bl	8003cb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004592:	f000 fd5d 	bl	8005050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004596:	f7ff fb61 	bl	8003c5c <vPortEnterCritical>
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045a0:	b25b      	sxtb	r3, r3
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a6:	d103      	bne.n	80045b0 <xQueueGenericSend+0x164>
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045b6:	b25b      	sxtb	r3, r3
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045bc:	d103      	bne.n	80045c6 <xQueueGenericSend+0x17a>
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045c6:	f7ff fb77 	bl	8003cb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045ca:	1d3a      	adds	r2, r7, #4
 80045cc:	f107 0314 	add.w	r3, r7, #20
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 ffce 	bl	8005574 <xTaskCheckForTimeOut>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d124      	bne.n	8004628 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045e0:	f000 fa9a 	bl	8004b18 <prvIsQueueFull>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d018      	beq.n	800461c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	3310      	adds	r3, #16
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fef8 	bl	80053e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045fa:	f000 fa25 	bl	8004a48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045fe:	f000 fd35 	bl	800506c <xTaskResumeAll>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	f47f af7c 	bne.w	8004502 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800460a:	4b0c      	ldr	r3, [pc, #48]	; (800463c <xQueueGenericSend+0x1f0>)
 800460c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	e772      	b.n	8004502 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800461c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800461e:	f000 fa13 	bl	8004a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004622:	f000 fd23 	bl	800506c <xTaskResumeAll>
 8004626:	e76c      	b.n	8004502 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800462a:	f000 fa0d 	bl	8004a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800462e:	f000 fd1d 	bl	800506c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004632:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004634:	4618      	mov	r0, r3
 8004636:	3738      	adds	r7, #56	; 0x38
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	e000ed04 	.word	0xe000ed04

08004640 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b090      	sub	sp, #64	; 0x40
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	2b00      	cmp	r3, #0
 8004656:	d109      	bne.n	800466c <xQueueGenericSendFromISR+0x2c>
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
 800466a:	e7fe      	b.n	800466a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d103      	bne.n	800467a <xQueueGenericSendFromISR+0x3a>
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <xQueueGenericSendFromISR+0x3e>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <xQueueGenericSendFromISR+0x40>
 800467e:	2300      	movs	r3, #0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <xQueueGenericSendFromISR+0x58>
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
 8004696:	e7fe      	b.n	8004696 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d103      	bne.n	80046a6 <xQueueGenericSendFromISR+0x66>
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <xQueueGenericSendFromISR+0x6a>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <xQueueGenericSendFromISR+0x6c>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <xQueueGenericSendFromISR+0x84>
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	623b      	str	r3, [r7, #32]
 80046c2:	e7fe      	b.n	80046c2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046c4:	f7ff fba6 	bl	8003e14 <vPortValidateInterruptPriority>
	__asm volatile
 80046c8:	f3ef 8211 	mrs	r2, BASEPRI
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	61fa      	str	r2, [r7, #28]
 80046de:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80046e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046e2:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d302      	bcc.n	80046f6 <xQueueGenericSendFromISR+0xb6>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d12f      	bne.n	8004756 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800470c:	f000 f90c 	bl	8004928 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004710:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004718:	d112      	bne.n	8004740 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004724:	3324      	adds	r3, #36	; 0x24
 8004726:	4618      	mov	r0, r3
 8004728:	f000 feac 	bl	8005484 <xTaskRemoveFromEventList>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00e      	beq.n	8004750 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00b      	beq.n	8004750 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	e007      	b.n	8004750 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004740:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004744:	3301      	adds	r3, #1
 8004746:	b2db      	uxtb	r3, r3
 8004748:	b25a      	sxtb	r2, r3
 800474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004750:	2301      	movs	r3, #1
 8004752:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004754:	e001      	b.n	800475a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004756:	2300      	movs	r3, #0
 8004758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004766:	4618      	mov	r0, r3
 8004768:	3740      	adds	r7, #64	; 0x40
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08c      	sub	sp, #48	; 0x30
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800477c:	2300      	movs	r3, #0
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <xQueueReceive+0x2e>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	623b      	str	r3, [r7, #32]
 800479c:	e7fe      	b.n	800479c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d103      	bne.n	80047ac <xQueueReceive+0x3c>
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <xQueueReceive+0x40>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <xQueueReceive+0x42>
 80047b0:	2300      	movs	r3, #0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <xQueueReceive+0x5a>
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	61fb      	str	r3, [r7, #28]
 80047c8:	e7fe      	b.n	80047c8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047ca:	f001 f811 	bl	80057f0 <xTaskGetSchedulerState>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d102      	bne.n	80047da <xQueueReceive+0x6a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <xQueueReceive+0x6e>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <xQueueReceive+0x70>
 80047de:	2300      	movs	r3, #0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <xQueueReceive+0x88>
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	e7fe      	b.n	80047f6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047f8:	f7ff fa30 	bl	8003c5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01f      	beq.n	8004848 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800480c:	f000 f8f6 	bl	80049fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	1e5a      	subs	r2, r3, #1
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00f      	beq.n	8004840 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	3310      	adds	r3, #16
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fe2d 	bl	8005484 <xTaskRemoveFromEventList>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d007      	beq.n	8004840 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004830:	4b3c      	ldr	r3, [pc, #240]	; (8004924 <xQueueReceive+0x1b4>)
 8004832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004840:	f7ff fa3a 	bl	8003cb8 <vPortExitCritical>
				return pdPASS;
 8004844:	2301      	movs	r3, #1
 8004846:	e069      	b.n	800491c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d103      	bne.n	8004856 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800484e:	f7ff fa33 	bl	8003cb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004852:	2300      	movs	r3, #0
 8004854:	e062      	b.n	800491c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800485c:	f107 0310 	add.w	r3, r7, #16
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fe71 	bl	8005548 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004866:	2301      	movs	r3, #1
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800486a:	f7ff fa25 	bl	8003cb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800486e:	f000 fbef 	bl	8005050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004872:	f7ff f9f3 	bl	8003c5c <vPortEnterCritical>
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800487c:	b25b      	sxtb	r3, r3
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004882:	d103      	bne.n	800488c <xQueueReceive+0x11c>
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004892:	b25b      	sxtb	r3, r3
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004898:	d103      	bne.n	80048a2 <xQueueReceive+0x132>
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048a2:	f7ff fa09 	bl	8003cb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048a6:	1d3a      	adds	r2, r7, #4
 80048a8:	f107 0310 	add.w	r3, r7, #16
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fe60 	bl	8005574 <xTaskCheckForTimeOut>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d123      	bne.n	8004902 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048bc:	f000 f916 	bl	8004aec <prvIsQueueEmpty>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d017      	beq.n	80048f6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	3324      	adds	r3, #36	; 0x24
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4611      	mov	r1, r2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fd8a 	bl	80053e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048d6:	f000 f8b7 	bl	8004a48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048da:	f000 fbc7 	bl	800506c <xTaskResumeAll>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d189      	bne.n	80047f8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80048e4:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <xQueueReceive+0x1b4>)
 80048e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	e780      	b.n	80047f8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80048f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048f8:	f000 f8a6 	bl	8004a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048fc:	f000 fbb6 	bl	800506c <xTaskResumeAll>
 8004900:	e77a      	b.n	80047f8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004904:	f000 f8a0 	bl	8004a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004908:	f000 fbb0 	bl	800506c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800490c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800490e:	f000 f8ed 	bl	8004aec <prvIsQueueEmpty>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	f43f af6f 	beq.w	80047f8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800491a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800491c:	4618      	mov	r0, r3
 800491e:	3730      	adds	r7, #48	; 0x30
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	e000ed04 	.word	0xe000ed04

08004928 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10d      	bne.n	8004962 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d14d      	bne.n	80049ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	4618      	mov	r0, r3
 8004954:	f000 ff6a 	bl	800582c <xTaskPriorityDisinherit>
 8004958:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	e043      	b.n	80049ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d119      	bne.n	800499c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6858      	ldr	r0, [r3, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	461a      	mov	r2, r3
 8004972:	68b9      	ldr	r1, [r7, #8]
 8004974:	f001 fc58 	bl	8006228 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	441a      	add	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	429a      	cmp	r2, r3
 8004990:	d32b      	bcc.n	80049ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	e026      	b.n	80049ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68d8      	ldr	r0, [r3, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	461a      	mov	r2, r3
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	f001 fc3e 	bl	8006228 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	425b      	negs	r3, r3
 80049b6:	441a      	add	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d207      	bcs.n	80049d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	425b      	negs	r3, r3
 80049d2:	441a      	add	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d105      	bne.n	80049ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80049f2:	697b      	ldr	r3, [r7, #20]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d018      	beq.n	8004a40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	441a      	add	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d303      	bcc.n	8004a30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68d9      	ldr	r1, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6838      	ldr	r0, [r7, #0]
 8004a3c:	f001 fbf4 	bl	8006228 <memcpy>
	}
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a50:	f7ff f904 	bl	8003c5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a5c:	e011      	b.n	8004a82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d012      	beq.n	8004a8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3324      	adds	r3, #36	; 0x24
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fd0a 	bl	8005484 <xTaskRemoveFromEventList>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a76:	f000 fddd 	bl	8005634 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	dce9      	bgt.n	8004a5e <prvUnlockQueue+0x16>
 8004a8a:	e000      	b.n	8004a8e <prvUnlockQueue+0x46>
					break;
 8004a8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	22ff      	movs	r2, #255	; 0xff
 8004a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a96:	f7ff f90f 	bl	8003cb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a9a:	f7ff f8df 	bl	8003c5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aa4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004aa6:	e011      	b.n	8004acc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d012      	beq.n	8004ad6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3310      	adds	r3, #16
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fce5 	bl	8005484 <xTaskRemoveFromEventList>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ac0:	f000 fdb8 	bl	8005634 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ac4:	7bbb      	ldrb	r3, [r7, #14]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	dce9      	bgt.n	8004aa8 <prvUnlockQueue+0x60>
 8004ad4:	e000      	b.n	8004ad8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ad6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	22ff      	movs	r2, #255	; 0xff
 8004adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ae0:	f7ff f8ea 	bl	8003cb8 <vPortExitCritical>
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004af4:	f7ff f8b2 	bl	8003c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d102      	bne.n	8004b06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b00:	2301      	movs	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e001      	b.n	8004b0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b0a:	f7ff f8d5 	bl	8003cb8 <vPortExitCritical>

	return xReturn;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b20:	f7ff f89c 	bl	8003c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d102      	bne.n	8004b36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b30:	2301      	movs	r3, #1
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e001      	b.n	8004b3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b3a:	f7ff f8bd 	bl	8003cb8 <vPortExitCritical>

	return xReturn;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	e014      	b.n	8004b82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b58:	4a0e      	ldr	r2, [pc, #56]	; (8004b94 <vQueueAddToRegistry+0x4c>)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10b      	bne.n	8004b7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b64:	490b      	ldr	r1, [pc, #44]	; (8004b94 <vQueueAddToRegistry+0x4c>)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <vQueueAddToRegistry+0x4c>)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4413      	add	r3, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b7a:	e005      	b.n	8004b88 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b07      	cmp	r3, #7
 8004b86:	d9e7      	bls.n	8004b58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	200015c0 	.word	0x200015c0

08004b98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ba8:	f7ff f858 	bl	8003c5c <vPortEnterCritical>
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bb2:	b25b      	sxtb	r3, r3
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb8:	d103      	bne.n	8004bc2 <vQueueWaitForMessageRestricted+0x2a>
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bc8:	b25b      	sxtb	r3, r3
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bce:	d103      	bne.n	8004bd8 <vQueueWaitForMessageRestricted+0x40>
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bd8:	f7ff f86e 	bl	8003cb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d106      	bne.n	8004bf2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	3324      	adds	r3, #36	; 0x24
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fc1f 	bl	8005430 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004bf2:	6978      	ldr	r0, [r7, #20]
 8004bf4:	f7ff ff28 	bl	8004a48 <prvUnlockQueue>
	}
 8004bf8:	bf00      	nop
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08e      	sub	sp, #56	; 0x38
 8004c04:	af04      	add	r7, sp, #16
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <xTaskCreateStatic+0x28>
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	623b      	str	r3, [r7, #32]
 8004c26:	e7fe      	b.n	8004c26 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <xTaskCreateStatic+0x42>
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e7fe      	b.n	8004c40 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c42:	2354      	movs	r3, #84	; 0x54
 8004c44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b54      	cmp	r3, #84	; 0x54
 8004c4a:	d009      	beq.n	8004c60 <xTaskCreateStatic+0x60>
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	e7fe      	b.n	8004c5e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01e      	beq.n	8004ca6 <xTaskCreateStatic+0xa6>
 8004c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01b      	beq.n	8004ca6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c80:	2300      	movs	r3, #0
 8004c82:	9303      	str	r3, [sp, #12]
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	9302      	str	r3, [sp, #8]
 8004c88:	f107 0314 	add.w	r3, r7, #20
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 f850 	bl	8004d3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ca0:	f000 f8d4 	bl	8004e4c <prvAddNewTaskToReadyList>
 8004ca4:	e001      	b.n	8004caa <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004caa:	697b      	ldr	r3, [r7, #20]
	}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3728      	adds	r7, #40	; 0x28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08c      	sub	sp, #48	; 0x30
 8004cb8:	af04      	add	r7, sp, #16
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff f8e1 	bl	8003e90 <pvPortMalloc>
 8004cce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00e      	beq.n	8004cf4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cd6:	2054      	movs	r0, #84	; 0x54
 8004cd8:	f7ff f8da 	bl	8003e90 <pvPortMalloc>
 8004cdc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8004cea:	e005      	b.n	8004cf8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cec:	6978      	ldr	r0, [r7, #20]
 8004cee:	f7ff f997 	bl	8004020 <vPortFree>
 8004cf2:	e001      	b.n	8004cf8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d017      	beq.n	8004d2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d06:	88fa      	ldrh	r2, [r7, #6]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9303      	str	r3, [sp, #12]
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	9302      	str	r3, [sp, #8]
 8004d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d12:	9301      	str	r3, [sp, #4]
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f80e 	bl	8004d3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d22:	69f8      	ldr	r0, [r7, #28]
 8004d24:	f000 f892 	bl	8004e4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	61bb      	str	r3, [r7, #24]
 8004d2c:	e002      	b.n	8004d34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d34:	69bb      	ldr	r3, [r7, #24]
	}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b088      	sub	sp, #32
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
 8004d4a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d56:	3b01      	subs	r3, #1
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	f023 0307 	bic.w	r3, r3, #7
 8004d64:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d009      	beq.n	8004d84 <prvInitialiseNewTask+0x46>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e7fe      	b.n	8004d82 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01f      	beq.n	8004dca <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	e012      	b.n	8004db6 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	7819      	ldrb	r1, [r3, #0]
 8004d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	3334      	adds	r3, #52	; 0x34
 8004da0:	460a      	mov	r2, r1
 8004da2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	4413      	add	r3, r2
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d006      	beq.n	8004dbe <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	3301      	adds	r3, #1
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	2b0f      	cmp	r3, #15
 8004dba:	d9e9      	bls.n	8004d90 <prvInitialiseNewTask+0x52>
 8004dbc:	e000      	b.n	8004dc0 <prvInitialiseNewTask+0x82>
			{
				break;
 8004dbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dc8:	e003      	b.n	8004dd2 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	2b06      	cmp	r3, #6
 8004dd6:	d901      	bls.n	8004ddc <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004dd8:	2306      	movs	r3, #6
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	2200      	movs	r2, #0
 8004dec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	3304      	adds	r3, #4
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fe fd76 	bl	80038e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	3318      	adds	r3, #24
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe fd71 	bl	80038e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	f1c3 0207 	rsb	r2, r3, #7
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	69b8      	ldr	r0, [r7, #24]
 8004e2c:	f7fe fdee 	bl	8003a0c <pxPortInitialiseStack>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e42:	bf00      	nop
 8004e44:	3720      	adds	r7, #32
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e54:	f7fe ff02 	bl	8003c5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e58:	4b2a      	ldr	r3, [pc, #168]	; (8004f04 <prvAddNewTaskToReadyList+0xb8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	4a29      	ldr	r2, [pc, #164]	; (8004f04 <prvAddNewTaskToReadyList+0xb8>)
 8004e60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e62:	4b29      	ldr	r3, [pc, #164]	; (8004f08 <prvAddNewTaskToReadyList+0xbc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e6a:	4a27      	ldr	r2, [pc, #156]	; (8004f08 <prvAddNewTaskToReadyList+0xbc>)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e70:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <prvAddNewTaskToReadyList+0xb8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d110      	bne.n	8004e9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e78:	f000 fc00 	bl	800567c <prvInitialiseTaskLists>
 8004e7c:	e00d      	b.n	8004e9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e7e:	4b23      	ldr	r3, [pc, #140]	; (8004f0c <prvAddNewTaskToReadyList+0xc0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e86:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <prvAddNewTaskToReadyList+0xbc>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d802      	bhi.n	8004e9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e94:	4a1c      	ldr	r2, [pc, #112]	; (8004f08 <prvAddNewTaskToReadyList+0xbc>)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e9a:	4b1d      	ldr	r3, [pc, #116]	; (8004f10 <prvAddNewTaskToReadyList+0xc4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	4a1b      	ldr	r2, [pc, #108]	; (8004f10 <prvAddNewTaskToReadyList+0xc4>)
 8004ea2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <prvAddNewTaskToReadyList+0xc8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	4a18      	ldr	r2, [pc, #96]	; (8004f14 <prvAddNewTaskToReadyList+0xc8>)
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4a15      	ldr	r2, [pc, #84]	; (8004f18 <prvAddNewTaskToReadyList+0xcc>)
 8004ec4:	441a      	add	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f7fe fd16 	bl	80038fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ed2:	f7fe fef1 	bl	8003cb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <prvAddNewTaskToReadyList+0xc0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00e      	beq.n	8004efc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <prvAddNewTaskToReadyList+0xbc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d207      	bcs.n	8004efc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <prvAddNewTaskToReadyList+0xd0>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	200013b4 	.word	0x200013b4
 8004f08:	200012b4 	.word	0x200012b4
 8004f0c:	200013c0 	.word	0x200013c0
 8004f10:	200013d0 	.word	0x200013d0
 8004f14:	200013bc 	.word	0x200013bc
 8004f18:	200012b8 	.word	0x200012b8
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d016      	beq.n	8004f60 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f32:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <vTaskDelay+0x60>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d009      	beq.n	8004f4e <vTaskDelay+0x2e>
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	60bb      	str	r3, [r7, #8]
 8004f4c:	e7fe      	b.n	8004f4c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004f4e:	f000 f87f 	bl	8005050 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f52:	2100      	movs	r1, #0
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fced 	bl	8005934 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f5a:	f000 f887 	bl	800506c <xTaskResumeAll>
 8004f5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d107      	bne.n	8004f76 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004f66:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <vTaskDelay+0x64>)
 8004f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f76:	bf00      	nop
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	200013dc 	.word	0x200013dc
 8004f84:	e000ed04 	.word	0xe000ed04

08004f88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08a      	sub	sp, #40	; 0x28
 8004f8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f96:	463a      	mov	r2, r7
 8004f98:	1d39      	adds	r1, r7, #4
 8004f9a:	f107 0308 	add.w	r3, r7, #8
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fb fa9e 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fa4:	6839      	ldr	r1, [r7, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	9202      	str	r2, [sp, #8]
 8004fac:	9301      	str	r3, [sp, #4]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	460a      	mov	r2, r1
 8004fb6:	4920      	ldr	r1, [pc, #128]	; (8005038 <vTaskStartScheduler+0xb0>)
 8004fb8:	4820      	ldr	r0, [pc, #128]	; (800503c <vTaskStartScheduler+0xb4>)
 8004fba:	f7ff fe21 	bl	8004c00 <xTaskCreateStatic>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	4b1f      	ldr	r3, [pc, #124]	; (8005040 <vTaskStartScheduler+0xb8>)
 8004fc2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fc4:	4b1e      	ldr	r3, [pc, #120]	; (8005040 <vTaskStartScheduler+0xb8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	e001      	b.n	8004fd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d102      	bne.n	8004fe2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004fdc:	f000 fd10 	bl	8005a00 <xTimerCreateTimerTask>
 8004fe0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d115      	bne.n	8005014 <vTaskStartScheduler+0x8c>
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	613b      	str	r3, [r7, #16]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ffa:	4b12      	ldr	r3, [pc, #72]	; (8005044 <vTaskStartScheduler+0xbc>)
 8004ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005000:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005002:	4b11      	ldr	r3, [pc, #68]	; (8005048 <vTaskStartScheduler+0xc0>)
 8005004:	2201      	movs	r2, #1
 8005006:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005008:	4b10      	ldr	r3, [pc, #64]	; (800504c <vTaskStartScheduler+0xc4>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800500e:	f7fe fd87 	bl	8003b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005012:	e00d      	b.n	8005030 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800501a:	d109      	bne.n	8005030 <vTaskStartScheduler+0xa8>
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	e7fe      	b.n	800502e <vTaskStartScheduler+0xa6>
}
 8005030:	bf00      	nop
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	08006310 	.word	0x08006310
 800503c:	0800564d 	.word	0x0800564d
 8005040:	200013d8 	.word	0x200013d8
 8005044:	200013d4 	.word	0x200013d4
 8005048:	200013c0 	.word	0x200013c0
 800504c:	200013b8 	.word	0x200013b8

08005050 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <vTaskSuspendAll+0x18>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3301      	adds	r3, #1
 800505a:	4a03      	ldr	r2, [pc, #12]	; (8005068 <vTaskSuspendAll+0x18>)
 800505c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800505e:	bf00      	nop
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	200013dc 	.word	0x200013dc

0800506c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005076:	2300      	movs	r3, #0
 8005078:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800507a:	4b41      	ldr	r3, [pc, #260]	; (8005180 <xTaskResumeAll+0x114>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <xTaskResumeAll+0x2a>
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	e7fe      	b.n	8005094 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005096:	f7fe fde1 	bl	8003c5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800509a:	4b39      	ldr	r3, [pc, #228]	; (8005180 <xTaskResumeAll+0x114>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3b01      	subs	r3, #1
 80050a0:	4a37      	ldr	r2, [pc, #220]	; (8005180 <xTaskResumeAll+0x114>)
 80050a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050a4:	4b36      	ldr	r3, [pc, #216]	; (8005180 <xTaskResumeAll+0x114>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d161      	bne.n	8005170 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050ac:	4b35      	ldr	r3, [pc, #212]	; (8005184 <xTaskResumeAll+0x118>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d05d      	beq.n	8005170 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050b4:	e02e      	b.n	8005114 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050b6:	4b34      	ldr	r3, [pc, #208]	; (8005188 <xTaskResumeAll+0x11c>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3318      	adds	r3, #24
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fe fc78 	bl	80039b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fe fc73 	bl	80039b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	2201      	movs	r2, #1
 80050d8:	409a      	lsls	r2, r3
 80050da:	4b2c      	ldr	r3, [pc, #176]	; (800518c <xTaskResumeAll+0x120>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4313      	orrs	r3, r2
 80050e0:	4a2a      	ldr	r2, [pc, #168]	; (800518c <xTaskResumeAll+0x120>)
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4a27      	ldr	r2, [pc, #156]	; (8005190 <xTaskResumeAll+0x124>)
 80050f2:	441a      	add	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f7fe fbff 	bl	80038fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005104:	4b23      	ldr	r3, [pc, #140]	; (8005194 <xTaskResumeAll+0x128>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	429a      	cmp	r2, r3
 800510c:	d302      	bcc.n	8005114 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800510e:	4b22      	ldr	r3, [pc, #136]	; (8005198 <xTaskResumeAll+0x12c>)
 8005110:	2201      	movs	r2, #1
 8005112:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005114:	4b1c      	ldr	r3, [pc, #112]	; (8005188 <xTaskResumeAll+0x11c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1cc      	bne.n	80050b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005122:	f000 fb45 	bl	80057b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005126:	4b1d      	ldr	r3, [pc, #116]	; (800519c <xTaskResumeAll+0x130>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d010      	beq.n	8005154 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005132:	f000 f847 	bl	80051c4 <xTaskIncrementTick>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800513c:	4b16      	ldr	r3, [pc, #88]	; (8005198 <xTaskResumeAll+0x12c>)
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3b01      	subs	r3, #1
 8005146:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f1      	bne.n	8005132 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 800514e:	4b13      	ldr	r3, [pc, #76]	; (800519c <xTaskResumeAll+0x130>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005154:	4b10      	ldr	r3, [pc, #64]	; (8005198 <xTaskResumeAll+0x12c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800515c:	2301      	movs	r3, #1
 800515e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <xTaskResumeAll+0x134>)
 8005162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005170:	f7fe fda2 	bl	8003cb8 <vPortExitCritical>

	return xAlreadyYielded;
 8005174:	68bb      	ldr	r3, [r7, #8]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	200013dc 	.word	0x200013dc
 8005184:	200013b4 	.word	0x200013b4
 8005188:	20001374 	.word	0x20001374
 800518c:	200013bc 	.word	0x200013bc
 8005190:	200012b8 	.word	0x200012b8
 8005194:	200012b4 	.word	0x200012b4
 8005198:	200013c8 	.word	0x200013c8
 800519c:	200013c4 	.word	0x200013c4
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <xTaskGetTickCount+0x1c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051b0:	687b      	ldr	r3, [r7, #4]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	200013b8 	.word	0x200013b8

080051c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051ce:	4b4e      	ldr	r3, [pc, #312]	; (8005308 <xTaskIncrementTick+0x144>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f040 808d 	bne.w	80052f2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051d8:	4b4c      	ldr	r3, [pc, #304]	; (800530c <xTaskIncrementTick+0x148>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3301      	adds	r3, #1
 80051de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051e0:	4a4a      	ldr	r2, [pc, #296]	; (800530c <xTaskIncrementTick+0x148>)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d11f      	bne.n	800522c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80051ec:	4b48      	ldr	r3, [pc, #288]	; (8005310 <xTaskIncrementTick+0x14c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <xTaskIncrementTick+0x46>
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	e7fe      	b.n	8005208 <xTaskIncrementTick+0x44>
 800520a:	4b41      	ldr	r3, [pc, #260]	; (8005310 <xTaskIncrementTick+0x14c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	4b40      	ldr	r3, [pc, #256]	; (8005314 <xTaskIncrementTick+0x150>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a3e      	ldr	r2, [pc, #248]	; (8005310 <xTaskIncrementTick+0x14c>)
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	4a3e      	ldr	r2, [pc, #248]	; (8005314 <xTaskIncrementTick+0x150>)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	4b3e      	ldr	r3, [pc, #248]	; (8005318 <xTaskIncrementTick+0x154>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3301      	adds	r3, #1
 8005224:	4a3c      	ldr	r2, [pc, #240]	; (8005318 <xTaskIncrementTick+0x154>)
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	f000 fac2 	bl	80057b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800522c:	4b3b      	ldr	r3, [pc, #236]	; (800531c <xTaskIncrementTick+0x158>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	429a      	cmp	r2, r3
 8005234:	d348      	bcc.n	80052c8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005236:	4b36      	ldr	r3, [pc, #216]	; (8005310 <xTaskIncrementTick+0x14c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d104      	bne.n	800524a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005240:	4b36      	ldr	r3, [pc, #216]	; (800531c <xTaskIncrementTick+0x158>)
 8005242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005246:	601a      	str	r2, [r3, #0]
					break;
 8005248:	e03e      	b.n	80052c8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800524a:	4b31      	ldr	r3, [pc, #196]	; (8005310 <xTaskIncrementTick+0x14c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	429a      	cmp	r2, r3
 8005260:	d203      	bcs.n	800526a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005262:	4a2e      	ldr	r2, [pc, #184]	; (800531c <xTaskIncrementTick+0x158>)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005268:	e02e      	b.n	80052c8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	3304      	adds	r3, #4
 800526e:	4618      	mov	r0, r3
 8005270:	f7fe fba2 	bl	80039b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	3318      	adds	r3, #24
 8005280:	4618      	mov	r0, r3
 8005282:	f7fe fb99 	bl	80039b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	2201      	movs	r2, #1
 800528c:	409a      	lsls	r2, r3
 800528e:	4b24      	ldr	r3, [pc, #144]	; (8005320 <xTaskIncrementTick+0x15c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4313      	orrs	r3, r2
 8005294:	4a22      	ldr	r2, [pc, #136]	; (8005320 <xTaskIncrementTick+0x15c>)
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4a1f      	ldr	r2, [pc, #124]	; (8005324 <xTaskIncrementTick+0x160>)
 80052a6:	441a      	add	r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f7fe fb25 	bl	80038fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	4b1b      	ldr	r3, [pc, #108]	; (8005328 <xTaskIncrementTick+0x164>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	429a      	cmp	r2, r3
 80052c0:	d3b9      	bcc.n	8005236 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80052c2:	2301      	movs	r3, #1
 80052c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052c6:	e7b6      	b.n	8005236 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052c8:	4b17      	ldr	r3, [pc, #92]	; (8005328 <xTaskIncrementTick+0x164>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ce:	4915      	ldr	r1, [pc, #84]	; (8005324 <xTaskIncrementTick+0x160>)
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d901      	bls.n	80052e4 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 80052e0:	2301      	movs	r3, #1
 80052e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052e4:	4b11      	ldr	r3, [pc, #68]	; (800532c <xTaskIncrementTick+0x168>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d007      	beq.n	80052fc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80052ec:	2301      	movs	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e004      	b.n	80052fc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052f2:	4b0f      	ldr	r3, [pc, #60]	; (8005330 <xTaskIncrementTick+0x16c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3301      	adds	r3, #1
 80052f8:	4a0d      	ldr	r2, [pc, #52]	; (8005330 <xTaskIncrementTick+0x16c>)
 80052fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052fc:	697b      	ldr	r3, [r7, #20]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	200013dc 	.word	0x200013dc
 800530c:	200013b8 	.word	0x200013b8
 8005310:	2000136c 	.word	0x2000136c
 8005314:	20001370 	.word	0x20001370
 8005318:	200013cc 	.word	0x200013cc
 800531c:	200013d4 	.word	0x200013d4
 8005320:	200013bc 	.word	0x200013bc
 8005324:	200012b8 	.word	0x200012b8
 8005328:	200012b4 	.word	0x200012b4
 800532c:	200013c8 	.word	0x200013c8
 8005330:	200013c4 	.word	0x200013c4

08005334 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800533a:	4b26      	ldr	r3, [pc, #152]	; (80053d4 <vTaskSwitchContext+0xa0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005342:	4b25      	ldr	r3, [pc, #148]	; (80053d8 <vTaskSwitchContext+0xa4>)
 8005344:	2201      	movs	r2, #1
 8005346:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005348:	e03e      	b.n	80053c8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800534a:	4b23      	ldr	r3, [pc, #140]	; (80053d8 <vTaskSwitchContext+0xa4>)
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005350:	4b22      	ldr	r3, [pc, #136]	; (80053dc <vTaskSwitchContext+0xa8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	fab3 f383 	clz	r3, r3
 800535c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800535e:	7afb      	ldrb	r3, [r7, #11]
 8005360:	f1c3 031f 	rsb	r3, r3, #31
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	491e      	ldr	r1, [pc, #120]	; (80053e0 <vTaskSwitchContext+0xac>)
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d109      	bne.n	800538e <vTaskSwitchContext+0x5a>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	607b      	str	r3, [r7, #4]
 800538c:	e7fe      	b.n	800538c <vTaskSwitchContext+0x58>
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4a11      	ldr	r2, [pc, #68]	; (80053e0 <vTaskSwitchContext+0xac>)
 800539a:	4413      	add	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	3308      	adds	r3, #8
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d104      	bne.n	80053be <vTaskSwitchContext+0x8a>
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	605a      	str	r2, [r3, #4]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a07      	ldr	r2, [pc, #28]	; (80053e4 <vTaskSwitchContext+0xb0>)
 80053c6:	6013      	str	r3, [r2, #0]
}
 80053c8:	bf00      	nop
 80053ca:	371c      	adds	r7, #28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	200013dc 	.word	0x200013dc
 80053d8:	200013c8 	.word	0x200013c8
 80053dc:	200013bc 	.word	0x200013bc
 80053e0:	200012b8 	.word	0x200012b8
 80053e4:	200012b4 	.word	0x200012b4

080053e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d109      	bne.n	800540c <vTaskPlaceOnEventList+0x24>
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	e7fe      	b.n	800540a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800540c:	4b07      	ldr	r3, [pc, #28]	; (800542c <vTaskPlaceOnEventList+0x44>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3318      	adds	r3, #24
 8005412:	4619      	mov	r1, r3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7fe fa96 	bl	8003946 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800541a:	2101      	movs	r1, #1
 800541c:	6838      	ldr	r0, [r7, #0]
 800541e:	f000 fa89 	bl	8005934 <prvAddCurrentTaskToDelayedList>
}
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	200012b4 	.word	0x200012b4

08005430 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <vTaskPlaceOnEventListRestricted+0x26>
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e7fe      	b.n	8005454 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <vTaskPlaceOnEventListRestricted+0x50>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3318      	adds	r3, #24
 800545c:	4619      	mov	r1, r3
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f7fe fa4d 	bl	80038fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800546a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800546e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	68b8      	ldr	r0, [r7, #8]
 8005474:	f000 fa5e 	bl	8005934 <prvAddCurrentTaskToDelayedList>
	}
 8005478:	bf00      	nop
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	200012b4 	.word	0x200012b4

08005484 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <xTaskRemoveFromEventList+0x2a>
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	e7fe      	b.n	80054ac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	3318      	adds	r3, #24
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe fa80 	bl	80039b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054b8:	4b1d      	ldr	r3, [pc, #116]	; (8005530 <xTaskRemoveFromEventList+0xac>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d11c      	bne.n	80054fa <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	3304      	adds	r3, #4
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fe fa77 	bl	80039b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	2201      	movs	r2, #1
 80054d0:	409a      	lsls	r2, r3
 80054d2:	4b18      	ldr	r3, [pc, #96]	; (8005534 <xTaskRemoveFromEventList+0xb0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	4a16      	ldr	r2, [pc, #88]	; (8005534 <xTaskRemoveFromEventList+0xb0>)
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4a13      	ldr	r2, [pc, #76]	; (8005538 <xTaskRemoveFromEventList+0xb4>)
 80054ea:	441a      	add	r2, r3
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	3304      	adds	r3, #4
 80054f0:	4619      	mov	r1, r3
 80054f2:	4610      	mov	r0, r2
 80054f4:	f7fe fa03 	bl	80038fe <vListInsertEnd>
 80054f8:	e005      	b.n	8005506 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	3318      	adds	r3, #24
 80054fe:	4619      	mov	r1, r3
 8005500:	480e      	ldr	r0, [pc, #56]	; (800553c <xTaskRemoveFromEventList+0xb8>)
 8005502:	f7fe f9fc 	bl	80038fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550a:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <xTaskRemoveFromEventList+0xbc>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	429a      	cmp	r2, r3
 8005512:	d905      	bls.n	8005520 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005518:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <xTaskRemoveFromEventList+0xc0>)
 800551a:	2201      	movs	r2, #1
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e001      	b.n	8005524 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005524:	697b      	ldr	r3, [r7, #20]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	200013dc 	.word	0x200013dc
 8005534:	200013bc 	.word	0x200013bc
 8005538:	200012b8 	.word	0x200012b8
 800553c:	20001374 	.word	0x20001374
 8005540:	200012b4 	.word	0x200012b4
 8005544:	200013c8 	.word	0x200013c8

08005548 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <vTaskInternalSetTimeOutState+0x24>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005558:	4b05      	ldr	r3, [pc, #20]	; (8005570 <vTaskInternalSetTimeOutState+0x28>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	605a      	str	r2, [r3, #4]
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	200013cc 	.word	0x200013cc
 8005570:	200013b8 	.word	0x200013b8

08005574 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d109      	bne.n	8005598 <xTaskCheckForTimeOut+0x24>
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	e7fe      	b.n	8005596 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <xTaskCheckForTimeOut+0x3e>
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e7fe      	b.n	80055b0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80055b2:	f7fe fb53 	bl	8003c5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055b6:	4b1d      	ldr	r3, [pc, #116]	; (800562c <xTaskCheckForTimeOut+0xb8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ce:	d102      	bne.n	80055d6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]
 80055d4:	e023      	b.n	800561e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	4b15      	ldr	r3, [pc, #84]	; (8005630 <xTaskCheckForTimeOut+0xbc>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d007      	beq.n	80055f2 <xTaskCheckForTimeOut+0x7e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d802      	bhi.n	80055f2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055ec:	2301      	movs	r3, #1
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	e015      	b.n	800561e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d90b      	bls.n	8005614 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	1ad2      	subs	r2, r2, r3
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff ff9d 	bl	8005548 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	e004      	b.n	800561e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800561a:	2301      	movs	r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800561e:	f7fe fb4b 	bl	8003cb8 <vPortExitCritical>

	return xReturn;
 8005622:	69fb      	ldr	r3, [r7, #28]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	200013b8 	.word	0x200013b8
 8005630:	200013cc 	.word	0x200013cc

08005634 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005638:	4b03      	ldr	r3, [pc, #12]	; (8005648 <vTaskMissedYield+0x14>)
 800563a:	2201      	movs	r2, #1
 800563c:	601a      	str	r2, [r3, #0]
}
 800563e:	bf00      	nop
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	200013c8 	.word	0x200013c8

0800564c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005654:	f000 f852 	bl	80056fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005658:	4b06      	ldr	r3, [pc, #24]	; (8005674 <prvIdleTask+0x28>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d9f9      	bls.n	8005654 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <prvIdleTask+0x2c>)
 8005662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005670:	e7f0      	b.n	8005654 <prvIdleTask+0x8>
 8005672:	bf00      	nop
 8005674:	200012b8 	.word	0x200012b8
 8005678:	e000ed04 	.word	0xe000ed04

0800567c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005682:	2300      	movs	r3, #0
 8005684:	607b      	str	r3, [r7, #4]
 8005686:	e00c      	b.n	80056a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4a12      	ldr	r2, [pc, #72]	; (80056dc <prvInitialiseTaskLists+0x60>)
 8005694:	4413      	add	r3, r2
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe f904 	bl	80038a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3301      	adds	r3, #1
 80056a0:	607b      	str	r3, [r7, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b06      	cmp	r3, #6
 80056a6:	d9ef      	bls.n	8005688 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056a8:	480d      	ldr	r0, [pc, #52]	; (80056e0 <prvInitialiseTaskLists+0x64>)
 80056aa:	f7fe f8fb 	bl	80038a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056ae:	480d      	ldr	r0, [pc, #52]	; (80056e4 <prvInitialiseTaskLists+0x68>)
 80056b0:	f7fe f8f8 	bl	80038a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056b4:	480c      	ldr	r0, [pc, #48]	; (80056e8 <prvInitialiseTaskLists+0x6c>)
 80056b6:	f7fe f8f5 	bl	80038a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056ba:	480c      	ldr	r0, [pc, #48]	; (80056ec <prvInitialiseTaskLists+0x70>)
 80056bc:	f7fe f8f2 	bl	80038a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056c0:	480b      	ldr	r0, [pc, #44]	; (80056f0 <prvInitialiseTaskLists+0x74>)
 80056c2:	f7fe f8ef 	bl	80038a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056c6:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <prvInitialiseTaskLists+0x78>)
 80056c8:	4a05      	ldr	r2, [pc, #20]	; (80056e0 <prvInitialiseTaskLists+0x64>)
 80056ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <prvInitialiseTaskLists+0x7c>)
 80056ce:	4a05      	ldr	r2, [pc, #20]	; (80056e4 <prvInitialiseTaskLists+0x68>)
 80056d0:	601a      	str	r2, [r3, #0]
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	200012b8 	.word	0x200012b8
 80056e0:	20001344 	.word	0x20001344
 80056e4:	20001358 	.word	0x20001358
 80056e8:	20001374 	.word	0x20001374
 80056ec:	20001388 	.word	0x20001388
 80056f0:	200013a0 	.word	0x200013a0
 80056f4:	2000136c 	.word	0x2000136c
 80056f8:	20001370 	.word	0x20001370

080056fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005702:	e019      	b.n	8005738 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005704:	f7fe faaa 	bl	8003c5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005708:	4b0f      	ldr	r3, [pc, #60]	; (8005748 <prvCheckTasksWaitingTermination+0x4c>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3304      	adds	r3, #4
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe f94f 	bl	80039b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <prvCheckTasksWaitingTermination+0x50>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3b01      	subs	r3, #1
 8005720:	4a0a      	ldr	r2, [pc, #40]	; (800574c <prvCheckTasksWaitingTermination+0x50>)
 8005722:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005724:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <prvCheckTasksWaitingTermination+0x54>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3b01      	subs	r3, #1
 800572a:	4a09      	ldr	r2, [pc, #36]	; (8005750 <prvCheckTasksWaitingTermination+0x54>)
 800572c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800572e:	f7fe fac3 	bl	8003cb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f80e 	bl	8005754 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005738:	4b05      	ldr	r3, [pc, #20]	; (8005750 <prvCheckTasksWaitingTermination+0x54>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e1      	bne.n	8005704 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20001388 	.word	0x20001388
 800574c:	200013b4 	.word	0x200013b4
 8005750:	2000139c 	.word	0x2000139c

08005754 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005762:	2b00      	cmp	r3, #0
 8005764:	d108      	bne.n	8005778 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576a:	4618      	mov	r0, r3
 800576c:	f7fe fc58 	bl	8004020 <vPortFree>
				vPortFree( pxTCB );
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7fe fc55 	bl	8004020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005776:	e017      	b.n	80057a8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800577e:	2b01      	cmp	r3, #1
 8005780:	d103      	bne.n	800578a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fe fc4c 	bl	8004020 <vPortFree>
	}
 8005788:	e00e      	b.n	80057a8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005790:	2b02      	cmp	r3, #2
 8005792:	d009      	beq.n	80057a8 <prvDeleteTCB+0x54>
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	e7fe      	b.n	80057a6 <prvDeleteTCB+0x52>
	}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <prvResetNextTaskUnblockTime+0x38>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d104      	bne.n	80057ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057c0:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <prvResetNextTaskUnblockTime+0x3c>)
 80057c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057c8:	e008      	b.n	80057dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ca:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <prvResetNextTaskUnblockTime+0x38>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	4a04      	ldr	r2, [pc, #16]	; (80057ec <prvResetNextTaskUnblockTime+0x3c>)
 80057da:	6013      	str	r3, [r2, #0]
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	2000136c 	.word	0x2000136c
 80057ec:	200013d4 	.word	0x200013d4

080057f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057f6:	4b0b      	ldr	r3, [pc, #44]	; (8005824 <xTaskGetSchedulerState+0x34>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057fe:	2301      	movs	r3, #1
 8005800:	607b      	str	r3, [r7, #4]
 8005802:	e008      	b.n	8005816 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005804:	4b08      	ldr	r3, [pc, #32]	; (8005828 <xTaskGetSchedulerState+0x38>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d102      	bne.n	8005812 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800580c:	2302      	movs	r3, #2
 800580e:	607b      	str	r3, [r7, #4]
 8005810:	e001      	b.n	8005816 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005812:	2300      	movs	r3, #0
 8005814:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005816:	687b      	ldr	r3, [r7, #4]
	}
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	200013c0 	.word	0x200013c0
 8005828:	200013dc 	.word	0x200013dc

0800582c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d06c      	beq.n	800591c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005842:	4b39      	ldr	r3, [pc, #228]	; (8005928 <xTaskPriorityDisinherit+0xfc>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	429a      	cmp	r2, r3
 800584a:	d009      	beq.n	8005860 <xTaskPriorityDisinherit+0x34>
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	e7fe      	b.n	800585e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <xTaskPriorityDisinherit+0x50>
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	e7fe      	b.n	800587a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005880:	1e5a      	subs	r2, r3, #1
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	429a      	cmp	r2, r3
 8005890:	d044      	beq.n	800591c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005896:	2b00      	cmp	r3, #0
 8005898:	d140      	bne.n	800591c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	3304      	adds	r3, #4
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe f88a 	bl	80039b8 <uxListRemove>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d115      	bne.n	80058d6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ae:	491f      	ldr	r1, [pc, #124]	; (800592c <xTaskPriorityDisinherit+0x100>)
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <xTaskPriorityDisinherit+0xaa>
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	2201      	movs	r2, #1
 80058c6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ca:	43da      	mvns	r2, r3
 80058cc:	4b18      	ldr	r3, [pc, #96]	; (8005930 <xTaskPriorityDisinherit+0x104>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4013      	ands	r3, r2
 80058d2:	4a17      	ldr	r2, [pc, #92]	; (8005930 <xTaskPriorityDisinherit+0x104>)
 80058d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	f1c3 0207 	rsb	r2, r3, #7
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	2201      	movs	r2, #1
 80058f0:	409a      	lsls	r2, r3
 80058f2:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <xTaskPriorityDisinherit+0x104>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	4a0d      	ldr	r2, [pc, #52]	; (8005930 <xTaskPriorityDisinherit+0x104>)
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4a08      	ldr	r2, [pc, #32]	; (800592c <xTaskPriorityDisinherit+0x100>)
 800590a:	441a      	add	r2, r3
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	3304      	adds	r3, #4
 8005910:	4619      	mov	r1, r3
 8005912:	4610      	mov	r0, r2
 8005914:	f7fd fff3 	bl	80038fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005918:	2301      	movs	r3, #1
 800591a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800591c:	697b      	ldr	r3, [r7, #20]
	}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	200012b4 	.word	0x200012b4
 800592c:	200012b8 	.word	0x200012b8
 8005930:	200013bc 	.word	0x200013bc

08005934 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800593e:	4b29      	ldr	r3, [pc, #164]	; (80059e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005944:	4b28      	ldr	r3, [pc, #160]	; (80059e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3304      	adds	r3, #4
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe f834 	bl	80039b8 <uxListRemove>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10b      	bne.n	800596e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005956:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	2201      	movs	r2, #1
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43da      	mvns	r2, r3
 8005964:	4b21      	ldr	r3, [pc, #132]	; (80059ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4013      	ands	r3, r2
 800596a:	4a20      	ldr	r2, [pc, #128]	; (80059ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800596c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005974:	d10a      	bne.n	800598c <prvAddCurrentTaskToDelayedList+0x58>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800597c:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3304      	adds	r3, #4
 8005982:	4619      	mov	r1, r3
 8005984:	481a      	ldr	r0, [pc, #104]	; (80059f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005986:	f7fd ffba 	bl	80038fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800598a:	e026      	b.n	80059da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4413      	add	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005994:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d209      	bcs.n	80059b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059a4:	4b13      	ldr	r3, [pc, #76]	; (80059f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f7fd ffc8 	bl	8003946 <vListInsert>
}
 80059b6:	e010      	b.n	80059da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059b8:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3304      	adds	r3, #4
 80059c2:	4619      	mov	r1, r3
 80059c4:	4610      	mov	r0, r2
 80059c6:	f7fd ffbe 	bl	8003946 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059ca:	4b0c      	ldr	r3, [pc, #48]	; (80059fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d202      	bcs.n	80059da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80059d4:	4a09      	ldr	r2, [pc, #36]	; (80059fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6013      	str	r3, [r2, #0]
}
 80059da:	bf00      	nop
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200013b8 	.word	0x200013b8
 80059e8:	200012b4 	.word	0x200012b4
 80059ec:	200013bc 	.word	0x200013bc
 80059f0:	200013a0 	.word	0x200013a0
 80059f4:	20001370 	.word	0x20001370
 80059f8:	2000136c 	.word	0x2000136c
 80059fc:	200013d4 	.word	0x200013d4

08005a00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08a      	sub	sp, #40	; 0x28
 8005a04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a0a:	f000 fb7f 	bl	800610c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a0e:	4b1c      	ldr	r3, [pc, #112]	; (8005a80 <xTimerCreateTimerTask+0x80>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d021      	beq.n	8005a5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a1e:	1d3a      	adds	r2, r7, #4
 8005a20:	f107 0108 	add.w	r1, r7, #8
 8005a24:	f107 030c 	add.w	r3, r7, #12
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fa fd73 	bl	8000514 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a2e:	6879      	ldr	r1, [r7, #4]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	9202      	str	r2, [sp, #8]
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	2306      	movs	r3, #6
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	460a      	mov	r2, r1
 8005a40:	4910      	ldr	r1, [pc, #64]	; (8005a84 <xTimerCreateTimerTask+0x84>)
 8005a42:	4811      	ldr	r0, [pc, #68]	; (8005a88 <xTimerCreateTimerTask+0x88>)
 8005a44:	f7ff f8dc 	bl	8004c00 <xTaskCreateStatic>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	4b10      	ldr	r3, [pc, #64]	; (8005a8c <xTimerCreateTimerTask+0x8c>)
 8005a4c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <xTimerCreateTimerTask+0x8c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a56:	2301      	movs	r3, #1
 8005a58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d109      	bne.n	8005a74 <xTimerCreateTimerTask+0x74>
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	e7fe      	b.n	8005a72 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005a74:	697b      	ldr	r3, [r7, #20]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20001410 	.word	0x20001410
 8005a84:	08006318 	.word	0x08006318
 8005a88:	08005cf1 	.word	0x08005cf1
 8005a8c:	20001414 	.word	0x20001414

08005a90 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005a9e:	2028      	movs	r0, #40	; 0x28
 8005aa0:	f7fe f9f6 	bl	8003e90 <pvPortMalloc>
 8005aa4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00d      	beq.n	8005ac8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	68b9      	ldr	r1, [r7, #8]
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f841 	bl	8005b4a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005ac8:	697b      	ldr	r3, [r7, #20]
	}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b08a      	sub	sp, #40	; 0x28
 8005ad6:	af02      	add	r7, sp, #8
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	607a      	str	r2, [r7, #4]
 8005ade:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005ae0:	2328      	movs	r3, #40	; 0x28
 8005ae2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2b28      	cmp	r3, #40	; 0x28
 8005ae8:	d009      	beq.n	8005afe <xTimerCreateStatic+0x2c>
 8005aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	e7fe      	b.n	8005afc <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005afe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d109      	bne.n	8005b1a <xTimerCreateStatic+0x48>
 8005b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e7fe      	b.n	8005b18 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00d      	beq.n	8005b40 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	9301      	str	r3, [sp, #4]
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 f805 	bl	8005b4a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005b40:	69fb      	ldr	r3, [r7, #28]
	}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3720      	adds	r7, #32
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b086      	sub	sp, #24
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	607a      	str	r2, [r7, #4]
 8005b56:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d109      	bne.n	8005b72 <prvInitialiseNewTimer+0x28>
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	e7fe      	b.n	8005b70 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01e      	beq.n	8005bb6 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005b78:	f000 fac8 	bl	800610c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	6a3a      	ldr	r2, [r7, #32]
 8005b92:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	3304      	adds	r3, #4
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fd fea3 	bl	80038e4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d008      	beq.n	8005bb6 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005baa:	f043 0304 	orr.w	r3, r3, #4
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005bb6:	bf00      	nop
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	; 0x28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d109      	bne.n	8005bec <xTimerGenericCommand+0x2c>
 8005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	623b      	str	r3, [r7, #32]
 8005bea:	e7fe      	b.n	8005bea <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005bec:	4b19      	ldr	r3, [pc, #100]	; (8005c54 <xTimerGenericCommand+0x94>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d02a      	beq.n	8005c4a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	dc18      	bgt.n	8005c38 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c06:	f7ff fdf3 	bl	80057f0 <xTaskGetSchedulerState>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d109      	bne.n	8005c24 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c10:	4b10      	ldr	r3, [pc, #64]	; (8005c54 <xTimerGenericCommand+0x94>)
 8005c12:	6818      	ldr	r0, [r3, #0]
 8005c14:	f107 0114 	add.w	r1, r7, #20
 8005c18:	2300      	movs	r3, #0
 8005c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1c:	f7fe fc16 	bl	800444c <xQueueGenericSend>
 8005c20:	6278      	str	r0, [r7, #36]	; 0x24
 8005c22:	e012      	b.n	8005c4a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c24:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <xTimerGenericCommand+0x94>)
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	f107 0114 	add.w	r1, r7, #20
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f7fe fc0c 	bl	800444c <xQueueGenericSend>
 8005c34:	6278      	str	r0, [r7, #36]	; 0x24
 8005c36:	e008      	b.n	8005c4a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c38:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <xTimerGenericCommand+0x94>)
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	f107 0114 	add.w	r1, r7, #20
 8005c40:	2300      	movs	r3, #0
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	f7fe fcfc 	bl	8004640 <xQueueGenericSendFromISR>
 8005c48:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3728      	adds	r7, #40	; 0x28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20001410 	.word	0x20001410

08005c58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c62:	4b22      	ldr	r3, [pc, #136]	; (8005cec <prvProcessExpiredTimer+0x94>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fd fea1 	bl	80039b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d021      	beq.n	8005cc8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	699a      	ldr	r2, [r3, #24]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	18d1      	adds	r1, r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	6978      	ldr	r0, [r7, #20]
 8005c92:	f000 f8d1 	bl	8005e38 <prvInsertTimerInActiveList>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01e      	beq.n	8005cda <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	6978      	ldr	r0, [r7, #20]
 8005ca8:	f7ff ff8a 	bl	8005bc0 <xTimerGenericCommand>
 8005cac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d112      	bne.n	8005cda <prvProcessExpiredTimer+0x82>
 8005cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	e7fe      	b.n	8005cc6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cce:	f023 0301 	bic.w	r3, r3, #1
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	6978      	ldr	r0, [r7, #20]
 8005ce0:	4798      	blx	r3
}
 8005ce2:	bf00      	nop
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20001408 	.word	0x20001408

08005cf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cf8:	f107 0308 	add.w	r3, r7, #8
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 f857 	bl	8005db0 <prvGetNextExpireTime>
 8005d02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4619      	mov	r1, r3
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f803 	bl	8005d14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d0e:	f000 f8d5 	bl	8005ebc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d12:	e7f1      	b.n	8005cf8 <prvTimerTask+0x8>

08005d14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d1e:	f7ff f997 	bl	8005050 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d22:	f107 0308 	add.w	r3, r7, #8
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 f866 	bl	8005df8 <prvSampleTimeNow>
 8005d2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d130      	bne.n	8005d96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <prvProcessTimerOrBlockTask+0x3c>
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d806      	bhi.n	8005d50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d42:	f7ff f993 	bl	800506c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d46:	68f9      	ldr	r1, [r7, #12]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff ff85 	bl	8005c58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d4e:	e024      	b.n	8005d9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d008      	beq.n	8005d68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d56:	4b13      	ldr	r3, [pc, #76]	; (8005da4 <prvProcessTimerOrBlockTask+0x90>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <prvProcessTimerOrBlockTask+0x50>
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <prvProcessTimerOrBlockTask+0x52>
 8005d64:	2300      	movs	r3, #0
 8005d66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d68:	4b0f      	ldr	r3, [pc, #60]	; (8005da8 <prvProcessTimerOrBlockTask+0x94>)
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	4619      	mov	r1, r3
 8005d76:	f7fe ff0f 	bl	8004b98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d7a:	f7ff f977 	bl	800506c <xTaskResumeAll>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10a      	bne.n	8005d9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d84:	4b09      	ldr	r3, [pc, #36]	; (8005dac <prvProcessTimerOrBlockTask+0x98>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	f3bf 8f6f 	isb	sy
}
 8005d94:	e001      	b.n	8005d9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d96:	f7ff f969 	bl	800506c <xTaskResumeAll>
}
 8005d9a:	bf00      	nop
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	2000140c 	.word	0x2000140c
 8005da8:	20001410 	.word	0x20001410
 8005dac:	e000ed04 	.word	0xe000ed04

08005db0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005db8:	4b0e      	ldr	r3, [pc, #56]	; (8005df4 <prvGetNextExpireTime+0x44>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <prvGetNextExpireTime+0x16>
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	e000      	b.n	8005dc8 <prvGetNextExpireTime+0x18>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d105      	bne.n	8005de0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dd4:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <prvGetNextExpireTime+0x44>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e001      	b.n	8005de4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005de4:	68fb      	ldr	r3, [r7, #12]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20001408 	.word	0x20001408

08005df8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e00:	f7ff f9d0 	bl	80051a4 <xTaskGetTickCount>
 8005e04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e06:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <prvSampleTimeNow+0x3c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d205      	bcs.n	8005e1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e10:	f000 f918 	bl	8006044 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	e002      	b.n	8005e22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e22:	4a04      	ldr	r2, [pc, #16]	; (8005e34 <prvSampleTimeNow+0x3c>)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e28:	68fb      	ldr	r3, [r7, #12]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20001418 	.word	0x20001418

08005e38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d812      	bhi.n	8005e84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	1ad2      	subs	r2, r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d302      	bcc.n	8005e72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	e01b      	b.n	8005eaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e72:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <prvInsertTimerInActiveList+0x7c>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	f7fd fd62 	bl	8003946 <vListInsert>
 8005e82:	e012      	b.n	8005eaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d206      	bcs.n	8005e9a <prvInsertTimerInActiveList+0x62>
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d302      	bcc.n	8005e9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e007      	b.n	8005eaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e9a:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <prvInsertTimerInActiveList+0x80>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	f7fd fd4e 	bl	8003946 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005eaa:	697b      	ldr	r3, [r7, #20]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	2000140c 	.word	0x2000140c
 8005eb8:	20001408 	.word	0x20001408

08005ebc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08c      	sub	sp, #48	; 0x30
 8005ec0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ec2:	e0ac      	b.n	800601e <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f2c0 80a9 	blt.w	800601e <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d004      	beq.n	8005ee2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	3304      	adds	r3, #4
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fd fd6b 	bl	80039b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ee2:	1d3b      	adds	r3, r7, #4
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff ff87 	bl	8005df8 <prvSampleTimeNow>
 8005eea:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b09      	cmp	r3, #9
 8005ef0:	f200 8094 	bhi.w	800601c <prvProcessReceivedCommands+0x160>
 8005ef4:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <prvProcessReceivedCommands+0x40>)
 8005ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efa:	bf00      	nop
 8005efc:	08005f25 	.word	0x08005f25
 8005f00:	08005f25 	.word	0x08005f25
 8005f04:	08005f25 	.word	0x08005f25
 8005f08:	08005f97 	.word	0x08005f97
 8005f0c:	08005fab 	.word	0x08005fab
 8005f10:	08005ff3 	.word	0x08005ff3
 8005f14:	08005f25 	.word	0x08005f25
 8005f18:	08005f25 	.word	0x08005f25
 8005f1c:	08005f97 	.word	0x08005f97
 8005f20:	08005fab 	.word	0x08005fab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f2a:	f043 0301 	orr.w	r3, r3, #1
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	18d1      	adds	r1, r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6a3a      	ldr	r2, [r7, #32]
 8005f42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f44:	f7ff ff78 	bl	8005e38 <prvInsertTimerInActiveList>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d067      	beq.n	800601e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d05c      	beq.n	800601e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	441a      	add	r2, r3
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2300      	movs	r3, #0
 8005f72:	2100      	movs	r1, #0
 8005f74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f76:	f7ff fe23 	bl	8005bc0 <xTimerGenericCommand>
 8005f7a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d14d      	bne.n	800601e <prvProcessReceivedCommands+0x162>
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	e7fe      	b.n	8005f94 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f9c:	f023 0301 	bic.w	r3, r3, #1
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8005fa8:	e039      	b.n	800601e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <prvProcessReceivedCommands+0x122>
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	e7fe      	b.n	8005fdc <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	18d1      	adds	r1, r2, r3
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	6a3a      	ldr	r2, [r7, #32]
 8005fea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fec:	f7ff ff24 	bl	8005e38 <prvInsertTimerInActiveList>
					break;
 8005ff0:	e015      	b.n	800601e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d103      	bne.n	8006008 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8006000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006002:	f7fe f80d 	bl	8004020 <vPortFree>
 8006006:	e00a      	b.n	800601e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800600e:	f023 0301 	bic.w	r3, r3, #1
 8006012:	b2da      	uxtb	r2, r3
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800601a:	e000      	b.n	800601e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 800601c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800601e:	4b08      	ldr	r3, [pc, #32]	; (8006040 <prvProcessReceivedCommands+0x184>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f107 0108 	add.w	r1, r7, #8
 8006026:	2200      	movs	r2, #0
 8006028:	4618      	mov	r0, r3
 800602a:	f7fe fba1 	bl	8004770 <xQueueReceive>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	f47f af47 	bne.w	8005ec4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006036:	bf00      	nop
 8006038:	3728      	adds	r7, #40	; 0x28
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20001410 	.word	0x20001410

08006044 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800604a:	e047      	b.n	80060dc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800604c:	4b2d      	ldr	r3, [pc, #180]	; (8006104 <prvSwitchTimerLists+0xc0>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006056:	4b2b      	ldr	r3, [pc, #172]	; (8006104 <prvSwitchTimerLists+0xc0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	3304      	adds	r3, #4
 8006064:	4618      	mov	r0, r3
 8006066:	f7fd fca7 	bl	80039b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	6938      	ldr	r0, [r7, #16]
 8006070:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d02d      	beq.n	80060dc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	429a      	cmp	r2, r3
 8006090:	d90e      	bls.n	80060b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800609e:	4b19      	ldr	r3, [pc, #100]	; (8006104 <prvSwitchTimerLists+0xc0>)
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f7fd fc4c 	bl	8003946 <vListInsert>
 80060ae:	e015      	b.n	80060dc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060b0:	2300      	movs	r3, #0
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	2300      	movs	r3, #0
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	2100      	movs	r1, #0
 80060ba:	6938      	ldr	r0, [r7, #16]
 80060bc:	f7ff fd80 	bl	8005bc0 <xTimerGenericCommand>
 80060c0:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d109      	bne.n	80060dc <prvSwitchTimerLists+0x98>
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	603b      	str	r3, [r7, #0]
 80060da:	e7fe      	b.n	80060da <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060dc:	4b09      	ldr	r3, [pc, #36]	; (8006104 <prvSwitchTimerLists+0xc0>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1b2      	bne.n	800604c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80060e6:	4b07      	ldr	r3, [pc, #28]	; (8006104 <prvSwitchTimerLists+0xc0>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <prvSwitchTimerLists+0xc4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a04      	ldr	r2, [pc, #16]	; (8006104 <prvSwitchTimerLists+0xc0>)
 80060f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060f4:	4a04      	ldr	r2, [pc, #16]	; (8006108 <prvSwitchTimerLists+0xc4>)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6013      	str	r3, [r2, #0]
}
 80060fa:	bf00      	nop
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20001408 	.word	0x20001408
 8006108:	2000140c 	.word	0x2000140c

0800610c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006112:	f7fd fda3 	bl	8003c5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006116:	4b15      	ldr	r3, [pc, #84]	; (800616c <prvCheckForValidListAndQueue+0x60>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d120      	bne.n	8006160 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800611e:	4814      	ldr	r0, [pc, #80]	; (8006170 <prvCheckForValidListAndQueue+0x64>)
 8006120:	f7fd fbc0 	bl	80038a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006124:	4813      	ldr	r0, [pc, #76]	; (8006174 <prvCheckForValidListAndQueue+0x68>)
 8006126:	f7fd fbbd 	bl	80038a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800612a:	4b13      	ldr	r3, [pc, #76]	; (8006178 <prvCheckForValidListAndQueue+0x6c>)
 800612c:	4a10      	ldr	r2, [pc, #64]	; (8006170 <prvCheckForValidListAndQueue+0x64>)
 800612e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006130:	4b12      	ldr	r3, [pc, #72]	; (800617c <prvCheckForValidListAndQueue+0x70>)
 8006132:	4a10      	ldr	r2, [pc, #64]	; (8006174 <prvCheckForValidListAndQueue+0x68>)
 8006134:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006136:	2300      	movs	r3, #0
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	4b11      	ldr	r3, [pc, #68]	; (8006180 <prvCheckForValidListAndQueue+0x74>)
 800613c:	4a11      	ldr	r2, [pc, #68]	; (8006184 <prvCheckForValidListAndQueue+0x78>)
 800613e:	210c      	movs	r1, #12
 8006140:	200a      	movs	r0, #10
 8006142:	f7fe f8f1 	bl	8004328 <xQueueGenericCreateStatic>
 8006146:	4602      	mov	r2, r0
 8006148:	4b08      	ldr	r3, [pc, #32]	; (800616c <prvCheckForValidListAndQueue+0x60>)
 800614a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800614c:	4b07      	ldr	r3, [pc, #28]	; (800616c <prvCheckForValidListAndQueue+0x60>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <prvCheckForValidListAndQueue+0x60>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	490b      	ldr	r1, [pc, #44]	; (8006188 <prvCheckForValidListAndQueue+0x7c>)
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe fcf4 	bl	8004b48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006160:	f7fd fdaa 	bl	8003cb8 <vPortExitCritical>
}
 8006164:	bf00      	nop
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20001410 	.word	0x20001410
 8006170:	200013e0 	.word	0x200013e0
 8006174:	200013f4 	.word	0x200013f4
 8006178:	20001408 	.word	0x20001408
 800617c:	2000140c 	.word	0x2000140c
 8006180:	20001494 	.word	0x20001494
 8006184:	2000141c 	.word	0x2000141c
 8006188:	08006320 	.word	0x08006320

0800618c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800618c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80061c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006190:	f7fa fc8c 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006194:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006196:	e003      	b.n	80061a0 <LoopCopyDataInit>

08006198 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006198:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800619a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800619c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800619e:	3104      	adds	r1, #4

080061a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80061a0:	480a      	ldr	r0, [pc, #40]	; (80061cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80061a2:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80061a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80061a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80061a8:	d3f6      	bcc.n	8006198 <CopyDataInit>
	ldr	r2, =_sbss
 80061aa:	4a0a      	ldr	r2, [pc, #40]	; (80061d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80061ac:	e002      	b.n	80061b4 <LoopFillZerobss>

080061ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80061ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80061b0:	f842 3b04 	str.w	r3, [r2], #4

080061b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80061b4:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <LoopForever+0x16>)
	cmp	r2, r3
 80061b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80061b8:	d3f9      	bcc.n	80061ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80061ba:	f000 f811 	bl	80061e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80061be:	f7fa f9c3 	bl	8000548 <main>

080061c2 <LoopForever>:

LoopForever:
    b LoopForever
 80061c2:	e7fe      	b.n	80061c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80061c4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80061c8:	08006380 	.word	0x08006380
	ldr	r0, =_sdata
 80061cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80061d0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80061d4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80061d8:	20001600 	.word	0x20001600

080061dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80061dc:	e7fe      	b.n	80061dc <ADC1_2_IRQHandler>
	...

080061e0 <__libc_init_array>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	4e0d      	ldr	r6, [pc, #52]	; (8006218 <__libc_init_array+0x38>)
 80061e4:	4c0d      	ldr	r4, [pc, #52]	; (800621c <__libc_init_array+0x3c>)
 80061e6:	1ba4      	subs	r4, r4, r6
 80061e8:	10a4      	asrs	r4, r4, #2
 80061ea:	2500      	movs	r5, #0
 80061ec:	42a5      	cmp	r5, r4
 80061ee:	d109      	bne.n	8006204 <__libc_init_array+0x24>
 80061f0:	4e0b      	ldr	r6, [pc, #44]	; (8006220 <__libc_init_array+0x40>)
 80061f2:	4c0c      	ldr	r4, [pc, #48]	; (8006224 <__libc_init_array+0x44>)
 80061f4:	f000 f82c 	bl	8006250 <_init>
 80061f8:	1ba4      	subs	r4, r4, r6
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	2500      	movs	r5, #0
 80061fe:	42a5      	cmp	r5, r4
 8006200:	d105      	bne.n	800620e <__libc_init_array+0x2e>
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006208:	4798      	blx	r3
 800620a:	3501      	adds	r5, #1
 800620c:	e7ee      	b.n	80061ec <__libc_init_array+0xc>
 800620e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006212:	4798      	blx	r3
 8006214:	3501      	adds	r5, #1
 8006216:	e7f2      	b.n	80061fe <__libc_init_array+0x1e>
 8006218:	08006378 	.word	0x08006378
 800621c:	08006378 	.word	0x08006378
 8006220:	08006378 	.word	0x08006378
 8006224:	0800637c 	.word	0x0800637c

08006228 <memcpy>:
 8006228:	b510      	push	{r4, lr}
 800622a:	1e43      	subs	r3, r0, #1
 800622c:	440a      	add	r2, r1
 800622e:	4291      	cmp	r1, r2
 8006230:	d100      	bne.n	8006234 <memcpy+0xc>
 8006232:	bd10      	pop	{r4, pc}
 8006234:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006238:	f803 4f01 	strb.w	r4, [r3, #1]!
 800623c:	e7f7      	b.n	800622e <memcpy+0x6>

0800623e <memset>:
 800623e:	4402      	add	r2, r0
 8006240:	4603      	mov	r3, r0
 8006242:	4293      	cmp	r3, r2
 8006244:	d100      	bne.n	8006248 <memset+0xa>
 8006246:	4770      	bx	lr
 8006248:	f803 1b01 	strb.w	r1, [r3], #1
 800624c:	e7f9      	b.n	8006242 <memset+0x4>
	...

08006250 <_init>:
 8006250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006252:	bf00      	nop
 8006254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006256:	bc08      	pop	{r3}
 8006258:	469e      	mov	lr, r3
 800625a:	4770      	bx	lr

0800625c <_fini>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	bf00      	nop
 8006260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006262:	bc08      	pop	{r3}
 8006264:	469e      	mov	lr, r3
 8006266:	4770      	bx	lr
