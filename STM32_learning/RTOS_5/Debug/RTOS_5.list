
RTOS_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08006a30  08006a30  00016a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006cf8  08006cf8  00016cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d00  08006d00  00016d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006d04  08006d04  00016d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08006d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001074  20000074  08006d7c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200010e8  08006d7c  000210e8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017c47  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ff9  00000000  00000000  00037ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000013d0  00000000  00000000  0003ace8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001288  00000000  00000000  0003c0b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a673  00000000  00000000  0003d340  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006cb5  00000000  00000000  000479b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004e668  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005560  00000000  00000000  0004e6e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a18 	.word	0x08006a18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006a18 	.word	0x08006a18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000090 	.word	0x20000090
 80005c0:	200000e4 	.word	0x200000e4

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fb95 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f86d 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f901 	bl	80007d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 f8cf 	bl	8000778 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /************************* Create Integer Queue ****************************/
    SimpleQueue = xQueueCreate(5, sizeof (int));
 80005da:	2200      	movs	r2, #0
 80005dc:	2104      	movs	r1, #4
 80005de:	2005      	movs	r0, #5
 80005e0:	f004 fb0a 	bl	8004bf8 <xQueueGenericCreate>
 80005e4:	4602      	mov	r2, r0
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <main+0xb0>)
 80005e8:	601a      	str	r2, [r3, #0]
    if (SimpleQueue == 0)  // Queue not created
 80005ea:	4b22      	ldr	r3, [pc, #136]	; (8000674 <main+0xb0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10d      	bne.n	800060e <main+0x4a>
    {
  	  char *str = "Unable to create Integer Queue\n\n";
 80005f2:	4b21      	ldr	r3, [pc, #132]	; (8000678 <main+0xb4>)
 80005f4:	607b      	str	r3, [r7, #4]
  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff fdea 	bl	80001d0 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	481d      	ldr	r0, [pc, #116]	; (800067c <main+0xb8>)
 8000608:	f002 fd06 	bl	8003018 <HAL_UART_Transmit>
 800060c:	e00c      	b.n	8000628 <main+0x64>
    }
    else
    {
  	  char *str = "Integer Queue Created successfully\n\n";
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <main+0xbc>)
 8000610:	603b      	str	r3, [r7, #0]
  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000612:	6838      	ldr	r0, [r7, #0]
 8000614:	f7ff fddc 	bl	80001d0 <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000620:	6839      	ldr	r1, [r7, #0]
 8000622:	4816      	ldr	r0, [pc, #88]	; (800067c <main+0xb8>)
 8000624:	f002 fcf8 	bl	8003018 <HAL_UART_Transmit>
    }


	 xTaskCreate(Sender_HPT_Task,"HPT_SEND",128,NULL,3,&Sender_HPT_Handler);
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <main+0xc0>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2303      	movs	r3, #3
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	4914      	ldr	r1, [pc, #80]	; (8000688 <main+0xc4>)
 8000636:	4815      	ldr	r0, [pc, #84]	; (800068c <main+0xc8>)
 8000638:	f004 ff0e 	bl	8005458 <xTaskCreate>
	 xTaskCreate(Sender_LPT_Task,"LPT_SEND",128,(void *)111,2,&Sender_LPT_Handler);
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <main+0xcc>)
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2302      	movs	r3, #2
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	236f      	movs	r3, #111	; 0x6f
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	4912      	ldr	r1, [pc, #72]	; (8000694 <main+0xd0>)
 800064a:	4813      	ldr	r0, [pc, #76]	; (8000698 <main+0xd4>)
 800064c:	f004 ff04 	bl	8005458 <xTaskCreate>
	 xTaskCreate(Receiver_Task,"Receive",128,NULL,1,&Receiver_Handler);
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <main+0xd8>)
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2301      	movs	r3, #1
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2300      	movs	r3, #0
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	4910      	ldr	r1, [pc, #64]	; (80006a0 <main+0xdc>)
 800065e:	4811      	ldr	r0, [pc, #68]	; (80006a4 <main+0xe0>)
 8000660:	f004 fefa 	bl	8005458 <xTaskCreate>

	 HAL_UART_Receive_IT(&huart2,&Rx_data,1);
 8000664:	2201      	movs	r2, #1
 8000666:	4910      	ldr	r1, [pc, #64]	; (80006a8 <main+0xe4>)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <main+0xb8>)
 800066a:	f002 fd69 	bl	8003140 <HAL_UART_Receive_IT>

	 vTaskStartScheduler();
 800066e:	f005 f85d 	bl	800572c <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000672:	e7fe      	b.n	8000672 <main+0xae>
 8000674:	20001008 	.word	0x20001008
 8000678:	08006a30 	.word	0x08006a30
 800067c:	2000100c 	.word	0x2000100c
 8000680:	08006a54 	.word	0x08006a54
 8000684:	20000ffc 	.word	0x20000ffc
 8000688:	08006a7c 	.word	0x08006a7c
 800068c:	08000809 	.word	0x08000809
 8000690:	20001090 	.word	0x20001090
 8000694:	08006a88 	.word	0x08006a88
 8000698:	08000881 	.word	0x08000881
 800069c:	20001000 	.word	0x20001000
 80006a0:	08006a94 	.word	0x08006a94
 80006a4:	080008f1 	.word	0x080008f1
 80006a8:	20001004 	.word	0x20001004

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0b8      	sub	sp, #224	; 0xe0
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006b6:	2244      	movs	r2, #68	; 0x44
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f005 fd91 	bl	80061e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	2288      	movs	r2, #136	; 0x88
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 fd83 	bl	80061e2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006dc:	2310      	movs	r3, #16
 80006de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e2:	2301      	movs	r3, #1
 80006e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ee:	2360      	movs	r3, #96	; 0x60
 80006f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fe9e 	bl	8001440 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800070a:	f000 f9a1 	bl	8000a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000714:	2300      	movs	r3, #0
 8000716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fa6a 	bl	8001c0c <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800073e:	f000 f987 	bl	8000a50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000742:	2302      	movs	r3, #2
 8000744:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000746:	2300      	movs	r3, #0
 8000748:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fc93 	bl	8002078 <HAL_RCCEx_PeriphCLKConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000758:	f000 f97a 	bl	8000a50 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800075c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000760:	f000 fe18 	bl	8001394 <HAL_PWREx_ControlVoltageScaling>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800076a:	f000 f971 	bl	8000a50 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	37e0      	adds	r7, #224	; 0xe0
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 800077e:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <MX_USART2_UART_Init+0x5c>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007bc:	f002 fbde 	bl	8002f7c <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f943 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000100c 	.word	0x2000100c
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4a09      	ldr	r2, [pc, #36]	; (8000804 <MX_GPIO_Init+0x2c>)
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_GPIO_Init+0x2c>)
 80007e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_GPIO_Init+0x2c>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <Sender_HPT_Task>:

/* USER CODE BEGIN 4 */
void Sender_HPT_Task (void *argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	int i=222;
 8000810:	23de      	movs	r3, #222	; 0xde
 8000812:	60bb      	str	r3, [r7, #8]
	uint32_t TickDelay = pdMS_TO_TICKS(2000);
 8000814:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000818:	617b      	str	r3, [r7, #20]
	while (1)
	{
		char *str="Enter sender_HPT task\r\n about to SEND a number to the queue\r\n";
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <Sender_HPT_Task+0x68>)
 800081c:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 800081e:	6938      	ldr	r0, [r7, #16]
 8000820:	f7ff fcd6 	bl	80001d0 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800082c:	6939      	ldr	r1, [r7, #16]
 800082e:	4811      	ldr	r0, [pc, #68]	; (8000874 <Sender_HPT_Task+0x6c>)
 8000830:	f002 fbf2 	bl	8003018 <HAL_UART_Transmit>

		if (xQueueSend(SimpleQueue, &i, portMAX_DELAY) == pdPASS)
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <Sender_HPT_Task+0x70>)
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	f107 0108 	add.w	r1, r7, #8
 800083c:	2300      	movs	r3, #0
 800083e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000842:	f004 fa31 	bl	8004ca8 <xQueueGenericSend>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d10c      	bne.n	8000866 <Sender_HPT_Task+0x5e>
		{
			char *str2 = " Successfully sent the number to the queue\r\nLeaving SENDER_HPT Task\r\n\n\n";
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <Sender_HPT_Task+0x74>)
 800084e:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f7ff fcbd 	bl	80001d0 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	b29a      	uxth	r2, r3
 800085a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800085e:	68f9      	ldr	r1, [r7, #12]
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <Sender_HPT_Task+0x6c>)
 8000862:	f002 fbd9 	bl	8003018 <HAL_UART_Transmit>
		}
		vTaskDelay(TickDelay);
 8000866:	6978      	ldr	r0, [r7, #20]
 8000868:	f004 ff2c 	bl	80056c4 <vTaskDelay>
	{
 800086c:	e7d5      	b.n	800081a <Sender_HPT_Task+0x12>
 800086e:	bf00      	nop
 8000870:	08006a9c 	.word	0x08006a9c
 8000874:	2000100c 	.word	0x2000100c
 8000878:	20001008 	.word	0x20001008
 800087c:	08006adc 	.word	0x08006adc

08000880 <Sender_LPT_Task>:
	}
}


void Sender_LPT_Task (void *argument)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	int ToSend;
	uint32_t TickDelay = pdMS_TO_TICKS(1000);
 8000888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088c:	617b      	str	r3, [r7, #20]
	while (1)
	{
		ToSend=(int) argument;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	60bb      	str	r3, [r7, #8]
		char *str="Enter sender_LPT task\r\n about to SEND a number to the queue\r\n";
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <Sender_LPT_Task+0x60>)
 8000894:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000896:	6938      	ldr	r0, [r7, #16]
 8000898:	f7ff fc9a 	bl	80001d0 <strlen>
 800089c:	4603      	mov	r3, r0
 800089e:	b29a      	uxth	r2, r3
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008a4:	6939      	ldr	r1, [r7, #16]
 80008a6:	480f      	ldr	r0, [pc, #60]	; (80008e4 <Sender_LPT_Task+0x64>)
 80008a8:	f002 fbb6 	bl	8003018 <HAL_UART_Transmit>

		xQueueSend(SimpleQueue, &ToSend, portMAX_DELAY);
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <Sender_LPT_Task+0x68>)
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	f107 0108 	add.w	r1, r7, #8
 80008b4:	2300      	movs	r3, #0
 80008b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008ba:	f004 f9f5 	bl	8004ca8 <xQueueGenericSend>

	    char *str2 = " Successfully sent the number to the queue\r\nLeaving SENDER_LPT Task\r\n\n\n";
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <Sender_LPT_Task+0x6c>)
 80008c0:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f7ff fc84 	bl	80001d0 <strlen>
 80008c8:	4603      	mov	r3, r0
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008d0:	68f9      	ldr	r1, [r7, #12]
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <Sender_LPT_Task+0x64>)
 80008d4:	f002 fba0 	bl	8003018 <HAL_UART_Transmit>

		vTaskDelay(TickDelay);
 80008d8:	6978      	ldr	r0, [r7, #20]
 80008da:	f004 fef3 	bl	80056c4 <vTaskDelay>
	{
 80008de:	e7d6      	b.n	800088e <Sender_LPT_Task+0xe>
 80008e0:	08006b24 	.word	0x08006b24
 80008e4:	2000100c 	.word	0x2000100c
 80008e8:	20001008 	.word	0x20001008
 80008ec:	08006b64 	.word	0x08006b64

080008f0 <Receiver_Task>:
	}
}

void Receiver_Task (void *argument)
{
 80008f0:	b5b0      	push	{r4, r5, r7, lr}
 80008f2:	b09e      	sub	sp, #120	; 0x78
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	int received=0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t TickDelay = pdMS_TO_TICKS(3000);
 80008fc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000900:	677b      	str	r3, [r7, #116]	; 0x74
	while (1)
	{
		char str[100];
		strcpy(str,"Enter receiver task\r\n about to RECEIVE a number to the queue\r\n");
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	4a25      	ldr	r2, [pc, #148]	; (800099c <Receiver_Task+0xac>)
 8000908:	461c      	mov	r4, r3
 800090a:	4615      	mov	r5, r2
 800090c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000918:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800091c:	c407      	stmia	r4!, {r0, r1, r2}
 800091e:	8023      	strh	r3, [r4, #0]
 8000920:	3402      	adds	r4, #2
 8000922:	0c1b      	lsrs	r3, r3, #16
 8000924:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fc50 	bl	80001d0 <strlen>
 8000930:	4603      	mov	r3, r0
 8000932:	b29a      	uxth	r2, r3
 8000934:	f107 010c 	add.w	r1, r7, #12
 8000938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800093c:	4818      	ldr	r0, [pc, #96]	; (80009a0 <Receiver_Task+0xb0>)
 800093e:	f002 fb6b 	bl	8003018 <HAL_UART_Transmit>

		if (xQueueReceive(SimpleQueue, &received, portMAX_DELAY) != pdTRUE)
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <Receiver_Task+0xb4>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800094a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800094e:	4618      	mov	r0, r3
 8000950:	f004 fb3c 	bl	8004fcc <xQueueReceive>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	d007      	beq.n	800096a <Receiver_Task+0x7a>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Error in Receiving from Queue\r\n\n", 31, 1000);
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	221f      	movs	r2, #31
 8000960:	4911      	ldr	r1, [pc, #68]	; (80009a8 <Receiver_Task+0xb8>)
 8000962:	480f      	ldr	r0, [pc, #60]	; (80009a0 <Receiver_Task+0xb0>)
 8000964:	f002 fb58 	bl	8003018 <HAL_UART_Transmit>
 8000968:	e014      	b.n	8000994 <Receiver_Task+0xa4>
		}
		else
		{
			sprintf(str, " Successfully RECEIVED the number %d to the queue\r\nLeaving RECEIVER Task\r\n\n\n",received);
 800096a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	490e      	ldr	r1, [pc, #56]	; (80009ac <Receiver_Task+0xbc>)
 8000972:	4618      	mov	r0, r3
 8000974:	f005 fc3e 	bl	80061f4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fc27 	bl	80001d0 <strlen>
 8000982:	4603      	mov	r3, r0
 8000984:	b29a      	uxth	r2, r3
 8000986:	f107 010c 	add.w	r1, r7, #12
 800098a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800098e:	4804      	ldr	r0, [pc, #16]	; (80009a0 <Receiver_Task+0xb0>)
 8000990:	f002 fb42 	bl	8003018 <HAL_UART_Transmit>
		}
		vTaskDelay(TickDelay);
 8000994:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000996:	f004 fe95 	bl	80056c4 <vTaskDelay>
	{
 800099a:	e7b2      	b.n	8000902 <Receiver_Task+0x12>
 800099c:	08006bac 	.word	0x08006bac
 80009a0:	2000100c 	.word	0x2000100c
 80009a4:	20001008 	.word	0x20001008
 80009a8:	08006bec 	.word	0x08006bec
 80009ac:	08006c10 	.word	0x08006c10

080009b0 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &Rx_data, 1);
 80009b8:	2201      	movs	r2, #1
 80009ba:	4917      	ldr	r1, [pc, #92]	; (8000a18 <HAL_UART_RxCpltCallback+0x68>)
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f002 fbbf 	bl	8003140 <HAL_UART_Receive_IT>
	int ToSend = 123456789;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_UART_RxCpltCallback+0x6c>)
 80009c4:	60fb      	str	r3, [r7, #12]
	if (Rx_data == 'r')
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <HAL_UART_RxCpltCallback+0x68>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b72      	cmp	r3, #114	; 0x72
 80009cc:	d11f      	bne.n	8000a0e <HAL_UART_RxCpltCallback+0x5e>
	{
		 /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
		 it will get set to pdTRUE inside the interrupt safe API function if a
		 context switch is required. */
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]

		if (xQueueSendToFrontFromISR(SimpleQueue, &ToSend, &xHigherPriorityTaskWoken) == pdPASS)
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <HAL_UART_RxCpltCallback+0x70>)
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	f107 0208 	add.w	r2, r7, #8
 80009da:	f107 010c 	add.w	r1, r7, #12
 80009de:	2301      	movs	r3, #1
 80009e0:	f004 fa5c 	bl	8004e9c <xQueueGenericSendFromISR>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d106      	bne.n	80009f8 <HAL_UART_RxCpltCallback+0x48>
		{
			HAL_UART_Transmit(huart, (uint8_t *)"\r\n\nSent from ISR\r\n\n", 17, 500);
 80009ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009ee:	2211      	movs	r2, #17
 80009f0:	490c      	ldr	r1, [pc, #48]	; (8000a24 <HAL_UART_RxCpltCallback+0x74>)
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f002 fb10 	bl	8003018 <HAL_UART_Transmit>
		 xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
		 then calling portEND_SWITCHING_ISR() will request a context switch. If
		 xHigherPriorityTaskWoken is still pdFALSE then calling
		 portEND_SWITCHING_ISR() will have no effect */

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d007      	beq.n	8000a0e <HAL_UART_RxCpltCallback+0x5e>
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_UART_RxCpltCallback+0x78>)
 8000a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	f3bf 8f4f 	dsb	sy
 8000a0a:	f3bf 8f6f 	isb	sy
	}
}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20001004 	.word	0x20001004
 8000a1c:	075bcd15 	.word	0x075bcd15
 8000a20:	20001008 	.word	0x20001008
 8000a24:	08006c60 	.word	0x08006c60
 8000a28:	e000ed04 	.word	0xe000ed04

08000a2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d101      	bne.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a3e:	f000 f973 	bl	8000d28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40012c00 	.word	0x40012c00

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <Error_Handler+0x6>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4a11      	ldr	r2, [pc, #68]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6593      	str	r3, [r2, #88]	; 0x58
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	210f      	movs	r1, #15
 8000a92:	f06f 0001 	mvn.w	r0, #1
 8000a96:	f000 fa1d 	bl	8000ed4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <HAL_UART_MspInit+0x8c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d130      	bne.n	8000b2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aca:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000afa:	230c      	movs	r3, #12
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f000 fa86 	bl	8001028 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2105      	movs	r1, #5
 8000b20:	2026      	movs	r0, #38	; 0x26
 8000b22:	f000 f9d7 	bl	8000ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b26:	2026      	movs	r0, #38	; 0x26
 8000b28:	f000 f9f0 	bl	8000f0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40004400 	.word	0x40004400
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	; 0x30
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	2019      	movs	r0, #25
 8000b52:	f000 f9bf 	bl	8000ed4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b56:	2019      	movs	r0, #25
 8000b58:	f000 f9d8 	bl	8000f0c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b5c:	4a1e      	ldr	r2, [pc, #120]	; (8000bd8 <HAL_InitTick+0x9c>)
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <HAL_InitTick+0x9c>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b66:	6613      	str	r3, [r2, #96]	; 0x60
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_InitTick+0x9c>)
 8000b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0210 	add.w	r2, r7, #16
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f9e8 	bl	8001f54 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b84:	f001 f9d0 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8000b88:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <HAL_InitTick+0xa0>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9b      	lsrs	r3, r3, #18
 8000b94:	3b01      	subs	r3, #1
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_InitTick+0xa4>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <HAL_InitTick+0xa8>)
 8000b9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_InitTick+0xa4>)
 8000ba0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_InitTick+0xa4>)
 8000ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000baa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_InitTick+0xa4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_InitTick+0xa4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bb8:	4809      	ldr	r0, [pc, #36]	; (8000be0 <HAL_InitTick+0xa4>)
 8000bba:	f001 ff0d 	bl	80029d8 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d104      	bne.n	8000bce <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <HAL_InitTick+0xa4>)
 8000bc6:	f001 ff69 	bl	8002a9c <HAL_TIM_Base_Start_IT>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3730      	adds	r7, #48	; 0x30
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	431bde83 	.word	0x431bde83
 8000be0:	20001094 	.word	0x20001094
 8000be4:	40012c00 	.word	0x40012c00

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c1a:	f001 ffaf 	bl	8002b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20001094 	.word	0x20001094

08000c28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <USART2_IRQHandler+0x10>)
 8000c2e:	f002 facb 	bl	80031c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000100c 	.word	0x2000100c

08000c3c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x50>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x16>
		heap_end = &end;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <_sbrk+0x50>)
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <_sbrk+0x54>)
 8000c50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <_sbrk+0x50>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <_sbrk+0x50>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	466a      	mov	r2, sp
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d907      	bls.n	8000c76 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000c66:	f005 fa87 	bl	8006178 <__errno>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c74:	e006      	b.n	8000c84 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <_sbrk+0x50>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <_sbrk+0x50>)
 8000c80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200002e4 	.word	0x200002e4
 8000c90:	200010e8 	.word	0x200010e8

08000c94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c98:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <SystemInit+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <SystemInit+0x5c>)
 8000c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ca8:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <SystemInit+0x60>)
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <SystemInit+0x60>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <SystemInit+0x60>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cba:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <SystemInit+0x60>)
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <SystemInit+0x60>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cc4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cc8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <SystemInit+0x60>)
 8000ccc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cd0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <SystemInit+0x60>)
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <SystemInit+0x60>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cdc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SystemInit+0x60>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d02:	2003      	movs	r0, #3
 8000d04:	f000 f8db 	bl	8000ebe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff ff17 	bl	8000b3c <HAL_InitTick>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d002      	beq.n	8000d1a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	e001      	b.n	8000d1e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d1a:	f7ff fe9d 	bl	8000a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	200010e0 	.word	0x200010e0

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200010e0 	.word	0x200010e0

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	db0b      	blt.n	8000df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dde:	4909      	ldr	r1, [pc, #36]	; (8000e04 <__NVIC_EnableIRQ+0x38>)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	095b      	lsrs	r3, r3, #5
 8000de6:	79fa      	ldrb	r2, [r7, #7]
 8000de8:	f002 021f 	and.w	r2, r2, #31
 8000dec:	2001      	movs	r0, #1
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	490d      	ldr	r1, [pc, #52]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	4909      	ldr	r1, [pc, #36]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	2201      	movs	r2, #1
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	1e5a      	subs	r2, r3, #1
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	1e59      	subs	r1, r3, #1
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff4e 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee6:	f7ff ff63 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000eea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	6978      	ldr	r0, [r7, #20]
 8000ef2:	f7ff ffb3 	bl	8000e5c <NVIC_EncodePriority>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff82 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff56 	bl	8000dcc <__NVIC_EnableIRQ>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d008      	beq.n	8000f52 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2204      	movs	r2, #4
 8000f44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e022      	b.n	8000f98 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6812      	ldr	r2, [r2, #0]
 8000f5a:	6812      	ldr	r2, [r2, #0]
 8000f5c:	f022 020e 	bic.w	r2, r2, #14
 8000f60:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	f022 0201 	bic.w	r2, r2, #1
 8000f70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000f7a:	f002 021c 	and.w	r2, r2, #28
 8000f7e:	2101      	movs	r1, #1
 8000f80:	fa01 f202 	lsl.w	r2, r1, r2
 8000f84:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d005      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	e029      	b.n	800101c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	f022 020e 	bic.w	r2, r2, #14
 8000fd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	f022 0201 	bic.w	r2, r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000ff0:	f002 021c 	and.w	r2, r2, #28
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	4798      	blx	r3
    }
  }
  return status;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e17f      	b.n	8001338 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8171 	beq.w	8001332 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d00b      	beq.n	8001070 <HAL_GPIO_Init+0x48>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d007      	beq.n	8001070 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001064:	2b11      	cmp	r3, #17
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b12      	cmp	r3, #18
 800106e:	d130      	bne.n	80010d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010a6:	2201      	movs	r2, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	f003 0201 	and.w	r2, r3, #1
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d118      	bne.n	8001110 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010e4:	2201      	movs	r2, #1
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	08db      	lsrs	r3, r3, #3
 80010fa:	f003 0201 	and.w	r2, r3, #1
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x128>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b12      	cmp	r3, #18
 800114e:	d123      	bne.n	8001198 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	6939      	ldr	r1, [r7, #16]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0203 	and.w	r2, r3, #3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80ac 	beq.w	8001332 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4a5e      	ldr	r2, [pc, #376]	; (8001354 <HAL_GPIO_Init+0x32c>)
 80011dc:	4b5d      	ldr	r3, [pc, #372]	; (8001354 <HAL_GPIO_Init+0x32c>)
 80011de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6613      	str	r3, [r2, #96]	; 0x60
 80011e6:	4b5b      	ldr	r3, [pc, #364]	; (8001354 <HAL_GPIO_Init+0x32c>)
 80011e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011f2:	4a59      	ldr	r2, [pc, #356]	; (8001358 <HAL_GPIO_Init+0x330>)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800121c:	d025      	beq.n	800126a <HAL_GPIO_Init+0x242>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4e      	ldr	r2, [pc, #312]	; (800135c <HAL_GPIO_Init+0x334>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d01f      	beq.n	8001266 <HAL_GPIO_Init+0x23e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4d      	ldr	r2, [pc, #308]	; (8001360 <HAL_GPIO_Init+0x338>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x23a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_GPIO_Init+0x33c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x236>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4b      	ldr	r2, [pc, #300]	; (8001368 <HAL_GPIO_Init+0x340>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x232>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4a      	ldr	r2, [pc, #296]	; (800136c <HAL_GPIO_Init+0x344>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x22e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a49      	ldr	r2, [pc, #292]	; (8001370 <HAL_GPIO_Init+0x348>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x22a>
 800124e:	2306      	movs	r3, #6
 8001250:	e00c      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001252:	2307      	movs	r3, #7
 8001254:	e00a      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001256:	2305      	movs	r3, #5
 8001258:	e008      	b.n	800126c <HAL_GPIO_Init+0x244>
 800125a:	2304      	movs	r3, #4
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x244>
 800125e:	2303      	movs	r3, #3
 8001260:	e004      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001262:	2302      	movs	r3, #2
 8001264:	e002      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x244>
 800126a:	2300      	movs	r3, #0
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	f002 0203 	and.w	r2, r2, #3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4093      	lsls	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800127c:	4936      	ldr	r1, [pc, #216]	; (8001358 <HAL_GPIO_Init+0x330>)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800128a:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <HAL_GPIO_Init+0x34c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ae:	4a31      	ldr	r2, [pc, #196]	; (8001374 <HAL_GPIO_Init+0x34c>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <HAL_GPIO_Init+0x34c>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012d8:	4a26      	ldr	r2, [pc, #152]	; (8001374 <HAL_GPIO_Init+0x34c>)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <HAL_GPIO_Init+0x34c>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001302:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <HAL_GPIO_Init+0x34c>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_GPIO_Init+0x34c>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800132c:	4a11      	ldr	r2, [pc, #68]	; (8001374 <HAL_GPIO_Init+0x34c>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa22 f303 	lsr.w	r3, r2, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	f47f ae78 	bne.w	8001038 <HAL_GPIO_Init+0x10>
  }
}
 8001348:	bf00      	nop
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000
 800135c:	48000400 	.word	0x48000400
 8001360:	48000800 	.word	0x48000800
 8001364:	48000c00 	.word	0x48000c00
 8001368:	48001000 	.word	0x48001000
 800136c:	48001400 	.word	0x48001400
 8001370:	48001800 	.word	0x48001800
 8001374:	40010400 	.word	0x40010400

08001378 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <HAL_PWREx_GetVoltageRange+0x18>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40007000 	.word	0x40007000

08001394 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a2:	d130      	bne.n	8001406 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013b0:	d038      	beq.n	8001424 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b2:	4a20      	ldr	r2, [pc, #128]	; (8001434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2232      	movs	r2, #50	; 0x32
 80013c8:	fb02 f303 	mul.w	r3, r2, r3
 80013cc:	4a1b      	ldr	r2, [pc, #108]	; (800143c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0c9b      	lsrs	r3, r3, #18
 80013d4:	3301      	adds	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d8:	e002      	b.n	80013e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3b01      	subs	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ec:	d102      	bne.n	80013f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f2      	bne.n	80013da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001400:	d110      	bne.n	8001424 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e00f      	b.n	8001426 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800140e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001412:	d007      	beq.n	8001424 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800141e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001422:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40007000 	.word	0x40007000
 8001438:	20000000 	.word	0x20000000
 800143c:	431bde83 	.word	0x431bde83

08001440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e3d4      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001452:	4ba1      	ldr	r3, [pc, #644]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800145c:	4b9e      	ldr	r3, [pc, #632]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80e4 	beq.w	800163c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d007      	beq.n	800148a <HAL_RCC_OscConfig+0x4a>
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b0c      	cmp	r3, #12
 800147e:	f040 808b 	bne.w	8001598 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2b01      	cmp	r3, #1
 8001486:	f040 8087 	bne.w	8001598 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800148a:	4b93      	ldr	r3, [pc, #588]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d005      	beq.n	80014a2 <HAL_RCC_OscConfig+0x62>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e3ac      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1a      	ldr	r2, [r3, #32]
 80014a6:	4b8c      	ldr	r3, [pc, #560]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <HAL_RCC_OscConfig+0x7c>
 80014b2:	4b89      	ldr	r3, [pc, #548]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014ba:	e005      	b.n	80014c8 <HAL_RCC_OscConfig+0x88>
 80014bc:	4b86      	ldr	r3, [pc, #536]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80014be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d923      	bls.n	8001514 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 fd71 	bl	8001fb8 <RCC_SetFlashLatencyFromMSIRange>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e38d      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e0:	4a7d      	ldr	r2, [pc, #500]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80014e2:	4b7d      	ldr	r3, [pc, #500]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	497a      	ldr	r1, [pc, #488]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80014ee:	4b7a      	ldr	r3, [pc, #488]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014fe:	4976      	ldr	r1, [pc, #472]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 8001500:	4b75      	ldr	r3, [pc, #468]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	4313      	orrs	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
 8001512:	e025      	b.n	8001560 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001514:	4a70      	ldr	r2, [pc, #448]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 8001516:	4b70      	ldr	r3, [pc, #448]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f043 0308 	orr.w	r3, r3, #8
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	496d      	ldr	r1, [pc, #436]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 8001522:	4b6d      	ldr	r3, [pc, #436]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001532:	4969      	ldr	r1, [pc, #420]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 8001534:	4b68      	ldr	r3, [pc, #416]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	4313      	orrs	r3, r2
 8001544:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d109      	bne.n	8001560 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4618      	mov	r0, r3
 8001552:	f000 fd31 	bl	8001fb8 <RCC_SetFlashLatencyFromMSIRange>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e34d      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001560:	f000 fc36 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001564:	4601      	mov	r1, r0
 8001566:	4b5c      	ldr	r3, [pc, #368]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	f003 030f 	and.w	r3, r3, #15
 8001570:	4a5a      	ldr	r2, [pc, #360]	; (80016dc <HAL_RCC_OscConfig+0x29c>)
 8001572:	5cd3      	ldrb	r3, [r2, r3]
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	fa21 f303 	lsr.w	r3, r1, r3
 800157c:	4a58      	ldr	r2, [pc, #352]	; (80016e0 <HAL_RCC_OscConfig+0x2a0>)
 800157e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001580:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <HAL_RCC_OscConfig+0x2a4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fad9 	bl	8000b3c <HAL_InitTick>
 800158a:	4603      	mov	r3, r0
 800158c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d052      	beq.n	800163a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	e331      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d032      	beq.n	8001606 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015a0:	4a4d      	ldr	r2, [pc, #308]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80015a2:	4b4d      	ldr	r3, [pc, #308]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fbd0 	bl	8000d50 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015b4:	f7ff fbcc 	bl	8000d50 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e31a      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c6:	4b44      	ldr	r3, [pc, #272]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d2:	4a41      	ldr	r2, [pc, #260]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80015d4:	4b40      	ldr	r3, [pc, #256]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f043 0308 	orr.w	r3, r3, #8
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	493e      	ldr	r1, [pc, #248]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80015e0:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f0:	4939      	ldr	r1, [pc, #228]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80015f2:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
 8001604:	e01a      	b.n	800163c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001606:	4a34      	ldr	r2, [pc, #208]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 8001608:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001612:	f7ff fb9d 	bl	8000d50 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800161a:	f7ff fb99 	bl	8000d50 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e2e7      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x1da>
 8001638:	e000      	b.n	800163c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800163a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d074      	beq.n	8001732 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b08      	cmp	r3, #8
 800164c:	d005      	beq.n	800165a <HAL_RCC_OscConfig+0x21a>
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	2b0c      	cmp	r3, #12
 8001652:	d10e      	bne.n	8001672 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d10b      	bne.n	8001672 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165a:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d064      	beq.n	8001730 <HAL_RCC_OscConfig+0x2f0>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d160      	bne.n	8001730 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e2c4      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167a:	d106      	bne.n	800168a <HAL_RCC_OscConfig+0x24a>
 800167c:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e01d      	b.n	80016c6 <HAL_RCC_OscConfig+0x286>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x26e>
 8001694:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	e00b      	b.n	80016c6 <HAL_RCC_OscConfig+0x286>
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d01c      	beq.n	8001708 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb3f 	bl	8000d50 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d4:	e011      	b.n	80016fa <HAL_RCC_OscConfig+0x2ba>
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	08006c7c 	.word	0x08006c7c
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fb32 	bl	8000d50 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e280      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016fa:	4baf      	ldr	r3, [pc, #700]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x2a8>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fb22 	bl	8000d50 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fb1e 	bl	8000d50 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e26c      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001722:	4ba5      	ldr	r3, [pc, #660]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x2d0>
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d060      	beq.n	8001800 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2b04      	cmp	r3, #4
 8001742:	d005      	beq.n	8001750 <HAL_RCC_OscConfig+0x310>
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b0c      	cmp	r3, #12
 8001748:	d119      	bne.n	800177e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d116      	bne.n	800177e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001750:	4b99      	ldr	r3, [pc, #612]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_OscConfig+0x328>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e249      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4993      	ldr	r1, [pc, #588]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 800176a:	4b93      	ldr	r3, [pc, #588]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	061b      	lsls	r3, r3, #24
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800177c:	e040      	b.n	8001800 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d023      	beq.n	80017ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001786:	4a8c      	ldr	r2, [pc, #560]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001788:	4b8b      	ldr	r3, [pc, #556]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7ff fadd 	bl	8000d50 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff fad9 	bl	8000d50 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e227      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ac:	4b82      	ldr	r3, [pc, #520]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	497f      	ldr	r1, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 80017ba:	4b7f      	ldr	r3, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	061b      	lsls	r3, r3, #24
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e018      	b.n	8001800 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4a7a      	ldr	r2, [pc, #488]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 80017d0:	4b79      	ldr	r3, [pc, #484]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7ff fab9 	bl	8000d50 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff fab5 	bl	8000d50 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e203      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f4:	4b70      	ldr	r3, [pc, #448]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d03c      	beq.n	8001886 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d01c      	beq.n	800184e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001814:	4a68      	ldr	r2, [pc, #416]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001816:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff fa94 	bl	8000d50 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182c:	f7ff fa90 	bl	8000d50 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1de      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800183e:	4b5e      	ldr	r3, [pc, #376]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ef      	beq.n	800182c <HAL_RCC_OscConfig+0x3ec>
 800184c:	e01b      	b.n	8001886 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800184e:	4a5a      	ldr	r2, [pc, #360]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001850:	4b59      	ldr	r3, [pc, #356]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185e:	f7ff fa77 	bl	8000d50 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001866:	f7ff fa73 	bl	8000d50 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e1c1      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001878:	4b4f      	ldr	r3, [pc, #316]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 800187a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1ef      	bne.n	8001866 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80a6 	beq.w	80019e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001898:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10d      	bne.n	80018c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	4a44      	ldr	r2, [pc, #272]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 80018a6:	4b44      	ldr	r3, [pc, #272]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ae:	6593      	str	r3, [r2, #88]	; 0x58
 80018b0:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018bc:	2301      	movs	r3, #1
 80018be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c0:	4b3e      	ldr	r3, [pc, #248]	; (80019bc <HAL_RCC_OscConfig+0x57c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d118      	bne.n	80018fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018cc:	4a3b      	ldr	r2, [pc, #236]	; (80019bc <HAL_RCC_OscConfig+0x57c>)
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <HAL_RCC_OscConfig+0x57c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d8:	f7ff fa3a 	bl	8000d50 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e0:	f7ff fa36 	bl	8000d50 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e184      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f2:	4b32      	ldr	r3, [pc, #200]	; (80019bc <HAL_RCC_OscConfig+0x57c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d108      	bne.n	8001918 <HAL_RCC_OscConfig+0x4d8>
 8001906:	4a2c      	ldr	r2, [pc, #176]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 800190a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001916:	e024      	b.n	8001962 <HAL_RCC_OscConfig+0x522>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b05      	cmp	r3, #5
 800191e:	d110      	bne.n	8001942 <HAL_RCC_OscConfig+0x502>
 8001920:	4a25      	ldr	r2, [pc, #148]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001922:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001930:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001940:	e00f      	b.n	8001962 <HAL_RCC_OscConfig+0x522>
 8001942:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194a:	f023 0301 	bic.w	r3, r3, #1
 800194e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001952:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 8001956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195a:	f023 0304 	bic.w	r3, r3, #4
 800195e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d016      	beq.n	8001998 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196a:	f7ff f9f1 	bl	8000d50 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001970:	e00a      	b.n	8001988 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001972:	f7ff f9ed 	bl	8000d50 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e139      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_RCC_OscConfig+0x578>)
 800198a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0ed      	beq.n	8001972 <HAL_RCC_OscConfig+0x532>
 8001996:	e01a      	b.n	80019ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7ff f9da 	bl	8000d50 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800199e:	e00f      	b.n	80019c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7ff f9d6 	bl	8000d50 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d906      	bls.n	80019c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e122      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c0:	4b90      	ldr	r3, [pc, #576]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1e8      	bne.n	80019a0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ce:	7ffb      	ldrb	r3, [r7, #31]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d4:	4a8b      	ldr	r2, [pc, #556]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 80019d6:	4b8b      	ldr	r3, [pc, #556]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 8108 	beq.w	8001bfa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	f040 80d0 	bne.w	8001b94 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019f4:	4b83      	ldr	r3, [pc, #524]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f003 0203 	and.w	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d130      	bne.n	8001a6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	3b01      	subs	r3, #1
 8001a14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d127      	bne.n	8001a6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d11f      	bne.n	8001a6a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a34:	2a07      	cmp	r2, #7
 8001a36:	bf14      	ite	ne
 8001a38:	2201      	movne	r2, #1
 8001a3a:	2200      	moveq	r2, #0
 8001a3c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d113      	bne.n	8001a6a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d109      	bne.n	8001a6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	085b      	lsrs	r3, r3, #1
 8001a62:	3b01      	subs	r3, #1
 8001a64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d06e      	beq.n	8001b48 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	2b0c      	cmp	r3, #12
 8001a6e:	d069      	beq.n	8001b44 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a70:	4b64      	ldr	r3, [pc, #400]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a7c:	4b61      	ldr	r3, [pc, #388]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0b7      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a8c:	4a5d      	ldr	r2, [pc, #372]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a96:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a98:	f7ff f95a 	bl	8000d50 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff f956 	bl	8000d50 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e0a4      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab2:	4b54      	ldr	r3, [pc, #336]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001abe:	4851      	ldr	r0, [pc, #324]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001ac0:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <HAL_RCC_OscConfig+0x7c8>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ad0:	3a01      	subs	r2, #1
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	4311      	orrs	r1, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ada:	0212      	lsls	r2, r2, #8
 8001adc:	4311      	orrs	r1, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ae2:	0852      	lsrs	r2, r2, #1
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	0552      	lsls	r2, r2, #21
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001aee:	0852      	lsrs	r2, r2, #1
 8001af0:	3a01      	subs	r2, #1
 8001af2:	0652      	lsls	r2, r2, #25
 8001af4:	4311      	orrs	r1, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001afa:	0912      	lsrs	r2, r2, #4
 8001afc:	0452      	lsls	r2, r2, #17
 8001afe:	430a      	orrs	r2, r1
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b04:	4a3f      	ldr	r2, [pc, #252]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001b06:	4b3f      	ldr	r3, [pc, #252]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b10:	4a3c      	ldr	r2, [pc, #240]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001b12:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b1c:	f7ff f918 	bl	8000d50 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f914 	bl	8000d50 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e062      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b36:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b42:	e05a      	b.n	8001bfa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e059      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b48:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d152      	bne.n	8001bfa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b54:	4a2b      	ldr	r2, [pc, #172]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001b56:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b60:	4a28      	ldr	r2, [pc, #160]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b6c:	f7ff f8f0 	bl	8000d50 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff f8ec 	bl	8000d50 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e03a      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x734>
 8001b92:	e032      	b.n	8001bfa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d02d      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9a:	4a1a      	ldr	r2, [pc, #104]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d105      	bne.n	8001bbe <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001bb2:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f023 0303 	bic.w	r3, r3, #3
 8001bbc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bbe:	4a11      	ldr	r2, [pc, #68]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bcc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bce:	f7ff f8bf 	bl	8000d50 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7ff f8bb 	bl	8000d50 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e009      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_RCC_OscConfig+0x7c4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x796>
 8001bf4:	e001      	b.n	8001bfa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	f99d808c 	.word	0xf99d808c

08001c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0c8      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0207 	and.w	r2, r3, #7
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d210      	bcs.n	8001c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4963      	ldr	r1, [pc, #396]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c30:	4b62      	ldr	r3, [pc, #392]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f023 0207 	bic.w	r2, r3, #7
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b5f      	ldr	r3, [pc, #380]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0207 	and.w	r2, r3, #7
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b0      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d04c      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c64:	4b56      	ldr	r3, [pc, #344]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d121      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e09e      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d115      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e092      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c94:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e086      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca4:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e07e      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb4:	4942      	ldr	r1, [pc, #264]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb6:	4b42      	ldr	r3, [pc, #264]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f023 0203 	bic.w	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc6:	f7ff f843 	bl	8000d50 <HAL_GetTick>
 8001cca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cce:	f7ff f83f 	bl	8000d50 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e066      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce4:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 020c 	and.w	r2, r3, #12
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d1eb      	bne.n	8001cce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d02:	492f      	ldr	r1, [pc, #188]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d04:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0207 	and.w	r2, r3, #7
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d910      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4926      	ldr	r1, [pc, #152]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 0207 	bic.w	r2, r3, #7
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0207 	and.w	r2, r3, #7
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e036      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	491b      	ldr	r1, [pc, #108]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d52:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6e:	4914      	ldr	r1, [pc, #80]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d82:	f000 f825 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d86:	4601      	mov	r1, r0
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d94:	5cd3      	ldrb	r3, [r2, r3]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fec8 	bl	8000b3c <HAL_InitTick>
 8001dac:	4603      	mov	r3, r0
 8001dae:	72fb      	strb	r3, [r7, #11]

  return status;
 8001db0:	7afb      	ldrb	r3, [r7, #11]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08006c7c 	.word	0x08006c7c
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de8:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x34>
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d121      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d11e      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e10:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e005      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e2c:	4a2a      	ldr	r2, [pc, #168]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10d      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e004      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e54:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d133      	bne.n	8001ec6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d002      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0xa4>
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0xaa>
 8001e72:	e005      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e76:	617b      	str	r3, [r7, #20]
      break;
 8001e78:	e005      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e7c:	617b      	str	r3, [r7, #20]
      break;
 8001e7e:	e002      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	617b      	str	r3, [r7, #20]
      break;
 8001e84:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	3301      	adds	r3, #1
 8001e92:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	fb02 f203 	mul.w	r2, r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0e5b      	lsrs	r3, r3, #25
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ec6:	69bb      	ldr	r3, [r7, #24]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3724      	adds	r7, #36	; 0x24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08006c94 	.word	0x08006c94
 8001edc:	00f42400 	.word	0x00f42400
 8001ee0:	007a1200 	.word	0x007a1200

08001ee4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000000 	.word	0x20000000

08001efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f00:	f7ff fff0 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f04:	4601      	mov	r1, r0
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08006c8c 	.word	0x08006c8c

08001f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f2c:	f7ff ffda 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f30:	4601      	mov	r1, r0
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	0adb      	lsrs	r3, r3, #11
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f3e:	5cd3      	ldrb	r3, [r2, r3]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	08006c8c 	.word	0x08006c8c

08001f54 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	220f      	movs	r2, #15
 8001f62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0203 	and.w	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <HAL_RCC_GetClockConfig+0x60>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0207 	and.w	r2, r3, #7
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	601a      	str	r2, [r3, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40022000 	.word	0x40022000

08001fb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fc4:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fd0:	f7ff f9d2 	bl	8001378 <HAL_PWREx_GetVoltageRange>
 8001fd4:	6178      	str	r0, [r7, #20]
 8001fd6:	e014      	b.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	4a25      	ldr	r2, [pc, #148]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ff0:	f7ff f9c2 	bl	8001378 <HAL_PWREx_GetVoltageRange>
 8001ff4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002000:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002008:	d10b      	bne.n	8002022 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b80      	cmp	r3, #128	; 0x80
 800200e:	d919      	bls.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2ba0      	cmp	r3, #160	; 0xa0
 8002014:	d902      	bls.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002016:	2302      	movs	r3, #2
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	e013      	b.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800201c:	2301      	movs	r3, #1
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	e010      	b.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b80      	cmp	r3, #128	; 0x80
 8002026:	d902      	bls.n	800202e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002028:	2303      	movs	r3, #3
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	e00a      	b.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d102      	bne.n	800203a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002034:	2302      	movs	r3, #2
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	e004      	b.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b70      	cmp	r3, #112	; 0x70
 800203e:	d101      	bne.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002040:	2301      	movs	r3, #1
 8002042:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002044:	490b      	ldr	r1, [pc, #44]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0207 	and.w	r2, r3, #7
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	429a      	cmp	r2, r3
 8002060:	d001      	beq.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	40022000 	.word	0x40022000

08002078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002080:	2300      	movs	r3, #0
 8002082:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002084:	2300      	movs	r3, #0
 8002086:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002090:	2b00      	cmp	r3, #0
 8002092:	d03f      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800209c:	d01c      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800209e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a2:	d802      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00e      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80020a8:	e01f      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x72>
 80020aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020ae:	d003      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80020b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020b4:	d01c      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80020b6:	e018      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020b8:	4a85      	ldr	r2, [pc, #532]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020ba:	4b85      	ldr	r3, [pc, #532]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020c4:	e015      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3304      	adds	r3, #4
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 fab9 	bl	8002644 <RCCEx_PLLSAI1_Config>
 80020d2:	4603      	mov	r3, r0
 80020d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020d6:	e00c      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3320      	adds	r3, #32
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fba0 	bl	8002824 <RCCEx_PLLSAI2_Config>
 80020e4:	4603      	mov	r3, r0
 80020e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020e8:	e003      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	74fb      	strb	r3, [r7, #19]
      break;
 80020ee:	e000      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80020f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020f2:	7cfb      	ldrb	r3, [r7, #19]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10b      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020f8:	4975      	ldr	r1, [pc, #468]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020fa:	4b75      	ldr	r3, [pc, #468]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002100:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800210e:	e001      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d03f      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002128:	d01c      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800212a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800212e:	d802      	bhi.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00e      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002134:	e01f      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800213a:	d003      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800213c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002140:	d01c      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002142:	e018      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002144:	4a62      	ldr	r2, [pc, #392]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002146:	4b62      	ldr	r3, [pc, #392]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002150:	e015      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3304      	adds	r3, #4
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fa73 	bl	8002644 <RCCEx_PLLSAI1_Config>
 800215e:	4603      	mov	r3, r0
 8002160:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002162:	e00c      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3320      	adds	r3, #32
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fb5a 	bl	8002824 <RCCEx_PLLSAI2_Config>
 8002170:	4603      	mov	r3, r0
 8002172:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002174:	e003      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	74fb      	strb	r3, [r7, #19]
      break;
 800217a:	e000      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800217c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800217e:	7cfb      	ldrb	r3, [r7, #19]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10b      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002184:	4952      	ldr	r1, [pc, #328]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002186:	4b52      	ldr	r3, [pc, #328]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800219a:	e001      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80a0 	beq.w	80022ee <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021b2:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80021c2:	2300      	movs	r3, #0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00d      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c8:	4a41      	ldr	r2, [pc, #260]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021ca:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d2:	6593      	str	r3, [r2, #88]	; 0x58
 80021d4:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e0:	2301      	movs	r3, #1
 80021e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e4:	4a3b      	ldr	r2, [pc, #236]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80021e6:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021f0:	f7fe fdae 	bl	8000d50 <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021f6:	e009      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f8:	f7fe fdaa 	bl	8000d50 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d902      	bls.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	74fb      	strb	r3, [r7, #19]
        break;
 800220a:	e005      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ef      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002218:	7cfb      	ldrb	r3, [r7, #19]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d15c      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800221e:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002228:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d01f      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	429a      	cmp	r2, r3
 800223a:	d019      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002246:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002248:	4a21      	ldr	r2, [pc, #132]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002258:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002268:	4a19      	ldr	r2, [pc, #100]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7fe fd69 	bl	8000d50 <HAL_GetTick>
 800227e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002280:	e00b      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fd65 	bl	8000d50 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d902      	bls.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	74fb      	strb	r3, [r7, #19]
            break;
 8002298:	e006      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ec      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022c6:	e009      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	74bb      	strb	r3, [r7, #18]
 80022cc:	e006      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d8:	7cfb      	ldrb	r3, [r7, #19]
 80022da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022dc:	7c7b      	ldrb	r3, [r7, #17]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d105      	bne.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e2:	4a9e      	ldr	r2, [pc, #632]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022e4:	4b9d      	ldr	r3, [pc, #628]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022fa:	4998      	ldr	r1, [pc, #608]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022fc:	4b97      	ldr	r3, [pc, #604]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f023 0203 	bic.w	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800231c:	498f      	ldr	r1, [pc, #572]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800231e:	4b8f      	ldr	r3, [pc, #572]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	f023 020c 	bic.w	r2, r3, #12
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800233e:	4987      	ldr	r1, [pc, #540]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002340:	4b86      	ldr	r3, [pc, #536]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002360:	497e      	ldr	r1, [pc, #504]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002362:	4b7e      	ldr	r3, [pc, #504]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002368:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002382:	4976      	ldr	r1, [pc, #472]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002384:	4b75      	ldr	r3, [pc, #468]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023a4:	496d      	ldr	r1, [pc, #436]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023a6:	4b6d      	ldr	r3, [pc, #436]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023c6:	4965      	ldr	r1, [pc, #404]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023c8:	4b64      	ldr	r3, [pc, #400]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023e8:	495c      	ldr	r1, [pc, #368]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ea:	4b5c      	ldr	r3, [pc, #368]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800240a:	4954      	ldr	r1, [pc, #336]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800240c:	4b53      	ldr	r3, [pc, #332]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800242c:	494b      	ldr	r1, [pc, #300]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800242e:	4b4b      	ldr	r3, [pc, #300]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002434:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800244e:	4943      	ldr	r1, [pc, #268]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002450:	4b42      	ldr	r3, [pc, #264]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d028      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002470:	493a      	ldr	r1, [pc, #232]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002472:	4b3a      	ldr	r3, [pc, #232]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002478:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800248a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800248e:	d106      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002490:	4a32      	ldr	r2, [pc, #200]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002492:	4b32      	ldr	r3, [pc, #200]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800249a:	60d3      	str	r3, [r2, #12]
 800249c:	e011      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024a6:	d10c      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3304      	adds	r3, #4
 80024ac:	2101      	movs	r1, #1
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f8c8 	bl	8002644 <RCCEx_PLLSAI1_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d028      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024ce:	4923      	ldr	r1, [pc, #140]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024d0:	4b22      	ldr	r3, [pc, #136]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ec:	d106      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ee:	4a1b      	ldr	r2, [pc, #108]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024f0:	4b1a      	ldr	r3, [pc, #104]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f8:	60d3      	str	r3, [r2, #12]
 80024fa:	e011      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002504:	d10c      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3304      	adds	r3, #4
 800250a:	2101      	movs	r1, #1
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f899 	bl	8002644 <RCCEx_PLLSAI1_Config>
 8002512:	4603      	mov	r3, r0
 8002514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d02b      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800252c:	490b      	ldr	r1, [pc, #44]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002534:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800254a:	d109      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800254c:	4a03      	ldr	r2, [pc, #12]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800254e:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002556:	60d3      	str	r3, [r2, #12]
 8002558:	e014      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002568:	d10c      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3304      	adds	r3, #4
 800256e:	2101      	movs	r1, #1
 8002570:	4618      	mov	r0, r3
 8002572:	f000 f867 	bl	8002644 <RCCEx_PLLSAI1_Config>
 8002576:	4603      	mov	r3, r0
 8002578:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800257a:	7cfb      	ldrb	r3, [r7, #19]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d02f      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002590:	492b      	ldr	r1, [pc, #172]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002592:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002598:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ae:	d10d      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3304      	adds	r3, #4
 80025b4:	2102      	movs	r1, #2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f844 	bl	8002644 <RCCEx_PLLSAI1_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d014      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	74bb      	strb	r3, [r7, #18]
 80025ca:	e011      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3320      	adds	r3, #32
 80025da:	2102      	movs	r1, #2
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 f921 	bl	8002824 <RCCEx_PLLSAI2_Config>
 80025e2:	4603      	mov	r3, r0
 80025e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025fc:	4910      	ldr	r1, [pc, #64]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00b      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800261e:	4908      	ldr	r1, [pc, #32]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002620:	4b07      	ldr	r3, [pc, #28]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002636:	7cbb      	ldrb	r3, [r7, #18]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000

08002644 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002652:	4b73      	ldr	r3, [pc, #460]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d018      	beq.n	8002690 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800265e:	4b70      	ldr	r3, [pc, #448]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 0203 	and.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d10d      	bne.n	800268a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
       ||
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002676:	4b6a      	ldr	r3, [pc, #424]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
       ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d044      	beq.n	8002714 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
 800268e:	e041      	b.n	8002714 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d00c      	beq.n	80026b2 <RCCEx_PLLSAI1_Config+0x6e>
 8002698:	2b03      	cmp	r3, #3
 800269a:	d013      	beq.n	80026c4 <RCCEx_PLLSAI1_Config+0x80>
 800269c:	2b01      	cmp	r3, #1
 800269e:	d120      	bne.n	80026e2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026a0:	4b5f      	ldr	r3, [pc, #380]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d11d      	bne.n	80026e8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b0:	e01a      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026b2:	4b5b      	ldr	r3, [pc, #364]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d116      	bne.n	80026ec <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c2:	e013      	b.n	80026ec <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026c4:	4b56      	ldr	r3, [pc, #344]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10f      	bne.n	80026f0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026e0:	e006      	b.n	80026f0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
      break;
 80026e6:	e004      	b.n	80026f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80026e8:	bf00      	nop
 80026ea:	e002      	b.n	80026f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80026ec:	bf00      	nop
 80026ee:	e000      	b.n	80026f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80026f0:	bf00      	nop
    }

    if(status == HAL_OK)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10d      	bne.n	8002714 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026f8:	4849      	ldr	r0, [pc, #292]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026fa:	4b49      	ldr	r3, [pc, #292]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6819      	ldr	r1, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	430b      	orrs	r3, r1
 8002710:	4313      	orrs	r3, r2
 8002712:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d17d      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800271a:	4a41      	ldr	r2, [pc, #260]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 800271c:	4b40      	ldr	r3, [pc, #256]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002726:	f7fe fb13 	bl	8000d50 <HAL_GetTick>
 800272a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800272c:	e009      	b.n	8002742 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800272e:	f7fe fb0f 	bl	8000d50 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d902      	bls.n	8002742 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	73fb      	strb	r3, [r7, #15]
        break;
 8002740:	e005      	b.n	800274e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002742:	4b37      	ldr	r3, [pc, #220]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1ef      	bne.n	800272e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d160      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d111      	bne.n	800277e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800275a:	4831      	ldr	r0, [pc, #196]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 800275c:	4b30      	ldr	r3, [pc, #192]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6892      	ldr	r2, [r2, #8]
 800276c:	0211      	lsls	r1, r2, #8
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68d2      	ldr	r2, [r2, #12]
 8002772:	0912      	lsrs	r2, r2, #4
 8002774:	0452      	lsls	r2, r2, #17
 8002776:	430a      	orrs	r2, r1
 8002778:	4313      	orrs	r3, r2
 800277a:	6103      	str	r3, [r0, #16]
 800277c:	e027      	b.n	80027ce <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d112      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002784:	4826      	ldr	r0, [pc, #152]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002786:	4b26      	ldr	r3, [pc, #152]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800278e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6892      	ldr	r2, [r2, #8]
 8002796:	0211      	lsls	r1, r2, #8
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6912      	ldr	r2, [r2, #16]
 800279c:	0852      	lsrs	r2, r2, #1
 800279e:	3a01      	subs	r2, #1
 80027a0:	0552      	lsls	r2, r2, #21
 80027a2:	430a      	orrs	r2, r1
 80027a4:	4313      	orrs	r3, r2
 80027a6:	6103      	str	r3, [r0, #16]
 80027a8:	e011      	b.n	80027ce <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027aa:	481d      	ldr	r0, [pc, #116]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6892      	ldr	r2, [r2, #8]
 80027bc:	0211      	lsls	r1, r2, #8
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6952      	ldr	r2, [r2, #20]
 80027c2:	0852      	lsrs	r2, r2, #1
 80027c4:	3a01      	subs	r2, #1
 80027c6:	0652      	lsls	r2, r2, #25
 80027c8:	430a      	orrs	r2, r1
 80027ca:	4313      	orrs	r3, r2
 80027cc:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027ce:	4a14      	ldr	r2, [pc, #80]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027d0:	4b13      	ldr	r3, [pc, #76]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7fe fab9 	bl	8000d50 <HAL_GetTick>
 80027de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027e0:	e009      	b.n	80027f6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027e2:	f7fe fab5 	bl	8000d50 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d902      	bls.n	80027f6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	73fb      	strb	r3, [r7, #15]
          break;
 80027f4:	e005      	b.n	8002802 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0ef      	beq.n	80027e2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d106      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002808:	4905      	ldr	r1, [pc, #20]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <RCCEx_PLLSAI1_Config+0x1dc>)
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002816:	7bfb      	ldrb	r3, [r7, #15]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000

08002824 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002832:	4b68      	ldr	r3, [pc, #416]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d018      	beq.n	8002870 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800283e:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f003 0203 	and.w	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d10d      	bne.n	800286a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
       ||
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002856:	4b5f      	ldr	r3, [pc, #380]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
       ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d044      	beq.n	80028f4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
 800286e:	e041      	b.n	80028f4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d00c      	beq.n	8002892 <RCCEx_PLLSAI2_Config+0x6e>
 8002878:	2b03      	cmp	r3, #3
 800287a:	d013      	beq.n	80028a4 <RCCEx_PLLSAI2_Config+0x80>
 800287c:	2b01      	cmp	r3, #1
 800287e:	d120      	bne.n	80028c2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002880:	4b54      	ldr	r3, [pc, #336]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d11d      	bne.n	80028c8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002890:	e01a      	b.n	80028c8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002892:	4b50      	ldr	r3, [pc, #320]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289a:	2b00      	cmp	r3, #0
 800289c:	d116      	bne.n	80028cc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a2:	e013      	b.n	80028cc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028a4:	4b4b      	ldr	r3, [pc, #300]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10f      	bne.n	80028d0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028b0:	4b48      	ldr	r3, [pc, #288]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d109      	bne.n	80028d0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028c0:	e006      	b.n	80028d0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
      break;
 80028c6:	e004      	b.n	80028d2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80028c8:	bf00      	nop
 80028ca:	e002      	b.n	80028d2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80028cc:	bf00      	nop
 80028ce:	e000      	b.n	80028d2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80028d0:	bf00      	nop
    }

    if(status == HAL_OK)
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10d      	bne.n	80028f4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028d8:	483e      	ldr	r0, [pc, #248]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028da:	4b3e      	ldr	r3, [pc, #248]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	430b      	orrs	r3, r1
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d167      	bne.n	80029ca <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028fa:	4a36      	ldr	r2, [pc, #216]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028fc:	4b35      	ldr	r3, [pc, #212]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002906:	f7fe fa23 	bl	8000d50 <HAL_GetTick>
 800290a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800290c:	e009      	b.n	8002922 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800290e:	f7fe fa1f 	bl	8000d50 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d902      	bls.n	8002922 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	73fb      	strb	r3, [r7, #15]
        break;
 8002920:	e005      	b.n	800292e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002922:	4b2c      	ldr	r3, [pc, #176]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ef      	bne.n	800290e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d14a      	bne.n	80029ca <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d111      	bne.n	800295e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800293a:	4826      	ldr	r0, [pc, #152]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6892      	ldr	r2, [r2, #8]
 800294c:	0211      	lsls	r1, r2, #8
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68d2      	ldr	r2, [r2, #12]
 8002952:	0912      	lsrs	r2, r2, #4
 8002954:	0452      	lsls	r2, r2, #17
 8002956:	430a      	orrs	r2, r1
 8002958:	4313      	orrs	r3, r2
 800295a:	6143      	str	r3, [r0, #20]
 800295c:	e011      	b.n	8002982 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800295e:	481d      	ldr	r0, [pc, #116]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002960:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002968:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6892      	ldr	r2, [r2, #8]
 8002970:	0211      	lsls	r1, r2, #8
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6912      	ldr	r2, [r2, #16]
 8002976:	0852      	lsrs	r2, r2, #1
 8002978:	3a01      	subs	r2, #1
 800297a:	0652      	lsls	r2, r2, #25
 800297c:	430a      	orrs	r2, r1
 800297e:	4313      	orrs	r3, r2
 8002980:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002982:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298e:	f7fe f9df 	bl	8000d50 <HAL_GetTick>
 8002992:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002994:	e009      	b.n	80029aa <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002996:	f7fe f9db 	bl	8000d50 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d902      	bls.n	80029aa <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	73fb      	strb	r3, [r7, #15]
          break;
 80029a8:	e005      	b.n	80029b6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0ef      	beq.n	8002996 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d106      	bne.n	80029ca <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029bc:	4905      	ldr	r1, [pc, #20]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000

080029d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e049      	b.n	8002a7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f841 	bl	8002a86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3304      	adds	r3, #4
 8002a14:	4619      	mov	r1, r3
 8002a16:	4610      	mov	r0, r2
 8002a18:	f000 f9f8 	bl	8002e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d001      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e04f      	b.n	8002b54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	68d2      	ldr	r2, [r2, #12]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a23      	ldr	r2, [pc, #140]	; (8002b60 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01d      	beq.n	8002b12 <HAL_TIM_Base_Start_IT+0x76>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ade:	d018      	beq.n	8002b12 <HAL_TIM_Base_Start_IT+0x76>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1f      	ldr	r2, [pc, #124]	; (8002b64 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_TIM_Base_Start_IT+0x76>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1e      	ldr	r2, [pc, #120]	; (8002b68 <HAL_TIM_Base_Start_IT+0xcc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00e      	beq.n	8002b12 <HAL_TIM_Base_Start_IT+0x76>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1c      	ldr	r2, [pc, #112]	; (8002b6c <HAL_TIM_Base_Start_IT+0xd0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d009      	beq.n	8002b12 <HAL_TIM_Base_Start_IT+0x76>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d004      	beq.n	8002b12 <HAL_TIM_Base_Start_IT+0x76>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a19      	ldr	r2, [pc, #100]	; (8002b74 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d115      	bne.n	8002b3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b06      	cmp	r3, #6
 8002b22:	d015      	beq.n	8002b50 <HAL_TIM_Base_Start_IT+0xb4>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2a:	d011      	beq.n	8002b50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3c:	e008      	b.n	8002b50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e000      	b.n	8002b52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	40012c00 	.word	0x40012c00
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40000800 	.word	0x40000800
 8002b6c:	40000c00 	.word	0x40000c00
 8002b70:	40013400 	.word	0x40013400
 8002b74:	40014000 	.word	0x40014000
 8002b78:	00010007 	.word	0x00010007

08002b7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d122      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0202 	mvn.w	r2, #2
 8002ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f905 	bl	8002dce <HAL_TIM_IC_CaptureCallback>
 8002bc4:	e005      	b.n	8002bd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f8f7 	bl	8002dba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f908 	bl	8002de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d122      	bne.n	8002c2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d11b      	bne.n	8002c2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0204 	mvn.w	r2, #4
 8002bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f8db 	bl	8002dce <HAL_TIM_IC_CaptureCallback>
 8002c18:	e005      	b.n	8002c26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f8cd 	bl	8002dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f8de 	bl	8002de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d122      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d11b      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0208 	mvn.w	r2, #8
 8002c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2204      	movs	r2, #4
 8002c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8b1 	bl	8002dce <HAL_TIM_IC_CaptureCallback>
 8002c6c:	e005      	b.n	8002c7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f8a3 	bl	8002dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f8b4 	bl	8002de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d122      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d11b      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0210 	mvn.w	r2, #16
 8002ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f887 	bl	8002dce <HAL_TIM_IC_CaptureCallback>
 8002cc0:	e005      	b.n	8002cce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f879 	bl	8002dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f88a 	bl	8002de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10e      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d107      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0201 	mvn.w	r2, #1
 8002cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fd fe96 	bl	8000a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	2b80      	cmp	r3, #128	; 0x80
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d18:	2b80      	cmp	r3, #128	; 0x80
 8002d1a:	d107      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f914 	bl	8002f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d3a:	d10e      	bne.n	8002d5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d107      	bne.n	8002d5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f907 	bl	8002f68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d64:	2b40      	cmp	r3, #64	; 0x40
 8002d66:	d10e      	bne.n	8002d86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b40      	cmp	r3, #64	; 0x40
 8002d74:	d107      	bne.n	8002d86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f838 	bl	8002df6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d10e      	bne.n	8002db2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d107      	bne.n	8002db2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f06f 0220 	mvn.w	r2, #32
 8002daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f8c7 	bl	8002f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a40      	ldr	r2, [pc, #256]	; (8002f20 <TIM_Base_SetConfig+0x114>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <TIM_Base_SetConfig+0x40>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2a:	d00f      	beq.n	8002e4c <TIM_Base_SetConfig+0x40>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a3d      	ldr	r2, [pc, #244]	; (8002f24 <TIM_Base_SetConfig+0x118>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00b      	beq.n	8002e4c <TIM_Base_SetConfig+0x40>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a3c      	ldr	r2, [pc, #240]	; (8002f28 <TIM_Base_SetConfig+0x11c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d007      	beq.n	8002e4c <TIM_Base_SetConfig+0x40>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a3b      	ldr	r2, [pc, #236]	; (8002f2c <TIM_Base_SetConfig+0x120>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d003      	beq.n	8002e4c <TIM_Base_SetConfig+0x40>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a3a      	ldr	r2, [pc, #232]	; (8002f30 <TIM_Base_SetConfig+0x124>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d108      	bne.n	8002e5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a2f      	ldr	r2, [pc, #188]	; (8002f20 <TIM_Base_SetConfig+0x114>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01f      	beq.n	8002ea6 <TIM_Base_SetConfig+0x9a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6c:	d01b      	beq.n	8002ea6 <TIM_Base_SetConfig+0x9a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a2c      	ldr	r2, [pc, #176]	; (8002f24 <TIM_Base_SetConfig+0x118>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d017      	beq.n	8002ea6 <TIM_Base_SetConfig+0x9a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a2b      	ldr	r2, [pc, #172]	; (8002f28 <TIM_Base_SetConfig+0x11c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <TIM_Base_SetConfig+0x9a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a2a      	ldr	r2, [pc, #168]	; (8002f2c <TIM_Base_SetConfig+0x120>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00f      	beq.n	8002ea6 <TIM_Base_SetConfig+0x9a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a29      	ldr	r2, [pc, #164]	; (8002f30 <TIM_Base_SetConfig+0x124>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00b      	beq.n	8002ea6 <TIM_Base_SetConfig+0x9a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a28      	ldr	r2, [pc, #160]	; (8002f34 <TIM_Base_SetConfig+0x128>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d007      	beq.n	8002ea6 <TIM_Base_SetConfig+0x9a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <TIM_Base_SetConfig+0x12c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d003      	beq.n	8002ea6 <TIM_Base_SetConfig+0x9a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a26      	ldr	r2, [pc, #152]	; (8002f3c <TIM_Base_SetConfig+0x130>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a10      	ldr	r2, [pc, #64]	; (8002f20 <TIM_Base_SetConfig+0x114>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00f      	beq.n	8002f04 <TIM_Base_SetConfig+0xf8>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <TIM_Base_SetConfig+0x124>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00b      	beq.n	8002f04 <TIM_Base_SetConfig+0xf8>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a11      	ldr	r2, [pc, #68]	; (8002f34 <TIM_Base_SetConfig+0x128>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d007      	beq.n	8002f04 <TIM_Base_SetConfig+0xf8>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <TIM_Base_SetConfig+0x12c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d003      	beq.n	8002f04 <TIM_Base_SetConfig+0xf8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a0f      	ldr	r2, [pc, #60]	; (8002f3c <TIM_Base_SetConfig+0x130>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d103      	bne.n	8002f0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	615a      	str	r2, [r3, #20]
}
 8002f12:	bf00      	nop
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40000800 	.word	0x40000800
 8002f2c:	40000c00 	.word	0x40000c00
 8002f30:	40013400 	.word	0x40013400
 8002f34:	40014000 	.word	0x40014000
 8002f38:	40014400 	.word	0x40014400
 8002f3c:	40014800 	.word	0x40014800

08002f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e040      	b.n	8003010 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd fd82 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fb26 	bl	800360c <UART_SetConfig>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e022      	b.n	8003010 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fd9e 	bl	8003b14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	6852      	ldr	r2, [r2, #4]
 8002fe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	6892      	ldr	r2, [r2, #8]
 8002ff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fe25 	bl	8003c58 <UART_CheckIdleState>
 800300e:	4603      	mov	r3, r0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	; 0x28
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800302c:	2b20      	cmp	r3, #32
 800302e:	f040 8082 	bne.w	8003136 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_UART_Transmit+0x26>
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e07a      	b.n	8003138 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_UART_Transmit+0x38>
 800304c:	2302      	movs	r3, #2
 800304e:	e073      	b.n	8003138 <HAL_UART_Transmit+0x120>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2221      	movs	r2, #33	; 0x21
 8003064:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003066:	f7fd fe73 	bl	8000d50 <HAL_GetTick>
 800306a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	88fa      	ldrh	r2, [r7, #6]
 8003070:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003084:	d108      	bne.n	8003098 <HAL_UART_Transmit+0x80>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d104      	bne.n	8003098 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	e003      	b.n	80030a0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80030a8:	e02d      	b.n	8003106 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fe18 	bl	8003cea <UART_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e039      	b.n	8003138 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	8812      	ldrh	r2, [r2, #0]
 80030d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d6:	b292      	uxth	r2, r2
 80030d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	3302      	adds	r3, #2
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	e008      	b.n	80030f4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	7812      	ldrb	r2, [r2, #0]
 80030ea:	b292      	uxth	r2, r2
 80030ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3301      	adds	r3, #1
 80030f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1cb      	bne.n	80030aa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2200      	movs	r2, #0
 800311a:	2140      	movs	r1, #64	; 0x40
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fde4 	bl	8003cea <UART_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e005      	b.n	8003138 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e000      	b.n	8003138 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003136:	2302      	movs	r3, #2
  }
}
 8003138:	4618      	mov	r0, r3
 800313a:	3720      	adds	r7, #32
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	4613      	mov	r3, r2
 800314c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003152:	2b20      	cmp	r3, #32
 8003154:	d131      	bne.n	80031ba <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HAL_UART_Receive_IT+0x22>
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e02a      	b.n	80031bc <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_UART_Receive_IT+0x34>
 8003170:	2302      	movs	r3, #2
 8003172:	e023      	b.n	80031bc <HAL_UART_Receive_IT+0x7c>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a0f      	ldr	r2, [pc, #60]	; (80031c4 <HAL_UART_Receive_IT+0x84>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00e      	beq.n	80031aa <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80031a8:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	461a      	mov	r2, r3
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fe17 	bl	8003de4 <UART_Start_Receive_IT>
 80031b6:	4603      	mov	r3, r0
 80031b8:	e000      	b.n	80031bc <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
  }
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40008000 	.word	0x40008000

080031c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d113      	bne.n	8003220 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00e      	beq.n	8003220 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 81cf 	beq.w	80035b4 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4798      	blx	r3
      }
      return;
 800321e:	e1c9      	b.n	80035b4 <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 80e3 	beq.w	80033ee <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d105      	bne.n	800323e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4ba6      	ldr	r3, [pc, #664]	; (80034d0 <HAL_UART_IRQHandler+0x308>)
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80d8 	beq.w	80033ee <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d010      	beq.n	800326a <HAL_UART_IRQHandler+0xa2>
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2201      	movs	r2, #1
 8003258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d010      	beq.n	8003296 <HAL_UART_IRQHandler+0xce>
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2202      	movs	r2, #2
 8003284:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800328c:	f043 0204 	orr.w	r2, r3, #4
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d010      	beq.n	80032c2 <HAL_UART_IRQHandler+0xfa>
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2204      	movs	r2, #4
 80032b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b8:	f043 0202 	orr.w	r2, r3, #2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d015      	beq.n	80032f8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d104      	bne.n	80032e0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2208      	movs	r2, #8
 80032e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ee:	f043 0208 	orr.w	r2, r3, #8
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d011      	beq.n	8003326 <HAL_UART_IRQHandler+0x15e>
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00c      	beq.n	8003326 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003314:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8143 	beq.w	80035b8 <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00c      	beq.n	8003356 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800335c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003368:	2b40      	cmp	r3, #64	; 0x40
 800336a:	d004      	beq.n	8003376 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003372:	2b00      	cmp	r3, #0
 8003374:	d031      	beq.n	80033da <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fdbc 	bl	8003ef4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d123      	bne.n	80033d2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	6892      	ldr	r2, [r2, #8]
 8003394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003398:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d013      	beq.n	80033ca <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a4b      	ldr	r2, [pc, #300]	; (80034d4 <HAL_UART_IRQHandler+0x30c>)
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd fdf8 	bl	8000fa4 <HAL_DMA_Abort_IT>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d017      	beq.n	80033ea <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80033c4:	4610      	mov	r0, r2
 80033c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	e00f      	b.n	80033ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f908 	bl	80035e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d0:	e00b      	b.n	80033ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f904 	bl	80035e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	e007      	b.n	80033ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f900 	bl	80035e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80033e8:	e0e6      	b.n	80035b8 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ea:	bf00      	nop
    return;
 80033ec:	e0e4      	b.n	80035b8 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	f040 80a9 	bne.w	800354a <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80a3 	beq.w	800354a <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 809d 	beq.w	800354a <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2210      	movs	r2, #16
 8003416:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	2b40      	cmp	r3, #64	; 0x40
 8003424:	d158      	bne.n	80034d8 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	817b      	strh	r3, [r7, #10]
      if (  (nb_remaining_rx_data > 0U)
 8003430:	897b      	ldrh	r3, [r7, #10]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80c2 	beq.w	80035bc <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800343e:	897a      	ldrh	r2, [r7, #10]
 8003440:	429a      	cmp	r2, r3
 8003442:	f080 80bb 	bcs.w	80035bc <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	897a      	ldrh	r2, [r7, #10]
 800344a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	d12a      	bne.n	80034b4 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800346c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	6892      	ldr	r2, [r2, #8]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	6892      	ldr	r2, [r2, #8]
 8003488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	f022 0210 	bic.w	r2, r2, #16
 80034a8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd fd3a 	bl	8000f28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f893 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034ce:	e075      	b.n	80035bc <HAL_UART_IRQHandler+0x3f4>
 80034d0:	04000120 	.word	0x04000120
 80034d4:	08003f53 	.word	0x08003f53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	813b      	strh	r3, [r7, #8]
      if (  (huart->RxXferCount > 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d064      	beq.n	80035c0 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 80034f6:	893b      	ldrh	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d061      	beq.n	80035c0 <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800350a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	6892      	ldr	r2, [r2, #8]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	f022 0210 	bic.w	r2, r2, #16
 800353c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800353e:	893b      	ldrh	r3, [r7, #8]
 8003540:	4619      	mov	r1, r3
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f856 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003548:	e03a      	b.n	80035c0 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00d      	beq.n	8003570 <HAL_UART_IRQHandler+0x3a8>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003566:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 fdf9 	bl	8004160 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800356e:	e02a      	b.n	80035c6 <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00d      	beq.n	8003596 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01b      	beq.n	80035c4 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
    }
    return;
 8003594:	e016      	b.n	80035c4 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d012      	beq.n	80035c6 <HAL_UART_IRQHandler+0x3fe>
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fce7 	bl	8003f7e <UART_EndTransmit_IT>
    return;
 80035b0:	bf00      	nop
 80035b2:	e008      	b.n	80035c6 <HAL_UART_IRQHandler+0x3fe>
      return;
 80035b4:	bf00      	nop
 80035b6:	e006      	b.n	80035c6 <HAL_UART_IRQHandler+0x3fe>
    return;
 80035b8:	bf00      	nop
 80035ba:	e004      	b.n	80035c6 <HAL_UART_IRQHandler+0x3fe>
      return;
 80035bc:	bf00      	nop
 80035be:	e002      	b.n	80035c6 <HAL_UART_IRQHandler+0x3fe>
      return;
 80035c0:	bf00      	nop
 80035c2:	e000      	b.n	80035c6 <HAL_UART_IRQHandler+0x3fe>
    return;
 80035c4:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800360c:	b5b0      	push	{r4, r5, r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	4313      	orrs	r3, r2
 800362e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	4bac      	ldr	r3, [pc, #688]	; (80038ec <UART_SetConfig+0x2e0>)
 800363c:	400b      	ands	r3, r1
 800363e:	69f9      	ldr	r1, [r7, #28]
 8003640:	430b      	orrs	r3, r1
 8003642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	6852      	ldr	r2, [r2, #4]
 800364e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68d2      	ldr	r2, [r2, #12]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4aa2      	ldr	r2, [pc, #648]	; (80038f0 <UART_SetConfig+0x2e4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	4313      	orrs	r3, r2
 8003672:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	6892      	ldr	r2, [r2, #8]
 800367e:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a99      	ldr	r2, [pc, #612]	; (80038f4 <UART_SetConfig+0x2e8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d122      	bne.n	80036d8 <UART_SetConfig+0xcc>
 8003692:	4b99      	ldr	r3, [pc, #612]	; (80038f8 <UART_SetConfig+0x2ec>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b03      	cmp	r3, #3
 800369e:	d817      	bhi.n	80036d0 <UART_SetConfig+0xc4>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <UART_SetConfig+0x9c>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	080036c5 	.word	0x080036c5
 80036b0:	080036bf 	.word	0x080036bf
 80036b4:	080036cb 	.word	0x080036cb
 80036b8:	2301      	movs	r3, #1
 80036ba:	76fb      	strb	r3, [r7, #27]
 80036bc:	e0e8      	b.n	8003890 <UART_SetConfig+0x284>
 80036be:	2302      	movs	r3, #2
 80036c0:	76fb      	strb	r3, [r7, #27]
 80036c2:	e0e5      	b.n	8003890 <UART_SetConfig+0x284>
 80036c4:	2304      	movs	r3, #4
 80036c6:	76fb      	strb	r3, [r7, #27]
 80036c8:	e0e2      	b.n	8003890 <UART_SetConfig+0x284>
 80036ca:	2308      	movs	r3, #8
 80036cc:	76fb      	strb	r3, [r7, #27]
 80036ce:	e0df      	b.n	8003890 <UART_SetConfig+0x284>
 80036d0:	2310      	movs	r3, #16
 80036d2:	76fb      	strb	r3, [r7, #27]
 80036d4:	bf00      	nop
 80036d6:	e0db      	b.n	8003890 <UART_SetConfig+0x284>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a87      	ldr	r2, [pc, #540]	; (80038fc <UART_SetConfig+0x2f0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d134      	bne.n	800374c <UART_SetConfig+0x140>
 80036e2:	4b85      	ldr	r3, [pc, #532]	; (80038f8 <UART_SetConfig+0x2ec>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b0c      	cmp	r3, #12
 80036ee:	d829      	bhi.n	8003744 <UART_SetConfig+0x138>
 80036f0:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <UART_SetConfig+0xec>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	0800372d 	.word	0x0800372d
 80036fc:	08003745 	.word	0x08003745
 8003700:	08003745 	.word	0x08003745
 8003704:	08003745 	.word	0x08003745
 8003708:	08003739 	.word	0x08003739
 800370c:	08003745 	.word	0x08003745
 8003710:	08003745 	.word	0x08003745
 8003714:	08003745 	.word	0x08003745
 8003718:	08003733 	.word	0x08003733
 800371c:	08003745 	.word	0x08003745
 8003720:	08003745 	.word	0x08003745
 8003724:	08003745 	.word	0x08003745
 8003728:	0800373f 	.word	0x0800373f
 800372c:	2300      	movs	r3, #0
 800372e:	76fb      	strb	r3, [r7, #27]
 8003730:	e0ae      	b.n	8003890 <UART_SetConfig+0x284>
 8003732:	2302      	movs	r3, #2
 8003734:	76fb      	strb	r3, [r7, #27]
 8003736:	e0ab      	b.n	8003890 <UART_SetConfig+0x284>
 8003738:	2304      	movs	r3, #4
 800373a:	76fb      	strb	r3, [r7, #27]
 800373c:	e0a8      	b.n	8003890 <UART_SetConfig+0x284>
 800373e:	2308      	movs	r3, #8
 8003740:	76fb      	strb	r3, [r7, #27]
 8003742:	e0a5      	b.n	8003890 <UART_SetConfig+0x284>
 8003744:	2310      	movs	r3, #16
 8003746:	76fb      	strb	r3, [r7, #27]
 8003748:	bf00      	nop
 800374a:	e0a1      	b.n	8003890 <UART_SetConfig+0x284>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a6b      	ldr	r2, [pc, #428]	; (8003900 <UART_SetConfig+0x2f4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d120      	bne.n	8003798 <UART_SetConfig+0x18c>
 8003756:	4b68      	ldr	r3, [pc, #416]	; (80038f8 <UART_SetConfig+0x2ec>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003760:	2b10      	cmp	r3, #16
 8003762:	d00f      	beq.n	8003784 <UART_SetConfig+0x178>
 8003764:	2b10      	cmp	r3, #16
 8003766:	d802      	bhi.n	800376e <UART_SetConfig+0x162>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <UART_SetConfig+0x16c>
 800376c:	e010      	b.n	8003790 <UART_SetConfig+0x184>
 800376e:	2b20      	cmp	r3, #32
 8003770:	d005      	beq.n	800377e <UART_SetConfig+0x172>
 8003772:	2b30      	cmp	r3, #48	; 0x30
 8003774:	d009      	beq.n	800378a <UART_SetConfig+0x17e>
 8003776:	e00b      	b.n	8003790 <UART_SetConfig+0x184>
 8003778:	2300      	movs	r3, #0
 800377a:	76fb      	strb	r3, [r7, #27]
 800377c:	e088      	b.n	8003890 <UART_SetConfig+0x284>
 800377e:	2302      	movs	r3, #2
 8003780:	76fb      	strb	r3, [r7, #27]
 8003782:	e085      	b.n	8003890 <UART_SetConfig+0x284>
 8003784:	2304      	movs	r3, #4
 8003786:	76fb      	strb	r3, [r7, #27]
 8003788:	e082      	b.n	8003890 <UART_SetConfig+0x284>
 800378a:	2308      	movs	r3, #8
 800378c:	76fb      	strb	r3, [r7, #27]
 800378e:	e07f      	b.n	8003890 <UART_SetConfig+0x284>
 8003790:	2310      	movs	r3, #16
 8003792:	76fb      	strb	r3, [r7, #27]
 8003794:	bf00      	nop
 8003796:	e07b      	b.n	8003890 <UART_SetConfig+0x284>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a59      	ldr	r2, [pc, #356]	; (8003904 <UART_SetConfig+0x2f8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d120      	bne.n	80037e4 <UART_SetConfig+0x1d8>
 80037a2:	4b55      	ldr	r3, [pc, #340]	; (80038f8 <UART_SetConfig+0x2ec>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d00f      	beq.n	80037d0 <UART_SetConfig+0x1c4>
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d802      	bhi.n	80037ba <UART_SetConfig+0x1ae>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <UART_SetConfig+0x1b8>
 80037b8:	e010      	b.n	80037dc <UART_SetConfig+0x1d0>
 80037ba:	2b80      	cmp	r3, #128	; 0x80
 80037bc:	d005      	beq.n	80037ca <UART_SetConfig+0x1be>
 80037be:	2bc0      	cmp	r3, #192	; 0xc0
 80037c0:	d009      	beq.n	80037d6 <UART_SetConfig+0x1ca>
 80037c2:	e00b      	b.n	80037dc <UART_SetConfig+0x1d0>
 80037c4:	2300      	movs	r3, #0
 80037c6:	76fb      	strb	r3, [r7, #27]
 80037c8:	e062      	b.n	8003890 <UART_SetConfig+0x284>
 80037ca:	2302      	movs	r3, #2
 80037cc:	76fb      	strb	r3, [r7, #27]
 80037ce:	e05f      	b.n	8003890 <UART_SetConfig+0x284>
 80037d0:	2304      	movs	r3, #4
 80037d2:	76fb      	strb	r3, [r7, #27]
 80037d4:	e05c      	b.n	8003890 <UART_SetConfig+0x284>
 80037d6:	2308      	movs	r3, #8
 80037d8:	76fb      	strb	r3, [r7, #27]
 80037da:	e059      	b.n	8003890 <UART_SetConfig+0x284>
 80037dc:	2310      	movs	r3, #16
 80037de:	76fb      	strb	r3, [r7, #27]
 80037e0:	bf00      	nop
 80037e2:	e055      	b.n	8003890 <UART_SetConfig+0x284>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a47      	ldr	r2, [pc, #284]	; (8003908 <UART_SetConfig+0x2fc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d124      	bne.n	8003838 <UART_SetConfig+0x22c>
 80037ee:	4b42      	ldr	r3, [pc, #264]	; (80038f8 <UART_SetConfig+0x2ec>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fc:	d012      	beq.n	8003824 <UART_SetConfig+0x218>
 80037fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003802:	d802      	bhi.n	800380a <UART_SetConfig+0x1fe>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <UART_SetConfig+0x20c>
 8003808:	e012      	b.n	8003830 <UART_SetConfig+0x224>
 800380a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380e:	d006      	beq.n	800381e <UART_SetConfig+0x212>
 8003810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003814:	d009      	beq.n	800382a <UART_SetConfig+0x21e>
 8003816:	e00b      	b.n	8003830 <UART_SetConfig+0x224>
 8003818:	2300      	movs	r3, #0
 800381a:	76fb      	strb	r3, [r7, #27]
 800381c:	e038      	b.n	8003890 <UART_SetConfig+0x284>
 800381e:	2302      	movs	r3, #2
 8003820:	76fb      	strb	r3, [r7, #27]
 8003822:	e035      	b.n	8003890 <UART_SetConfig+0x284>
 8003824:	2304      	movs	r3, #4
 8003826:	76fb      	strb	r3, [r7, #27]
 8003828:	e032      	b.n	8003890 <UART_SetConfig+0x284>
 800382a:	2308      	movs	r3, #8
 800382c:	76fb      	strb	r3, [r7, #27]
 800382e:	e02f      	b.n	8003890 <UART_SetConfig+0x284>
 8003830:	2310      	movs	r3, #16
 8003832:	76fb      	strb	r3, [r7, #27]
 8003834:	bf00      	nop
 8003836:	e02b      	b.n	8003890 <UART_SetConfig+0x284>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2c      	ldr	r2, [pc, #176]	; (80038f0 <UART_SetConfig+0x2e4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d124      	bne.n	800388c <UART_SetConfig+0x280>
 8003842:	4b2d      	ldr	r3, [pc, #180]	; (80038f8 <UART_SetConfig+0x2ec>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800384c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003850:	d012      	beq.n	8003878 <UART_SetConfig+0x26c>
 8003852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003856:	d802      	bhi.n	800385e <UART_SetConfig+0x252>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <UART_SetConfig+0x260>
 800385c:	e012      	b.n	8003884 <UART_SetConfig+0x278>
 800385e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003862:	d006      	beq.n	8003872 <UART_SetConfig+0x266>
 8003864:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003868:	d009      	beq.n	800387e <UART_SetConfig+0x272>
 800386a:	e00b      	b.n	8003884 <UART_SetConfig+0x278>
 800386c:	2300      	movs	r3, #0
 800386e:	76fb      	strb	r3, [r7, #27]
 8003870:	e00e      	b.n	8003890 <UART_SetConfig+0x284>
 8003872:	2302      	movs	r3, #2
 8003874:	76fb      	strb	r3, [r7, #27]
 8003876:	e00b      	b.n	8003890 <UART_SetConfig+0x284>
 8003878:	2304      	movs	r3, #4
 800387a:	76fb      	strb	r3, [r7, #27]
 800387c:	e008      	b.n	8003890 <UART_SetConfig+0x284>
 800387e:	2308      	movs	r3, #8
 8003880:	76fb      	strb	r3, [r7, #27]
 8003882:	e005      	b.n	8003890 <UART_SetConfig+0x284>
 8003884:	2310      	movs	r3, #16
 8003886:	76fb      	strb	r3, [r7, #27]
 8003888:	bf00      	nop
 800388a:	e001      	b.n	8003890 <UART_SetConfig+0x284>
 800388c:	2310      	movs	r3, #16
 800388e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <UART_SetConfig+0x2e4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	f040 8080 	bne.w	800399c <UART_SetConfig+0x390>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800389c:	7efb      	ldrb	r3, [r7, #27]
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d836      	bhi.n	8003910 <UART_SetConfig+0x304>
 80038a2:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <UART_SetConfig+0x29c>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038cd 	.word	0x080038cd
 80038ac:	08003911 	.word	0x08003911
 80038b0:	080038d5 	.word	0x080038d5
 80038b4:	08003911 	.word	0x08003911
 80038b8:	080038db 	.word	0x080038db
 80038bc:	08003911 	.word	0x08003911
 80038c0:	08003911 	.word	0x08003911
 80038c4:	08003911 	.word	0x08003911
 80038c8:	080038e3 	.word	0x080038e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038cc:	f7fe fb16 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 80038d0:	6178      	str	r0, [r7, #20]
        break;
 80038d2:	e022      	b.n	800391a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d4:	4b0d      	ldr	r3, [pc, #52]	; (800390c <UART_SetConfig+0x300>)
 80038d6:	617b      	str	r3, [r7, #20]
        break;
 80038d8:	e01f      	b.n	800391a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038da:	f7fe fa79 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 80038de:	6178      	str	r0, [r7, #20]
        break;
 80038e0:	e01b      	b.n	800391a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038e6:	617b      	str	r3, [r7, #20]
        break;
 80038e8:	e017      	b.n	800391a <UART_SetConfig+0x30e>
 80038ea:	bf00      	nop
 80038ec:	efff69f3 	.word	0xefff69f3
 80038f0:	40008000 	.word	0x40008000
 80038f4:	40013800 	.word	0x40013800
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40004400 	.word	0x40004400
 8003900:	40004800 	.word	0x40004800
 8003904:	40004c00 	.word	0x40004c00
 8003908:	40005000 	.word	0x40005000
 800390c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	76bb      	strb	r3, [r7, #26]
        break;
 8003918:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80eb 	beq.w	8003af8 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	441a      	add	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	429a      	cmp	r2, r3
 8003930:	d805      	bhi.n	800393e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	429a      	cmp	r2, r3
 800393c:	d202      	bcs.n	8003944 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	76bb      	strb	r3, [r7, #26]
 8003942:	e0d9      	b.n	8003af8 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	461a      	mov	r2, r3
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	021d      	lsls	r5, r3, #8
 800394e:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8003952:	0214      	lsls	r4, r2, #8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	461a      	mov	r2, r3
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	18a0      	adds	r0, r4, r2
 8003962:	eb45 0103 	adc.w	r1, r5, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f04f 0400 	mov.w	r4, #0
 800396e:	461a      	mov	r2, r3
 8003970:	4623      	mov	r3, r4
 8003972:	f7fc fc85 	bl	8000280 <__aeabi_uldivmod>
 8003976:	4603      	mov	r3, r0
 8003978:	460c      	mov	r4, r1
 800397a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003982:	d308      	bcc.n	8003996 <UART_SetConfig+0x38a>
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800398a:	d204      	bcs.n	8003996 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	60da      	str	r2, [r3, #12]
 8003994:	e0b0      	b.n	8003af8 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	76bb      	strb	r3, [r7, #26]
 800399a:	e0ad      	b.n	8003af8 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a4:	d15c      	bne.n	8003a60 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 80039a6:	7efb      	ldrb	r3, [r7, #27]
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d828      	bhi.n	80039fe <UART_SetConfig+0x3f2>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <UART_SetConfig+0x3a8>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039d9 	.word	0x080039d9
 80039b8:	080039e1 	.word	0x080039e1
 80039bc:	080039e9 	.word	0x080039e9
 80039c0:	080039ff 	.word	0x080039ff
 80039c4:	080039ef 	.word	0x080039ef
 80039c8:	080039ff 	.word	0x080039ff
 80039cc:	080039ff 	.word	0x080039ff
 80039d0:	080039ff 	.word	0x080039ff
 80039d4:	080039f7 	.word	0x080039f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d8:	f7fe fa90 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 80039dc:	6178      	str	r0, [r7, #20]
        break;
 80039de:	e013      	b.n	8003a08 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e0:	f7fe faa2 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 80039e4:	6178      	str	r0, [r7, #20]
        break;
 80039e6:	e00f      	b.n	8003a08 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e8:	4b49      	ldr	r3, [pc, #292]	; (8003b10 <UART_SetConfig+0x504>)
 80039ea:	617b      	str	r3, [r7, #20]
        break;
 80039ec:	e00c      	b.n	8003a08 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ee:	f7fe f9ef 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 80039f2:	6178      	str	r0, [r7, #20]
        break;
 80039f4:	e008      	b.n	8003a08 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fa:	617b      	str	r3, [r7, #20]
        break;
 80039fc:	e004      	b.n	8003a08 <UART_SetConfig+0x3fc>
      default:
        pclk = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	76bb      	strb	r3, [r7, #26]
        break;
 8003a06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d074      	beq.n	8003af8 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	005a      	lsls	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	441a      	add	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b0f      	cmp	r3, #15
 8003a2a:	d916      	bls.n	8003a5a <UART_SetConfig+0x44e>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a32:	d212      	bcs.n	8003a5a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f023 030f 	bic.w	r3, r3, #15
 8003a3c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	89fb      	ldrh	r3, [r7, #14]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	89fa      	ldrh	r2, [r7, #14]
 8003a56:	60da      	str	r2, [r3, #12]
 8003a58:	e04e      	b.n	8003af8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	76bb      	strb	r3, [r7, #26]
 8003a5e:	e04b      	b.n	8003af8 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a60:	7efb      	ldrb	r3, [r7, #27]
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d827      	bhi.n	8003ab6 <UART_SetConfig+0x4aa>
 8003a66:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <UART_SetConfig+0x460>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003a91 	.word	0x08003a91
 8003a70:	08003a99 	.word	0x08003a99
 8003a74:	08003aa1 	.word	0x08003aa1
 8003a78:	08003ab7 	.word	0x08003ab7
 8003a7c:	08003aa7 	.word	0x08003aa7
 8003a80:	08003ab7 	.word	0x08003ab7
 8003a84:	08003ab7 	.word	0x08003ab7
 8003a88:	08003ab7 	.word	0x08003ab7
 8003a8c:	08003aaf 	.word	0x08003aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a90:	f7fe fa34 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8003a94:	6178      	str	r0, [r7, #20]
        break;
 8003a96:	e013      	b.n	8003ac0 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a98:	f7fe fa46 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8003a9c:	6178      	str	r0, [r7, #20]
        break;
 8003a9e:	e00f      	b.n	8003ac0 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <UART_SetConfig+0x504>)
 8003aa2:	617b      	str	r3, [r7, #20]
        break;
 8003aa4:	e00c      	b.n	8003ac0 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aa6:	f7fe f993 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8003aaa:	6178      	str	r0, [r7, #20]
        break;
 8003aac:	e008      	b.n	8003ac0 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab2:	617b      	str	r3, [r7, #20]
        break;
 8003ab4:	e004      	b.n	8003ac0 <UART_SetConfig+0x4b4>
      default:
        pclk = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	76bb      	strb	r3, [r7, #26]
        break;
 8003abe:	bf00      	nop
    }

    if (pclk != 0U)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d018      	beq.n	8003af8 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	085a      	lsrs	r2, r3, #1
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	441a      	add	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	2b0f      	cmp	r3, #15
 8003ae0:	d908      	bls.n	8003af4 <UART_SetConfig+0x4e8>
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae8:	d204      	bcs.n	8003af4 <UART_SetConfig+0x4e8>
      {
        huart->Instance->BRR = usartdiv;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	60da      	str	r2, [r3, #12]
 8003af2:	e001      	b.n	8003af8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b04:	7ebb      	ldrb	r3, [r7, #26]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	00f42400 	.word	0x00f42400

08003b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	6852      	ldr	r2, [r2, #4]
 8003b32:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	6852      	ldr	r2, [r2, #4]
 8003b54:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	6852      	ldr	r2, [r2, #4]
 8003b76:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	6852      	ldr	r2, [r2, #4]
 8003b98:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	6892      	ldr	r2, [r2, #8]
 8003bba:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	6892      	ldr	r2, [r2, #8]
 8003bdc:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003be4:	430a      	orrs	r2, r1
 8003be6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01a      	beq.n	8003c2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	6852      	ldr	r2, [r2, #4]
 8003bfe:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c12:	d10a      	bne.n	8003c2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	6852      	ldr	r2, [r2, #4]
 8003c1e:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	6852      	ldr	r2, [r2, #4]
 8003c40:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	605a      	str	r2, [r3, #4]
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c68:	f7fd f872 	bl	8000d50 <HAL_GetTick>
 8003c6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d10e      	bne.n	8003c9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f82d 	bl	8003cea <UART_WaitOnFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e023      	b.n	8003ce2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d10e      	bne.n	8003cc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f817 	bl	8003cea <UART_WaitOnFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e00d      	b.n	8003ce2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfa:	e05e      	b.n	8003dba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d02:	d05a      	beq.n	8003dba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d04:	f7fd f824 	bl	8000d50 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	1ad2      	subs	r2, r2, r3
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d802      	bhi.n	8003d1a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d11b      	bne.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d28:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	6892      	ldr	r2, [r2, #8]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e043      	b.n	8003dda <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d02c      	beq.n	8003dba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d6e:	d124      	bne.n	8003dba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d78:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d88:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	6892      	ldr	r2, [r2, #8]
 8003d94:	f022 0201 	bic.w	r2, r2, #1
 8003d98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e00f      	b.n	8003dda <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	bf0c      	ite	eq
 8003dca:	2301      	moveq	r3, #1
 8003dcc:	2300      	movne	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d091      	beq.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	4613      	mov	r3, r2
 8003df0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	88fa      	ldrh	r2, [r7, #6]
 8003dfc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e16:	d10e      	bne.n	8003e36 <UART_Start_Receive_IT+0x52>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d105      	bne.n	8003e2c <UART_Start_Receive_IT+0x48>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e2a:	e02d      	b.n	8003e88 <UART_Start_Receive_IT+0xa4>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	22ff      	movs	r2, #255	; 0xff
 8003e30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e34:	e028      	b.n	8003e88 <UART_Start_Receive_IT+0xa4>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10d      	bne.n	8003e5a <UART_Start_Receive_IT+0x76>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d104      	bne.n	8003e50 <UART_Start_Receive_IT+0x6c>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	22ff      	movs	r2, #255	; 0xff
 8003e4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e4e:	e01b      	b.n	8003e88 <UART_Start_Receive_IT+0xa4>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	227f      	movs	r2, #127	; 0x7f
 8003e54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e58:	e016      	b.n	8003e88 <UART_Start_Receive_IT+0xa4>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e62:	d10d      	bne.n	8003e80 <UART_Start_Receive_IT+0x9c>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <UART_Start_Receive_IT+0x92>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	227f      	movs	r2, #127	; 0x7f
 8003e70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e74:	e008      	b.n	8003e88 <UART_Start_Receive_IT+0xa4>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	223f      	movs	r2, #63	; 0x3f
 8003e7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e7e:	e003      	b.n	8003e88 <UART_Start_Receive_IT+0xa4>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2222      	movs	r2, #34	; 0x22
 8003e94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	6892      	ldr	r2, [r2, #8]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	d107      	bne.n	8003ec0 <UART_Start_Receive_IT+0xdc>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d103      	bne.n	8003ec0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a0c      	ldr	r2, [pc, #48]	; (8003eec <UART_Start_Receive_IT+0x108>)
 8003ebc:	665a      	str	r2, [r3, #100]	; 0x64
 8003ebe:	e002      	b.n	8003ec6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <UART_Start_Receive_IT+0x10c>)
 8003ec4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003edc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	08004089 	.word	0x08004089
 8003ef0:	08003fb1 	.word	0x08003fb1

08003ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f0a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	6892      	ldr	r2, [r2, #8]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d107      	bne.n	8003f34 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	f022 0210 	bic.w	r2, r2, #16
 8003f32:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7ff fb35 	bl	80035e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f94:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fb12 	bl	80035cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa8:	bf00      	nop
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fbe:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc4:	2b22      	cmp	r3, #34	; 0x22
 8003fc6:	d151      	bne.n	800406c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fce:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd4:	89ba      	ldrh	r2, [r7, #12]
 8003fd6:	b2d1      	uxtb	r1, r2
 8003fd8:	89fa      	ldrh	r2, [r7, #14]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	400a      	ands	r2, r1
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d13a      	bne.n	8004080 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004018:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	6892      	ldr	r2, [r2, #8]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403a:	2b01      	cmp	r3, #1
 800403c:	d10f      	bne.n	800405e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	f022 0210 	bic.w	r2, r2, #16
 800404c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004054:	4619      	mov	r1, r3
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff facc 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
 800405c:	e002      	b.n	8004064 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fc fca6 	bl	80009b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800406a:	e009      	b.n	8004080 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	8b12      	ldrh	r2, [r2, #24]
 8004076:	b292      	uxth	r2, r2
 8004078:	f042 0208 	orr.w	r2, r2, #8
 800407c:	b292      	uxth	r2, r2
 800407e:	831a      	strh	r2, [r3, #24]
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004096:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800409c:	2b22      	cmp	r3, #34	; 0x22
 800409e:	d151      	bne.n	8004144 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040a6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ac:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80040ae:	89ba      	ldrh	r2, [r7, #12]
 80040b0:	89fb      	ldrh	r3, [r7, #14]
 80040b2:	4013      	ands	r3, r2
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d13a      	bne.n	8004158 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	6892      	ldr	r2, [r2, #8]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004112:	2b01      	cmp	r3, #1
 8004114:	d10f      	bne.n	8004136 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	f022 0210 	bic.w	r2, r2, #16
 8004124:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fa60 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
 8004134:	e002      	b.n	800413c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fc fc3a 	bl	80009b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004142:	e009      	b.n	8004158 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	8b12      	ldrh	r2, [r2, #24]
 800414e:	b292      	uxth	r2, r2
 8004150:	f042 0208 	orr.w	r2, r2, #8
 8004154:	b292      	uxth	r2, r2
 8004156:	831a      	strh	r2, [r3, #24]
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f103 0208 	add.w	r2, r3, #8
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800418c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f103 0208 	add.w	r2, r3, #8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f103 0208 	add.w	r2, r3, #8
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041ce:	b480      	push	{r7}
 80041d0:	b085      	sub	sp, #20
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	601a      	str	r2, [r3, #0]
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800422c:	d103      	bne.n	8004236 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e00c      	b.n	8004250 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3308      	adds	r3, #8
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	e002      	b.n	8004244 <vListInsert+0x2e>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	429a      	cmp	r2, r3
 800424e:	d9f6      	bls.n	800423e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	601a      	str	r2, [r3, #0]
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6892      	ldr	r2, [r2, #8]
 800429e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6852      	ldr	r2, [r2, #4]
 80042a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d103      	bne.n	80042bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	1e5a      	subs	r2, r3, #1
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3b04      	subs	r3, #4
 80042ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3b04      	subs	r3, #4
 80042fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f023 0201 	bic.w	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3b04      	subs	r3, #4
 800430a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800430c:	4a0c      	ldr	r2, [pc, #48]	; (8004340 <pxPortInitialiseStack+0x64>)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3b14      	subs	r3, #20
 8004316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3b04      	subs	r3, #4
 8004322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f06f 0202 	mvn.w	r2, #2
 800432a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3b20      	subs	r3, #32
 8004330:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004332:	68fb      	ldr	r3, [r7, #12]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	08004345 	.word	0x08004345

08004344 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800434e:	4b11      	ldr	r3, [pc, #68]	; (8004394 <prvTaskExitError+0x50>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004356:	d009      	beq.n	800436c <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	e7fe      	b.n	800436a <prvTaskExitError+0x26>
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800437e:	bf00      	nop
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0fc      	beq.n	8004380 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	2000000c 	.word	0x2000000c
	...

080043a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043a0:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <pxCurrentTCBConst2>)
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	6808      	ldr	r0, [r1, #0]
 80043a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043aa:	f380 8809 	msr	PSP, r0
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f380 8811 	msr	BASEPRI, r0
 80043ba:	4770      	bx	lr
 80043bc:	f3af 8000 	nop.w

080043c0 <pxCurrentTCBConst2>:
 80043c0:	20000ec8 	.word	0x20000ec8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop

080043c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80043c8:	4808      	ldr	r0, [pc, #32]	; (80043ec <prvPortStartFirstTask+0x24>)
 80043ca:	6800      	ldr	r0, [r0, #0]
 80043cc:	6800      	ldr	r0, [r0, #0]
 80043ce:	f380 8808 	msr	MSP, r0
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f380 8814 	msr	CONTROL, r0
 80043da:	b662      	cpsie	i
 80043dc:	b661      	cpsie	f
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	df00      	svc	0
 80043e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043ea:	bf00      	nop
 80043ec:	e000ed08 	.word	0xe000ed08

080043f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043f6:	4b44      	ldr	r3, [pc, #272]	; (8004508 <xPortStartScheduler+0x118>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a44      	ldr	r2, [pc, #272]	; (800450c <xPortStartScheduler+0x11c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d109      	bne.n	8004414 <xPortStartScheduler+0x24>
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	e7fe      	b.n	8004412 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004414:	4b3c      	ldr	r3, [pc, #240]	; (8004508 <xPortStartScheduler+0x118>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a3d      	ldr	r2, [pc, #244]	; (8004510 <xPortStartScheduler+0x120>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d109      	bne.n	8004432 <xPortStartScheduler+0x42>
 800441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	e7fe      	b.n	8004430 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004432:	4b38      	ldr	r3, [pc, #224]	; (8004514 <xPortStartScheduler+0x124>)
 8004434:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	22ff      	movs	r2, #255	; 0xff
 8004442:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004454:	b2da      	uxtb	r2, r3
 8004456:	4b30      	ldr	r3, [pc, #192]	; (8004518 <xPortStartScheduler+0x128>)
 8004458:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800445a:	4b30      	ldr	r3, [pc, #192]	; (800451c <xPortStartScheduler+0x12c>)
 800445c:	2207      	movs	r2, #7
 800445e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004460:	e009      	b.n	8004476 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004462:	4b2e      	ldr	r3, [pc, #184]	; (800451c <xPortStartScheduler+0x12c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3b01      	subs	r3, #1
 8004468:	4a2c      	ldr	r2, [pc, #176]	; (800451c <xPortStartScheduler+0x12c>)
 800446a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	b2db      	uxtb	r3, r3
 8004474:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447e:	2b80      	cmp	r3, #128	; 0x80
 8004480:	d0ef      	beq.n	8004462 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004482:	4b26      	ldr	r3, [pc, #152]	; (800451c <xPortStartScheduler+0x12c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f1c3 0307 	rsb	r3, r3, #7
 800448a:	2b04      	cmp	r3, #4
 800448c:	d009      	beq.n	80044a2 <xPortStartScheduler+0xb2>
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	60bb      	str	r3, [r7, #8]
 80044a0:	e7fe      	b.n	80044a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044a2:	4b1e      	ldr	r3, [pc, #120]	; (800451c <xPortStartScheduler+0x12c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	4a1c      	ldr	r2, [pc, #112]	; (800451c <xPortStartScheduler+0x12c>)
 80044aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <xPortStartScheduler+0x12c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044b4:	4a19      	ldr	r2, [pc, #100]	; (800451c <xPortStartScheduler+0x12c>)
 80044b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044c0:	4a17      	ldr	r2, [pc, #92]	; (8004520 <xPortStartScheduler+0x130>)
 80044c2:	4b17      	ldr	r3, [pc, #92]	; (8004520 <xPortStartScheduler+0x130>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044cc:	4a14      	ldr	r2, [pc, #80]	; (8004520 <xPortStartScheduler+0x130>)
 80044ce:	4b14      	ldr	r3, [pc, #80]	; (8004520 <xPortStartScheduler+0x130>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044d8:	f000 f8d6 	bl	8004688 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044dc:	4b11      	ldr	r3, [pc, #68]	; (8004524 <xPortStartScheduler+0x134>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80044e2:	f000 f8f5 	bl	80046d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044e6:	4a10      	ldr	r2, [pc, #64]	; (8004528 <xPortStartScheduler+0x138>)
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <xPortStartScheduler+0x138>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044f2:	f7ff ff69 	bl	80043c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044f6:	f001 fad9 	bl	8005aac <vTaskSwitchContext>
	prvTaskExitError();
 80044fa:	f7ff ff23 	bl	8004344 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	e000ed00 	.word	0xe000ed00
 800450c:	410fc271 	.word	0x410fc271
 8004510:	410fc270 	.word	0x410fc270
 8004514:	e000e400 	.word	0xe000e400
 8004518:	200002e8 	.word	0x200002e8
 800451c:	200002ec 	.word	0x200002ec
 8004520:	e000ed20 	.word	0xe000ed20
 8004524:	2000000c 	.word	0x2000000c
 8004528:	e000ef34 	.word	0xe000ef34

0800452c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004544:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <vPortEnterCritical+0x54>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3301      	adds	r3, #1
 800454a:	4a0d      	ldr	r2, [pc, #52]	; (8004580 <vPortEnterCritical+0x54>)
 800454c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <vPortEnterCritical+0x54>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d10e      	bne.n	8004574 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <vPortEnterCritical+0x58>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <vPortEnterCritical+0x48>
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	e7fe      	b.n	8004572 <vPortEnterCritical+0x46>
	}
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	2000000c 	.word	0x2000000c
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <vPortExitCritical+0x4c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d109      	bne.n	80045aa <vPortExitCritical+0x22>
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	607b      	str	r3, [r7, #4]
 80045a8:	e7fe      	b.n	80045a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80045aa:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <vPortExitCritical+0x4c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	4a08      	ldr	r2, [pc, #32]	; (80045d4 <vPortExitCritical+0x4c>)
 80045b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045b4:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <vPortExitCritical+0x4c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d104      	bne.n	80045c6 <vPortExitCritical+0x3e>
 80045bc:	2300      	movs	r3, #0
 80045be:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	2000000c 	.word	0x2000000c
	...

080045e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045e0:	f3ef 8009 	mrs	r0, PSP
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	4b15      	ldr	r3, [pc, #84]	; (8004640 <pxCurrentTCBConst>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f01e 0f10 	tst.w	lr, #16
 80045f0:	bf08      	it	eq
 80045f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	6010      	str	r0, [r2, #0]
 80045fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004604:	f380 8811 	msr	BASEPRI, r0
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f001 fa4c 	bl	8005aac <vTaskSwitchContext>
 8004614:	f04f 0000 	mov.w	r0, #0
 8004618:	f380 8811 	msr	BASEPRI, r0
 800461c:	bc09      	pop	{r0, r3}
 800461e:	6819      	ldr	r1, [r3, #0]
 8004620:	6808      	ldr	r0, [r1, #0]
 8004622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004626:	f01e 0f10 	tst.w	lr, #16
 800462a:	bf08      	it	eq
 800462c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004630:	f380 8809 	msr	PSP, r0
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	f3af 8000 	nop.w

08004640 <pxCurrentTCBConst>:
 8004640:	20000ec8 	.word	0x20000ec8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop

08004648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004660:	f001 f96c 	bl	800593c <xTaskIncrementTick>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <SysTick_Handler+0x3c>)
 800466c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	2300      	movs	r3, #0
 8004674:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800467c:	bf00      	nop
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	e000ed04 	.word	0xe000ed04

08004688 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <vPortSetupTimerInterrupt+0x34>)
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <vPortSetupTimerInterrupt+0x38>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004698:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <vPortSetupTimerInterrupt+0x3c>)
 800469a:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <vPortSetupTimerInterrupt+0x40>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	490b      	ldr	r1, [pc, #44]	; (80046cc <vPortSetupTimerInterrupt+0x44>)
 80046a0:	fba1 1303 	umull	r1, r3, r1, r3
 80046a4:	099b      	lsrs	r3, r3, #6
 80046a6:	3b01      	subs	r3, #1
 80046a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046aa:	4b04      	ldr	r3, [pc, #16]	; (80046bc <vPortSetupTimerInterrupt+0x34>)
 80046ac:	2207      	movs	r2, #7
 80046ae:	601a      	str	r2, [r3, #0]
}
 80046b0:	bf00      	nop
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	e000e010 	.word	0xe000e010
 80046c0:	e000e018 	.word	0xe000e018
 80046c4:	e000e014 	.word	0xe000e014
 80046c8:	20000000 	.word	0x20000000
 80046cc:	10624dd3 	.word	0x10624dd3

080046d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80046d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046e0 <vPortEnableVFP+0x10>
 80046d4:	6801      	ldr	r1, [r0, #0]
 80046d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046da:	6001      	str	r1, [r0, #0]
 80046dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80046de:	bf00      	nop
 80046e0:	e000ed88 	.word	0xe000ed88

080046e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80046ea:	f3ef 8305 	mrs	r3, IPSR
 80046ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b0f      	cmp	r3, #15
 80046f4:	d913      	bls.n	800471e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046f6:	4a16      	ldr	r2, [pc, #88]	; (8004750 <vPortValidateInterruptPriority+0x6c>)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004700:	4b14      	ldr	r3, [pc, #80]	; (8004754 <vPortValidateInterruptPriority+0x70>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	7afa      	ldrb	r2, [r7, #11]
 8004706:	429a      	cmp	r2, r3
 8004708:	d209      	bcs.n	800471e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	e7fe      	b.n	800471c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800471e:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <vPortValidateInterruptPriority+0x74>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004726:	4b0d      	ldr	r3, [pc, #52]	; (800475c <vPortValidateInterruptPriority+0x78>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d909      	bls.n	8004742 <vPortValidateInterruptPriority+0x5e>
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	e7fe      	b.n	8004740 <vPortValidateInterruptPriority+0x5c>
	}
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	e000e3f0 	.word	0xe000e3f0
 8004754:	200002e8 	.word	0x200002e8
 8004758:	e000ed0c 	.word	0xe000ed0c
 800475c:	200002ec 	.word	0x200002ec

08004760 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004768:	2300      	movs	r3, #0
 800476a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800476c:	f001 f83c 	bl	80057e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004770:	4b59      	ldr	r3, [pc, #356]	; (80048d8 <pvPortMalloc+0x178>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004778:	f000 f91a 	bl	80049b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800477c:	4b57      	ldr	r3, [pc, #348]	; (80048dc <pvPortMalloc+0x17c>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4013      	ands	r3, r2
 8004784:	2b00      	cmp	r3, #0
 8004786:	f040 8091 	bne.w	80048ac <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01c      	beq.n	80047ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004790:	2208      	movs	r2, #8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4413      	add	r3, r2
 8004796:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d013      	beq.n	80047ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f023 0307 	bic.w	r3, r3, #7
 80047a8:	3308      	adds	r3, #8
 80047aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <pvPortMalloc+0x6a>
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e7fe      	b.n	80047c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d06d      	beq.n	80048ac <pvPortMalloc+0x14c>
 80047d0:	4b43      	ldr	r3, [pc, #268]	; (80048e0 <pvPortMalloc+0x180>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d868      	bhi.n	80048ac <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047da:	4b42      	ldr	r3, [pc, #264]	; (80048e4 <pvPortMalloc+0x184>)
 80047dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047de:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <pvPortMalloc+0x184>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047e4:	e004      	b.n	80047f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d203      	bcs.n	8004802 <pvPortMalloc+0xa2>
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f1      	bne.n	80047e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004802:	4b35      	ldr	r3, [pc, #212]	; (80048d8 <pvPortMalloc+0x178>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004808:	429a      	cmp	r2, r3
 800480a:	d04f      	beq.n	80048ac <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2208      	movs	r2, #8
 8004812:	4413      	add	r3, r2
 8004814:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	1ad2      	subs	r2, r2, r3
 8004826:	2308      	movs	r3, #8
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	429a      	cmp	r2, r3
 800482c:	d91e      	bls.n	800486c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800482e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	2b00      	cmp	r3, #0
 800483e:	d009      	beq.n	8004854 <pvPortMalloc+0xf4>
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	e7fe      	b.n	8004852 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	1ad2      	subs	r2, r2, r3
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004866:	69b8      	ldr	r0, [r7, #24]
 8004868:	f000 f904 	bl	8004a74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800486c:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <pvPortMalloc+0x180>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	4a1a      	ldr	r2, [pc, #104]	; (80048e0 <pvPortMalloc+0x180>)
 8004878:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800487a:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <pvPortMalloc+0x180>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <pvPortMalloc+0x188>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d203      	bcs.n	800488e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004886:	4b16      	ldr	r3, [pc, #88]	; (80048e0 <pvPortMalloc+0x180>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <pvPortMalloc+0x188>)
 800488c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <pvPortMalloc+0x17c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	431a      	orrs	r2, r3
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80048a2:	4b12      	ldr	r3, [pc, #72]	; (80048ec <pvPortMalloc+0x18c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3301      	adds	r3, #1
 80048a8:	4a10      	ldr	r2, [pc, #64]	; (80048ec <pvPortMalloc+0x18c>)
 80048aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048ac:	f000 ffaa 	bl	8005804 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <pvPortMalloc+0x16e>
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e7fe      	b.n	80048cc <pvPortMalloc+0x16c>
	return pvReturn;
 80048ce:	69fb      	ldr	r3, [r7, #28]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3728      	adds	r7, #40	; 0x28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	20000eb0 	.word	0x20000eb0
 80048dc:	20000ec4 	.word	0x20000ec4
 80048e0:	20000eb4 	.word	0x20000eb4
 80048e4:	20000ea8 	.word	0x20000ea8
 80048e8:	20000eb8 	.word	0x20000eb8
 80048ec:	20000ebc 	.word	0x20000ebc

080048f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d04b      	beq.n	800499a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004902:	2308      	movs	r3, #8
 8004904:	425b      	negs	r3, r3
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4413      	add	r3, r2
 800490a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	4b23      	ldr	r3, [pc, #140]	; (80049a4 <vPortFree+0xb4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4013      	ands	r3, r2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <vPortFree+0x42>
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e7fe      	b.n	8004930 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <vPortFree+0x5e>
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	e7fe      	b.n	800494c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <vPortFree+0xb4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01e      	beq.n	800499a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d11a      	bne.n	800499a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	4b0e      	ldr	r3, [pc, #56]	; (80049a4 <vPortFree+0xb4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	43db      	mvns	r3, r3
 800496e:	401a      	ands	r2, r3
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004974:	f000 ff38 	bl	80057e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <vPortFree+0xb8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4413      	add	r3, r2
 8004982:	4a09      	ldr	r2, [pc, #36]	; (80049a8 <vPortFree+0xb8>)
 8004984:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004986:	6938      	ldr	r0, [r7, #16]
 8004988:	f000 f874 	bl	8004a74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800498c:	4b07      	ldr	r3, [pc, #28]	; (80049ac <vPortFree+0xbc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3301      	adds	r3, #1
 8004992:	4a06      	ldr	r2, [pc, #24]	; (80049ac <vPortFree+0xbc>)
 8004994:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004996:	f000 ff35 	bl	8005804 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800499a:	bf00      	nop
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000ec4 	.word	0x20000ec4
 80049a8:	20000eb4 	.word	0x20000eb4
 80049ac:	20000ec0 	.word	0x20000ec0

080049b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049b6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80049ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049bc:	4b27      	ldr	r3, [pc, #156]	; (8004a5c <prvHeapInit+0xac>)
 80049be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00c      	beq.n	80049e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3307      	adds	r3, #7
 80049ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0307 	bic.w	r3, r3, #7
 80049d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <prvHeapInit+0xac>)
 80049e0:	4413      	add	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049e8:	4a1d      	ldr	r2, [pc, #116]	; (8004a60 <prvHeapInit+0xb0>)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049ee:	4b1c      	ldr	r3, [pc, #112]	; (8004a60 <prvHeapInit+0xb0>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4413      	add	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049fc:	2208      	movs	r2, #8
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0307 	bic.w	r3, r3, #7
 8004a0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <prvHeapInit+0xb4>)
 8004a10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a12:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <prvHeapInit+0xb4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2200      	movs	r2, #0
 8004a18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <prvHeapInit+0xb4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	1ad2      	subs	r2, r2, r3
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <prvHeapInit+0xb4>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <prvHeapInit+0xb8>)
 8004a3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	4a09      	ldr	r2, [pc, #36]	; (8004a6c <prvHeapInit+0xbc>)
 8004a46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a48:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <prvHeapInit+0xc0>)
 8004a4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a4e:	601a      	str	r2, [r3, #0]
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	200002f0 	.word	0x200002f0
 8004a60:	20000ea8 	.word	0x20000ea8
 8004a64:	20000eb0 	.word	0x20000eb0
 8004a68:	20000eb8 	.word	0x20000eb8
 8004a6c:	20000eb4 	.word	0x20000eb4
 8004a70:	20000ec4 	.word	0x20000ec4

08004a74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a7c:	4b28      	ldr	r3, [pc, #160]	; (8004b20 <prvInsertBlockIntoFreeList+0xac>)
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	e002      	b.n	8004a88 <prvInsertBlockIntoFreeList+0x14>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d3f7      	bcc.n	8004a82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	441a      	add	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d108      	bne.n	8004ab6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	441a      	add	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	441a      	add	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d118      	bne.n	8004afc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <prvInsertBlockIntoFreeList+0xb0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d00d      	beq.n	8004af2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	e008      	b.n	8004b04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004af2:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <prvInsertBlockIntoFreeList+0xb0>)
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	e003      	b.n	8004b04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d002      	beq.n	8004b12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	20000ea8 	.word	0x20000ea8
 8004b24:	20000eb0 	.word	0x20000eb0

08004b28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <xQueueGenericReset+0x28>
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	e7fe      	b.n	8004b4e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004b50:	f7ff fcec 	bl	800452c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	441a      	add	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	3b01      	subs	r3, #1
 8004b82:	68f9      	ldr	r1, [r7, #12]
 8004b84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	441a      	add	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	22ff      	movs	r2, #255	; 0xff
 8004b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	22ff      	movs	r2, #255	; 0xff
 8004b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d114      	bne.n	8004bd0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01a      	beq.n	8004be4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3310      	adds	r3, #16
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fff8 	bl	8005ba8 <xTaskRemoveFromEventList>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d012      	beq.n	8004be4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <xQueueGenericReset+0xcc>)
 8004bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	e009      	b.n	8004be4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3310      	adds	r3, #16
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff facd 	bl	8004174 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3324      	adds	r3, #36	; 0x24
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fac8 	bl	8004174 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004be4:	f7ff fcd0 	bl	8004588 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004be8:	2301      	movs	r3, #1
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	e000ed04 	.word	0xe000ed04

08004bf8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	; 0x28
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	4613      	mov	r3, r2
 8004c04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d109      	bne.n	8004c20 <xQueueGenericCreate+0x28>
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	e7fe      	b.n	8004c1e <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	fb02 f303 	mul.w	r3, r2, r3
 8004c28:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	3348      	adds	r3, #72	; 0x48
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fd96 	bl	8004760 <pvPortMalloc>
 8004c34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d011      	beq.n	8004c60 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	3348      	adds	r3, #72	; 0x48
 8004c44:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c4e:	79fa      	ldrb	r2, [r7, #7]
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f805 	bl	8004c6a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c60:	69bb      	ldr	r3, [r7, #24]
	}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3720      	adds	r7, #32
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e002      	b.n	8004c8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c98:	2101      	movs	r1, #1
 8004c9a:	69b8      	ldr	r0, [r7, #24]
 8004c9c:	f7ff ff44 	bl	8004b28 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08e      	sub	sp, #56	; 0x38
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <xQueueGenericSend+0x30>
 8004cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cd6:	e7fe      	b.n	8004cd6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d103      	bne.n	8004ce6 <xQueueGenericSend+0x3e>
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <xQueueGenericSend+0x42>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e000      	b.n	8004cec <xQueueGenericSend+0x44>
 8004cea:	2300      	movs	r3, #0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d109      	bne.n	8004d04 <xQueueGenericSend+0x5c>
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
 8004d02:	e7fe      	b.n	8004d02 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d103      	bne.n	8004d12 <xQueueGenericSend+0x6a>
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <xQueueGenericSend+0x6e>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <xQueueGenericSend+0x70>
 8004d16:	2300      	movs	r3, #0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d109      	bne.n	8004d30 <xQueueGenericSend+0x88>
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	623b      	str	r3, [r7, #32]
 8004d2e:	e7fe      	b.n	8004d2e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d30:	f001 f8f0 	bl	8005f14 <xTaskGetSchedulerState>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <xQueueGenericSend+0x98>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <xQueueGenericSend+0x9c>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <xQueueGenericSend+0x9e>
 8004d44:	2300      	movs	r3, #0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <xQueueGenericSend+0xb6>
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	e7fe      	b.n	8004d5c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d5e:	f7ff fbe5 	bl	800452c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d302      	bcc.n	8004d74 <xQueueGenericSend+0xcc>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d129      	bne.n	8004dc8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d7a:	f000 fa03 	bl	8005184 <prvCopyDataToQueue>
 8004d7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d010      	beq.n	8004daa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	3324      	adds	r3, #36	; 0x24
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 ff0b 	bl	8005ba8 <xTaskRemoveFromEventList>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d013      	beq.n	8004dc0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d98:	4b3f      	ldr	r3, [pc, #252]	; (8004e98 <xQueueGenericSend+0x1f0>)
 8004d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	e00a      	b.n	8004dc0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d007      	beq.n	8004dc0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004db0:	4b39      	ldr	r3, [pc, #228]	; (8004e98 <xQueueGenericSend+0x1f0>)
 8004db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004dc0:	f7ff fbe2 	bl	8004588 <vPortExitCritical>
				return pdPASS;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e063      	b.n	8004e90 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d103      	bne.n	8004dd6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dce:	f7ff fbdb 	bl	8004588 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e05c      	b.n	8004e90 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ddc:	f107 0314 	add.w	r3, r7, #20
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 ff43 	bl	8005c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004de6:	2301      	movs	r3, #1
 8004de8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dea:	f7ff fbcd 	bl	8004588 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dee:	f000 fcfb 	bl	80057e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004df2:	f7ff fb9b 	bl	800452c <vPortEnterCritical>
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dfc:	b25b      	sxtb	r3, r3
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e02:	d103      	bne.n	8004e0c <xQueueGenericSend+0x164>
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e12:	b25b      	sxtb	r3, r3
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e18:	d103      	bne.n	8004e22 <xQueueGenericSend+0x17a>
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e22:	f7ff fbb1 	bl	8004588 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e26:	1d3a      	adds	r2, r7, #4
 8004e28:	f107 0314 	add.w	r3, r7, #20
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 ff32 	bl	8005c98 <xTaskCheckForTimeOut>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d124      	bne.n	8004e84 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e3c:	f000 fa9a 	bl	8005374 <prvIsQueueFull>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d018      	beq.n	8004e78 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	3310      	adds	r3, #16
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fe86 	bl	8005b60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e56:	f000 fa25 	bl	80052a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e5a:	f000 fcd3 	bl	8005804 <xTaskResumeAll>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f47f af7c 	bne.w	8004d5e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <xQueueGenericSend+0x1f0>)
 8004e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	e772      	b.n	8004d5e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e7a:	f000 fa13 	bl	80052a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e7e:	f000 fcc1 	bl	8005804 <xTaskResumeAll>
 8004e82:	e76c      	b.n	8004d5e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e86:	f000 fa0d 	bl	80052a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e8a:	f000 fcbb 	bl	8005804 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3738      	adds	r7, #56	; 0x38
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b090      	sub	sp, #64	; 0x40
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <xQueueGenericSendFromISR+0x2c>
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ec6:	e7fe      	b.n	8004ec6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d103      	bne.n	8004ed6 <xQueueGenericSendFromISR+0x3a>
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <xQueueGenericSendFromISR+0x3e>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <xQueueGenericSendFromISR+0x40>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d109      	bne.n	8004ef4 <xQueueGenericSendFromISR+0x58>
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef2:	e7fe      	b.n	8004ef2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d103      	bne.n	8004f02 <xQueueGenericSendFromISR+0x66>
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <xQueueGenericSendFromISR+0x6a>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <xQueueGenericSendFromISR+0x6c>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d109      	bne.n	8004f20 <xQueueGenericSendFromISR+0x84>
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	623b      	str	r3, [r7, #32]
 8004f1e:	e7fe      	b.n	8004f1e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f20:	f7ff fbe0 	bl	80046e4 <vPortValidateInterruptPriority>
	__asm volatile
 8004f24:	f3ef 8211 	mrs	r2, BASEPRI
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	61fa      	str	r2, [r7, #28]
 8004f3a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f3e:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d302      	bcc.n	8004f52 <xQueueGenericSendFromISR+0xb6>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d12f      	bne.n	8004fb2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f68:	f000 f90c 	bl	8005184 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f6c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f74:	d112      	bne.n	8004f9c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d016      	beq.n	8004fac <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	3324      	adds	r3, #36	; 0x24
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fe10 	bl	8005ba8 <xTaskRemoveFromEventList>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00e      	beq.n	8004fac <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e007      	b.n	8004fac <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	b25a      	sxtb	r2, r3
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004fac:	2301      	movs	r3, #1
 8004fae:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004fb0:	e001      	b.n	8004fb6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb8:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3740      	adds	r7, #64	; 0x40
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08c      	sub	sp, #48	; 0x30
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <xQueueReceive+0x2e>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	623b      	str	r3, [r7, #32]
 8004ff8:	e7fe      	b.n	8004ff8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d103      	bne.n	8005008 <xQueueReceive+0x3c>
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <xQueueReceive+0x40>
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <xQueueReceive+0x42>
 800500c:	2300      	movs	r3, #0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <xQueueReceive+0x5a>
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	61fb      	str	r3, [r7, #28]
 8005024:	e7fe      	b.n	8005024 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005026:	f000 ff75 	bl	8005f14 <xTaskGetSchedulerState>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <xQueueReceive+0x6a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <xQueueReceive+0x6e>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <xQueueReceive+0x70>
 800503a:	2300      	movs	r3, #0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <xQueueReceive+0x88>
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	61bb      	str	r3, [r7, #24]
 8005052:	e7fe      	b.n	8005052 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005054:	f7ff fa6a 	bl	800452c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01f      	beq.n	80050a4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005068:	f000 f8f6 	bl	8005258 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	1e5a      	subs	r2, r3, #1
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00f      	beq.n	800509c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	3310      	adds	r3, #16
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fd91 	bl	8005ba8 <xTaskRemoveFromEventList>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d007      	beq.n	800509c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800508c:	4b3c      	ldr	r3, [pc, #240]	; (8005180 <xQueueReceive+0x1b4>)
 800508e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800509c:	f7ff fa74 	bl	8004588 <vPortExitCritical>
				return pdPASS;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e069      	b.n	8005178 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050aa:	f7ff fa6d 	bl	8004588 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050ae:	2300      	movs	r3, #0
 80050b0:	e062      	b.n	8005178 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d106      	bne.n	80050c6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050b8:	f107 0310 	add.w	r3, r7, #16
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fdd5 	bl	8005c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050c2:	2301      	movs	r3, #1
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050c6:	f7ff fa5f 	bl	8004588 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050ca:	f000 fb8d 	bl	80057e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050ce:	f7ff fa2d 	bl	800452c <vPortEnterCritical>
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050d8:	b25b      	sxtb	r3, r3
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050de:	d103      	bne.n	80050e8 <xQueueReceive+0x11c>
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ee:	b25b      	sxtb	r3, r3
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050f4:	d103      	bne.n	80050fe <xQueueReceive+0x132>
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050fe:	f7ff fa43 	bl	8004588 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005102:	1d3a      	adds	r2, r7, #4
 8005104:	f107 0310 	add.w	r3, r7, #16
 8005108:	4611      	mov	r1, r2
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fdc4 	bl	8005c98 <xTaskCheckForTimeOut>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d123      	bne.n	800515e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005118:	f000 f916 	bl	8005348 <prvIsQueueEmpty>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d017      	beq.n	8005152 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	3324      	adds	r3, #36	; 0x24
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fd18 	bl	8005b60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005132:	f000 f8b7 	bl	80052a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005136:	f000 fb65 	bl	8005804 <xTaskResumeAll>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d189      	bne.n	8005054 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005140:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <xQueueReceive+0x1b4>)
 8005142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	e780      	b.n	8005054 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005154:	f000 f8a6 	bl	80052a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005158:	f000 fb54 	bl	8005804 <xTaskResumeAll>
 800515c:	e77a      	b.n	8005054 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800515e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005160:	f000 f8a0 	bl	80052a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005164:	f000 fb4e 	bl	8005804 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800516a:	f000 f8ed 	bl	8005348 <prvIsQueueEmpty>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	f43f af6f 	beq.w	8005054 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005176:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005178:	4618      	mov	r0, r3
 800517a:	3730      	adds	r7, #48	; 0x30
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	e000ed04 	.word	0xe000ed04

08005184 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10d      	bne.n	80051be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d14d      	bne.n	8005246 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fece 	bl	8005f50 <xTaskPriorityDisinherit>
 80051b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	609a      	str	r2, [r3, #8]
 80051bc:	e043      	b.n	8005246 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d119      	bne.n	80051f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6858      	ldr	r0, [r3, #4]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	461a      	mov	r2, r3
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	f000 fffc 	bl	80061cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	441a      	add	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d32b      	bcc.n	8005246 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	e026      	b.n	8005246 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68d8      	ldr	r0, [r3, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	461a      	mov	r2, r3
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	f000 ffe2 	bl	80061cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	425b      	negs	r3, r3
 8005212:	441a      	add	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d207      	bcs.n	8005234 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	425b      	negs	r3, r3
 800522e:	441a      	add	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d105      	bne.n	8005246 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	3b01      	subs	r3, #1
 8005244:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800524e:	697b      	ldr	r3, [r7, #20]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	d018      	beq.n	800529c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	441a      	add	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	429a      	cmp	r2, r3
 8005282:	d303      	bcc.n	800528c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68d9      	ldr	r1, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	461a      	mov	r2, r3
 8005296:	6838      	ldr	r0, [r7, #0]
 8005298:	f000 ff98 	bl	80061cc <memcpy>
	}
}
 800529c:	bf00      	nop
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052ac:	f7ff f93e 	bl	800452c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052b8:	e011      	b.n	80052de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d012      	beq.n	80052e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3324      	adds	r3, #36	; 0x24
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fc6e 	bl	8005ba8 <xTaskRemoveFromEventList>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052d2:	f000 fd41 	bl	8005d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	3b01      	subs	r3, #1
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	dce9      	bgt.n	80052ba <prvUnlockQueue+0x16>
 80052e6:	e000      	b.n	80052ea <prvUnlockQueue+0x46>
					break;
 80052e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	22ff      	movs	r2, #255	; 0xff
 80052ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052f2:	f7ff f949 	bl	8004588 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052f6:	f7ff f919 	bl	800452c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005300:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005302:	e011      	b.n	8005328 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d012      	beq.n	8005332 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3310      	adds	r3, #16
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fc49 	bl	8005ba8 <xTaskRemoveFromEventList>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800531c:	f000 fd1c 	bl	8005d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005320:	7bbb      	ldrb	r3, [r7, #14]
 8005322:	3b01      	subs	r3, #1
 8005324:	b2db      	uxtb	r3, r3
 8005326:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800532c:	2b00      	cmp	r3, #0
 800532e:	dce9      	bgt.n	8005304 <prvUnlockQueue+0x60>
 8005330:	e000      	b.n	8005334 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005332:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	22ff      	movs	r2, #255	; 0xff
 8005338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800533c:	f7ff f924 	bl	8004588 <vPortExitCritical>
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005350:	f7ff f8ec 	bl	800452c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	2b00      	cmp	r3, #0
 800535a:	d102      	bne.n	8005362 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800535c:	2301      	movs	r3, #1
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	e001      	b.n	8005366 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005366:	f7ff f90f 	bl	8004588 <vPortExitCritical>

	return xReturn;
 800536a:	68fb      	ldr	r3, [r7, #12]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800537c:	f7ff f8d6 	bl	800452c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005388:	429a      	cmp	r2, r3
 800538a:	d102      	bne.n	8005392 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800538c:	2301      	movs	r3, #1
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	e001      	b.n	8005396 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005396:	f7ff f8f7 	bl	8004588 <vPortExitCritical>

	return xReturn;
 800539a:	68fb      	ldr	r3, [r7, #12]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08e      	sub	sp, #56	; 0x38
 80053a8:	af04      	add	r7, sp, #16
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d109      	bne.n	80053cc <xTaskCreateStatic+0x28>
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	623b      	str	r3, [r7, #32]
 80053ca:	e7fe      	b.n	80053ca <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <xTaskCreateStatic+0x42>
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	61fb      	str	r3, [r7, #28]
 80053e4:	e7fe      	b.n	80053e4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053e6:	2354      	movs	r3, #84	; 0x54
 80053e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b54      	cmp	r3, #84	; 0x54
 80053ee:	d009      	beq.n	8005404 <xTaskCreateStatic+0x60>
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	e7fe      	b.n	8005402 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005404:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01e      	beq.n	800544a <xTaskCreateStatic+0xa6>
 800540c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01b      	beq.n	800544a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800541a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	2202      	movs	r2, #2
 8005420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005424:	2300      	movs	r3, #0
 8005426:	9303      	str	r3, [sp, #12]
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	9302      	str	r3, [sp, #8]
 800542c:	f107 0314 	add.w	r3, r7, #20
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	68b9      	ldr	r1, [r7, #8]
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f850 	bl	80054e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005442:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005444:	f000 f8d4 	bl	80055f0 <prvAddNewTaskToReadyList>
 8005448:	e001      	b.n	800544e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800544e:	697b      	ldr	r3, [r7, #20]
	}
 8005450:	4618      	mov	r0, r3
 8005452:	3728      	adds	r7, #40	; 0x28
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08c      	sub	sp, #48	; 0x30
 800545c:	af04      	add	r7, sp, #16
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	4613      	mov	r3, r2
 8005466:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff f977 	bl	8004760 <pvPortMalloc>
 8005472:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00e      	beq.n	8005498 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800547a:	2054      	movs	r0, #84	; 0x54
 800547c:	f7ff f970 	bl	8004760 <pvPortMalloc>
 8005480:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	631a      	str	r2, [r3, #48]	; 0x30
 800548e:	e005      	b.n	800549c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005490:	6978      	ldr	r0, [r7, #20]
 8005492:	f7ff fa2d 	bl	80048f0 <vPortFree>
 8005496:	e001      	b.n	800549c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005498:	2300      	movs	r3, #0
 800549a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d017      	beq.n	80054d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054aa:	88fa      	ldrh	r2, [r7, #6]
 80054ac:	2300      	movs	r3, #0
 80054ae:	9303      	str	r3, [sp, #12]
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	9302      	str	r3, [sp, #8]
 80054b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f80e 	bl	80054e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054c6:	69f8      	ldr	r0, [r7, #28]
 80054c8:	f000 f892 	bl	80055f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054cc:	2301      	movs	r3, #1
 80054ce:	61bb      	str	r3, [r7, #24]
 80054d0:	e002      	b.n	80054d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054d8:	69bb      	ldr	r3, [r7, #24]
	}
 80054da:	4618      	mov	r0, r3
 80054dc:	3720      	adds	r7, #32
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b088      	sub	sp, #32
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054fa:	3b01      	subs	r3, #1
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	f023 0307 	bic.w	r3, r3, #7
 8005508:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	2b00      	cmp	r3, #0
 8005512:	d009      	beq.n	8005528 <prvInitialiseNewTask+0x46>
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e7fe      	b.n	8005526 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01f      	beq.n	800556e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	e012      	b.n	800555a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	4413      	add	r3, r2
 800553a:	7819      	ldrb	r1, [r3, #0]
 800553c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	3334      	adds	r3, #52	; 0x34
 8005544:	460a      	mov	r2, r1
 8005546:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d006      	beq.n	8005562 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	3301      	adds	r3, #1
 8005558:	61fb      	str	r3, [r7, #28]
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	2b0f      	cmp	r3, #15
 800555e:	d9e9      	bls.n	8005534 <prvInitialiseNewTask+0x52>
 8005560:	e000      	b.n	8005564 <prvInitialiseNewTask+0x82>
			{
				break;
 8005562:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800556c:	e003      	b.n	8005576 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	2b06      	cmp	r3, #6
 800557a:	d901      	bls.n	8005580 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800557c:	2306      	movs	r3, #6
 800557e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005584:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800558a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	2200      	movs	r2, #0
 8005590:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	3304      	adds	r3, #4
 8005596:	4618      	mov	r0, r3
 8005598:	f7fe fe0c 	bl	80041b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	3318      	adds	r3, #24
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fe fe07 	bl	80041b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	f1c3 0207 	rsb	r2, r3, #7
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	2200      	movs	r2, #0
 80055c0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	68f9      	ldr	r1, [r7, #12]
 80055ce:	69b8      	ldr	r0, [r7, #24]
 80055d0:	f7fe fe84 	bl	80042dc <pxPortInitialiseStack>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e6:	bf00      	nop
 80055e8:	3720      	adds	r7, #32
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055f8:	f7fe ff98 	bl	800452c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055fc:	4b2a      	ldr	r3, [pc, #168]	; (80056a8 <prvAddNewTaskToReadyList+0xb8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3301      	adds	r3, #1
 8005602:	4a29      	ldr	r2, [pc, #164]	; (80056a8 <prvAddNewTaskToReadyList+0xb8>)
 8005604:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005606:	4b29      	ldr	r3, [pc, #164]	; (80056ac <prvAddNewTaskToReadyList+0xbc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800560e:	4a27      	ldr	r2, [pc, #156]	; (80056ac <prvAddNewTaskToReadyList+0xbc>)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005614:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <prvAddNewTaskToReadyList+0xb8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d110      	bne.n	800563e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800561c:	f000 fbc0 	bl	8005da0 <prvInitialiseTaskLists>
 8005620:	e00d      	b.n	800563e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005622:	4b23      	ldr	r3, [pc, #140]	; (80056b0 <prvAddNewTaskToReadyList+0xc0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d109      	bne.n	800563e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800562a:	4b20      	ldr	r3, [pc, #128]	; (80056ac <prvAddNewTaskToReadyList+0xbc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	429a      	cmp	r2, r3
 8005636:	d802      	bhi.n	800563e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005638:	4a1c      	ldr	r2, [pc, #112]	; (80056ac <prvAddNewTaskToReadyList+0xbc>)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800563e:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <prvAddNewTaskToReadyList+0xc4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	4a1b      	ldr	r2, [pc, #108]	; (80056b4 <prvAddNewTaskToReadyList+0xc4>)
 8005646:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	2201      	movs	r2, #1
 800564e:	409a      	lsls	r2, r3
 8005650:	4b19      	ldr	r3, [pc, #100]	; (80056b8 <prvAddNewTaskToReadyList+0xc8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4313      	orrs	r3, r2
 8005656:	4a18      	ldr	r2, [pc, #96]	; (80056b8 <prvAddNewTaskToReadyList+0xc8>)
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4a15      	ldr	r2, [pc, #84]	; (80056bc <prvAddNewTaskToReadyList+0xcc>)
 8005668:	441a      	add	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3304      	adds	r3, #4
 800566e:	4619      	mov	r1, r3
 8005670:	4610      	mov	r0, r2
 8005672:	f7fe fdac 	bl	80041ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005676:	f7fe ff87 	bl	8004588 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800567a:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <prvAddNewTaskToReadyList+0xc0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00e      	beq.n	80056a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <prvAddNewTaskToReadyList+0xbc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	429a      	cmp	r2, r3
 800568e:	d207      	bcs.n	80056a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <prvAddNewTaskToReadyList+0xd0>)
 8005692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000fc8 	.word	0x20000fc8
 80056ac:	20000ec8 	.word	0x20000ec8
 80056b0:	20000fd4 	.word	0x20000fd4
 80056b4:	20000fe4 	.word	0x20000fe4
 80056b8:	20000fd0 	.word	0x20000fd0
 80056bc:	20000ecc 	.word	0x20000ecc
 80056c0:	e000ed04 	.word	0xe000ed04

080056c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d016      	beq.n	8005704 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056d6:	4b13      	ldr	r3, [pc, #76]	; (8005724 <vTaskDelay+0x60>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <vTaskDelay+0x2e>
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	60bb      	str	r3, [r7, #8]
 80056f0:	e7fe      	b.n	80056f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80056f2:	f000 f879 	bl	80057e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056f6:	2100      	movs	r1, #0
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fcad 	bl	8006058 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056fe:	f000 f881 	bl	8005804 <xTaskResumeAll>
 8005702:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d107      	bne.n	800571a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800570a:	4b07      	ldr	r3, [pc, #28]	; (8005728 <vTaskDelay+0x64>)
 800570c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800571a:	bf00      	nop
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000ff0 	.word	0x20000ff0
 8005728:	e000ed04 	.word	0xe000ed04

0800572c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08a      	sub	sp, #40	; 0x28
 8005730:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005732:	2300      	movs	r3, #0
 8005734:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800573a:	463a      	mov	r2, r7
 800573c:	1d39      	adds	r1, r7, #4
 800573e:	f107 0308 	add.w	r3, r7, #8
 8005742:	4618      	mov	r0, r3
 8005744:	f7fa ff24 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005748:	6839      	ldr	r1, [r7, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	9202      	str	r2, [sp, #8]
 8005750:	9301      	str	r3, [sp, #4]
 8005752:	2300      	movs	r3, #0
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	2300      	movs	r3, #0
 8005758:	460a      	mov	r2, r1
 800575a:	491d      	ldr	r1, [pc, #116]	; (80057d0 <vTaskStartScheduler+0xa4>)
 800575c:	481d      	ldr	r0, [pc, #116]	; (80057d4 <vTaskStartScheduler+0xa8>)
 800575e:	f7ff fe21 	bl	80053a4 <xTaskCreateStatic>
 8005762:	4602      	mov	r2, r0
 8005764:	4b1c      	ldr	r3, [pc, #112]	; (80057d8 <vTaskStartScheduler+0xac>)
 8005766:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005768:	4b1b      	ldr	r3, [pc, #108]	; (80057d8 <vTaskStartScheduler+0xac>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005770:	2301      	movs	r3, #1
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e001      	b.n	800577a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d115      	bne.n	80057ac <vTaskStartScheduler+0x80>
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	613b      	str	r3, [r7, #16]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005792:	4b12      	ldr	r3, [pc, #72]	; (80057dc <vTaskStartScheduler+0xb0>)
 8005794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005798:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800579a:	4b11      	ldr	r3, [pc, #68]	; (80057e0 <vTaskStartScheduler+0xb4>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057a0:	4b10      	ldr	r3, [pc, #64]	; (80057e4 <vTaskStartScheduler+0xb8>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057a6:	f7fe fe23 	bl	80043f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057aa:	e00d      	b.n	80057c8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057b2:	d109      	bne.n	80057c8 <vTaskStartScheduler+0x9c>
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	e7fe      	b.n	80057c6 <vTaskStartScheduler+0x9a>
}
 80057c8:	bf00      	nop
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	08006c74 	.word	0x08006c74
 80057d4:	08005d71 	.word	0x08005d71
 80057d8:	20000fec 	.word	0x20000fec
 80057dc:	20000fe8 	.word	0x20000fe8
 80057e0:	20000fd4 	.word	0x20000fd4
 80057e4:	20000fcc 	.word	0x20000fcc

080057e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057ec:	4b04      	ldr	r3, [pc, #16]	; (8005800 <vTaskSuspendAll+0x18>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3301      	adds	r3, #1
 80057f2:	4a03      	ldr	r2, [pc, #12]	; (8005800 <vTaskSuspendAll+0x18>)
 80057f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057f6:	bf00      	nop
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	20000ff0 	.word	0x20000ff0

08005804 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800580e:	2300      	movs	r3, #0
 8005810:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005812:	4b41      	ldr	r3, [pc, #260]	; (8005918 <xTaskResumeAll+0x114>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <xTaskResumeAll+0x2a>
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	e7fe      	b.n	800582c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800582e:	f7fe fe7d 	bl	800452c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005832:	4b39      	ldr	r3, [pc, #228]	; (8005918 <xTaskResumeAll+0x114>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3b01      	subs	r3, #1
 8005838:	4a37      	ldr	r2, [pc, #220]	; (8005918 <xTaskResumeAll+0x114>)
 800583a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800583c:	4b36      	ldr	r3, [pc, #216]	; (8005918 <xTaskResumeAll+0x114>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d161      	bne.n	8005908 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005844:	4b35      	ldr	r3, [pc, #212]	; (800591c <xTaskResumeAll+0x118>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d05d      	beq.n	8005908 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800584c:	e02e      	b.n	80058ac <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800584e:	4b34      	ldr	r3, [pc, #208]	; (8005920 <xTaskResumeAll+0x11c>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3318      	adds	r3, #24
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe fd14 	bl	8004288 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3304      	adds	r3, #4
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe fd0f 	bl	8004288 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	2201      	movs	r2, #1
 8005870:	409a      	lsls	r2, r3
 8005872:	4b2c      	ldr	r3, [pc, #176]	; (8005924 <xTaskResumeAll+0x120>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4313      	orrs	r3, r2
 8005878:	4a2a      	ldr	r2, [pc, #168]	; (8005924 <xTaskResumeAll+0x120>)
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4a27      	ldr	r2, [pc, #156]	; (8005928 <xTaskResumeAll+0x124>)
 800588a:	441a      	add	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3304      	adds	r3, #4
 8005890:	4619      	mov	r1, r3
 8005892:	4610      	mov	r0, r2
 8005894:	f7fe fc9b 	bl	80041ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	4b23      	ldr	r3, [pc, #140]	; (800592c <xTaskResumeAll+0x128>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d302      	bcc.n	80058ac <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80058a6:	4b22      	ldr	r3, [pc, #136]	; (8005930 <xTaskResumeAll+0x12c>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058ac:	4b1c      	ldr	r3, [pc, #112]	; (8005920 <xTaskResumeAll+0x11c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1cc      	bne.n	800584e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058ba:	f000 fb0b 	bl	8005ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058be:	4b1d      	ldr	r3, [pc, #116]	; (8005934 <xTaskResumeAll+0x130>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d010      	beq.n	80058ec <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058ca:	f000 f837 	bl	800593c <xTaskIncrementTick>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80058d4:	4b16      	ldr	r3, [pc, #88]	; (8005930 <xTaskResumeAll+0x12c>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3b01      	subs	r3, #1
 80058de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f1      	bne.n	80058ca <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 80058e6:	4b13      	ldr	r3, [pc, #76]	; (8005934 <xTaskResumeAll+0x130>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058ec:	4b10      	ldr	r3, [pc, #64]	; (8005930 <xTaskResumeAll+0x12c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d009      	beq.n	8005908 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058f4:	2301      	movs	r3, #1
 80058f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058f8:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <xTaskResumeAll+0x134>)
 80058fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005908:	f7fe fe3e 	bl	8004588 <vPortExitCritical>

	return xAlreadyYielded;
 800590c:	68bb      	ldr	r3, [r7, #8]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000ff0 	.word	0x20000ff0
 800591c:	20000fc8 	.word	0x20000fc8
 8005920:	20000f88 	.word	0x20000f88
 8005924:	20000fd0 	.word	0x20000fd0
 8005928:	20000ecc 	.word	0x20000ecc
 800592c:	20000ec8 	.word	0x20000ec8
 8005930:	20000fdc 	.word	0x20000fdc
 8005934:	20000fd8 	.word	0x20000fd8
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005946:	4b4e      	ldr	r3, [pc, #312]	; (8005a80 <xTaskIncrementTick+0x144>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f040 808d 	bne.w	8005a6a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005950:	4b4c      	ldr	r3, [pc, #304]	; (8005a84 <xTaskIncrementTick+0x148>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3301      	adds	r3, #1
 8005956:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005958:	4a4a      	ldr	r2, [pc, #296]	; (8005a84 <xTaskIncrementTick+0x148>)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d11f      	bne.n	80059a4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005964:	4b48      	ldr	r3, [pc, #288]	; (8005a88 <xTaskIncrementTick+0x14c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <xTaskIncrementTick+0x46>
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	603b      	str	r3, [r7, #0]
 8005980:	e7fe      	b.n	8005980 <xTaskIncrementTick+0x44>
 8005982:	4b41      	ldr	r3, [pc, #260]	; (8005a88 <xTaskIncrementTick+0x14c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	4b40      	ldr	r3, [pc, #256]	; (8005a8c <xTaskIncrementTick+0x150>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a3e      	ldr	r2, [pc, #248]	; (8005a88 <xTaskIncrementTick+0x14c>)
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	4a3e      	ldr	r2, [pc, #248]	; (8005a8c <xTaskIncrementTick+0x150>)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	4b3e      	ldr	r3, [pc, #248]	; (8005a90 <xTaskIncrementTick+0x154>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3301      	adds	r3, #1
 800599c:	4a3c      	ldr	r2, [pc, #240]	; (8005a90 <xTaskIncrementTick+0x154>)
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	f000 fa98 	bl	8005ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059a4:	4b3b      	ldr	r3, [pc, #236]	; (8005a94 <xTaskIncrementTick+0x158>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d348      	bcc.n	8005a40 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ae:	4b36      	ldr	r3, [pc, #216]	; (8005a88 <xTaskIncrementTick+0x14c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d104      	bne.n	80059c2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059b8:	4b36      	ldr	r3, [pc, #216]	; (8005a94 <xTaskIncrementTick+0x158>)
 80059ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059be:	601a      	str	r2, [r3, #0]
					break;
 80059c0:	e03e      	b.n	8005a40 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c2:	4b31      	ldr	r3, [pc, #196]	; (8005a88 <xTaskIncrementTick+0x14c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d203      	bcs.n	80059e2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059da:	4a2e      	ldr	r2, [pc, #184]	; (8005a94 <xTaskIncrementTick+0x158>)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059e0:	e02e      	b.n	8005a40 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe fc4e 	bl	8004288 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d004      	beq.n	80059fe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	3318      	adds	r3, #24
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fe fc45 	bl	8004288 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	2201      	movs	r2, #1
 8005a04:	409a      	lsls	r2, r3
 8005a06:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <xTaskIncrementTick+0x15c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <xTaskIncrementTick+0x15c>)
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4a1f      	ldr	r2, [pc, #124]	; (8005a9c <xTaskIncrementTick+0x160>)
 8005a1e:	441a      	add	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f7fe fbd1 	bl	80041ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a30:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <xTaskIncrementTick+0x164>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d3b9      	bcc.n	80059ae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a3e:	e7b6      	b.n	80059ae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a40:	4b17      	ldr	r3, [pc, #92]	; (8005aa0 <xTaskIncrementTick+0x164>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a46:	4915      	ldr	r1, [pc, #84]	; (8005a9c <xTaskIncrementTick+0x160>)
 8005a48:	4613      	mov	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d901      	bls.n	8005a5c <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a5c:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <xTaskIncrementTick+0x168>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005a64:	2301      	movs	r3, #1
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	e004      	b.n	8005a74 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a6a:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <xTaskIncrementTick+0x16c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	4a0d      	ldr	r2, [pc, #52]	; (8005aa8 <xTaskIncrementTick+0x16c>)
 8005a72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a74:	697b      	ldr	r3, [r7, #20]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000ff0 	.word	0x20000ff0
 8005a84:	20000fcc 	.word	0x20000fcc
 8005a88:	20000f80 	.word	0x20000f80
 8005a8c:	20000f84 	.word	0x20000f84
 8005a90:	20000fe0 	.word	0x20000fe0
 8005a94:	20000fe8 	.word	0x20000fe8
 8005a98:	20000fd0 	.word	0x20000fd0
 8005a9c:	20000ecc 	.word	0x20000ecc
 8005aa0:	20000ec8 	.word	0x20000ec8
 8005aa4:	20000fdc 	.word	0x20000fdc
 8005aa8:	20000fd8 	.word	0x20000fd8

08005aac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ab2:	4b26      	ldr	r3, [pc, #152]	; (8005b4c <vTaskSwitchContext+0xa0>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005aba:	4b25      	ldr	r3, [pc, #148]	; (8005b50 <vTaskSwitchContext+0xa4>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ac0:	e03e      	b.n	8005b40 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005ac2:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <vTaskSwitchContext+0xa4>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ac8:	4b22      	ldr	r3, [pc, #136]	; (8005b54 <vTaskSwitchContext+0xa8>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	fab3 f383 	clz	r3, r3
 8005ad4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ad6:	7afb      	ldrb	r3, [r7, #11]
 8005ad8:	f1c3 031f 	rsb	r3, r3, #31
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	491e      	ldr	r1, [pc, #120]	; (8005b58 <vTaskSwitchContext+0xac>)
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d109      	bne.n	8005b06 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	607b      	str	r3, [r7, #4]
 8005b04:	e7fe      	b.n	8005b04 <vTaskSwitchContext+0x58>
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4a11      	ldr	r2, [pc, #68]	; (8005b58 <vTaskSwitchContext+0xac>)
 8005b12:	4413      	add	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	605a      	str	r2, [r3, #4]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	3308      	adds	r3, #8
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d104      	bne.n	8005b36 <vTaskSwitchContext+0x8a>
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	605a      	str	r2, [r3, #4]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	4a07      	ldr	r2, [pc, #28]	; (8005b5c <vTaskSwitchContext+0xb0>)
 8005b3e:	6013      	str	r3, [r2, #0]
}
 8005b40:	bf00      	nop
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	20000ff0 	.word	0x20000ff0
 8005b50:	20000fdc 	.word	0x20000fdc
 8005b54:	20000fd0 	.word	0x20000fd0
 8005b58:	20000ecc 	.word	0x20000ecc
 8005b5c:	20000ec8 	.word	0x20000ec8

08005b60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d109      	bne.n	8005b84 <vTaskPlaceOnEventList+0x24>
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	e7fe      	b.n	8005b82 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b84:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <vTaskPlaceOnEventList+0x44>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3318      	adds	r3, #24
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fe fb42 	bl	8004216 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b92:	2101      	movs	r1, #1
 8005b94:	6838      	ldr	r0, [r7, #0]
 8005b96:	f000 fa5f 	bl	8006058 <prvAddCurrentTaskToDelayedList>
}
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000ec8 	.word	0x20000ec8

08005ba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d109      	bne.n	8005bd2 <xTaskRemoveFromEventList+0x2a>
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	e7fe      	b.n	8005bd0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	3318      	adds	r3, #24
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe fb56 	bl	8004288 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bdc:	4b1d      	ldr	r3, [pc, #116]	; (8005c54 <xTaskRemoveFromEventList+0xac>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d11c      	bne.n	8005c1e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fe fb4d 	bl	8004288 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	409a      	lsls	r2, r3
 8005bf6:	4b18      	ldr	r3, [pc, #96]	; (8005c58 <xTaskRemoveFromEventList+0xb0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	4a16      	ldr	r2, [pc, #88]	; (8005c58 <xTaskRemoveFromEventList+0xb0>)
 8005bfe:	6013      	str	r3, [r2, #0]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c04:	4613      	mov	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4a13      	ldr	r2, [pc, #76]	; (8005c5c <xTaskRemoveFromEventList+0xb4>)
 8005c0e:	441a      	add	r2, r3
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	3304      	adds	r3, #4
 8005c14:	4619      	mov	r1, r3
 8005c16:	4610      	mov	r0, r2
 8005c18:	f7fe fad9 	bl	80041ce <vListInsertEnd>
 8005c1c:	e005      	b.n	8005c2a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	3318      	adds	r3, #24
 8005c22:	4619      	mov	r1, r3
 8005c24:	480e      	ldr	r0, [pc, #56]	; (8005c60 <xTaskRemoveFromEventList+0xb8>)
 8005c26:	f7fe fad2 	bl	80041ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <xTaskRemoveFromEventList+0xbc>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d905      	bls.n	8005c44 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <xTaskRemoveFromEventList+0xc0>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	e001      	b.n	8005c48 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005c44:	2300      	movs	r3, #0
 8005c46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c48:	697b      	ldr	r3, [r7, #20]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20000ff0 	.word	0x20000ff0
 8005c58:	20000fd0 	.word	0x20000fd0
 8005c5c:	20000ecc 	.word	0x20000ecc
 8005c60:	20000f88 	.word	0x20000f88
 8005c64:	20000ec8 	.word	0x20000ec8
 8005c68:	20000fdc 	.word	0x20000fdc

08005c6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c74:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <vTaskInternalSetTimeOutState+0x24>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <vTaskInternalSetTimeOutState+0x28>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	605a      	str	r2, [r3, #4]
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	20000fe0 	.word	0x20000fe0
 8005c94:	20000fcc 	.word	0x20000fcc

08005c98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <xTaskCheckForTimeOut+0x24>
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	e7fe      	b.n	8005cba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <xTaskCheckForTimeOut+0x3e>
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e7fe      	b.n	8005cd4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005cd6:	f7fe fc29 	bl	800452c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cda:	4b1d      	ldr	r3, [pc, #116]	; (8005d50 <xTaskCheckForTimeOut+0xb8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cf2:	d102      	bne.n	8005cfa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	e023      	b.n	8005d42 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <xTaskCheckForTimeOut+0xbc>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d007      	beq.n	8005d16 <xTaskCheckForTimeOut+0x7e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d802      	bhi.n	8005d16 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	e015      	b.n	8005d42 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d90b      	bls.n	8005d38 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff ff9d 	bl	8005c6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	e004      	b.n	8005d42 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d42:	f7fe fc21 	bl	8004588 <vPortExitCritical>

	return xReturn;
 8005d46:	69fb      	ldr	r3, [r7, #28]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3720      	adds	r7, #32
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000fcc 	.word	0x20000fcc
 8005d54:	20000fe0 	.word	0x20000fe0

08005d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	; (8005d6c <vTaskMissedYield+0x14>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
}
 8005d62:	bf00      	nop
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	20000fdc 	.word	0x20000fdc

08005d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d78:	f000 f852 	bl	8005e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <prvIdleTask+0x28>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d9f9      	bls.n	8005d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <prvIdleTask+0x2c>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d94:	e7f0      	b.n	8005d78 <prvIdleTask+0x8>
 8005d96:	bf00      	nop
 8005d98:	20000ecc 	.word	0x20000ecc
 8005d9c:	e000ed04 	.word	0xe000ed04

08005da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005da6:	2300      	movs	r3, #0
 8005da8:	607b      	str	r3, [r7, #4]
 8005daa:	e00c      	b.n	8005dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <prvInitialiseTaskLists+0x60>)
 8005db8:	4413      	add	r3, r2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fe f9da 	bl	8004174 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	607b      	str	r3, [r7, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b06      	cmp	r3, #6
 8005dca:	d9ef      	bls.n	8005dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005dcc:	480d      	ldr	r0, [pc, #52]	; (8005e04 <prvInitialiseTaskLists+0x64>)
 8005dce:	f7fe f9d1 	bl	8004174 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dd2:	480d      	ldr	r0, [pc, #52]	; (8005e08 <prvInitialiseTaskLists+0x68>)
 8005dd4:	f7fe f9ce 	bl	8004174 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dd8:	480c      	ldr	r0, [pc, #48]	; (8005e0c <prvInitialiseTaskLists+0x6c>)
 8005dda:	f7fe f9cb 	bl	8004174 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dde:	480c      	ldr	r0, [pc, #48]	; (8005e10 <prvInitialiseTaskLists+0x70>)
 8005de0:	f7fe f9c8 	bl	8004174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005de4:	480b      	ldr	r0, [pc, #44]	; (8005e14 <prvInitialiseTaskLists+0x74>)
 8005de6:	f7fe f9c5 	bl	8004174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <prvInitialiseTaskLists+0x78>)
 8005dec:	4a05      	ldr	r2, [pc, #20]	; (8005e04 <prvInitialiseTaskLists+0x64>)
 8005dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005df0:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <prvInitialiseTaskLists+0x7c>)
 8005df2:	4a05      	ldr	r2, [pc, #20]	; (8005e08 <prvInitialiseTaskLists+0x68>)
 8005df4:	601a      	str	r2, [r3, #0]
}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000ecc 	.word	0x20000ecc
 8005e04:	20000f58 	.word	0x20000f58
 8005e08:	20000f6c 	.word	0x20000f6c
 8005e0c:	20000f88 	.word	0x20000f88
 8005e10:	20000f9c 	.word	0x20000f9c
 8005e14:	20000fb4 	.word	0x20000fb4
 8005e18:	20000f80 	.word	0x20000f80
 8005e1c:	20000f84 	.word	0x20000f84

08005e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e26:	e019      	b.n	8005e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e28:	f7fe fb80 	bl	800452c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2c:	4b0f      	ldr	r3, [pc, #60]	; (8005e6c <prvCheckTasksWaitingTermination+0x4c>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe fa25 	bl	8004288 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <prvCheckTasksWaitingTermination+0x50>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <prvCheckTasksWaitingTermination+0x50>)
 8005e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <prvCheckTasksWaitingTermination+0x54>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	4a09      	ldr	r2, [pc, #36]	; (8005e74 <prvCheckTasksWaitingTermination+0x54>)
 8005e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e52:	f7fe fb99 	bl	8004588 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f80e 	bl	8005e78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <prvCheckTasksWaitingTermination+0x54>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e1      	bne.n	8005e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20000f9c 	.word	0x20000f9c
 8005e70:	20000fc8 	.word	0x20000fc8
 8005e74:	20000fb0 	.word	0x20000fb0

08005e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d108      	bne.n	8005e9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fd2e 	bl	80048f0 <vPortFree>
				vPortFree( pxTCB );
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7fe fd2b 	bl	80048f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e9a:	e017      	b.n	8005ecc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d103      	bne.n	8005eae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fe fd22 	bl	80048f0 <vPortFree>
	}
 8005eac:	e00e      	b.n	8005ecc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d009      	beq.n	8005ecc <prvDeleteTCB+0x54>
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e7fe      	b.n	8005eca <prvDeleteTCB+0x52>
	}
 8005ecc:	bf00      	nop
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eda:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <prvResetNextTaskUnblockTime+0x38>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <prvResetNextTaskUnblockTime+0x3c>)
 8005ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005eec:	e008      	b.n	8005f00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eee:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <prvResetNextTaskUnblockTime+0x38>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <prvResetNextTaskUnblockTime+0x3c>)
 8005efe:	6013      	str	r3, [r2, #0]
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	20000f80 	.word	0x20000f80
 8005f10:	20000fe8 	.word	0x20000fe8

08005f14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <xTaskGetSchedulerState+0x34>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d102      	bne.n	8005f28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f22:	2301      	movs	r3, #1
 8005f24:	607b      	str	r3, [r7, #4]
 8005f26:	e008      	b.n	8005f3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f28:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <xTaskGetSchedulerState+0x38>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f30:	2302      	movs	r3, #2
 8005f32:	607b      	str	r3, [r7, #4]
 8005f34:	e001      	b.n	8005f3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f36:	2300      	movs	r3, #0
 8005f38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f3a:	687b      	ldr	r3, [r7, #4]
	}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	20000fd4 	.word	0x20000fd4
 8005f4c:	20000ff0 	.word	0x20000ff0

08005f50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d06c      	beq.n	8006040 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f66:	4b39      	ldr	r3, [pc, #228]	; (800604c <xTaskPriorityDisinherit+0xfc>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d009      	beq.n	8005f84 <xTaskPriorityDisinherit+0x34>
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	e7fe      	b.n	8005f82 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <xTaskPriorityDisinherit+0x50>
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	60bb      	str	r3, [r7, #8]
 8005f9e:	e7fe      	b.n	8005f9e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa4:	1e5a      	subs	r2, r3, #1
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d044      	beq.n	8006040 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d140      	bne.n	8006040 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe f960 	bl	8004288 <uxListRemove>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d115      	bne.n	8005ffa <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd2:	491f      	ldr	r1, [pc, #124]	; (8006050 <xTaskPriorityDisinherit+0x100>)
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <xTaskPriorityDisinherit+0xaa>
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	2201      	movs	r2, #1
 8005fea:	fa02 f303 	lsl.w	r3, r2, r3
 8005fee:	43da      	mvns	r2, r3
 8005ff0:	4b18      	ldr	r3, [pc, #96]	; (8006054 <xTaskPriorityDisinherit+0x104>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	4a17      	ldr	r2, [pc, #92]	; (8006054 <xTaskPriorityDisinherit+0x104>)
 8005ff8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	f1c3 0207 	rsb	r2, r3, #7
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	2201      	movs	r2, #1
 8006014:	409a      	lsls	r2, r3
 8006016:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <xTaskPriorityDisinherit+0x104>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4313      	orrs	r3, r2
 800601c:	4a0d      	ldr	r2, [pc, #52]	; (8006054 <xTaskPriorityDisinherit+0x104>)
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4a08      	ldr	r2, [pc, #32]	; (8006050 <xTaskPriorityDisinherit+0x100>)
 800602e:	441a      	add	r2, r3
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	3304      	adds	r3, #4
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f7fe f8c9 	bl	80041ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800603c:	2301      	movs	r3, #1
 800603e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006040:	697b      	ldr	r3, [r7, #20]
	}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000ec8 	.word	0x20000ec8
 8006050:	20000ecc 	.word	0x20000ecc
 8006054:	20000fd0 	.word	0x20000fd0

08006058 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006062:	4b29      	ldr	r3, [pc, #164]	; (8006108 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006068:	4b28      	ldr	r3, [pc, #160]	; (800610c <prvAddCurrentTaskToDelayedList+0xb4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3304      	adds	r3, #4
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe f90a 	bl	8004288 <uxListRemove>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10b      	bne.n	8006092 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800607a:	4b24      	ldr	r3, [pc, #144]	; (800610c <prvAddCurrentTaskToDelayedList+0xb4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	2201      	movs	r2, #1
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	43da      	mvns	r2, r3
 8006088:	4b21      	ldr	r3, [pc, #132]	; (8006110 <prvAddCurrentTaskToDelayedList+0xb8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4013      	ands	r3, r2
 800608e:	4a20      	ldr	r2, [pc, #128]	; (8006110 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006090:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006098:	d10a      	bne.n	80060b0 <prvAddCurrentTaskToDelayedList+0x58>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d007      	beq.n	80060b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <prvAddCurrentTaskToDelayedList+0xb4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4619      	mov	r1, r3
 80060a8:	481a      	ldr	r0, [pc, #104]	; (8006114 <prvAddCurrentTaskToDelayedList+0xbc>)
 80060aa:	f7fe f890 	bl	80041ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060ae:	e026      	b.n	80060fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4413      	add	r3, r2
 80060b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060b8:	4b14      	ldr	r3, [pc, #80]	; (800610c <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d209      	bcs.n	80060dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060c8:	4b13      	ldr	r3, [pc, #76]	; (8006118 <prvAddCurrentTaskToDelayedList+0xc0>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	4b0f      	ldr	r3, [pc, #60]	; (800610c <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3304      	adds	r3, #4
 80060d2:	4619      	mov	r1, r3
 80060d4:	4610      	mov	r0, r2
 80060d6:	f7fe f89e 	bl	8004216 <vListInsert>
}
 80060da:	e010      	b.n	80060fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060dc:	4b0f      	ldr	r3, [pc, #60]	; (800611c <prvAddCurrentTaskToDelayedList+0xc4>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4b0a      	ldr	r3, [pc, #40]	; (800610c <prvAddCurrentTaskToDelayedList+0xb4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4619      	mov	r1, r3
 80060e8:	4610      	mov	r0, r2
 80060ea:	f7fe f894 	bl	8004216 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060ee:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d202      	bcs.n	80060fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80060f8:	4a09      	ldr	r2, [pc, #36]	; (8006120 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6013      	str	r3, [r2, #0]
}
 80060fe:	bf00      	nop
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000fcc 	.word	0x20000fcc
 800610c:	20000ec8 	.word	0x20000ec8
 8006110:	20000fd0 	.word	0x20000fd0
 8006114:	20000fb4 	.word	0x20000fb4
 8006118:	20000f84 	.word	0x20000f84
 800611c:	20000f80 	.word	0x20000f80
 8006120:	20000fe8 	.word	0x20000fe8

08006124 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800615c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006128:	f7fa fdb4 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800612c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800612e:	e003      	b.n	8006138 <LoopCopyDataInit>

08006130 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006132:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006134:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006136:	3104      	adds	r1, #4

08006138 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006138:	480a      	ldr	r0, [pc, #40]	; (8006164 <LoopForever+0xa>)
	ldr	r3, =_edata
 800613a:	4b0b      	ldr	r3, [pc, #44]	; (8006168 <LoopForever+0xe>)
	adds	r2, r0, r1
 800613c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800613e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006140:	d3f6      	bcc.n	8006130 <CopyDataInit>
	ldr	r2, =_sbss
 8006142:	4a0a      	ldr	r2, [pc, #40]	; (800616c <LoopForever+0x12>)
	b	LoopFillZerobss
 8006144:	e002      	b.n	800614c <LoopFillZerobss>

08006146 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006146:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006148:	f842 3b04 	str.w	r3, [r2], #4

0800614c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800614c:	4b08      	ldr	r3, [pc, #32]	; (8006170 <LoopForever+0x16>)
	cmp	r2, r3
 800614e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006150:	d3f9      	bcc.n	8006146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006152:	f000 f817 	bl	8006184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006156:	f7fa fa35 	bl	80005c4 <main>

0800615a <LoopForever>:

LoopForever:
    b LoopForever
 800615a:	e7fe      	b.n	800615a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800615c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006160:	08006d08 	.word	0x08006d08
	ldr	r0, =_sdata
 8006164:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006168:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 800616c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8006170:	200010e8 	.word	0x200010e8

08006174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006174:	e7fe      	b.n	8006174 <ADC1_2_IRQHandler>
	...

08006178 <__errno>:
 8006178:	4b01      	ldr	r3, [pc, #4]	; (8006180 <__errno+0x8>)
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	20000010 	.word	0x20000010

08006184 <__libc_init_array>:
 8006184:	b570      	push	{r4, r5, r6, lr}
 8006186:	4e0d      	ldr	r6, [pc, #52]	; (80061bc <__libc_init_array+0x38>)
 8006188:	4c0d      	ldr	r4, [pc, #52]	; (80061c0 <__libc_init_array+0x3c>)
 800618a:	1ba4      	subs	r4, r4, r6
 800618c:	10a4      	asrs	r4, r4, #2
 800618e:	2500      	movs	r5, #0
 8006190:	42a5      	cmp	r5, r4
 8006192:	d109      	bne.n	80061a8 <__libc_init_array+0x24>
 8006194:	4e0b      	ldr	r6, [pc, #44]	; (80061c4 <__libc_init_array+0x40>)
 8006196:	4c0c      	ldr	r4, [pc, #48]	; (80061c8 <__libc_init_array+0x44>)
 8006198:	f000 fc3e 	bl	8006a18 <_init>
 800619c:	1ba4      	subs	r4, r4, r6
 800619e:	10a4      	asrs	r4, r4, #2
 80061a0:	2500      	movs	r5, #0
 80061a2:	42a5      	cmp	r5, r4
 80061a4:	d105      	bne.n	80061b2 <__libc_init_array+0x2e>
 80061a6:	bd70      	pop	{r4, r5, r6, pc}
 80061a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061ac:	4798      	blx	r3
 80061ae:	3501      	adds	r5, #1
 80061b0:	e7ee      	b.n	8006190 <__libc_init_array+0xc>
 80061b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061b6:	4798      	blx	r3
 80061b8:	3501      	adds	r5, #1
 80061ba:	e7f2      	b.n	80061a2 <__libc_init_array+0x1e>
 80061bc:	08006d00 	.word	0x08006d00
 80061c0:	08006d00 	.word	0x08006d00
 80061c4:	08006d00 	.word	0x08006d00
 80061c8:	08006d04 	.word	0x08006d04

080061cc <memcpy>:
 80061cc:	b510      	push	{r4, lr}
 80061ce:	1e43      	subs	r3, r0, #1
 80061d0:	440a      	add	r2, r1
 80061d2:	4291      	cmp	r1, r2
 80061d4:	d100      	bne.n	80061d8 <memcpy+0xc>
 80061d6:	bd10      	pop	{r4, pc}
 80061d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061e0:	e7f7      	b.n	80061d2 <memcpy+0x6>

080061e2 <memset>:
 80061e2:	4402      	add	r2, r0
 80061e4:	4603      	mov	r3, r0
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d100      	bne.n	80061ec <memset+0xa>
 80061ea:	4770      	bx	lr
 80061ec:	f803 1b01 	strb.w	r1, [r3], #1
 80061f0:	e7f9      	b.n	80061e6 <memset+0x4>
	...

080061f4 <siprintf>:
 80061f4:	b40e      	push	{r1, r2, r3}
 80061f6:	b500      	push	{lr}
 80061f8:	b09c      	sub	sp, #112	; 0x70
 80061fa:	f44f 7102 	mov.w	r1, #520	; 0x208
 80061fe:	ab1d      	add	r3, sp, #116	; 0x74
 8006200:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006204:	9002      	str	r0, [sp, #8]
 8006206:	9006      	str	r0, [sp, #24]
 8006208:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800620c:	480a      	ldr	r0, [pc, #40]	; (8006238 <siprintf+0x44>)
 800620e:	9104      	str	r1, [sp, #16]
 8006210:	9107      	str	r1, [sp, #28]
 8006212:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006216:	f853 2b04 	ldr.w	r2, [r3], #4
 800621a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800621e:	6800      	ldr	r0, [r0, #0]
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	a902      	add	r1, sp, #8
 8006224:	f000 f866 	bl	80062f4 <_svfiprintf_r>
 8006228:	9b02      	ldr	r3, [sp, #8]
 800622a:	2200      	movs	r2, #0
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	b01c      	add	sp, #112	; 0x70
 8006230:	f85d eb04 	ldr.w	lr, [sp], #4
 8006234:	b003      	add	sp, #12
 8006236:	4770      	bx	lr
 8006238:	20000010 	.word	0x20000010

0800623c <__ssputs_r>:
 800623c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006240:	688e      	ldr	r6, [r1, #8]
 8006242:	429e      	cmp	r6, r3
 8006244:	4682      	mov	sl, r0
 8006246:	460c      	mov	r4, r1
 8006248:	4691      	mov	r9, r2
 800624a:	4698      	mov	r8, r3
 800624c:	d835      	bhi.n	80062ba <__ssputs_r+0x7e>
 800624e:	898a      	ldrh	r2, [r1, #12]
 8006250:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006254:	d031      	beq.n	80062ba <__ssputs_r+0x7e>
 8006256:	6825      	ldr	r5, [r4, #0]
 8006258:	6909      	ldr	r1, [r1, #16]
 800625a:	1a6f      	subs	r7, r5, r1
 800625c:	6965      	ldr	r5, [r4, #20]
 800625e:	2302      	movs	r3, #2
 8006260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006264:	fb95 f5f3 	sdiv	r5, r5, r3
 8006268:	f108 0301 	add.w	r3, r8, #1
 800626c:	443b      	add	r3, r7
 800626e:	429d      	cmp	r5, r3
 8006270:	bf38      	it	cc
 8006272:	461d      	movcc	r5, r3
 8006274:	0553      	lsls	r3, r2, #21
 8006276:	d531      	bpl.n	80062dc <__ssputs_r+0xa0>
 8006278:	4629      	mov	r1, r5
 800627a:	f000 fb2d 	bl	80068d8 <_malloc_r>
 800627e:	4606      	mov	r6, r0
 8006280:	b950      	cbnz	r0, 8006298 <__ssputs_r+0x5c>
 8006282:	230c      	movs	r3, #12
 8006284:	f8ca 3000 	str.w	r3, [sl]
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800628e:	81a3      	strh	r3, [r4, #12]
 8006290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006298:	463a      	mov	r2, r7
 800629a:	6921      	ldr	r1, [r4, #16]
 800629c:	f7ff ff96 	bl	80061cc <memcpy>
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	6126      	str	r6, [r4, #16]
 80062ae:	6165      	str	r5, [r4, #20]
 80062b0:	443e      	add	r6, r7
 80062b2:	1bed      	subs	r5, r5, r7
 80062b4:	6026      	str	r6, [r4, #0]
 80062b6:	60a5      	str	r5, [r4, #8]
 80062b8:	4646      	mov	r6, r8
 80062ba:	4546      	cmp	r6, r8
 80062bc:	bf28      	it	cs
 80062be:	4646      	movcs	r6, r8
 80062c0:	4632      	mov	r2, r6
 80062c2:	4649      	mov	r1, r9
 80062c4:	6820      	ldr	r0, [r4, #0]
 80062c6:	f000 fa9f 	bl	8006808 <memmove>
 80062ca:	68a3      	ldr	r3, [r4, #8]
 80062cc:	1b9b      	subs	r3, r3, r6
 80062ce:	60a3      	str	r3, [r4, #8]
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	441e      	add	r6, r3
 80062d4:	6026      	str	r6, [r4, #0]
 80062d6:	2000      	movs	r0, #0
 80062d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062dc:	462a      	mov	r2, r5
 80062de:	f000 fb59 	bl	8006994 <_realloc_r>
 80062e2:	4606      	mov	r6, r0
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d1e1      	bne.n	80062ac <__ssputs_r+0x70>
 80062e8:	6921      	ldr	r1, [r4, #16]
 80062ea:	4650      	mov	r0, sl
 80062ec:	f000 faa6 	bl	800683c <_free_r>
 80062f0:	e7c7      	b.n	8006282 <__ssputs_r+0x46>
	...

080062f4 <_svfiprintf_r>:
 80062f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f8:	b09d      	sub	sp, #116	; 0x74
 80062fa:	4680      	mov	r8, r0
 80062fc:	9303      	str	r3, [sp, #12]
 80062fe:	898b      	ldrh	r3, [r1, #12]
 8006300:	061c      	lsls	r4, r3, #24
 8006302:	460d      	mov	r5, r1
 8006304:	4616      	mov	r6, r2
 8006306:	d50f      	bpl.n	8006328 <_svfiprintf_r+0x34>
 8006308:	690b      	ldr	r3, [r1, #16]
 800630a:	b96b      	cbnz	r3, 8006328 <_svfiprintf_r+0x34>
 800630c:	2140      	movs	r1, #64	; 0x40
 800630e:	f000 fae3 	bl	80068d8 <_malloc_r>
 8006312:	6028      	str	r0, [r5, #0]
 8006314:	6128      	str	r0, [r5, #16]
 8006316:	b928      	cbnz	r0, 8006324 <_svfiprintf_r+0x30>
 8006318:	230c      	movs	r3, #12
 800631a:	f8c8 3000 	str.w	r3, [r8]
 800631e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006322:	e0c5      	b.n	80064b0 <_svfiprintf_r+0x1bc>
 8006324:	2340      	movs	r3, #64	; 0x40
 8006326:	616b      	str	r3, [r5, #20]
 8006328:	2300      	movs	r3, #0
 800632a:	9309      	str	r3, [sp, #36]	; 0x24
 800632c:	2320      	movs	r3, #32
 800632e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006332:	2330      	movs	r3, #48	; 0x30
 8006334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006338:	f04f 0b01 	mov.w	fp, #1
 800633c:	4637      	mov	r7, r6
 800633e:	463c      	mov	r4, r7
 8006340:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d13c      	bne.n	80063c2 <_svfiprintf_r+0xce>
 8006348:	ebb7 0a06 	subs.w	sl, r7, r6
 800634c:	d00b      	beq.n	8006366 <_svfiprintf_r+0x72>
 800634e:	4653      	mov	r3, sl
 8006350:	4632      	mov	r2, r6
 8006352:	4629      	mov	r1, r5
 8006354:	4640      	mov	r0, r8
 8006356:	f7ff ff71 	bl	800623c <__ssputs_r>
 800635a:	3001      	adds	r0, #1
 800635c:	f000 80a3 	beq.w	80064a6 <_svfiprintf_r+0x1b2>
 8006360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006362:	4453      	add	r3, sl
 8006364:	9309      	str	r3, [sp, #36]	; 0x24
 8006366:	783b      	ldrb	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 809c 	beq.w	80064a6 <_svfiprintf_r+0x1b2>
 800636e:	2300      	movs	r3, #0
 8006370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006374:	9304      	str	r3, [sp, #16]
 8006376:	9307      	str	r3, [sp, #28]
 8006378:	9205      	str	r2, [sp, #20]
 800637a:	9306      	str	r3, [sp, #24]
 800637c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006380:	931a      	str	r3, [sp, #104]	; 0x68
 8006382:	2205      	movs	r2, #5
 8006384:	7821      	ldrb	r1, [r4, #0]
 8006386:	4850      	ldr	r0, [pc, #320]	; (80064c8 <_svfiprintf_r+0x1d4>)
 8006388:	f7f9 ff2a 	bl	80001e0 <memchr>
 800638c:	1c67      	adds	r7, r4, #1
 800638e:	9b04      	ldr	r3, [sp, #16]
 8006390:	b9d8      	cbnz	r0, 80063ca <_svfiprintf_r+0xd6>
 8006392:	06d9      	lsls	r1, r3, #27
 8006394:	bf44      	itt	mi
 8006396:	2220      	movmi	r2, #32
 8006398:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800639c:	071a      	lsls	r2, r3, #28
 800639e:	bf44      	itt	mi
 80063a0:	222b      	movmi	r2, #43	; 0x2b
 80063a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063a6:	7822      	ldrb	r2, [r4, #0]
 80063a8:	2a2a      	cmp	r2, #42	; 0x2a
 80063aa:	d016      	beq.n	80063da <_svfiprintf_r+0xe6>
 80063ac:	9a07      	ldr	r2, [sp, #28]
 80063ae:	2100      	movs	r1, #0
 80063b0:	200a      	movs	r0, #10
 80063b2:	4627      	mov	r7, r4
 80063b4:	3401      	adds	r4, #1
 80063b6:	783b      	ldrb	r3, [r7, #0]
 80063b8:	3b30      	subs	r3, #48	; 0x30
 80063ba:	2b09      	cmp	r3, #9
 80063bc:	d951      	bls.n	8006462 <_svfiprintf_r+0x16e>
 80063be:	b1c9      	cbz	r1, 80063f4 <_svfiprintf_r+0x100>
 80063c0:	e011      	b.n	80063e6 <_svfiprintf_r+0xf2>
 80063c2:	2b25      	cmp	r3, #37	; 0x25
 80063c4:	d0c0      	beq.n	8006348 <_svfiprintf_r+0x54>
 80063c6:	4627      	mov	r7, r4
 80063c8:	e7b9      	b.n	800633e <_svfiprintf_r+0x4a>
 80063ca:	4a3f      	ldr	r2, [pc, #252]	; (80064c8 <_svfiprintf_r+0x1d4>)
 80063cc:	1a80      	subs	r0, r0, r2
 80063ce:	fa0b f000 	lsl.w	r0, fp, r0
 80063d2:	4318      	orrs	r0, r3
 80063d4:	9004      	str	r0, [sp, #16]
 80063d6:	463c      	mov	r4, r7
 80063d8:	e7d3      	b.n	8006382 <_svfiprintf_r+0x8e>
 80063da:	9a03      	ldr	r2, [sp, #12]
 80063dc:	1d11      	adds	r1, r2, #4
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	9103      	str	r1, [sp, #12]
 80063e2:	2a00      	cmp	r2, #0
 80063e4:	db01      	blt.n	80063ea <_svfiprintf_r+0xf6>
 80063e6:	9207      	str	r2, [sp, #28]
 80063e8:	e004      	b.n	80063f4 <_svfiprintf_r+0x100>
 80063ea:	4252      	negs	r2, r2
 80063ec:	f043 0302 	orr.w	r3, r3, #2
 80063f0:	9207      	str	r2, [sp, #28]
 80063f2:	9304      	str	r3, [sp, #16]
 80063f4:	783b      	ldrb	r3, [r7, #0]
 80063f6:	2b2e      	cmp	r3, #46	; 0x2e
 80063f8:	d10e      	bne.n	8006418 <_svfiprintf_r+0x124>
 80063fa:	787b      	ldrb	r3, [r7, #1]
 80063fc:	2b2a      	cmp	r3, #42	; 0x2a
 80063fe:	f107 0101 	add.w	r1, r7, #1
 8006402:	d132      	bne.n	800646a <_svfiprintf_r+0x176>
 8006404:	9b03      	ldr	r3, [sp, #12]
 8006406:	1d1a      	adds	r2, r3, #4
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	9203      	str	r2, [sp, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	bfb8      	it	lt
 8006410:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006414:	3702      	adds	r7, #2
 8006416:	9305      	str	r3, [sp, #20]
 8006418:	4c2c      	ldr	r4, [pc, #176]	; (80064cc <_svfiprintf_r+0x1d8>)
 800641a:	7839      	ldrb	r1, [r7, #0]
 800641c:	2203      	movs	r2, #3
 800641e:	4620      	mov	r0, r4
 8006420:	f7f9 fede 	bl	80001e0 <memchr>
 8006424:	b138      	cbz	r0, 8006436 <_svfiprintf_r+0x142>
 8006426:	2340      	movs	r3, #64	; 0x40
 8006428:	1b00      	subs	r0, r0, r4
 800642a:	fa03 f000 	lsl.w	r0, r3, r0
 800642e:	9b04      	ldr	r3, [sp, #16]
 8006430:	4303      	orrs	r3, r0
 8006432:	9304      	str	r3, [sp, #16]
 8006434:	3701      	adds	r7, #1
 8006436:	7839      	ldrb	r1, [r7, #0]
 8006438:	4825      	ldr	r0, [pc, #148]	; (80064d0 <_svfiprintf_r+0x1dc>)
 800643a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800643e:	2206      	movs	r2, #6
 8006440:	1c7e      	adds	r6, r7, #1
 8006442:	f7f9 fecd 	bl	80001e0 <memchr>
 8006446:	2800      	cmp	r0, #0
 8006448:	d035      	beq.n	80064b6 <_svfiprintf_r+0x1c2>
 800644a:	4b22      	ldr	r3, [pc, #136]	; (80064d4 <_svfiprintf_r+0x1e0>)
 800644c:	b9fb      	cbnz	r3, 800648e <_svfiprintf_r+0x19a>
 800644e:	9b03      	ldr	r3, [sp, #12]
 8006450:	3307      	adds	r3, #7
 8006452:	f023 0307 	bic.w	r3, r3, #7
 8006456:	3308      	adds	r3, #8
 8006458:	9303      	str	r3, [sp, #12]
 800645a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645c:	444b      	add	r3, r9
 800645e:	9309      	str	r3, [sp, #36]	; 0x24
 8006460:	e76c      	b.n	800633c <_svfiprintf_r+0x48>
 8006462:	fb00 3202 	mla	r2, r0, r2, r3
 8006466:	2101      	movs	r1, #1
 8006468:	e7a3      	b.n	80063b2 <_svfiprintf_r+0xbe>
 800646a:	2300      	movs	r3, #0
 800646c:	9305      	str	r3, [sp, #20]
 800646e:	4618      	mov	r0, r3
 8006470:	240a      	movs	r4, #10
 8006472:	460f      	mov	r7, r1
 8006474:	3101      	adds	r1, #1
 8006476:	783a      	ldrb	r2, [r7, #0]
 8006478:	3a30      	subs	r2, #48	; 0x30
 800647a:	2a09      	cmp	r2, #9
 800647c:	d903      	bls.n	8006486 <_svfiprintf_r+0x192>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0ca      	beq.n	8006418 <_svfiprintf_r+0x124>
 8006482:	9005      	str	r0, [sp, #20]
 8006484:	e7c8      	b.n	8006418 <_svfiprintf_r+0x124>
 8006486:	fb04 2000 	mla	r0, r4, r0, r2
 800648a:	2301      	movs	r3, #1
 800648c:	e7f1      	b.n	8006472 <_svfiprintf_r+0x17e>
 800648e:	ab03      	add	r3, sp, #12
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	462a      	mov	r2, r5
 8006494:	4b10      	ldr	r3, [pc, #64]	; (80064d8 <_svfiprintf_r+0x1e4>)
 8006496:	a904      	add	r1, sp, #16
 8006498:	4640      	mov	r0, r8
 800649a:	f3af 8000 	nop.w
 800649e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80064a2:	4681      	mov	r9, r0
 80064a4:	d1d9      	bne.n	800645a <_svfiprintf_r+0x166>
 80064a6:	89ab      	ldrh	r3, [r5, #12]
 80064a8:	065b      	lsls	r3, r3, #25
 80064aa:	f53f af38 	bmi.w	800631e <_svfiprintf_r+0x2a>
 80064ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064b0:	b01d      	add	sp, #116	; 0x74
 80064b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b6:	ab03      	add	r3, sp, #12
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	462a      	mov	r2, r5
 80064bc:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <_svfiprintf_r+0x1e4>)
 80064be:	a904      	add	r1, sp, #16
 80064c0:	4640      	mov	r0, r8
 80064c2:	f000 f881 	bl	80065c8 <_printf_i>
 80064c6:	e7ea      	b.n	800649e <_svfiprintf_r+0x1aa>
 80064c8:	08006cc4 	.word	0x08006cc4
 80064cc:	08006cca 	.word	0x08006cca
 80064d0:	08006cce 	.word	0x08006cce
 80064d4:	00000000 	.word	0x00000000
 80064d8:	0800623d 	.word	0x0800623d

080064dc <_printf_common>:
 80064dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e0:	4691      	mov	r9, r2
 80064e2:	461f      	mov	r7, r3
 80064e4:	688a      	ldr	r2, [r1, #8]
 80064e6:	690b      	ldr	r3, [r1, #16]
 80064e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064ec:	4293      	cmp	r3, r2
 80064ee:	bfb8      	it	lt
 80064f0:	4613      	movlt	r3, r2
 80064f2:	f8c9 3000 	str.w	r3, [r9]
 80064f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064fa:	4606      	mov	r6, r0
 80064fc:	460c      	mov	r4, r1
 80064fe:	b112      	cbz	r2, 8006506 <_printf_common+0x2a>
 8006500:	3301      	adds	r3, #1
 8006502:	f8c9 3000 	str.w	r3, [r9]
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	0699      	lsls	r1, r3, #26
 800650a:	bf42      	ittt	mi
 800650c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006510:	3302      	addmi	r3, #2
 8006512:	f8c9 3000 	strmi.w	r3, [r9]
 8006516:	6825      	ldr	r5, [r4, #0]
 8006518:	f015 0506 	ands.w	r5, r5, #6
 800651c:	d107      	bne.n	800652e <_printf_common+0x52>
 800651e:	f104 0a19 	add.w	sl, r4, #25
 8006522:	68e3      	ldr	r3, [r4, #12]
 8006524:	f8d9 2000 	ldr.w	r2, [r9]
 8006528:	1a9b      	subs	r3, r3, r2
 800652a:	429d      	cmp	r5, r3
 800652c:	db29      	blt.n	8006582 <_printf_common+0xa6>
 800652e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	3300      	adds	r3, #0
 8006536:	bf18      	it	ne
 8006538:	2301      	movne	r3, #1
 800653a:	0692      	lsls	r2, r2, #26
 800653c:	d42e      	bmi.n	800659c <_printf_common+0xc0>
 800653e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006542:	4639      	mov	r1, r7
 8006544:	4630      	mov	r0, r6
 8006546:	47c0      	blx	r8
 8006548:	3001      	adds	r0, #1
 800654a:	d021      	beq.n	8006590 <_printf_common+0xb4>
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	68e5      	ldr	r5, [r4, #12]
 8006550:	f8d9 2000 	ldr.w	r2, [r9]
 8006554:	f003 0306 	and.w	r3, r3, #6
 8006558:	2b04      	cmp	r3, #4
 800655a:	bf08      	it	eq
 800655c:	1aad      	subeq	r5, r5, r2
 800655e:	68a3      	ldr	r3, [r4, #8]
 8006560:	6922      	ldr	r2, [r4, #16]
 8006562:	bf0c      	ite	eq
 8006564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006568:	2500      	movne	r5, #0
 800656a:	4293      	cmp	r3, r2
 800656c:	bfc4      	itt	gt
 800656e:	1a9b      	subgt	r3, r3, r2
 8006570:	18ed      	addgt	r5, r5, r3
 8006572:	f04f 0900 	mov.w	r9, #0
 8006576:	341a      	adds	r4, #26
 8006578:	454d      	cmp	r5, r9
 800657a:	d11b      	bne.n	80065b4 <_printf_common+0xd8>
 800657c:	2000      	movs	r0, #0
 800657e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006582:	2301      	movs	r3, #1
 8006584:	4652      	mov	r2, sl
 8006586:	4639      	mov	r1, r7
 8006588:	4630      	mov	r0, r6
 800658a:	47c0      	blx	r8
 800658c:	3001      	adds	r0, #1
 800658e:	d103      	bne.n	8006598 <_printf_common+0xbc>
 8006590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006598:	3501      	adds	r5, #1
 800659a:	e7c2      	b.n	8006522 <_printf_common+0x46>
 800659c:	18e1      	adds	r1, r4, r3
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	2030      	movs	r0, #48	; 0x30
 80065a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065a6:	4422      	add	r2, r4
 80065a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065b0:	3302      	adds	r3, #2
 80065b2:	e7c4      	b.n	800653e <_printf_common+0x62>
 80065b4:	2301      	movs	r3, #1
 80065b6:	4622      	mov	r2, r4
 80065b8:	4639      	mov	r1, r7
 80065ba:	4630      	mov	r0, r6
 80065bc:	47c0      	blx	r8
 80065be:	3001      	adds	r0, #1
 80065c0:	d0e6      	beq.n	8006590 <_printf_common+0xb4>
 80065c2:	f109 0901 	add.w	r9, r9, #1
 80065c6:	e7d7      	b.n	8006578 <_printf_common+0x9c>

080065c8 <_printf_i>:
 80065c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065cc:	4617      	mov	r7, r2
 80065ce:	7e0a      	ldrb	r2, [r1, #24]
 80065d0:	b085      	sub	sp, #20
 80065d2:	2a6e      	cmp	r2, #110	; 0x6e
 80065d4:	4698      	mov	r8, r3
 80065d6:	4606      	mov	r6, r0
 80065d8:	460c      	mov	r4, r1
 80065da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065dc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80065e0:	f000 80bc 	beq.w	800675c <_printf_i+0x194>
 80065e4:	d81a      	bhi.n	800661c <_printf_i+0x54>
 80065e6:	2a63      	cmp	r2, #99	; 0x63
 80065e8:	d02e      	beq.n	8006648 <_printf_i+0x80>
 80065ea:	d80a      	bhi.n	8006602 <_printf_i+0x3a>
 80065ec:	2a00      	cmp	r2, #0
 80065ee:	f000 80c8 	beq.w	8006782 <_printf_i+0x1ba>
 80065f2:	2a58      	cmp	r2, #88	; 0x58
 80065f4:	f000 808a 	beq.w	800670c <_printf_i+0x144>
 80065f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065fc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006600:	e02a      	b.n	8006658 <_printf_i+0x90>
 8006602:	2a64      	cmp	r2, #100	; 0x64
 8006604:	d001      	beq.n	800660a <_printf_i+0x42>
 8006606:	2a69      	cmp	r2, #105	; 0x69
 8006608:	d1f6      	bne.n	80065f8 <_printf_i+0x30>
 800660a:	6821      	ldr	r1, [r4, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006612:	d023      	beq.n	800665c <_printf_i+0x94>
 8006614:	1d11      	adds	r1, r2, #4
 8006616:	6019      	str	r1, [r3, #0]
 8006618:	6813      	ldr	r3, [r2, #0]
 800661a:	e027      	b.n	800666c <_printf_i+0xa4>
 800661c:	2a73      	cmp	r2, #115	; 0x73
 800661e:	f000 80b4 	beq.w	800678a <_printf_i+0x1c2>
 8006622:	d808      	bhi.n	8006636 <_printf_i+0x6e>
 8006624:	2a6f      	cmp	r2, #111	; 0x6f
 8006626:	d02a      	beq.n	800667e <_printf_i+0xb6>
 8006628:	2a70      	cmp	r2, #112	; 0x70
 800662a:	d1e5      	bne.n	80065f8 <_printf_i+0x30>
 800662c:	680a      	ldr	r2, [r1, #0]
 800662e:	f042 0220 	orr.w	r2, r2, #32
 8006632:	600a      	str	r2, [r1, #0]
 8006634:	e003      	b.n	800663e <_printf_i+0x76>
 8006636:	2a75      	cmp	r2, #117	; 0x75
 8006638:	d021      	beq.n	800667e <_printf_i+0xb6>
 800663a:	2a78      	cmp	r2, #120	; 0x78
 800663c:	d1dc      	bne.n	80065f8 <_printf_i+0x30>
 800663e:	2278      	movs	r2, #120	; 0x78
 8006640:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006644:	496e      	ldr	r1, [pc, #440]	; (8006800 <_printf_i+0x238>)
 8006646:	e064      	b.n	8006712 <_printf_i+0x14a>
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800664e:	1d11      	adds	r1, r2, #4
 8006650:	6019      	str	r1, [r3, #0]
 8006652:	6813      	ldr	r3, [r2, #0]
 8006654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006658:	2301      	movs	r3, #1
 800665a:	e0a3      	b.n	80067a4 <_printf_i+0x1dc>
 800665c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006660:	f102 0104 	add.w	r1, r2, #4
 8006664:	6019      	str	r1, [r3, #0]
 8006666:	d0d7      	beq.n	8006618 <_printf_i+0x50>
 8006668:	f9b2 3000 	ldrsh.w	r3, [r2]
 800666c:	2b00      	cmp	r3, #0
 800666e:	da03      	bge.n	8006678 <_printf_i+0xb0>
 8006670:	222d      	movs	r2, #45	; 0x2d
 8006672:	425b      	negs	r3, r3
 8006674:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006678:	4962      	ldr	r1, [pc, #392]	; (8006804 <_printf_i+0x23c>)
 800667a:	220a      	movs	r2, #10
 800667c:	e017      	b.n	80066ae <_printf_i+0xe6>
 800667e:	6820      	ldr	r0, [r4, #0]
 8006680:	6819      	ldr	r1, [r3, #0]
 8006682:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006686:	d003      	beq.n	8006690 <_printf_i+0xc8>
 8006688:	1d08      	adds	r0, r1, #4
 800668a:	6018      	str	r0, [r3, #0]
 800668c:	680b      	ldr	r3, [r1, #0]
 800668e:	e006      	b.n	800669e <_printf_i+0xd6>
 8006690:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006694:	f101 0004 	add.w	r0, r1, #4
 8006698:	6018      	str	r0, [r3, #0]
 800669a:	d0f7      	beq.n	800668c <_printf_i+0xc4>
 800669c:	880b      	ldrh	r3, [r1, #0]
 800669e:	4959      	ldr	r1, [pc, #356]	; (8006804 <_printf_i+0x23c>)
 80066a0:	2a6f      	cmp	r2, #111	; 0x6f
 80066a2:	bf14      	ite	ne
 80066a4:	220a      	movne	r2, #10
 80066a6:	2208      	moveq	r2, #8
 80066a8:	2000      	movs	r0, #0
 80066aa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80066ae:	6865      	ldr	r5, [r4, #4]
 80066b0:	60a5      	str	r5, [r4, #8]
 80066b2:	2d00      	cmp	r5, #0
 80066b4:	f2c0 809c 	blt.w	80067f0 <_printf_i+0x228>
 80066b8:	6820      	ldr	r0, [r4, #0]
 80066ba:	f020 0004 	bic.w	r0, r0, #4
 80066be:	6020      	str	r0, [r4, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d13f      	bne.n	8006744 <_printf_i+0x17c>
 80066c4:	2d00      	cmp	r5, #0
 80066c6:	f040 8095 	bne.w	80067f4 <_printf_i+0x22c>
 80066ca:	4675      	mov	r5, lr
 80066cc:	2a08      	cmp	r2, #8
 80066ce:	d10b      	bne.n	80066e8 <_printf_i+0x120>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	07da      	lsls	r2, r3, #31
 80066d4:	d508      	bpl.n	80066e8 <_printf_i+0x120>
 80066d6:	6923      	ldr	r3, [r4, #16]
 80066d8:	6862      	ldr	r2, [r4, #4]
 80066da:	429a      	cmp	r2, r3
 80066dc:	bfde      	ittt	le
 80066de:	2330      	movle	r3, #48	; 0x30
 80066e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80066e8:	ebae 0305 	sub.w	r3, lr, r5
 80066ec:	6123      	str	r3, [r4, #16]
 80066ee:	f8cd 8000 	str.w	r8, [sp]
 80066f2:	463b      	mov	r3, r7
 80066f4:	aa03      	add	r2, sp, #12
 80066f6:	4621      	mov	r1, r4
 80066f8:	4630      	mov	r0, r6
 80066fa:	f7ff feef 	bl	80064dc <_printf_common>
 80066fe:	3001      	adds	r0, #1
 8006700:	d155      	bne.n	80067ae <_printf_i+0x1e6>
 8006702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006706:	b005      	add	sp, #20
 8006708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800670c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006710:	493c      	ldr	r1, [pc, #240]	; (8006804 <_printf_i+0x23c>)
 8006712:	6822      	ldr	r2, [r4, #0]
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	f012 0f80 	tst.w	r2, #128	; 0x80
 800671a:	f100 0504 	add.w	r5, r0, #4
 800671e:	601d      	str	r5, [r3, #0]
 8006720:	d001      	beq.n	8006726 <_printf_i+0x15e>
 8006722:	6803      	ldr	r3, [r0, #0]
 8006724:	e002      	b.n	800672c <_printf_i+0x164>
 8006726:	0655      	lsls	r5, r2, #25
 8006728:	d5fb      	bpl.n	8006722 <_printf_i+0x15a>
 800672a:	8803      	ldrh	r3, [r0, #0]
 800672c:	07d0      	lsls	r0, r2, #31
 800672e:	bf44      	itt	mi
 8006730:	f042 0220 	orrmi.w	r2, r2, #32
 8006734:	6022      	strmi	r2, [r4, #0]
 8006736:	b91b      	cbnz	r3, 8006740 <_printf_i+0x178>
 8006738:	6822      	ldr	r2, [r4, #0]
 800673a:	f022 0220 	bic.w	r2, r2, #32
 800673e:	6022      	str	r2, [r4, #0]
 8006740:	2210      	movs	r2, #16
 8006742:	e7b1      	b.n	80066a8 <_printf_i+0xe0>
 8006744:	4675      	mov	r5, lr
 8006746:	fbb3 f0f2 	udiv	r0, r3, r2
 800674a:	fb02 3310 	mls	r3, r2, r0, r3
 800674e:	5ccb      	ldrb	r3, [r1, r3]
 8006750:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006754:	4603      	mov	r3, r0
 8006756:	2800      	cmp	r0, #0
 8006758:	d1f5      	bne.n	8006746 <_printf_i+0x17e>
 800675a:	e7b7      	b.n	80066cc <_printf_i+0x104>
 800675c:	6808      	ldr	r0, [r1, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	6949      	ldr	r1, [r1, #20]
 8006762:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006766:	d004      	beq.n	8006772 <_printf_i+0x1aa>
 8006768:	1d10      	adds	r0, r2, #4
 800676a:	6018      	str	r0, [r3, #0]
 800676c:	6813      	ldr	r3, [r2, #0]
 800676e:	6019      	str	r1, [r3, #0]
 8006770:	e007      	b.n	8006782 <_printf_i+0x1ba>
 8006772:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006776:	f102 0004 	add.w	r0, r2, #4
 800677a:	6018      	str	r0, [r3, #0]
 800677c:	6813      	ldr	r3, [r2, #0]
 800677e:	d0f6      	beq.n	800676e <_printf_i+0x1a6>
 8006780:	8019      	strh	r1, [r3, #0]
 8006782:	2300      	movs	r3, #0
 8006784:	6123      	str	r3, [r4, #16]
 8006786:	4675      	mov	r5, lr
 8006788:	e7b1      	b.n	80066ee <_printf_i+0x126>
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	1d11      	adds	r1, r2, #4
 800678e:	6019      	str	r1, [r3, #0]
 8006790:	6815      	ldr	r5, [r2, #0]
 8006792:	6862      	ldr	r2, [r4, #4]
 8006794:	2100      	movs	r1, #0
 8006796:	4628      	mov	r0, r5
 8006798:	f7f9 fd22 	bl	80001e0 <memchr>
 800679c:	b108      	cbz	r0, 80067a2 <_printf_i+0x1da>
 800679e:	1b40      	subs	r0, r0, r5
 80067a0:	6060      	str	r0, [r4, #4]
 80067a2:	6863      	ldr	r3, [r4, #4]
 80067a4:	6123      	str	r3, [r4, #16]
 80067a6:	2300      	movs	r3, #0
 80067a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ac:	e79f      	b.n	80066ee <_printf_i+0x126>
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	462a      	mov	r2, r5
 80067b2:	4639      	mov	r1, r7
 80067b4:	4630      	mov	r0, r6
 80067b6:	47c0      	blx	r8
 80067b8:	3001      	adds	r0, #1
 80067ba:	d0a2      	beq.n	8006702 <_printf_i+0x13a>
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	079b      	lsls	r3, r3, #30
 80067c0:	d507      	bpl.n	80067d2 <_printf_i+0x20a>
 80067c2:	2500      	movs	r5, #0
 80067c4:	f104 0919 	add.w	r9, r4, #25
 80067c8:	68e3      	ldr	r3, [r4, #12]
 80067ca:	9a03      	ldr	r2, [sp, #12]
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	429d      	cmp	r5, r3
 80067d0:	db05      	blt.n	80067de <_printf_i+0x216>
 80067d2:	68e0      	ldr	r0, [r4, #12]
 80067d4:	9b03      	ldr	r3, [sp, #12]
 80067d6:	4298      	cmp	r0, r3
 80067d8:	bfb8      	it	lt
 80067da:	4618      	movlt	r0, r3
 80067dc:	e793      	b.n	8006706 <_printf_i+0x13e>
 80067de:	2301      	movs	r3, #1
 80067e0:	464a      	mov	r2, r9
 80067e2:	4639      	mov	r1, r7
 80067e4:	4630      	mov	r0, r6
 80067e6:	47c0      	blx	r8
 80067e8:	3001      	adds	r0, #1
 80067ea:	d08a      	beq.n	8006702 <_printf_i+0x13a>
 80067ec:	3501      	adds	r5, #1
 80067ee:	e7eb      	b.n	80067c8 <_printf_i+0x200>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1a7      	bne.n	8006744 <_printf_i+0x17c>
 80067f4:	780b      	ldrb	r3, [r1, #0]
 80067f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067fe:	e765      	b.n	80066cc <_printf_i+0x104>
 8006800:	08006ce6 	.word	0x08006ce6
 8006804:	08006cd5 	.word	0x08006cd5

08006808 <memmove>:
 8006808:	4288      	cmp	r0, r1
 800680a:	b510      	push	{r4, lr}
 800680c:	eb01 0302 	add.w	r3, r1, r2
 8006810:	d803      	bhi.n	800681a <memmove+0x12>
 8006812:	1e42      	subs	r2, r0, #1
 8006814:	4299      	cmp	r1, r3
 8006816:	d10c      	bne.n	8006832 <memmove+0x2a>
 8006818:	bd10      	pop	{r4, pc}
 800681a:	4298      	cmp	r0, r3
 800681c:	d2f9      	bcs.n	8006812 <memmove+0xa>
 800681e:	1881      	adds	r1, r0, r2
 8006820:	1ad2      	subs	r2, r2, r3
 8006822:	42d3      	cmn	r3, r2
 8006824:	d100      	bne.n	8006828 <memmove+0x20>
 8006826:	bd10      	pop	{r4, pc}
 8006828:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800682c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006830:	e7f7      	b.n	8006822 <memmove+0x1a>
 8006832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006836:	f802 4f01 	strb.w	r4, [r2, #1]!
 800683a:	e7eb      	b.n	8006814 <memmove+0xc>

0800683c <_free_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4605      	mov	r5, r0
 8006840:	2900      	cmp	r1, #0
 8006842:	d045      	beq.n	80068d0 <_free_r+0x94>
 8006844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006848:	1f0c      	subs	r4, r1, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	bfb8      	it	lt
 800684e:	18e4      	addlt	r4, r4, r3
 8006850:	f000 f8d6 	bl	8006a00 <__malloc_lock>
 8006854:	4a1f      	ldr	r2, [pc, #124]	; (80068d4 <_free_r+0x98>)
 8006856:	6813      	ldr	r3, [r2, #0]
 8006858:	4610      	mov	r0, r2
 800685a:	b933      	cbnz	r3, 800686a <_free_r+0x2e>
 800685c:	6063      	str	r3, [r4, #4]
 800685e:	6014      	str	r4, [r2, #0]
 8006860:	4628      	mov	r0, r5
 8006862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006866:	f000 b8cc 	b.w	8006a02 <__malloc_unlock>
 800686a:	42a3      	cmp	r3, r4
 800686c:	d90c      	bls.n	8006888 <_free_r+0x4c>
 800686e:	6821      	ldr	r1, [r4, #0]
 8006870:	1862      	adds	r2, r4, r1
 8006872:	4293      	cmp	r3, r2
 8006874:	bf04      	itt	eq
 8006876:	681a      	ldreq	r2, [r3, #0]
 8006878:	685b      	ldreq	r3, [r3, #4]
 800687a:	6063      	str	r3, [r4, #4]
 800687c:	bf04      	itt	eq
 800687e:	1852      	addeq	r2, r2, r1
 8006880:	6022      	streq	r2, [r4, #0]
 8006882:	6004      	str	r4, [r0, #0]
 8006884:	e7ec      	b.n	8006860 <_free_r+0x24>
 8006886:	4613      	mov	r3, r2
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	b10a      	cbz	r2, 8006890 <_free_r+0x54>
 800688c:	42a2      	cmp	r2, r4
 800688e:	d9fa      	bls.n	8006886 <_free_r+0x4a>
 8006890:	6819      	ldr	r1, [r3, #0]
 8006892:	1858      	adds	r0, r3, r1
 8006894:	42a0      	cmp	r0, r4
 8006896:	d10b      	bne.n	80068b0 <_free_r+0x74>
 8006898:	6820      	ldr	r0, [r4, #0]
 800689a:	4401      	add	r1, r0
 800689c:	1858      	adds	r0, r3, r1
 800689e:	4282      	cmp	r2, r0
 80068a0:	6019      	str	r1, [r3, #0]
 80068a2:	d1dd      	bne.n	8006860 <_free_r+0x24>
 80068a4:	6810      	ldr	r0, [r2, #0]
 80068a6:	6852      	ldr	r2, [r2, #4]
 80068a8:	605a      	str	r2, [r3, #4]
 80068aa:	4401      	add	r1, r0
 80068ac:	6019      	str	r1, [r3, #0]
 80068ae:	e7d7      	b.n	8006860 <_free_r+0x24>
 80068b0:	d902      	bls.n	80068b8 <_free_r+0x7c>
 80068b2:	230c      	movs	r3, #12
 80068b4:	602b      	str	r3, [r5, #0]
 80068b6:	e7d3      	b.n	8006860 <_free_r+0x24>
 80068b8:	6820      	ldr	r0, [r4, #0]
 80068ba:	1821      	adds	r1, r4, r0
 80068bc:	428a      	cmp	r2, r1
 80068be:	bf04      	itt	eq
 80068c0:	6811      	ldreq	r1, [r2, #0]
 80068c2:	6852      	ldreq	r2, [r2, #4]
 80068c4:	6062      	str	r2, [r4, #4]
 80068c6:	bf04      	itt	eq
 80068c8:	1809      	addeq	r1, r1, r0
 80068ca:	6021      	streq	r1, [r4, #0]
 80068cc:	605c      	str	r4, [r3, #4]
 80068ce:	e7c7      	b.n	8006860 <_free_r+0x24>
 80068d0:	bd38      	pop	{r3, r4, r5, pc}
 80068d2:	bf00      	nop
 80068d4:	20000ff4 	.word	0x20000ff4

080068d8 <_malloc_r>:
 80068d8:	b570      	push	{r4, r5, r6, lr}
 80068da:	1ccd      	adds	r5, r1, #3
 80068dc:	f025 0503 	bic.w	r5, r5, #3
 80068e0:	3508      	adds	r5, #8
 80068e2:	2d0c      	cmp	r5, #12
 80068e4:	bf38      	it	cc
 80068e6:	250c      	movcc	r5, #12
 80068e8:	2d00      	cmp	r5, #0
 80068ea:	4606      	mov	r6, r0
 80068ec:	db01      	blt.n	80068f2 <_malloc_r+0x1a>
 80068ee:	42a9      	cmp	r1, r5
 80068f0:	d903      	bls.n	80068fa <_malloc_r+0x22>
 80068f2:	230c      	movs	r3, #12
 80068f4:	6033      	str	r3, [r6, #0]
 80068f6:	2000      	movs	r0, #0
 80068f8:	bd70      	pop	{r4, r5, r6, pc}
 80068fa:	f000 f881 	bl	8006a00 <__malloc_lock>
 80068fe:	4a23      	ldr	r2, [pc, #140]	; (800698c <_malloc_r+0xb4>)
 8006900:	6814      	ldr	r4, [r2, #0]
 8006902:	4621      	mov	r1, r4
 8006904:	b991      	cbnz	r1, 800692c <_malloc_r+0x54>
 8006906:	4c22      	ldr	r4, [pc, #136]	; (8006990 <_malloc_r+0xb8>)
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	b91b      	cbnz	r3, 8006914 <_malloc_r+0x3c>
 800690c:	4630      	mov	r0, r6
 800690e:	f000 f867 	bl	80069e0 <_sbrk_r>
 8006912:	6020      	str	r0, [r4, #0]
 8006914:	4629      	mov	r1, r5
 8006916:	4630      	mov	r0, r6
 8006918:	f000 f862 	bl	80069e0 <_sbrk_r>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d126      	bne.n	800696e <_malloc_r+0x96>
 8006920:	230c      	movs	r3, #12
 8006922:	6033      	str	r3, [r6, #0]
 8006924:	4630      	mov	r0, r6
 8006926:	f000 f86c 	bl	8006a02 <__malloc_unlock>
 800692a:	e7e4      	b.n	80068f6 <_malloc_r+0x1e>
 800692c:	680b      	ldr	r3, [r1, #0]
 800692e:	1b5b      	subs	r3, r3, r5
 8006930:	d41a      	bmi.n	8006968 <_malloc_r+0x90>
 8006932:	2b0b      	cmp	r3, #11
 8006934:	d90f      	bls.n	8006956 <_malloc_r+0x7e>
 8006936:	600b      	str	r3, [r1, #0]
 8006938:	50cd      	str	r5, [r1, r3]
 800693a:	18cc      	adds	r4, r1, r3
 800693c:	4630      	mov	r0, r6
 800693e:	f000 f860 	bl	8006a02 <__malloc_unlock>
 8006942:	f104 000b 	add.w	r0, r4, #11
 8006946:	1d23      	adds	r3, r4, #4
 8006948:	f020 0007 	bic.w	r0, r0, #7
 800694c:	1ac3      	subs	r3, r0, r3
 800694e:	d01b      	beq.n	8006988 <_malloc_r+0xb0>
 8006950:	425a      	negs	r2, r3
 8006952:	50e2      	str	r2, [r4, r3]
 8006954:	bd70      	pop	{r4, r5, r6, pc}
 8006956:	428c      	cmp	r4, r1
 8006958:	bf0d      	iteet	eq
 800695a:	6863      	ldreq	r3, [r4, #4]
 800695c:	684b      	ldrne	r3, [r1, #4]
 800695e:	6063      	strne	r3, [r4, #4]
 8006960:	6013      	streq	r3, [r2, #0]
 8006962:	bf18      	it	ne
 8006964:	460c      	movne	r4, r1
 8006966:	e7e9      	b.n	800693c <_malloc_r+0x64>
 8006968:	460c      	mov	r4, r1
 800696a:	6849      	ldr	r1, [r1, #4]
 800696c:	e7ca      	b.n	8006904 <_malloc_r+0x2c>
 800696e:	1cc4      	adds	r4, r0, #3
 8006970:	f024 0403 	bic.w	r4, r4, #3
 8006974:	42a0      	cmp	r0, r4
 8006976:	d005      	beq.n	8006984 <_malloc_r+0xac>
 8006978:	1a21      	subs	r1, r4, r0
 800697a:	4630      	mov	r0, r6
 800697c:	f000 f830 	bl	80069e0 <_sbrk_r>
 8006980:	3001      	adds	r0, #1
 8006982:	d0cd      	beq.n	8006920 <_malloc_r+0x48>
 8006984:	6025      	str	r5, [r4, #0]
 8006986:	e7d9      	b.n	800693c <_malloc_r+0x64>
 8006988:	bd70      	pop	{r4, r5, r6, pc}
 800698a:	bf00      	nop
 800698c:	20000ff4 	.word	0x20000ff4
 8006990:	20000ff8 	.word	0x20000ff8

08006994 <_realloc_r>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	4607      	mov	r7, r0
 8006998:	4614      	mov	r4, r2
 800699a:	460e      	mov	r6, r1
 800699c:	b921      	cbnz	r1, 80069a8 <_realloc_r+0x14>
 800699e:	4611      	mov	r1, r2
 80069a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80069a4:	f7ff bf98 	b.w	80068d8 <_malloc_r>
 80069a8:	b922      	cbnz	r2, 80069b4 <_realloc_r+0x20>
 80069aa:	f7ff ff47 	bl	800683c <_free_r>
 80069ae:	4625      	mov	r5, r4
 80069b0:	4628      	mov	r0, r5
 80069b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b4:	f000 f826 	bl	8006a04 <_malloc_usable_size_r>
 80069b8:	4284      	cmp	r4, r0
 80069ba:	d90f      	bls.n	80069dc <_realloc_r+0x48>
 80069bc:	4621      	mov	r1, r4
 80069be:	4638      	mov	r0, r7
 80069c0:	f7ff ff8a 	bl	80068d8 <_malloc_r>
 80069c4:	4605      	mov	r5, r0
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d0f2      	beq.n	80069b0 <_realloc_r+0x1c>
 80069ca:	4631      	mov	r1, r6
 80069cc:	4622      	mov	r2, r4
 80069ce:	f7ff fbfd 	bl	80061cc <memcpy>
 80069d2:	4631      	mov	r1, r6
 80069d4:	4638      	mov	r0, r7
 80069d6:	f7ff ff31 	bl	800683c <_free_r>
 80069da:	e7e9      	b.n	80069b0 <_realloc_r+0x1c>
 80069dc:	4635      	mov	r5, r6
 80069de:	e7e7      	b.n	80069b0 <_realloc_r+0x1c>

080069e0 <_sbrk_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4c06      	ldr	r4, [pc, #24]	; (80069fc <_sbrk_r+0x1c>)
 80069e4:	2300      	movs	r3, #0
 80069e6:	4605      	mov	r5, r0
 80069e8:	4608      	mov	r0, r1
 80069ea:	6023      	str	r3, [r4, #0]
 80069ec:	f7fa f926 	bl	8000c3c <_sbrk>
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	d102      	bne.n	80069fa <_sbrk_r+0x1a>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	b103      	cbz	r3, 80069fa <_sbrk_r+0x1a>
 80069f8:	602b      	str	r3, [r5, #0]
 80069fa:	bd38      	pop	{r3, r4, r5, pc}
 80069fc:	200010e4 	.word	0x200010e4

08006a00 <__malloc_lock>:
 8006a00:	4770      	bx	lr

08006a02 <__malloc_unlock>:
 8006a02:	4770      	bx	lr

08006a04 <_malloc_usable_size_r>:
 8006a04:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f1a0 0004 	sub.w	r0, r0, #4
 8006a0e:	bfbc      	itt	lt
 8006a10:	580b      	ldrlt	r3, [r1, r0]
 8006a12:	18c0      	addlt	r0, r0, r3
 8006a14:	4770      	bx	lr
	...

08006a18 <_init>:
 8006a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1a:	bf00      	nop
 8006a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1e:	bc08      	pop	{r3}
 8006a20:	469e      	mov	lr, r3
 8006a22:	4770      	bx	lr

08006a24 <_fini>:
 8006a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a26:	bf00      	nop
 8006a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2a:	bc08      	pop	{r3}
 8006a2c:	469e      	mov	lr, r3
 8006a2e:	4770      	bx	lr
