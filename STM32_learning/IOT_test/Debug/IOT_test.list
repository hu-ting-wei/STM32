
IOT_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004844  08004844  00014844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800489c  0800489c  0001489c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080048a8  080048a8  000148a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080048ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000684  2000000c  080048b8  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000690  080048b8  00020690  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000162d2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000282b  00000000  00000000  0003630e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001528  00000000  00000000  00038b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001410  00000000  00000000  0003a068  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000091aa  00000000  00000000  0003b478  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006a07  00000000  00000000  00044622  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004b029  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005aa4  00000000  00000000  0004b0a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800482c 	.word	0x0800482c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800482c 	.word	0x0800482c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fe87 	bl	80011f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f825 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 fa2f 	bl	8000948 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004ea:	f000 f8c5 	bl	8000678 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004ee:	f000 f8fb 	bl	80006e8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004f2:	f000 f937 	bl	8000764 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004f6:	f000 f95b 	bl	80007b0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004fa:	f000 f997 	bl	800082c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004fe:	f000 f9c5 	bl	800088c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000502:	f000 f9f3 	bl	80008ec <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t Test[] = "Hey World !!!\r\n"; //Data to send
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <main+0x50>)
 8000508:	463c      	mov	r4, r7
 800050a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800050c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);//Sending in normal mode
 8000510:	4639      	mov	r1, r7
 8000512:	230a      	movs	r3, #10
 8000514:	2210      	movs	r2, #16
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <main+0x54>)
 8000518:	f003 fa45 	bl	80039a6 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800051c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000520:	f000 feda 	bl	80012d8 <HAL_Delay>
  {
 8000524:	e7ef      	b.n	8000506 <main+0x2e>
 8000526:	bf00      	nop
 8000528:	08004844 	.word	0x08004844
 800052c:	200005c4 	.word	0x200005c4

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b0b8      	sub	sp, #224	; 0xe0
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800053a:	2244      	movs	r2, #68	; 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 f96c 	bl	800481c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2288      	movs	r2, #136	; 0x88
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f004 f95e 	bl	800481c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000560:	f001 fd48 	bl	8001ff4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000564:	4a42      	ldr	r2, [pc, #264]	; (8000670 <SystemClock_Config+0x140>)
 8000566:	4b42      	ldr	r3, [pc, #264]	; (8000670 <SystemClock_Config+0x140>)
 8000568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800056c:	f023 0318 	bic.w	r3, r3, #24
 8000570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000574:	2314      	movs	r3, #20
 8000576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057a:	2301      	movs	r3, #1
 800057c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800058c:	2360      	movs	r3, #96	; 0x60
 800058e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000598:	2301      	movs	r3, #1
 800059a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800059e:	2301      	movs	r3, #1
 80005a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005a4:	2328      	movs	r3, #40	; 0x28
 80005a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fe57 	bl	8002274 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005cc:	f000 fb6c 	bl	8000ca8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2303      	movs	r3, #3
 80005d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005f2:	2104      	movs	r1, #4
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 fa23 	bl	8002a40 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000600:	f000 fb52 	bl	8000ca8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <SystemClock_Config+0x144>)
 8000606:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000608:	2300      	movs	r3, #0
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800060c:	2300      	movs	r3, #0
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000610:	2300      	movs	r3, #0
 8000612:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000614:	2300      	movs	r3, #0
 8000616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800061a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800061e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000620:	2301      	movs	r3, #1
 8000622:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000628:	2318      	movs	r3, #24
 800062a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800062c:	2307      	movs	r3, #7
 800062e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000638:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800063c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063e:	463b      	mov	r3, r7
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fc01 	bl	8002e48 <HAL_RCCEx_PeriphCLKConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800064c:	f000 fb2c 	bl	8000ca8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000650:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000654:	f001 fcec 	bl	8002030 <HAL_PWREx_ControlVoltageScaling>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x132>
  {
    Error_Handler();
 800065e:	f000 fb23 	bl	8000ca8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000662:	f002 fed7 	bl	8003414 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000666:	bf00      	nop
 8000668:	37e0      	adds	r7, #224	; 0xe0
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000
 8000674:	00012085 	.word	0x00012085

08000678 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_DFSDM1_Init+0x68>)
 800067e:	4a19      	ldr	r2, [pc, #100]	; (80006e4 <MX_DFSDM1_Init+0x6c>)
 8000680:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_DFSDM1_Init+0x68>)
 8000684:	2201      	movs	r2, #1
 8000686:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_DFSDM1_Init+0x68>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_DFSDM1_Init+0x68>)
 8000690:	2202      	movs	r2, #2
 8000692:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_DFSDM1_Init+0x68>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_DFSDM1_Init+0x68>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_DFSDM1_Init+0x68>)
 80006a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006a6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_DFSDM1_Init+0x68>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_DFSDM1_Init+0x68>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_DFSDM1_Init+0x68>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_DFSDM1_Init+0x68>)
 80006bc:	2201      	movs	r2, #1
 80006be:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_DFSDM1_Init+0x68>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_DFSDM1_Init+0x68>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_DFSDM1_Init+0x68>)
 80006ce:	f000 ff35 	bl	800153c <HAL_DFSDM_ChannelInit>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006d8:	f000 fae6 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000050 	.word	0x20000050
 80006e4:	40016020 	.word	0x40016020

080006e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_I2C2_Init+0x74>)
 80006ee:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <MX_I2C2_Init+0x78>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_I2C2_Init+0x74>)
 80006f4:	f640 6214 	movw	r2, #3604	; 0xe14
 80006f8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_I2C2_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_I2C2_Init+0x74>)
 8000702:	2201      	movs	r2, #1
 8000704:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_I2C2_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_I2C2_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_I2C2_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_I2C2_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_I2C2_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_I2C2_Init+0x74>)
 8000726:	f001 f9f8 	bl	8001b1a <HAL_I2C_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000730:	f000 faba 	bl	8000ca8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000734:	2100      	movs	r1, #0
 8000736:	4809      	ldr	r0, [pc, #36]	; (800075c <MX_I2C2_Init+0x74>)
 8000738:	f001 fa7d 	bl	8001c36 <HAL_I2CEx_ConfigAnalogFilter>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000742:	f000 fab1 	bl	8000ca8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000746:	2100      	movs	r1, #0
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_I2C2_Init+0x74>)
 800074a:	f001 fabf 	bl	8001ccc <HAL_I2CEx_ConfigDigitalFilter>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000754:	f000 faa8 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000514 	.word	0x20000514
 8000760:	40005800 	.word	0x40005800

08000764 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_QUADSPI_Init+0x44>)
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <MX_QUADSPI_Init+0x48>)
 800076c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_QUADSPI_Init+0x44>)
 8000770:	2202      	movs	r2, #2
 8000772:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_QUADSPI_Init+0x44>)
 8000776:	2204      	movs	r2, #4
 8000778:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_QUADSPI_Init+0x44>)
 800077c:	2210      	movs	r2, #16
 800077e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_QUADSPI_Init+0x44>)
 8000782:	2217      	movs	r2, #23
 8000784:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_QUADSPI_Init+0x44>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_QUADSPI_Init+0x44>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_QUADSPI_Init+0x44>)
 8000794:	f001 fcb2 	bl	80020fc <HAL_QSPI_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800079e:	f000 fa83 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000648 	.word	0x20000648
 80007ac:	a0001000 	.word	0xa0001000

080007b0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_SPI3_Init+0x74>)
 80007b6:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <MX_SPI3_Init+0x78>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_SPI3_Init+0x74>)
 80007bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_SPI3_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_SPI3_Init+0x74>)
 80007ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_SPI3_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_SPI3_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_SPI3_Init+0x74>)
 80007de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_SPI3_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_SPI3_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_SPI3_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_SPI3_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_SPI3_Init+0x74>)
 80007fe:	2207      	movs	r2, #7
 8000800:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_SPI3_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_SPI3_Init+0x74>)
 800080a:	2208      	movs	r2, #8
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_SPI3_Init+0x74>)
 8000810:	f002 ffda 	bl	80037c8 <HAL_SPI_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800081a:	f000 fa45 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000560 	.word	0x20000560
 8000828:	40003c00 	.word	0x40003c00

0800082c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000832:	4a15      	ldr	r2, [pc, #84]	; (8000888 <MX_USART1_UART_Init+0x5c>)
 8000834:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART1_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART1_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART1_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000870:	f003 f84b 	bl	800390a <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800087a:	f000 fa15 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200005c4 	.word	0x200005c4
 8000888:	40013800 	.word	0x40013800

0800088c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <MX_USART3_UART_Init+0x5c>)
 8000894:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008d0:	f003 f81b 	bl	800390a <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f9e5 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000088 	.word	0x20000088
 80008e8:	40004800 	.word	0x40004800

080008ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fa:	2206      	movs	r2, #6
 80008fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000900:	2202      	movs	r2, #2
 8000902:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000906:	2202      	movs	r2, #2
 8000908:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000930:	f001 fa18 	bl	8001d64 <HAL_PCD_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800093a:	f000 f9b5 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000010c 	.word	0x2000010c

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095e:	4aba      	ldr	r2, [pc, #744]	; (8000c48 <MX_GPIO_Init+0x300>)
 8000960:	4bb9      	ldr	r3, [pc, #740]	; (8000c48 <MX_GPIO_Init+0x300>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	f043 0310 	orr.w	r3, r3, #16
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4bb7      	ldr	r3, [pc, #732]	; (8000c48 <MX_GPIO_Init+0x300>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4ab4      	ldr	r2, [pc, #720]	; (8000c48 <MX_GPIO_Init+0x300>)
 8000978:	4bb3      	ldr	r3, [pc, #716]	; (8000c48 <MX_GPIO_Init+0x300>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4bb1      	ldr	r3, [pc, #708]	; (8000c48 <MX_GPIO_Init+0x300>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4aae      	ldr	r2, [pc, #696]	; (8000c48 <MX_GPIO_Init+0x300>)
 8000990:	4bad      	ldr	r3, [pc, #692]	; (8000c48 <MX_GPIO_Init+0x300>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4bab      	ldr	r3, [pc, #684]	; (8000c48 <MX_GPIO_Init+0x300>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4aa8      	ldr	r2, [pc, #672]	; (8000c48 <MX_GPIO_Init+0x300>)
 80009a8:	4ba7      	ldr	r3, [pc, #668]	; (8000c48 <MX_GPIO_Init+0x300>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4ba5      	ldr	r3, [pc, #660]	; (8000c48 <MX_GPIO_Init+0x300>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	4aa2      	ldr	r2, [pc, #648]	; (8000c48 <MX_GPIO_Init+0x300>)
 80009c0:	4ba1      	ldr	r3, [pc, #644]	; (8000c48 <MX_GPIO_Init+0x300>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b9f      	ldr	r3, [pc, #636]	; (8000c48 <MX_GPIO_Init+0x300>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80009dc:	489b      	ldr	r0, [pc, #620]	; (8000c4c <MX_GPIO_Init+0x304>)
 80009de:	f001 f861 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f248 1104 	movw	r1, #33028	; 0x8104
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ec:	f001 f85a 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80009f0:	2200      	movs	r2, #0
 80009f2:	f24f 0114 	movw	r1, #61460	; 0xf014
 80009f6:	4896      	ldr	r0, [pc, #600]	; (8000c50 <MX_GPIO_Init+0x308>)
 80009f8:	f001 f854 	bl	8001aa4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a02:	4894      	ldr	r0, [pc, #592]	; (8000c54 <MX_GPIO_Init+0x30c>)
 8000a04:	f001 f84e 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0e:	4891      	ldr	r0, [pc, #580]	; (8000c54 <MX_GPIO_Init+0x30c>)
 8000a10:	f001 f848 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a1a:	488f      	ldr	r0, [pc, #572]	; (8000c58 <MX_GPIO_Init+0x310>)
 8000a1c:	f001 f842 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2120      	movs	r1, #32
 8000a24:	488a      	ldr	r0, [pc, #552]	; (8000c50 <MX_GPIO_Init+0x308>)
 8000a26:	f001 f83d 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4887      	ldr	r0, [pc, #540]	; (8000c4c <MX_GPIO_Init+0x304>)
 8000a30:	f001 f838 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a34:	f240 1315 	movw	r3, #277	; 0x115
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	487f      	ldr	r0, [pc, #508]	; (8000c4c <MX_GPIO_Init+0x304>)
 8000a4e:	f000 fe81 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a52:	236a      	movs	r3, #106	; 0x6a
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a56:	4b81      	ldr	r3, [pc, #516]	; (8000c5c <MX_GPIO_Init+0x314>)
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4879      	ldr	r0, [pc, #484]	; (8000c4c <MX_GPIO_Init+0x304>)
 8000a66:	f000 fe75 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a70:	4b7b      	ldr	r3, [pc, #492]	; (8000c60 <MX_GPIO_Init+0x318>)
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4876      	ldr	r0, [pc, #472]	; (8000c58 <MX_GPIO_Init+0x310>)
 8000a80:	f000 fe68 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a84:	233f      	movs	r3, #63	; 0x3f
 8000a86:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a88:	230b      	movs	r3, #11
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4870      	ldr	r0, [pc, #448]	; (8000c58 <MX_GPIO_Init+0x310>)
 8000a98:	f000 fe5c 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000aac:	2308      	movs	r3, #8
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aba:	f000 fe4b 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000abe:	f248 1304 	movw	r3, #33028	; 0x8104
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ada:	f000 fe3b 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000ade:	2308      	movs	r3, #8
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aee:	2301      	movs	r3, #1
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f000 fe2a 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b00:	2310      	movs	r3, #16
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b04:	230b      	movs	r3, #11
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f000 fe1d 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b1a:	23e0      	movs	r3, #224	; 0xe0
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f000 fe0c 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b40:	4b46      	ldr	r3, [pc, #280]	; (8000c5c <MX_GPIO_Init+0x314>)
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4840      	ldr	r0, [pc, #256]	; (8000c50 <MX_GPIO_Init+0x308>)
 8000b50:	f000 fe00 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b54:	2302      	movs	r3, #2
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b58:	230b      	movs	r3, #11
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	483a      	ldr	r0, [pc, #232]	; (8000c50 <MX_GPIO_Init+0x308>)
 8000b68:	f000 fdf4 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b6c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000b70:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4832      	ldr	r0, [pc, #200]	; (8000c50 <MX_GPIO_Init+0x308>)
 8000b86:	f000 fde5 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b8a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b8e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b90:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <MX_GPIO_Init+0x314>)
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	482d      	ldr	r0, [pc, #180]	; (8000c54 <MX_GPIO_Init+0x30c>)
 8000ba0:	f000 fdd8 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000ba4:	f243 0381 	movw	r3, #12417	; 0x3081
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4825      	ldr	r0, [pc, #148]	; (8000c54 <MX_GPIO_Init+0x30c>)
 8000bbe:	f000 fdc9 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000bc2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481f      	ldr	r0, [pc, #124]	; (8000c58 <MX_GPIO_Init+0x310>)
 8000bdc:	f000 fdba 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000be0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_GPIO_Init+0x314>)
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4818      	ldr	r0, [pc, #96]	; (8000c58 <MX_GPIO_Init+0x310>)
 8000bf6:	f000 fdad 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	480f      	ldr	r0, [pc, #60]	; (8000c54 <MX_GPIO_Init+0x30c>)
 8000c16:	f000 fd9d 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c1a:	2378      	movs	r3, #120	; 0x78
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4807      	ldr	r0, [pc, #28]	; (8000c54 <MX_GPIO_Init+0x30c>)
 8000c36:	f000 fd8d 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c40:	2312      	movs	r3, #18
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e00d      	b.n	8000c64 <MX_GPIO_Init+0x31c>
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48001000 	.word	0x48001000
 8000c50:	48000400 	.word	0x48000400
 8000c54:	48000c00 	.word	0x48000c00
 8000c58:	48000800 	.word	0x48000800
 8000c5c:	10110000 	.word	0x10110000
 8000c60:	10210000 	.word	0x10210000
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <MX_GPIO_Init+0x35c>)
 8000c76:	f000 fd6d 	bl	8001754 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2017      	movs	r0, #23
 8000c80:	f000 fc25 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c84:	2017      	movs	r0, #23
 8000c86:	f000 fc3e 	bl	8001506 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2028      	movs	r0, #40	; 0x28
 8000c90:	f000 fc1d 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c94:	2028      	movs	r0, #40	; 0x28
 8000c96:	f000 fc36 	bl	8001506 <HAL_NVIC_EnableIRQ>

}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cae:	e7fe      	b.n	8000cae <Error_Handler+0x6>

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <HAL_DFSDM_ChannelMspInit+0x84>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d12d      	bne.n	8000d74 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d18:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d22:	6613      	str	r3, [r2, #96]	; 0x60
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d30:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f043 0310 	orr.w	r3, r3, #16
 8000d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d40:	f003 0310 	and.w	r3, r3, #16
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000d48:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d5a:	2306      	movs	r3, #6
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4807      	ldr	r0, [pc, #28]	; (8000d84 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000d66:	f000 fcf5 	bl	8001754 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <HAL_DFSDM_ChannelMspInit+0x84>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4a02      	ldr	r2, [pc, #8]	; (8000d7c <HAL_DFSDM_ChannelMspInit+0x84>)
 8000d72:	6013      	str	r3, [r2, #0]
  }

}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000028 	.word	0x20000028
 8000d80:	40021000 	.word	0x40021000
 8000d84:	48001000 	.word	0x48001000

08000d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <HAL_I2C_MspInit+0x7c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d128      	bne.n	8000dfc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <HAL_I2C_MspInit+0x80>)
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_I2C_MspInit+0x80>)
 8000dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_I2C_MspInit+0x80>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000dc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc8:	2312      	movs	r3, #18
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480b      	ldr	r0, [pc, #44]	; (8000e0c <HAL_I2C_MspInit+0x84>)
 8000de0:	f000 fcb8 	bl	8001754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000de4:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_I2C_MspInit+0x80>)
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_I2C_MspInit+0x80>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dee:	6593      	str	r3, [r2, #88]	; 0x58
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_I2C_MspInit+0x80>)
 8000df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40005800 	.word	0x40005800
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000400 	.word	0x48000400

08000e10 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_QSPI_MspInit+0x7c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d128      	bne.n	8000e84 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e32:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <HAL_QSPI_MspInit+0x80>)
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_QSPI_MspInit+0x80>)
 8000e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3c:	6513      	str	r3, [r2, #80]	; 0x50
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_QSPI_MspInit+0x80>)
 8000e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4a:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <HAL_QSPI_MspInit+0x80>)
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_QSPI_MspInit+0x80>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_QSPI_MspInit+0x80>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e62:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e66:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e74:	230a      	movs	r3, #10
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <HAL_QSPI_MspInit+0x84>)
 8000e80:	f000 fc68 	bl	8001754 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	; 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	a0001000 	.word	0xa0001000
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48001000 	.word	0x48001000

08000e98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <HAL_SPI_MspInit+0x7c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d128      	bne.n	8000f0c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000eba:	4a17      	ldr	r2, [pc, #92]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000eea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000efc:	2306      	movs	r3, #6
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_SPI_MspInit+0x84>)
 8000f08:	f000 fc24 	bl	8001754 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3728      	adds	r7, #40	; 0x28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40003c00 	.word	0x40003c00
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48000800 	.word	0x48000800

08000f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a2e      	ldr	r2, [pc, #184]	; (8000ff8 <HAL_UART_MspInit+0xd8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d128      	bne.n	8000f94 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f42:	4a2e      	ldr	r2, [pc, #184]	; (8000ffc <HAL_UART_MspInit+0xdc>)
 8000f44:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <HAL_UART_MspInit+0xdc>)
 8000f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <HAL_UART_MspInit+0xdc>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4a28      	ldr	r2, [pc, #160]	; (8000ffc <HAL_UART_MspInit+0xdc>)
 8000f5c:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <HAL_UART_MspInit+0xdc>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <HAL_UART_MspInit+0xdc>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000f72:	23c0      	movs	r3, #192	; 0xc0
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f82:	2307      	movs	r3, #7
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	481c      	ldr	r0, [pc, #112]	; (8001000 <HAL_UART_MspInit+0xe0>)
 8000f8e:	f000 fbe1 	bl	8001754 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f92:	e02d      	b.n	8000ff0 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a1a      	ldr	r2, [pc, #104]	; (8001004 <HAL_UART_MspInit+0xe4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d128      	bne.n	8000ff0 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <HAL_UART_MspInit+0xdc>)
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <HAL_UART_MspInit+0xdc>)
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_UART_MspInit+0xdc>)
 8000fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb6:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <HAL_UART_MspInit+0xdc>)
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <HAL_UART_MspInit+0xdc>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_UART_MspInit+0xdc>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000fce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4807      	ldr	r0, [pc, #28]	; (8001008 <HAL_UART_MspInit+0xe8>)
 8000fec:	f000 fbb2 	bl	8001754 <HAL_GPIO_Init>
}
 8000ff0:	bf00      	nop
 8000ff2:	3730      	adds	r7, #48	; 0x30
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40021000 	.word	0x40021000
 8001000:	48000400 	.word	0x48000400
 8001004:	40004800 	.word	0x40004800
 8001008:	48000c00 	.word	0x48000c00

0800100c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800102c:	d154      	bne.n	80010d8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4a2c      	ldr	r2, [pc, #176]	; (80010e0 <HAL_PCD_MspInit+0xd4>)
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_PCD_MspInit+0xd4>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <HAL_PCD_MspInit+0xd4>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105e:	f000 fb79 	bl	8001754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001062:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001074:	230a      	movs	r3, #10
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001082:	f000 fb67 	bl	8001754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001086:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <HAL_PCD_MspInit+0xd4>)
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_PCD_MspInit+0xd4>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <HAL_PCD_MspInit+0xd4>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_PCD_MspInit+0xd4>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d114      	bne.n	80010d4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <HAL_PCD_MspInit+0xd4>)
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <HAL_PCD_MspInit+0xd4>)
 80010ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b4:	6593      	str	r3, [r2, #88]	; 0x58
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_PCD_MspInit+0xd4>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80010c2:	f001 f80b 	bl	80020dc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010c6:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <HAL_PCD_MspInit+0xd4>)
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_PCD_MspInit+0xd4>)
 80010ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010d0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010d2:	e001      	b.n	80010d8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80010d4:	f001 f802 	bl	80020dc <HAL_PWREx_EnableVddUSB>
}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f000 f8b2 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800113c:	2020      	movs	r0, #32
 800113e:	f000 fcc9 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001142:	2040      	movs	r0, #64	; 0x40
 8001144:	f000 fcc6 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001148:	2080      	movs	r0, #128	; 0x80
 800114a:	f000 fcc3 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800114e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001152:	f000 fcbf 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}

0800115a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800115e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001162:	f000 fcb7 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001166:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800116a:	f000 fcb3 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800116e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001172:	f000 fcaf 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001176:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800117a:	f000 fcab 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800117e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001182:	f000 fca7 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001190:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <SystemInit+0x5c>)
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <SystemInit+0x5c>)
 8001194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <SystemInit+0x60>)
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <SystemInit+0x60>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <SystemInit+0x60>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <SystemInit+0x60>)
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <SystemInit+0x60>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <SystemInit+0x60>)
 80011c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <SystemInit+0x60>)
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <SystemInit+0x60>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SystemInit+0x60>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fa:	2003      	movs	r0, #3
 80011fc:	f000 f95c 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001200:	2000      	movs	r0, #0
 8001202:	f000 f80d 	bl	8001220 <HAL_InitTick>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	e001      	b.n	8001216 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001212:	f7ff fd4d 	bl	8000cb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001216:	79fb      	ldrb	r3, [r7, #7]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_InitTick+0x6c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d023      	beq.n	800127c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_InitTick+0x70>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_InitTick+0x6c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f969 	bl	8001522 <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10f      	bne.n	8001276 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d809      	bhi.n	8001270 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001264:	f000 f933 	bl	80014ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_InitTick+0x74>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e007      	b.n	8001280 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e004      	b.n	8001280 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	e001      	b.n	8001280 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	20000000 	.word	0x20000000
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	2000068c 	.word	0x2000068c

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	2000068c 	.word	0x2000068c

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_Delay+0x40>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad2      	subs	r2, r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d3f7      	bcc.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000008 	.word	0x20000008

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	4909      	ldr	r1, [pc, #36]	; (80013b8 <__NVIC_EnableIRQ+0x38>)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	095b      	lsrs	r3, r3, #5
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	f002 021f 	and.w	r2, r2, #31
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	490d      	ldr	r1, [pc, #52]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	4909      	ldr	r1, [pc, #36]	; (800140c <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	2201      	movs	r2, #1
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	1e5a      	subs	r2, r3, #1
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	401a      	ands	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001456:	2101      	movs	r1, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	1e59      	subs	r1, r3, #1
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001498:	f7ff ff90 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff2b 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff40 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff90 	bl	8001410 <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5f 	bl	80013bc <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff33 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa2 	bl	8001474 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0ac      	b.n	80016a8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f8b2 	bl	80016bc <DFSDM_GetChannelFromInstance>
 8001558:	4602      	mov	r2, r0
 800155a:	4b55      	ldr	r3, [pc, #340]	; (80016b0 <HAL_DFSDM_ChannelInit+0x174>)
 800155c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e09f      	b.n	80016a8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fbc5 	bl	8000cf8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800156e:	4b51      	ldr	r3, [pc, #324]	; (80016b4 <HAL_DFSDM_ChannelInit+0x178>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	4a4f      	ldr	r2, [pc, #316]	; (80016b4 <HAL_DFSDM_ChannelInit+0x178>)
 8001576:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001578:	4b4e      	ldr	r3, [pc, #312]	; (80016b4 <HAL_DFSDM_ChannelInit+0x178>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d125      	bne.n	80015cc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001580:	4a4d      	ldr	r2, [pc, #308]	; (80016b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001582:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800158a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800158c:	494a      	ldr	r1, [pc, #296]	; (80016b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800158e:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800159a:	4a47      	ldr	r2, [pc, #284]	; (80016b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800159c:	4b46      	ldr	r3, [pc, #280]	; (80016b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80015a4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	791b      	ldrb	r3, [r3, #4]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d108      	bne.n	80015c0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80015ae:	4942      	ldr	r1, [pc, #264]	; (80016b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80015b0:	4b41      	ldr	r3, [pc, #260]	; (80016b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	041b      	lsls	r3, r3, #16
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80015c0:	4a3d      	ldr	r2, [pc, #244]	; (80016b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015ca:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80015da:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	6811      	ldr	r1, [r2, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6910      	ldr	r0, [r2, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6952      	ldr	r2, [r2, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015ee:	4310      	orrs	r0, r2
                                        hdfsdm_channel->Init.Input.Pins);
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6992      	ldr	r2, [r2, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80015f4:	4302      	orrs	r2, r0
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	f022 020f 	bic.w	r2, r2, #15
 8001608:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	6811      	ldr	r1, [r2, #0]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	69d0      	ldr	r0, [r2, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6a12      	ldr	r2, [r2, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800161c:	4302      	orrs	r2, r0
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	6892      	ldr	r2, [r2, #8]
 800162c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001630:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	6891      	ldr	r1, [r2, #8]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6a50      	ldr	r0, [r2, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001644:	3a01      	subs	r2, #1
 8001646:	0412      	lsls	r2, r2, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001648:	4302      	orrs	r2, r0
 800164a:	430a      	orrs	r2, r1
 800164c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	6852      	ldr	r2, [r2, #4]
 8001658:	f002 0207 	and.w	r2, r2, #7
 800165c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	6851      	ldr	r1, [r2, #4]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800166c:	0210      	lsls	r0, r2, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001672:	00d2      	lsls	r2, r2, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001674:	4302      	orrs	r2, r0
 8001676:	430a      	orrs	r2, r1
 8001678:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001688:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f810 	bl	80016bc <DFSDM_GetChannelFromInstance>
 800169c:	4601      	mov	r1, r0
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <HAL_DFSDM_ChannelInit+0x174>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000030 	.word	0x20000030
 80016b4:	2000002c 	.word	0x2000002c
 80016b8:	40016000 	.word	0x40016000

080016bc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a1c      	ldr	r2, [pc, #112]	; (8001738 <DFSDM_GetChannelFromInstance+0x7c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d102      	bne.n	80016d2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e02b      	b.n	800172a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a19      	ldr	r2, [pc, #100]	; (800173c <DFSDM_GetChannelFromInstance+0x80>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d102      	bne.n	80016e0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80016da:	2301      	movs	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	e024      	b.n	800172a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a17      	ldr	r2, [pc, #92]	; (8001740 <DFSDM_GetChannelFromInstance+0x84>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d102      	bne.n	80016ee <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80016e8:	2302      	movs	r3, #2
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	e01d      	b.n	800172a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <DFSDM_GetChannelFromInstance+0x88>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d102      	bne.n	80016fc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80016f6:	2304      	movs	r3, #4
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e016      	b.n	800172a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <DFSDM_GetChannelFromInstance+0x8c>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d102      	bne.n	800170a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001704:	2305      	movs	r3, #5
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	e00f      	b.n	800172a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a0f      	ldr	r2, [pc, #60]	; (800174c <DFSDM_GetChannelFromInstance+0x90>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d102      	bne.n	8001718 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001712:	2306      	movs	r3, #6
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	e008      	b.n	800172a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <DFSDM_GetChannelFromInstance+0x94>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d102      	bne.n	8001726 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001720:	2307      	movs	r3, #7
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	e001      	b.n	800172a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001726:	2303      	movs	r3, #3
 8001728:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40016000 	.word	0x40016000
 800173c:	40016020 	.word	0x40016020
 8001740:	40016040 	.word	0x40016040
 8001744:	40016080 	.word	0x40016080
 8001748:	400160a0 	.word	0x400160a0
 800174c:	400160c0 	.word	0x400160c0
 8001750:	400160e0 	.word	0x400160e0

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001762:	e17f      	b.n	8001a64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 8171 	beq.w	8001a5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d00b      	beq.n	800179c <HAL_GPIO_Init+0x48>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d007      	beq.n	800179c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001790:	2b11      	cmp	r3, #17
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b12      	cmp	r3, #18
 800179a:	d130      	bne.n	80017fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017d2:	2201      	movs	r2, #1
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	f003 0201 	and.w	r2, r3, #1
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b03      	cmp	r3, #3
 8001808:	d118      	bne.n	800183c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001810:	2201      	movs	r2, #1
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	f003 0201 	and.w	r2, r3, #1
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x128>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b12      	cmp	r3, #18
 800187a:	d123      	bne.n	80018c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	08da      	lsrs	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3208      	adds	r2, #8
 8001884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	691a      	ldr	r2, [r3, #16]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	08da      	lsrs	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3208      	adds	r2, #8
 80018be:	6939      	ldr	r1, [r7, #16]
 80018c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80ac 	beq.w	8001a5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	4a5e      	ldr	r2, [pc, #376]	; (8001a80 <HAL_GPIO_Init+0x32c>)
 8001908:	4b5d      	ldr	r3, [pc, #372]	; (8001a80 <HAL_GPIO_Init+0x32c>)
 800190a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6613      	str	r3, [r2, #96]	; 0x60
 8001912:	4b5b      	ldr	r3, [pc, #364]	; (8001a80 <HAL_GPIO_Init+0x32c>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800191e:	4a59      	ldr	r2, [pc, #356]	; (8001a84 <HAL_GPIO_Init+0x330>)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	3302      	adds	r3, #2
 8001926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	220f      	movs	r2, #15
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001948:	d025      	beq.n	8001996 <HAL_GPIO_Init+0x242>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4e      	ldr	r2, [pc, #312]	; (8001a88 <HAL_GPIO_Init+0x334>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d01f      	beq.n	8001992 <HAL_GPIO_Init+0x23e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4d      	ldr	r2, [pc, #308]	; (8001a8c <HAL_GPIO_Init+0x338>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d019      	beq.n	800198e <HAL_GPIO_Init+0x23a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4c      	ldr	r2, [pc, #304]	; (8001a90 <HAL_GPIO_Init+0x33c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d013      	beq.n	800198a <HAL_GPIO_Init+0x236>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4b      	ldr	r2, [pc, #300]	; (8001a94 <HAL_GPIO_Init+0x340>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00d      	beq.n	8001986 <HAL_GPIO_Init+0x232>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4a      	ldr	r2, [pc, #296]	; (8001a98 <HAL_GPIO_Init+0x344>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d007      	beq.n	8001982 <HAL_GPIO_Init+0x22e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a49      	ldr	r2, [pc, #292]	; (8001a9c <HAL_GPIO_Init+0x348>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d101      	bne.n	800197e <HAL_GPIO_Init+0x22a>
 800197a:	2306      	movs	r3, #6
 800197c:	e00c      	b.n	8001998 <HAL_GPIO_Init+0x244>
 800197e:	2307      	movs	r3, #7
 8001980:	e00a      	b.n	8001998 <HAL_GPIO_Init+0x244>
 8001982:	2305      	movs	r3, #5
 8001984:	e008      	b.n	8001998 <HAL_GPIO_Init+0x244>
 8001986:	2304      	movs	r3, #4
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x244>
 800198a:	2303      	movs	r3, #3
 800198c:	e004      	b.n	8001998 <HAL_GPIO_Init+0x244>
 800198e:	2302      	movs	r3, #2
 8001990:	e002      	b.n	8001998 <HAL_GPIO_Init+0x244>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_GPIO_Init+0x244>
 8001996:	2300      	movs	r3, #0
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	f002 0203 	and.w	r2, r2, #3
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	4093      	lsls	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019a8:	4936      	ldr	r1, [pc, #216]	; (8001a84 <HAL_GPIO_Init+0x330>)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019b6:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <HAL_GPIO_Init+0x34c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019da:	4a31      	ldr	r2, [pc, #196]	; (8001aa0 <HAL_GPIO_Init+0x34c>)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019e0:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <HAL_GPIO_Init+0x34c>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a04:	4a26      	ldr	r2, [pc, #152]	; (8001aa0 <HAL_GPIO_Init+0x34c>)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_GPIO_Init+0x34c>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <HAL_GPIO_Init+0x34c>)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_GPIO_Init+0x34c>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a58:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <HAL_GPIO_Init+0x34c>)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f47f ae78 	bne.w	8001764 <HAL_GPIO_Init+0x10>
  }
}
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010000 	.word	0x40010000
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	48000c00 	.word	0x48000c00
 8001a94:	48001000 	.word	0x48001000
 8001a98:	48001400 	.word	0x48001400
 8001a9c:	48001800 	.word	0x48001800
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab4:	787b      	ldrb	r3, [r7, #1]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ac0:	e002      	b.n	8001ac8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d006      	beq.n	8001af8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f806 	bl	8001b04 <HAL_GPIO_EXTI_Callback>
  }
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40010400 	.word	0x40010400

08001b04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e080      	b.n	8001c2e <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d106      	bne.n	8001b46 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff f921 	bl	8000d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2224      	movs	r2, #36	; 0x24
 8001b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6852      	ldr	r2, [r2, #4]
 8001b66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b6a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	6892      	ldr	r2, [r2, #8]
 8001b76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d107      	bne.n	8001b94 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6892      	ldr	r2, [r2, #8]
 8001b8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	e006      	b.n	8001ba2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6892      	ldr	r2, [r2, #8]
 8001b9c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ba0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d104      	bne.n	8001bb4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bb2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	68d2      	ldr	r2, [r2, #12]
 8001bd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bd6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6911      	ldr	r1, [r2, #16]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6952      	ldr	r2, [r2, #20]
 8001be4:	4311      	orrs	r1, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6992      	ldr	r2, [r2, #24]
 8001bea:	0212      	lsls	r2, r2, #8
 8001bec:	430a      	orrs	r2, r1
 8001bee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	69d1      	ldr	r1, [r2, #28]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6a12      	ldr	r2, [r2, #32]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d138      	bne.n	8001cbe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e032      	b.n	8001cc0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2224      	movs	r2, #36	; 0x24
 8001c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c88:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	6811      	ldr	r1, [r2, #0]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	f042 0201 	orr.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
  }
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d139      	bne.n	8001d56 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e033      	b.n	8001d58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2224      	movs	r2, #36	; 0x24
 8001cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	f022 0201 	bic.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d1e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2220      	movs	r2, #32
 8001d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d56:	2302      	movs	r3, #2
  }
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	b08f      	sub	sp, #60	; 0x3c
 8001d68:	af0a      	add	r7, sp, #40	; 0x28
 8001d6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e116      	b.n	8001fa4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d106      	bne.n	8001d96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff f93b 	bl	800100c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2203      	movs	r2, #3
 8001d9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d102      	bne.n	8001db0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f002 faa2 	bl	80042fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	687e      	ldr	r6, [r7, #4]
 8001dc2:	466d      	mov	r5, sp
 8001dc4:	f106 0410 	add.w	r4, r6, #16
 8001dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dd8:	1d33      	adds	r3, r6, #4
 8001dda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ddc:	6838      	ldr	r0, [r7, #0]
 8001dde:	f002 fa62 	bl	80042a6 <USB_CoreInit>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0d7      	b.n	8001fa4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 fa90 	bl	8004320 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e04a      	b.n	8001e9c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	333d      	adds	r3, #61	; 0x3d
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	333c      	adds	r3, #60	; 0x3c
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	b298      	uxth	r0, r3
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	3342      	adds	r3, #66	; 0x42
 8001e42:	4602      	mov	r2, r0
 8001e44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	333f      	adds	r3, #63	; 0x3f
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	3344      	adds	r3, #68	; 0x44
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	1a9b      	subs	r3, r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	3348      	adds	r3, #72	; 0x48
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e82:	7bfa      	ldrb	r2, [r7, #15]
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	1a9b      	subs	r3, r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	440b      	add	r3, r1
 8001e90:	3350      	adds	r3, #80	; 0x50
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d3af      	bcc.n	8001e06 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	73fb      	strb	r3, [r7, #15]
 8001eaa:	e044      	b.n	8001f36 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	3301      	adds	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d3b5      	bcc.n	8001eac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	687e      	ldr	r6, [r7, #4]
 8001f48:	466d      	mov	r5, sp
 8001f4a:	f106 0410 	add.w	r4, r6, #16
 8001f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f5e:	1d33      	adds	r3, r6, #4
 8001f60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f62:	6838      	ldr	r0, [r7, #0]
 8001f64:	f002 fa06 	bl	8004374 <USB_DevInit>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e014      	b.n	8001fa4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d102      	bne.n	8001f98 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f80a 	bl	8001fac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f002 fb97 	bl	80046d0 <USB_DevDisconnect>

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fde:	f043 0303 	orr.w	r3, r3, #3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff8:	4a05      	ldr	r2, [pc, #20]	; (8002010 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40007000 	.word	0x40007000

08002014 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <HAL_PWREx_GetVoltageRange+0x18>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40007000 	.word	0x40007000

08002030 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203e:	d130      	bne.n	80020a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800204c:	d038      	beq.n	80020c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800204e:	4a20      	ldr	r2, [pc, #128]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002058:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800205c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800205e:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2232      	movs	r2, #50	; 0x32
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0c9b      	lsrs	r3, r3, #18
 8002070:	3301      	adds	r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002074:	e002      	b.n	800207c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3b01      	subs	r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002088:	d102      	bne.n	8002090 <HAL_PWREx_ControlVoltageScaling+0x60>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f2      	bne.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209c:	d110      	bne.n	80020c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e00f      	b.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ae:	d007      	beq.n	80020c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020b0:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40007000 	.word	0x40007000
 80020d4:	20000000 	.word	0x20000000
 80020d8:	431bde83 	.word	0x431bde83

080020dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80020e0:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ea:	6053      	str	r3, [r2, #4]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40007000 	.word	0x40007000

080020fc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af02      	add	r7, sp, #8
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff f8dc 	bl	80012c0 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e063      	b.n	80021dc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10b      	bne.n	8002138 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7fe fe71 	bl	8000e10 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800212e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f858 	bl	80021e8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	f422 6170 	bic.w	r1, r2, #3840	; 0xf00
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6892      	ldr	r2, [r2, #8]
 800214a:	3a01      	subs	r2, #1
 800214c:	0212      	lsls	r2, r2, #8
 800214e:	430a      	orrs	r2, r1
 8002150:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	2120      	movs	r1, #32
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f850 	bl	8002204 <QSPI_WaitFlagStateUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002168:	7afb      	ldrb	r3, [r7, #11]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d131      	bne.n	80021d2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800217c:	f023 0310 	bic.w	r3, r3, #16
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	6849      	ldr	r1, [r1, #4]
 8002184:	0608      	lsls	r0, r1, #24
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	68c9      	ldr	r1, [r1, #12]
 800218a:	4301      	orrs	r1, r0
 800218c:	430b      	orrs	r3, r1
 800218e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6859      	ldr	r1, [r3, #4]
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_QSPI_Init+0xe8>)
 800219c:	400b      	ands	r3, r1
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	6909      	ldr	r1, [r1, #16]
 80021a2:	0408      	lsls	r0, r1, #16
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	6949      	ldr	r1, [r1, #20]
 80021a8:	4308      	orrs	r0, r1
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	6989      	ldr	r1, [r1, #24]
 80021ae:	4301      	orrs	r1, r0
 80021b0:	430b      	orrs	r3, r1
 80021b2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80021da:	7afb      	ldrb	r3, [r7, #11]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	ffe0f8fe 	.word	0xffe0f8fe

080021e8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	4613      	mov	r3, r2
 8002212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002214:	e01a      	b.n	800224c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800221c:	d016      	beq.n	800224c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221e:	f7ff f84f 	bl	80012c0 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	1ad2      	subs	r2, r2, r3
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	429a      	cmp	r2, r3
 800222c:	d802      	bhi.n	8002234 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10b      	bne.n	800224c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2204      	movs	r2, #4
 8002238:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e00e      	b.n	800226a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	bf14      	ite	ne
 800225a:	2301      	movne	r3, #1
 800225c:	2300      	moveq	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	429a      	cmp	r2, r3
 8002266:	d1d6      	bne.n	8002216 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e3d4      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002286:	4ba1      	ldr	r3, [pc, #644]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002290:	4b9e      	ldr	r3, [pc, #632]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80e4 	beq.w	8002470 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <HAL_RCC_OscConfig+0x4a>
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	f040 808b 	bne.w	80023cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	f040 8087 	bne.w	80023cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022be:	4b93      	ldr	r3, [pc, #588]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x62>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e3ac      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1a      	ldr	r2, [r3, #32]
 80022da:	4b8c      	ldr	r3, [pc, #560]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <HAL_RCC_OscConfig+0x7c>
 80022e6:	4b89      	ldr	r3, [pc, #548]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ee:	e005      	b.n	80022fc <HAL_RCC_OscConfig+0x88>
 80022f0:	4b86      	ldr	r3, [pc, #536]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80022f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d923      	bls.n	8002348 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4618      	mov	r0, r3
 8002306:	f000 fd3f 	bl	8002d88 <RCC_SetFlashLatencyFromMSIRange>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e38d      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002314:	4a7d      	ldr	r2, [pc, #500]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002316:	4b7d      	ldr	r3, [pc, #500]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f043 0308 	orr.w	r3, r3, #8
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	497a      	ldr	r1, [pc, #488]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002322:	4b7a      	ldr	r3, [pc, #488]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002332:	4976      	ldr	r1, [pc, #472]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002334:	4b75      	ldr	r3, [pc, #468]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
 8002346:	e025      	b.n	8002394 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002348:	4a70      	ldr	r2, [pc, #448]	; (800250c <HAL_RCC_OscConfig+0x298>)
 800234a:	4b70      	ldr	r3, [pc, #448]	; (800250c <HAL_RCC_OscConfig+0x298>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f043 0308 	orr.w	r3, r3, #8
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	496d      	ldr	r1, [pc, #436]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002356:	4b6d      	ldr	r3, [pc, #436]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002366:	4969      	ldr	r1, [pc, #420]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002368:	4b68      	ldr	r3, [pc, #416]	; (800250c <HAL_RCC_OscConfig+0x298>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fcff 	bl	8002d88 <RCC_SetFlashLatencyFromMSIRange>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e34d      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002394:	f000 fc36 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002398:	4601      	mov	r1, r0
 800239a:	4b5c      	ldr	r3, [pc, #368]	; (800250c <HAL_RCC_OscConfig+0x298>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	4a5a      	ldr	r2, [pc, #360]	; (8002510 <HAL_RCC_OscConfig+0x29c>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	fa21 f303 	lsr.w	r3, r1, r3
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_RCC_OscConfig+0x2a0>)
 80023b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023b4:	4b58      	ldr	r3, [pc, #352]	; (8002518 <HAL_RCC_OscConfig+0x2a4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe ff31 	bl	8001220 <HAL_InitTick>
 80023be:	4603      	mov	r3, r0
 80023c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d052      	beq.n	800246e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	e331      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d032      	beq.n	800243a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023d4:	4a4d      	ldr	r2, [pc, #308]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80023d6:	4b4d      	ldr	r3, [pc, #308]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e0:	f7fe ff6e 	bl	80012c0 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e8:	f7fe ff6a 	bl	80012c0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e31a      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023fa:	4b44      	ldr	r3, [pc, #272]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002406:	4a41      	ldr	r2, [pc, #260]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002408:	4b40      	ldr	r3, [pc, #256]	; (800250c <HAL_RCC_OscConfig+0x298>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f043 0308 	orr.w	r3, r3, #8
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	493e      	ldr	r1, [pc, #248]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002414:	4b3d      	ldr	r3, [pc, #244]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4313      	orrs	r3, r2
 8002422:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002424:	4939      	ldr	r1, [pc, #228]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002426:	4b39      	ldr	r3, [pc, #228]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
 8002438:	e01a      	b.n	8002470 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800243a:	4a34      	ldr	r2, [pc, #208]	; (800250c <HAL_RCC_OscConfig+0x298>)
 800243c:	4b33      	ldr	r3, [pc, #204]	; (800250c <HAL_RCC_OscConfig+0x298>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002446:	f7fe ff3b 	bl	80012c0 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800244e:	f7fe ff37 	bl	80012c0 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e2e7      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0x1da>
 800246c:	e000      	b.n	8002470 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800246e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d074      	beq.n	8002566 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b08      	cmp	r3, #8
 8002480:	d005      	beq.n	800248e <HAL_RCC_OscConfig+0x21a>
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d10e      	bne.n	80024a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d10b      	bne.n	80024a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248e:	4b1f      	ldr	r3, [pc, #124]	; (800250c <HAL_RCC_OscConfig+0x298>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d064      	beq.n	8002564 <HAL_RCC_OscConfig+0x2f0>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d160      	bne.n	8002564 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e2c4      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x24a>
 80024b0:	4a16      	ldr	r2, [pc, #88]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	e01d      	b.n	80024fa <HAL_RCC_OscConfig+0x286>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c6:	d10c      	bne.n	80024e2 <HAL_RCC_OscConfig+0x26e>
 80024c8:	4a10      	ldr	r2, [pc, #64]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4a0d      	ldr	r2, [pc, #52]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e00b      	b.n	80024fa <HAL_RCC_OscConfig+0x286>
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCC_OscConfig+0x298>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d01c      	beq.n	800253c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7fe fedd 	bl	80012c0 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002508:	e011      	b.n	800252e <HAL_RCC_OscConfig+0x2ba>
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	08004854 	.word	0x08004854
 8002514:	20000000 	.word	0x20000000
 8002518:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800251c:	f7fe fed0 	bl	80012c0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e280      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800252e:	4baf      	ldr	r3, [pc, #700]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x2a8>
 800253a:	e014      	b.n	8002566 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fec0 	bl	80012c0 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002544:	f7fe febc 	bl	80012c0 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e26c      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002556:	4ba5      	ldr	r3, [pc, #660]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x2d0>
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d060      	beq.n	8002634 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b04      	cmp	r3, #4
 8002576:	d005      	beq.n	8002584 <HAL_RCC_OscConfig+0x310>
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d119      	bne.n	80025b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d116      	bne.n	80025b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002584:	4b99      	ldr	r3, [pc, #612]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_OscConfig+0x328>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e249      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4993      	ldr	r1, [pc, #588]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 800259e:	4b93      	ldr	r3, [pc, #588]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	061b      	lsls	r3, r3, #24
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b0:	e040      	b.n	8002634 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d023      	beq.n	8002602 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ba:	4a8c      	ldr	r2, [pc, #560]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 80025bc:	4b8b      	ldr	r3, [pc, #556]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7fe fe7b 	bl	80012c0 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ce:	f7fe fe77 	bl	80012c0 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e227      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e0:	4b82      	ldr	r3, [pc, #520]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	497f      	ldr	r1, [pc, #508]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 80025ee:	4b7f      	ldr	r3, [pc, #508]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	061b      	lsls	r3, r3, #24
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
 8002600:	e018      	b.n	8002634 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	4a7a      	ldr	r2, [pc, #488]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 8002604:	4b79      	ldr	r3, [pc, #484]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800260c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe fe57 	bl	80012c0 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002616:	f7fe fe53 	bl	80012c0 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e203      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002628:	4b70      	ldr	r3, [pc, #448]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d03c      	beq.n	80026ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01c      	beq.n	8002682 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002648:	4a68      	ldr	r2, [pc, #416]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 800264a:	4b68      	ldr	r3, [pc, #416]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 800264c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7fe fe32 	bl	80012c0 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002660:	f7fe fe2e 	bl	80012c0 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e1de      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002672:	4b5e      	ldr	r3, [pc, #376]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 8002674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ef      	beq.n	8002660 <HAL_RCC_OscConfig+0x3ec>
 8002680:	e01b      	b.n	80026ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002682:	4a5a      	ldr	r2, [pc, #360]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 8002684:	4b59      	ldr	r3, [pc, #356]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 8002686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002692:	f7fe fe15 	bl	80012c0 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269a:	f7fe fe11 	bl	80012c0 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e1c1      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026ac:	4b4f      	ldr	r3, [pc, #316]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 80026ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ef      	bne.n	800269a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80a6 	beq.w	8002814 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c8:	2300      	movs	r3, #0
 80026ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026cc:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10d      	bne.n	80026f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d8:	4a44      	ldr	r2, [pc, #272]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 80026da:	4b44      	ldr	r3, [pc, #272]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 80026dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e2:	6593      	str	r3, [r2, #88]	; 0x58
 80026e4:	4b41      	ldr	r3, [pc, #260]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f0:	2301      	movs	r3, #1
 80026f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f4:	4b3e      	ldr	r3, [pc, #248]	; (80027f0 <HAL_RCC_OscConfig+0x57c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d118      	bne.n	8002732 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002700:	4a3b      	ldr	r2, [pc, #236]	; (80027f0 <HAL_RCC_OscConfig+0x57c>)
 8002702:	4b3b      	ldr	r3, [pc, #236]	; (80027f0 <HAL_RCC_OscConfig+0x57c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270c:	f7fe fdd8 	bl	80012c0 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002714:	f7fe fdd4 	bl	80012c0 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e184      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002726:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <HAL_RCC_OscConfig+0x57c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d108      	bne.n	800274c <HAL_RCC_OscConfig+0x4d8>
 800273a:	4a2c      	ldr	r2, [pc, #176]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 800273c:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800274a:	e024      	b.n	8002796 <HAL_RCC_OscConfig+0x522>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d110      	bne.n	8002776 <HAL_RCC_OscConfig+0x502>
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 8002756:	4b25      	ldr	r3, [pc, #148]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002764:	4a21      	ldr	r2, [pc, #132]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 8002766:	4b21      	ldr	r3, [pc, #132]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002774:	e00f      	b.n	8002796 <HAL_RCC_OscConfig+0x522>
 8002776:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 8002778:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002786:	4a19      	ldr	r2, [pc, #100]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	f023 0304 	bic.w	r3, r3, #4
 8002792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d016      	beq.n	80027cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279e:	f7fe fd8f 	bl	80012c0 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a4:	e00a      	b.n	80027bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe fd8b 	bl	80012c0 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e139      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCC_OscConfig+0x578>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0ed      	beq.n	80027a6 <HAL_RCC_OscConfig+0x532>
 80027ca:	e01a      	b.n	8002802 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7fe fd78 	bl	80012c0 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d2:	e00f      	b.n	80027f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d4:	f7fe fd74 	bl	80012c0 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d906      	bls.n	80027f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e122      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f4:	4b90      	ldr	r3, [pc, #576]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e8      	bne.n	80027d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002802:	7ffb      	ldrb	r3, [r7, #31]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4a8b      	ldr	r2, [pc, #556]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 800280a:	4b8b      	ldr	r3, [pc, #556]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002812:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8108 	beq.w	8002a2e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	2b02      	cmp	r3, #2
 8002824:	f040 80d0 	bne.w	80029c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002828:	4b83      	ldr	r3, [pc, #524]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f003 0203 	and.w	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	429a      	cmp	r2, r3
 800283a:	d130      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	3b01      	subs	r3, #1
 8002848:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d127      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002858:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d11f      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002868:	2a07      	cmp	r2, #7
 800286a:	bf14      	ite	ne
 800286c:	2201      	movne	r2, #1
 800286e:	2200      	moveq	r2, #0
 8002870:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002872:	4293      	cmp	r3, r2
 8002874:	d113      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	3b01      	subs	r3, #1
 8002884:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d109      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	085b      	lsrs	r3, r3, #1
 8002896:	3b01      	subs	r3, #1
 8002898:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d06e      	beq.n	800297c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d069      	beq.n	8002978 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028a4:	4b64      	ldr	r3, [pc, #400]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028b0:	4b61      	ldr	r3, [pc, #388]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0b7      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028c0:	4a5d      	ldr	r2, [pc, #372]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80028c2:	4b5d      	ldr	r3, [pc, #372]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028cc:	f7fe fcf8 	bl	80012c0 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d4:	f7fe fcf4 	bl	80012c0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0a4      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e6:	4b54      	ldr	r3, [pc, #336]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f2:	4851      	ldr	r0, [pc, #324]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80028f4:	4b50      	ldr	r3, [pc, #320]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	4b50      	ldr	r3, [pc, #320]	; (8002a3c <HAL_RCC_OscConfig+0x7c8>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002904:	3a01      	subs	r2, #1
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	4311      	orrs	r1, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800290e:	0212      	lsls	r2, r2, #8
 8002910:	4311      	orrs	r1, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002916:	0852      	lsrs	r2, r2, #1
 8002918:	3a01      	subs	r2, #1
 800291a:	0552      	lsls	r2, r2, #21
 800291c:	4311      	orrs	r1, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002922:	0852      	lsrs	r2, r2, #1
 8002924:	3a01      	subs	r2, #1
 8002926:	0652      	lsls	r2, r2, #25
 8002928:	4311      	orrs	r1, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800292e:	0912      	lsrs	r2, r2, #4
 8002930:	0452      	lsls	r2, r2, #17
 8002932:	430a      	orrs	r2, r1
 8002934:	4313      	orrs	r3, r2
 8002936:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002938:	4a3f      	ldr	r2, [pc, #252]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 800293a:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002942:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002944:	4a3c      	ldr	r2, [pc, #240]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 8002946:	4b3c      	ldr	r3, [pc, #240]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002950:	f7fe fcb6 	bl	80012c0 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe fcb2 	bl	80012c0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e062      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	4b33      	ldr	r3, [pc, #204]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002976:	e05a      	b.n	8002a2e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e059      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297c:	4b2e      	ldr	r3, [pc, #184]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d152      	bne.n	8002a2e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002988:	4a2b      	ldr	r2, [pc, #172]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 800298a:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002992:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002994:	4a28      	ldr	r2, [pc, #160]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 8002996:	4b28      	ldr	r3, [pc, #160]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029a0:	f7fe fc8e 	bl	80012c0 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fe fc8a 	bl	80012c0 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e03a      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ba:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x734>
 80029c6:	e032      	b.n	8002a2e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d02d      	beq.n	8002a2a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029da:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d105      	bne.n	80029f2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029e6:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80029e8:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f023 0303 	bic.w	r3, r3, #3
 80029f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029f2:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a00:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7fe fc5d 	bl	80012c0 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0a:	f7fe fc59 	bl	80012c0 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e009      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_RCC_OscConfig+0x7c4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f0      	bne.n	8002a0a <HAL_RCC_OscConfig+0x796>
 8002a28:	e001      	b.n	8002a2e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	f99d808c 	.word	0xf99d808c

08002a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0c8      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a54:	4b66      	ldr	r3, [pc, #408]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0207 	and.w	r2, r3, #7
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d210      	bcs.n	8002a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4963      	ldr	r1, [pc, #396]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a64:	4b62      	ldr	r3, [pc, #392]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 0207 	bic.w	r2, r3, #7
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b5f      	ldr	r3, [pc, #380]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0207 	and.w	r2, r3, #7
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0b0      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d04c      	beq.n	8002b2a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a98:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d121      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e09e      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d107      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab0:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d115      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e092      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ac8:	4b4a      	ldr	r3, [pc, #296]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d109      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e086      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad8:	4b46      	ldr	r3, [pc, #280]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e07e      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ae8:	4942      	ldr	r1, [pc, #264]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002aea:	4b42      	ldr	r3, [pc, #264]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f023 0203 	bic.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afa:	f7fe fbe1 	bl	80012c0 <HAL_GetTick>
 8002afe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b02:	f7fe fbdd 	bl	80012c0 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e066      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b18:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 020c 	and.w	r2, r3, #12
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d1eb      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b36:	492f      	ldr	r1, [pc, #188]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b38:	4b2e      	ldr	r3, [pc, #184]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b29      	ldr	r3, [pc, #164]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0207 	and.w	r2, r3, #7
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d910      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4926      	ldr	r1, [pc, #152]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b58:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 0207 	bic.w	r2, r3, #7
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0207 	and.w	r2, r3, #7
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e036      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b84:	491b      	ldr	r1, [pc, #108]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b86:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba2:	4914      	ldr	r1, [pc, #80]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bb6:	f000 f825 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bba:	4601      	mov	r1, r0
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	4a0c      	ldr	r2, [pc, #48]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	5cd3      	ldrb	r3, [r2, r3]
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	fa21 f303 	lsr.w	r3, r1, r3
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe fb20 	bl	8001220 <HAL_InitTick>
 8002be0:	4603      	mov	r3, r0
 8002be2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002be4:	7afb      	ldrb	r3, [r7, #11]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40022000 	.word	0x40022000
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08004854 	.word	0x08004854
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	20000004 	.word	0x20000004

08002c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c12:	4b3d      	ldr	r3, [pc, #244]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c1c:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x34>
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	2b0c      	cmp	r3, #12
 8002c30:	d121      	bne.n	8002c76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d11e      	bne.n	8002c76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c38:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c44:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	e005      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c54:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c60:	4a2a      	ldr	r2, [pc, #168]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10d      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d102      	bne.n	8002c82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c7e:	61bb      	str	r3, [r7, #24]
 8002c80:	e004      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c88:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d133      	bne.n	8002cfa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c92:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d002      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xa4>
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d003      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0xaa>
 8002ca6:	e005      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002caa:	617b      	str	r3, [r7, #20]
      break;
 8002cac:	e005      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cae:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cb0:	617b      	str	r3, [r7, #20]
      break;
 8002cb2:	e002      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	617b      	str	r3, [r7, #20]
      break;
 8002cb8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	fb02 f203 	mul.w	r2, r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	0e5b      	lsrs	r3, r3, #25
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3724      	adds	r7, #36	; 0x24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	0800486c 	.word	0x0800486c
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	007a1200 	.word	0x007a1200

08002d18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000000 	.word	0x20000000

08002d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d34:	f7ff fff0 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d38:	4601      	mov	r1, r0
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d46:	5cd3      	ldrb	r3, [r2, r3]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	08004864 	.word	0x08004864

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d60:	f7ff ffda 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d64:	4601      	mov	r1, r0
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0adb      	lsrs	r3, r3, #11
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d72:	5cd3      	ldrb	r3, [r2, r3]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08004864 	.word	0x08004864

08002d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d94:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002da0:	f7ff f938 	bl	8002014 <HAL_PWREx_GetVoltageRange>
 8002da4:	6178      	str	r0, [r7, #20]
 8002da6:	e014      	b.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4a25      	ldr	r2, [pc, #148]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002daa:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db2:	6593      	str	r3, [r2, #88]	; 0x58
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dc0:	f7ff f928 	bl	8002014 <HAL_PWREx_GetVoltageRange>
 8002dc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dc6:	4a1e      	ldr	r2, [pc, #120]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd8:	d10b      	bne.n	8002df2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	d919      	bls.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2ba0      	cmp	r3, #160	; 0xa0
 8002de4:	d902      	bls.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002de6:	2302      	movs	r3, #2
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	e013      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dec:	2301      	movs	r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	e010      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b80      	cmp	r3, #128	; 0x80
 8002df6:	d902      	bls.n	8002dfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002df8:	2303      	movs	r3, #3
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	e00a      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b80      	cmp	r3, #128	; 0x80
 8002e02:	d102      	bne.n	8002e0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e04:	2302      	movs	r3, #2
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	e004      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b70      	cmp	r3, #112	; 0x70
 8002e0e:	d101      	bne.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e10:	2301      	movs	r3, #1
 8002e12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e14:	490b      	ldr	r1, [pc, #44]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 0207 	bic.w	r2, r3, #7
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e24:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0207 	and.w	r2, r3, #7
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d001      	beq.n	8002e36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40022000 	.word	0x40022000

08002e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e50:	2300      	movs	r3, #0
 8002e52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e54:	2300      	movs	r3, #0
 8002e56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d03f      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e6c:	d01c      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e72:	d802      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00e      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002e78:	e01f      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002e7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e7e:	d003      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002e80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e84:	d01c      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002e86:	e018      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e88:	4a85      	ldr	r2, [pc, #532]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e8a:	4b85      	ldr	r3, [pc, #532]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e92:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e94:	e015      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fac9 	bl	8003434 <RCCEx_PLLSAI1_Config>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ea6:	e00c      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3320      	adds	r3, #32
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fbb0 	bl	8003614 <RCCEx_PLLSAI2_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eb8:	e003      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	74fb      	strb	r3, [r7, #19]
      break;
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec2:	7cfb      	ldrb	r3, [r7, #19]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ec8:	4975      	ldr	r1, [pc, #468]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eca:	4b75      	ldr	r3, [pc, #468]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ede:	e001      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d03f      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef8:	d01c      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002efa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002efe:	d802      	bhi.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00e      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002f04:	e01f      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f0a:	d003      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002f0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f10:	d01c      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002f12:	e018      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f14:	4a62      	ldr	r2, [pc, #392]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f16:	4b62      	ldr	r3, [pc, #392]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f20:	e015      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fa83 	bl	8003434 <RCCEx_PLLSAI1_Config>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f32:	e00c      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3320      	adds	r3, #32
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fb6a 	bl	8003614 <RCCEx_PLLSAI2_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f44:	e003      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	74fb      	strb	r3, [r7, #19]
      break;
 8002f4a:	e000      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f54:	4952      	ldr	r1, [pc, #328]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f56:	4b52      	ldr	r3, [pc, #328]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f6a:	e001      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a0 	beq.w	80030be <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f82:	4b47      	ldr	r3, [pc, #284]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f98:	4a41      	ldr	r2, [pc, #260]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f9a:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa4:	4b3e      	ldr	r3, [pc, #248]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb4:	4a3b      	ldr	r2, [pc, #236]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002fb6:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe f97e 	bl	80012c0 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fc6:	e009      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc8:	f7fe f97a 	bl	80012c0 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d902      	bls.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	74fb      	strb	r3, [r7, #19]
        break;
 8002fda:	e005      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fdc:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ef      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002fe8:	7cfb      	ldrb	r3, [r7, #19]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d15c      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fee:	4b2c      	ldr	r3, [pc, #176]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01f      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	429a      	cmp	r2, r3
 800300a:	d019      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800300c:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003016:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003018:	4a21      	ldr	r2, [pc, #132]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800301a:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003038:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304a:	f7fe f939 	bl	80012c0 <HAL_GetTick>
 800304e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003050:	e00b      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7fe f935 	bl	80012c0 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d902      	bls.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	74fb      	strb	r3, [r7, #19]
            break;
 8003068:	e006      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0ec      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800307e:	4908      	ldr	r1, [pc, #32]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003096:	e009      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	74bb      	strb	r3, [r7, #18]
 800309c:	e006      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x264>
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a8:	7cfb      	ldrb	r3, [r7, #19]
 80030aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ac:	7c7b      	ldrb	r3, [r7, #17]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d105      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b2:	4a9e      	ldr	r2, [pc, #632]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030b4:	4b9d      	ldr	r3, [pc, #628]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ca:	4998      	ldr	r1, [pc, #608]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030cc:	4b97      	ldr	r3, [pc, #604]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f023 0203 	bic.w	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030ec:	498f      	ldr	r1, [pc, #572]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ee:	4b8f      	ldr	r3, [pc, #572]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	f023 020c 	bic.w	r2, r3, #12
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800310e:	4987      	ldr	r1, [pc, #540]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003110:	4b86      	ldr	r3, [pc, #536]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003116:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003130:	497e      	ldr	r1, [pc, #504]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003132:	4b7e      	ldr	r3, [pc, #504]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003138:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003152:	4976      	ldr	r1, [pc, #472]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003154:	4b75      	ldr	r3, [pc, #468]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003174:	496d      	ldr	r1, [pc, #436]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003176:	4b6d      	ldr	r3, [pc, #436]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003196:	4965      	ldr	r1, [pc, #404]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003198:	4b64      	ldr	r3, [pc, #400]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031b8:	495c      	ldr	r1, [pc, #368]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ba:	4b5c      	ldr	r3, [pc, #368]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031da:	4954      	ldr	r1, [pc, #336]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031dc:	4b53      	ldr	r3, [pc, #332]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031fc:	494b      	ldr	r1, [pc, #300]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031fe:	4b4b      	ldr	r3, [pc, #300]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800321e:	4943      	ldr	r1, [pc, #268]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003220:	4b42      	ldr	r3, [pc, #264]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d028      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003240:	493a      	ldr	r1, [pc, #232]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003242:	4b3a      	ldr	r3, [pc, #232]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003248:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800325a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800325e:	d106      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003260:	4a32      	ldr	r2, [pc, #200]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003262:	4b32      	ldr	r3, [pc, #200]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800326a:	60d3      	str	r3, [r2, #12]
 800326c:	e011      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003272:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003276:	d10c      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	2101      	movs	r1, #1
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f8d8 	bl	8003434 <RCCEx_PLLSAI1_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d028      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800329e:	4923      	ldr	r1, [pc, #140]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032a0:	4b22      	ldr	r3, [pc, #136]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032bc:	d106      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032be:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032c8:	60d3      	str	r3, [r2, #12]
 80032ca:	e011      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3304      	adds	r3, #4
 80032da:	2101      	movs	r1, #1
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 f8a9 	bl	8003434 <RCCEx_PLLSAI1_Config>
 80032e2:	4603      	mov	r3, r0
 80032e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032e6:	7cfb      	ldrb	r3, [r7, #19]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d02b      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032fc:	490b      	ldr	r1, [pc, #44]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800331a:	d109      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800331c:	4a03      	ldr	r2, [pc, #12]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800331e:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003326:	60d3      	str	r3, [r2, #12]
 8003328:	e014      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003338:	d10c      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3304      	adds	r3, #4
 800333e:	2101      	movs	r1, #1
 8003340:	4618      	mov	r0, r3
 8003342:	f000 f877 	bl	8003434 <RCCEx_PLLSAI1_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800334a:	7cfb      	ldrb	r3, [r7, #19]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003350:	7cfb      	ldrb	r3, [r7, #19]
 8003352:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d02f      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003360:	492b      	ldr	r1, [pc, #172]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003362:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800337a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800337e:	d10d      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3304      	adds	r3, #4
 8003384:	2102      	movs	r1, #2
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f854 	bl	8003434 <RCCEx_PLLSAI1_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d014      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	74bb      	strb	r3, [r7, #18]
 800339a:	e011      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3320      	adds	r3, #32
 80033aa:	2102      	movs	r1, #2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 f931 	bl	8003614 <RCCEx_PLLSAI2_Config>
 80033b2:	4603      	mov	r3, r0
 80033b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b6:	7cfb      	ldrb	r3, [r7, #19]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033cc:	4910      	ldr	r1, [pc, #64]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033ee:	4908      	ldr	r1, [pc, #32]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033f0:	4b07      	ldr	r3, [pc, #28]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003406:	7cbb      	ldrb	r3, [r7, #18]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000

08003414 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003418:	4a05      	ldr	r2, [pc, #20]	; (8003430 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	6013      	str	r3, [r2, #0]
}
 8003424:	bf00      	nop
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000

08003434 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003442:	4b73      	ldr	r3, [pc, #460]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d018      	beq.n	8003480 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800344e:	4b70      	ldr	r3, [pc, #448]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f003 0203 	and.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d10d      	bne.n	800347a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
       ||
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003466:	4b6a      	ldr	r3, [pc, #424]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
       ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d044      	beq.n	8003504 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
 800347e:	e041      	b.n	8003504 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d00c      	beq.n	80034a2 <RCCEx_PLLSAI1_Config+0x6e>
 8003488:	2b03      	cmp	r3, #3
 800348a:	d013      	beq.n	80034b4 <RCCEx_PLLSAI1_Config+0x80>
 800348c:	2b01      	cmp	r3, #1
 800348e:	d120      	bne.n	80034d2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003490:	4b5f      	ldr	r3, [pc, #380]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d11d      	bne.n	80034d8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a0:	e01a      	b.n	80034d8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034a2:	4b5b      	ldr	r3, [pc, #364]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d116      	bne.n	80034dc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034b2:	e013      	b.n	80034dc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034b4:	4b56      	ldr	r3, [pc, #344]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10f      	bne.n	80034e0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034c0:	4b53      	ldr	r3, [pc, #332]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d109      	bne.n	80034e0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034d0:	e006      	b.n	80034e0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
      break;
 80034d6:	e004      	b.n	80034e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80034d8:	bf00      	nop
 80034da:	e002      	b.n	80034e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80034dc:	bf00      	nop
 80034de:	e000      	b.n	80034e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80034e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10d      	bne.n	8003504 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034e8:	4849      	ldr	r0, [pc, #292]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ea:	4b49      	ldr	r3, [pc, #292]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6819      	ldr	r1, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	430b      	orrs	r3, r1
 8003500:	4313      	orrs	r3, r2
 8003502:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d17d      	bne.n	8003606 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800350a:	4a41      	ldr	r2, [pc, #260]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800350c:	4b40      	ldr	r3, [pc, #256]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003516:	f7fd fed3 	bl	80012c0 <HAL_GetTick>
 800351a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800351c:	e009      	b.n	8003532 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800351e:	f7fd fecf 	bl	80012c0 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d902      	bls.n	8003532 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	73fb      	strb	r3, [r7, #15]
        break;
 8003530:	e005      	b.n	800353e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003532:	4b37      	ldr	r3, [pc, #220]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1ef      	bne.n	800351e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d160      	bne.n	8003606 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d111      	bne.n	800356e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800354a:	4831      	ldr	r0, [pc, #196]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800354c:	4b30      	ldr	r3, [pc, #192]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6892      	ldr	r2, [r2, #8]
 800355c:	0211      	lsls	r1, r2, #8
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68d2      	ldr	r2, [r2, #12]
 8003562:	0912      	lsrs	r2, r2, #4
 8003564:	0452      	lsls	r2, r2, #17
 8003566:	430a      	orrs	r2, r1
 8003568:	4313      	orrs	r3, r2
 800356a:	6103      	str	r3, [r0, #16]
 800356c:	e027      	b.n	80035be <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d112      	bne.n	800359a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003574:	4826      	ldr	r0, [pc, #152]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003576:	4b26      	ldr	r3, [pc, #152]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800357e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6892      	ldr	r2, [r2, #8]
 8003586:	0211      	lsls	r1, r2, #8
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6912      	ldr	r2, [r2, #16]
 800358c:	0852      	lsrs	r2, r2, #1
 800358e:	3a01      	subs	r2, #1
 8003590:	0552      	lsls	r2, r2, #21
 8003592:	430a      	orrs	r2, r1
 8003594:	4313      	orrs	r3, r2
 8003596:	6103      	str	r3, [r0, #16]
 8003598:	e011      	b.n	80035be <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800359a:	481d      	ldr	r0, [pc, #116]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800359c:	4b1c      	ldr	r3, [pc, #112]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6892      	ldr	r2, [r2, #8]
 80035ac:	0211      	lsls	r1, r2, #8
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6952      	ldr	r2, [r2, #20]
 80035b2:	0852      	lsrs	r2, r2, #1
 80035b4:	3a01      	subs	r2, #1
 80035b6:	0652      	lsls	r2, r2, #25
 80035b8:	430a      	orrs	r2, r1
 80035ba:	4313      	orrs	r3, r2
 80035bc:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035be:	4a14      	ldr	r2, [pc, #80]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c0:	4b13      	ldr	r3, [pc, #76]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ca:	f7fd fe79 	bl	80012c0 <HAL_GetTick>
 80035ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035d0:	e009      	b.n	80035e6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035d2:	f7fd fe75 	bl	80012c0 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d902      	bls.n	80035e6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	73fb      	strb	r3, [r7, #15]
          break;
 80035e4:	e005      	b.n	80035f2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0ef      	beq.n	80035d2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d106      	bne.n	8003606 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035f8:	4905      	ldr	r1, [pc, #20]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40021000 	.word	0x40021000

08003614 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003622:	4b68      	ldr	r3, [pc, #416]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d018      	beq.n	8003660 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800362e:	4b65      	ldr	r3, [pc, #404]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f003 0203 	and.w	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d10d      	bne.n	800365a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
       ||
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003646:	4b5f      	ldr	r3, [pc, #380]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
       ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d044      	beq.n	80036e4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
 800365e:	e041      	b.n	80036e4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d00c      	beq.n	8003682 <RCCEx_PLLSAI2_Config+0x6e>
 8003668:	2b03      	cmp	r3, #3
 800366a:	d013      	beq.n	8003694 <RCCEx_PLLSAI2_Config+0x80>
 800366c:	2b01      	cmp	r3, #1
 800366e:	d120      	bne.n	80036b2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003670:	4b54      	ldr	r3, [pc, #336]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d11d      	bne.n	80036b8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003680:	e01a      	b.n	80036b8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003682:	4b50      	ldr	r3, [pc, #320]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368a:	2b00      	cmp	r3, #0
 800368c:	d116      	bne.n	80036bc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003692:	e013      	b.n	80036bc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003694:	4b4b      	ldr	r3, [pc, #300]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10f      	bne.n	80036c0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036a0:	4b48      	ldr	r3, [pc, #288]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d109      	bne.n	80036c0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036b0:	e006      	b.n	80036c0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      break;
 80036b6:	e004      	b.n	80036c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036b8:	bf00      	nop
 80036ba:	e002      	b.n	80036c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036bc:	bf00      	nop
 80036be:	e000      	b.n	80036c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10d      	bne.n	80036e4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036c8:	483e      	ldr	r0, [pc, #248]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ca:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6819      	ldr	r1, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	430b      	orrs	r3, r1
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d167      	bne.n	80037ba <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036ea:	4a36      	ldr	r2, [pc, #216]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ec:	4b35      	ldr	r3, [pc, #212]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f6:	f7fd fde3 	bl	80012c0 <HAL_GetTick>
 80036fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036fc:	e009      	b.n	8003712 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036fe:	f7fd fddf 	bl	80012c0 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d902      	bls.n	8003712 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	73fb      	strb	r3, [r7, #15]
        break;
 8003710:	e005      	b.n	800371e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003712:	4b2c      	ldr	r3, [pc, #176]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1ef      	bne.n	80036fe <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d14a      	bne.n	80037ba <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d111      	bne.n	800374e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800372a:	4826      	ldr	r0, [pc, #152]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800372c:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6892      	ldr	r2, [r2, #8]
 800373c:	0211      	lsls	r1, r2, #8
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68d2      	ldr	r2, [r2, #12]
 8003742:	0912      	lsrs	r2, r2, #4
 8003744:	0452      	lsls	r2, r2, #17
 8003746:	430a      	orrs	r2, r1
 8003748:	4313      	orrs	r3, r2
 800374a:	6143      	str	r3, [r0, #20]
 800374c:	e011      	b.n	8003772 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800374e:	481d      	ldr	r0, [pc, #116]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003750:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003758:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6892      	ldr	r2, [r2, #8]
 8003760:	0211      	lsls	r1, r2, #8
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6912      	ldr	r2, [r2, #16]
 8003766:	0852      	lsrs	r2, r2, #1
 8003768:	3a01      	subs	r2, #1
 800376a:	0652      	lsls	r2, r2, #25
 800376c:	430a      	orrs	r2, r1
 800376e:	4313      	orrs	r3, r2
 8003770:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003772:	4a14      	ldr	r2, [pc, #80]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003774:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377e:	f7fd fd9f 	bl	80012c0 <HAL_GetTick>
 8003782:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003784:	e009      	b.n	800379a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003786:	f7fd fd9b 	bl	80012c0 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d902      	bls.n	800379a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	73fb      	strb	r3, [r7, #15]
          break;
 8003798:	e005      	b.n	80037a6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0ef      	beq.n	8003786 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d106      	bne.n	80037ba <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037ac:	4905      	ldr	r1, [pc, #20]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000

080037c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e093      	b.n	8003902 <HAL_SPI_Init+0x13a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d108      	bne.n	80037f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ea:	d009      	beq.n	8003800 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	61da      	str	r2, [r3, #28]
 80037f2:	e005      	b.n	8003800 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd fb3c 	bl	8000e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003836:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003840:	d902      	bls.n	8003848 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	e002      	b.n	800384e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800384c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003856:	d007      	beq.n	8003868 <HAL_SPI_Init+0xa0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003860:	d002      	beq.n	8003868 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6852      	ldr	r2, [r2, #4]
 8003870:	f402 7182 	and.w	r1, r2, #260	; 0x104
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6892      	ldr	r2, [r2, #8]
 8003878:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800387c:	4311      	orrs	r1, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6912      	ldr	r2, [r2, #16]
 8003882:	f002 0202 	and.w	r2, r2, #2
 8003886:	4311      	orrs	r1, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6952      	ldr	r2, [r2, #20]
 800388c:	f002 0201 	and.w	r2, r2, #1
 8003890:	4311      	orrs	r1, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6992      	ldr	r2, [r2, #24]
 8003896:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800389a:	4311      	orrs	r1, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	69d2      	ldr	r2, [r2, #28]
 80038a0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80038a4:	4311      	orrs	r1, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6a12      	ldr	r2, [r2, #32]
 80038aa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80038ae:	4311      	orrs	r1, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80038b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80038b8:	430a      	orrs	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6992      	ldr	r2, [r2, #24]
 80038c4:	0c12      	lsrs	r2, r2, #16
 80038c6:	f002 0104 	and.w	r1, r2, #4
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ce:	f002 0210 	and.w	r2, r2, #16
 80038d2:	4311      	orrs	r1, r2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038d8:	f002 0208 	and.w	r2, r2, #8
 80038dc:	4311      	orrs	r1, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68d2      	ldr	r2, [r2, #12]
 80038e2:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80038e6:	4311      	orrs	r1, r2
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e040      	b.n	800399e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003920:	2b00      	cmp	r3, #0
 8003922:	d106      	bne.n	8003932 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7fd faf7 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2224      	movs	r2, #36	; 0x24
 8003936:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f8c1 	bl	8003ad0 <UART_SetConfig>
 800394e:	4603      	mov	r3, r0
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e022      	b.n	800399e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fb39 	bl	8003fd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	6852      	ldr	r2, [r2, #4]
 8003970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003974:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	6892      	ldr	r2, [r2, #8]
 8003980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003984:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fbc0 	bl	800411c <UART_CheckIdleState>
 800399c:	4603      	mov	r3, r0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b08a      	sub	sp, #40	; 0x28
 80039aa:	af02      	add	r7, sp, #8
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	4613      	mov	r3, r2
 80039b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	f040 8082 	bne.w	8003ac4 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_UART_Transmit+0x26>
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e07a      	b.n	8003ac6 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_UART_Transmit+0x38>
 80039da:	2302      	movs	r3, #2
 80039dc:	e073      	b.n	8003ac6 <HAL_UART_Transmit+0x120>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2221      	movs	r2, #33	; 0x21
 80039f2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039f4:	f7fd fc64 	bl	80012c0 <HAL_GetTick>
 80039f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	88fa      	ldrh	r2, [r7, #6]
 80039fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	88fa      	ldrh	r2, [r7, #6]
 8003a06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a12:	d108      	bne.n	8003a26 <HAL_UART_Transmit+0x80>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d104      	bne.n	8003a26 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	e003      	b.n	8003a2e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003a36:	e02d      	b.n	8003a94 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 fbb3 	bl	80041ae <UART_WaitOnFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e039      	b.n	8003ac6 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	8812      	ldrh	r2, [r2, #0]
 8003a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a64:	b292      	uxth	r2, r2
 8003a66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	e008      	b.n	8003a82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	7812      	ldrb	r2, [r2, #0]
 8003a78:	b292      	uxth	r2, r2
 8003a7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1cb      	bne.n	8003a38 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2140      	movs	r1, #64	; 0x40
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fb7f 	bl	80041ae <UART_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e005      	b.n	8003ac6 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
  }
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad0:	b5b0      	push	{r4, r5, r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6819      	ldr	r1, [r3, #0]
 8003afe:	4bac      	ldr	r3, [pc, #688]	; (8003db0 <UART_SetConfig+0x2e0>)
 8003b00:	400b      	ands	r3, r1
 8003b02:	69f9      	ldr	r1, [r7, #28]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	6852      	ldr	r2, [r2, #4]
 8003b12:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68d2      	ldr	r2, [r2, #12]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4aa2      	ldr	r2, [pc, #648]	; (8003db4 <UART_SetConfig+0x2e4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	6892      	ldr	r2, [r2, #8]
 8003b42:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a99      	ldr	r2, [pc, #612]	; (8003db8 <UART_SetConfig+0x2e8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d122      	bne.n	8003b9c <UART_SetConfig+0xcc>
 8003b56:	4b99      	ldr	r3, [pc, #612]	; (8003dbc <UART_SetConfig+0x2ec>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d817      	bhi.n	8003b94 <UART_SetConfig+0xc4>
 8003b64:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <UART_SetConfig+0x9c>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003b7d 	.word	0x08003b7d
 8003b70:	08003b89 	.word	0x08003b89
 8003b74:	08003b83 	.word	0x08003b83
 8003b78:	08003b8f 	.word	0x08003b8f
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	76fb      	strb	r3, [r7, #27]
 8003b80:	e0e8      	b.n	8003d54 <UART_SetConfig+0x284>
 8003b82:	2302      	movs	r3, #2
 8003b84:	76fb      	strb	r3, [r7, #27]
 8003b86:	e0e5      	b.n	8003d54 <UART_SetConfig+0x284>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	76fb      	strb	r3, [r7, #27]
 8003b8c:	e0e2      	b.n	8003d54 <UART_SetConfig+0x284>
 8003b8e:	2308      	movs	r3, #8
 8003b90:	76fb      	strb	r3, [r7, #27]
 8003b92:	e0df      	b.n	8003d54 <UART_SetConfig+0x284>
 8003b94:	2310      	movs	r3, #16
 8003b96:	76fb      	strb	r3, [r7, #27]
 8003b98:	bf00      	nop
 8003b9a:	e0db      	b.n	8003d54 <UART_SetConfig+0x284>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a87      	ldr	r2, [pc, #540]	; (8003dc0 <UART_SetConfig+0x2f0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d134      	bne.n	8003c10 <UART_SetConfig+0x140>
 8003ba6:	4b85      	ldr	r3, [pc, #532]	; (8003dbc <UART_SetConfig+0x2ec>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	f003 030c 	and.w	r3, r3, #12
 8003bb0:	2b0c      	cmp	r3, #12
 8003bb2:	d829      	bhi.n	8003c08 <UART_SetConfig+0x138>
 8003bb4:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <UART_SetConfig+0xec>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003bf1 	.word	0x08003bf1
 8003bc0:	08003c09 	.word	0x08003c09
 8003bc4:	08003c09 	.word	0x08003c09
 8003bc8:	08003c09 	.word	0x08003c09
 8003bcc:	08003bfd 	.word	0x08003bfd
 8003bd0:	08003c09 	.word	0x08003c09
 8003bd4:	08003c09 	.word	0x08003c09
 8003bd8:	08003c09 	.word	0x08003c09
 8003bdc:	08003bf7 	.word	0x08003bf7
 8003be0:	08003c09 	.word	0x08003c09
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003c09 	.word	0x08003c09
 8003bec:	08003c03 	.word	0x08003c03
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	76fb      	strb	r3, [r7, #27]
 8003bf4:	e0ae      	b.n	8003d54 <UART_SetConfig+0x284>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	76fb      	strb	r3, [r7, #27]
 8003bfa:	e0ab      	b.n	8003d54 <UART_SetConfig+0x284>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	76fb      	strb	r3, [r7, #27]
 8003c00:	e0a8      	b.n	8003d54 <UART_SetConfig+0x284>
 8003c02:	2308      	movs	r3, #8
 8003c04:	76fb      	strb	r3, [r7, #27]
 8003c06:	e0a5      	b.n	8003d54 <UART_SetConfig+0x284>
 8003c08:	2310      	movs	r3, #16
 8003c0a:	76fb      	strb	r3, [r7, #27]
 8003c0c:	bf00      	nop
 8003c0e:	e0a1      	b.n	8003d54 <UART_SetConfig+0x284>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a6b      	ldr	r2, [pc, #428]	; (8003dc4 <UART_SetConfig+0x2f4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d120      	bne.n	8003c5c <UART_SetConfig+0x18c>
 8003c1a:	4b68      	ldr	r3, [pc, #416]	; (8003dbc <UART_SetConfig+0x2ec>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c24:	2b10      	cmp	r3, #16
 8003c26:	d00f      	beq.n	8003c48 <UART_SetConfig+0x178>
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d802      	bhi.n	8003c32 <UART_SetConfig+0x162>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <UART_SetConfig+0x16c>
 8003c30:	e010      	b.n	8003c54 <UART_SetConfig+0x184>
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d005      	beq.n	8003c42 <UART_SetConfig+0x172>
 8003c36:	2b30      	cmp	r3, #48	; 0x30
 8003c38:	d009      	beq.n	8003c4e <UART_SetConfig+0x17e>
 8003c3a:	e00b      	b.n	8003c54 <UART_SetConfig+0x184>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	76fb      	strb	r3, [r7, #27]
 8003c40:	e088      	b.n	8003d54 <UART_SetConfig+0x284>
 8003c42:	2302      	movs	r3, #2
 8003c44:	76fb      	strb	r3, [r7, #27]
 8003c46:	e085      	b.n	8003d54 <UART_SetConfig+0x284>
 8003c48:	2304      	movs	r3, #4
 8003c4a:	76fb      	strb	r3, [r7, #27]
 8003c4c:	e082      	b.n	8003d54 <UART_SetConfig+0x284>
 8003c4e:	2308      	movs	r3, #8
 8003c50:	76fb      	strb	r3, [r7, #27]
 8003c52:	e07f      	b.n	8003d54 <UART_SetConfig+0x284>
 8003c54:	2310      	movs	r3, #16
 8003c56:	76fb      	strb	r3, [r7, #27]
 8003c58:	bf00      	nop
 8003c5a:	e07b      	b.n	8003d54 <UART_SetConfig+0x284>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a59      	ldr	r2, [pc, #356]	; (8003dc8 <UART_SetConfig+0x2f8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d120      	bne.n	8003ca8 <UART_SetConfig+0x1d8>
 8003c66:	4b55      	ldr	r3, [pc, #340]	; (8003dbc <UART_SetConfig+0x2ec>)
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d00f      	beq.n	8003c94 <UART_SetConfig+0x1c4>
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d802      	bhi.n	8003c7e <UART_SetConfig+0x1ae>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <UART_SetConfig+0x1b8>
 8003c7c:	e010      	b.n	8003ca0 <UART_SetConfig+0x1d0>
 8003c7e:	2b80      	cmp	r3, #128	; 0x80
 8003c80:	d005      	beq.n	8003c8e <UART_SetConfig+0x1be>
 8003c82:	2bc0      	cmp	r3, #192	; 0xc0
 8003c84:	d009      	beq.n	8003c9a <UART_SetConfig+0x1ca>
 8003c86:	e00b      	b.n	8003ca0 <UART_SetConfig+0x1d0>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	76fb      	strb	r3, [r7, #27]
 8003c8c:	e062      	b.n	8003d54 <UART_SetConfig+0x284>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	76fb      	strb	r3, [r7, #27]
 8003c92:	e05f      	b.n	8003d54 <UART_SetConfig+0x284>
 8003c94:	2304      	movs	r3, #4
 8003c96:	76fb      	strb	r3, [r7, #27]
 8003c98:	e05c      	b.n	8003d54 <UART_SetConfig+0x284>
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	76fb      	strb	r3, [r7, #27]
 8003c9e:	e059      	b.n	8003d54 <UART_SetConfig+0x284>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	76fb      	strb	r3, [r7, #27]
 8003ca4:	bf00      	nop
 8003ca6:	e055      	b.n	8003d54 <UART_SetConfig+0x284>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a47      	ldr	r2, [pc, #284]	; (8003dcc <UART_SetConfig+0x2fc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d124      	bne.n	8003cfc <UART_SetConfig+0x22c>
 8003cb2:	4b42      	ldr	r3, [pc, #264]	; (8003dbc <UART_SetConfig+0x2ec>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc0:	d012      	beq.n	8003ce8 <UART_SetConfig+0x218>
 8003cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc6:	d802      	bhi.n	8003cce <UART_SetConfig+0x1fe>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <UART_SetConfig+0x20c>
 8003ccc:	e012      	b.n	8003cf4 <UART_SetConfig+0x224>
 8003cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd2:	d006      	beq.n	8003ce2 <UART_SetConfig+0x212>
 8003cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cd8:	d009      	beq.n	8003cee <UART_SetConfig+0x21e>
 8003cda:	e00b      	b.n	8003cf4 <UART_SetConfig+0x224>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	76fb      	strb	r3, [r7, #27]
 8003ce0:	e038      	b.n	8003d54 <UART_SetConfig+0x284>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	76fb      	strb	r3, [r7, #27]
 8003ce6:	e035      	b.n	8003d54 <UART_SetConfig+0x284>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	76fb      	strb	r3, [r7, #27]
 8003cec:	e032      	b.n	8003d54 <UART_SetConfig+0x284>
 8003cee:	2308      	movs	r3, #8
 8003cf0:	76fb      	strb	r3, [r7, #27]
 8003cf2:	e02f      	b.n	8003d54 <UART_SetConfig+0x284>
 8003cf4:	2310      	movs	r3, #16
 8003cf6:	76fb      	strb	r3, [r7, #27]
 8003cf8:	bf00      	nop
 8003cfa:	e02b      	b.n	8003d54 <UART_SetConfig+0x284>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a2c      	ldr	r2, [pc, #176]	; (8003db4 <UART_SetConfig+0x2e4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d124      	bne.n	8003d50 <UART_SetConfig+0x280>
 8003d06:	4b2d      	ldr	r3, [pc, #180]	; (8003dbc <UART_SetConfig+0x2ec>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d14:	d012      	beq.n	8003d3c <UART_SetConfig+0x26c>
 8003d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1a:	d802      	bhi.n	8003d22 <UART_SetConfig+0x252>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <UART_SetConfig+0x260>
 8003d20:	e012      	b.n	8003d48 <UART_SetConfig+0x278>
 8003d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d26:	d006      	beq.n	8003d36 <UART_SetConfig+0x266>
 8003d28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d2c:	d009      	beq.n	8003d42 <UART_SetConfig+0x272>
 8003d2e:	e00b      	b.n	8003d48 <UART_SetConfig+0x278>
 8003d30:	2300      	movs	r3, #0
 8003d32:	76fb      	strb	r3, [r7, #27]
 8003d34:	e00e      	b.n	8003d54 <UART_SetConfig+0x284>
 8003d36:	2302      	movs	r3, #2
 8003d38:	76fb      	strb	r3, [r7, #27]
 8003d3a:	e00b      	b.n	8003d54 <UART_SetConfig+0x284>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	76fb      	strb	r3, [r7, #27]
 8003d40:	e008      	b.n	8003d54 <UART_SetConfig+0x284>
 8003d42:	2308      	movs	r3, #8
 8003d44:	76fb      	strb	r3, [r7, #27]
 8003d46:	e005      	b.n	8003d54 <UART_SetConfig+0x284>
 8003d48:	2310      	movs	r3, #16
 8003d4a:	76fb      	strb	r3, [r7, #27]
 8003d4c:	bf00      	nop
 8003d4e:	e001      	b.n	8003d54 <UART_SetConfig+0x284>
 8003d50:	2310      	movs	r3, #16
 8003d52:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a16      	ldr	r2, [pc, #88]	; (8003db4 <UART_SetConfig+0x2e4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	f040 8080 	bne.w	8003e60 <UART_SetConfig+0x390>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d60:	7efb      	ldrb	r3, [r7, #27]
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d836      	bhi.n	8003dd4 <UART_SetConfig+0x304>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <UART_SetConfig+0x29c>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d91 	.word	0x08003d91
 8003d70:	08003dd5 	.word	0x08003dd5
 8003d74:	08003d99 	.word	0x08003d99
 8003d78:	08003dd5 	.word	0x08003dd5
 8003d7c:	08003d9f 	.word	0x08003d9f
 8003d80:	08003dd5 	.word	0x08003dd5
 8003d84:	08003dd5 	.word	0x08003dd5
 8003d88:	08003dd5 	.word	0x08003dd5
 8003d8c:	08003da7 	.word	0x08003da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d90:	f7fe ffce 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8003d94:	6178      	str	r0, [r7, #20]
        break;
 8003d96:	e022      	b.n	8003dde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d98:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <UART_SetConfig+0x300>)
 8003d9a:	617b      	str	r3, [r7, #20]
        break;
 8003d9c:	e01f      	b.n	8003dde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9e:	f7fe ff31 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8003da2:	6178      	str	r0, [r7, #20]
        break;
 8003da4:	e01b      	b.n	8003dde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003daa:	617b      	str	r3, [r7, #20]
        break;
 8003dac:	e017      	b.n	8003dde <UART_SetConfig+0x30e>
 8003dae:	bf00      	nop
 8003db0:	efff69f3 	.word	0xefff69f3
 8003db4:	40008000 	.word	0x40008000
 8003db8:	40013800 	.word	0x40013800
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40004400 	.word	0x40004400
 8003dc4:	40004800 	.word	0x40004800
 8003dc8:	40004c00 	.word	0x40004c00
 8003dcc:	40005000 	.word	0x40005000
 8003dd0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	76bb      	strb	r3, [r7, #26]
        break;
 8003ddc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80eb 	beq.w	8003fbc <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	441a      	add	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d805      	bhi.n	8003e02 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d202      	bcs.n	8003e08 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	76bb      	strb	r3, [r7, #26]
 8003e06:	e0d9      	b.n	8003fbc <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	021d      	lsls	r5, r3, #8
 8003e12:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8003e16:	0214      	lsls	r4, r2, #8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	18a0      	adds	r0, r4, r2
 8003e26:	eb45 0103 	adc.w	r1, r5, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f04f 0400 	mov.w	r4, #0
 8003e32:	461a      	mov	r2, r3
 8003e34:	4623      	mov	r3, r4
 8003e36:	f7fc f9c7 	bl	80001c8 <__aeabi_uldivmod>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e46:	d308      	bcc.n	8003e5a <UART_SetConfig+0x38a>
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e4e:	d204      	bcs.n	8003e5a <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	60da      	str	r2, [r3, #12]
 8003e58:	e0b0      	b.n	8003fbc <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	76bb      	strb	r3, [r7, #26]
 8003e5e:	e0ad      	b.n	8003fbc <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e68:	d15c      	bne.n	8003f24 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 8003e6a:	7efb      	ldrb	r3, [r7, #27]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d828      	bhi.n	8003ec2 <UART_SetConfig+0x3f2>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <UART_SetConfig+0x3a8>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e9d 	.word	0x08003e9d
 8003e7c:	08003ea5 	.word	0x08003ea5
 8003e80:	08003ead 	.word	0x08003ead
 8003e84:	08003ec3 	.word	0x08003ec3
 8003e88:	08003eb3 	.word	0x08003eb3
 8003e8c:	08003ec3 	.word	0x08003ec3
 8003e90:	08003ec3 	.word	0x08003ec3
 8003e94:	08003ec3 	.word	0x08003ec3
 8003e98:	08003ebb 	.word	0x08003ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f7fe ff48 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8003ea0:	6178      	str	r0, [r7, #20]
        break;
 8003ea2:	e013      	b.n	8003ecc <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea4:	f7fe ff5a 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8003ea8:	6178      	str	r0, [r7, #20]
        break;
 8003eaa:	e00f      	b.n	8003ecc <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eac:	4b49      	ldr	r3, [pc, #292]	; (8003fd4 <UART_SetConfig+0x504>)
 8003eae:	617b      	str	r3, [r7, #20]
        break;
 8003eb0:	e00c      	b.n	8003ecc <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb2:	f7fe fea7 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8003eb6:	6178      	str	r0, [r7, #20]
        break;
 8003eb8:	e008      	b.n	8003ecc <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ebe:	617b      	str	r3, [r7, #20]
        break;
 8003ec0:	e004      	b.n	8003ecc <UART_SetConfig+0x3fc>
      default:
        pclk = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	76bb      	strb	r3, [r7, #26]
        break;
 8003eca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d074      	beq.n	8003fbc <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	005a      	lsls	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	085b      	lsrs	r3, r3, #1
 8003edc:	441a      	add	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b0f      	cmp	r3, #15
 8003eee:	d916      	bls.n	8003f1e <UART_SetConfig+0x44e>
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef6:	d212      	bcs.n	8003f1e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	f023 030f 	bic.w	r3, r3, #15
 8003f00:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	89fb      	ldrh	r3, [r7, #14]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	89fa      	ldrh	r2, [r7, #14]
 8003f1a:	60da      	str	r2, [r3, #12]
 8003f1c:	e04e      	b.n	8003fbc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	76bb      	strb	r3, [r7, #26]
 8003f22:	e04b      	b.n	8003fbc <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f24:	7efb      	ldrb	r3, [r7, #27]
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d827      	bhi.n	8003f7a <UART_SetConfig+0x4aa>
 8003f2a:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <UART_SetConfig+0x460>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08003f5d 	.word	0x08003f5d
 8003f38:	08003f65 	.word	0x08003f65
 8003f3c:	08003f7b 	.word	0x08003f7b
 8003f40:	08003f6b 	.word	0x08003f6b
 8003f44:	08003f7b 	.word	0x08003f7b
 8003f48:	08003f7b 	.word	0x08003f7b
 8003f4c:	08003f7b 	.word	0x08003f7b
 8003f50:	08003f73 	.word	0x08003f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f54:	f7fe feec 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8003f58:	6178      	str	r0, [r7, #20]
        break;
 8003f5a:	e013      	b.n	8003f84 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f5c:	f7fe fefe 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8003f60:	6178      	str	r0, [r7, #20]
        break;
 8003f62:	e00f      	b.n	8003f84 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <UART_SetConfig+0x504>)
 8003f66:	617b      	str	r3, [r7, #20]
        break;
 8003f68:	e00c      	b.n	8003f84 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6a:	f7fe fe4b 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8003f6e:	6178      	str	r0, [r7, #20]
        break;
 8003f70:	e008      	b.n	8003f84 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f76:	617b      	str	r3, [r7, #20]
        break;
 8003f78:	e004      	b.n	8003f84 <UART_SetConfig+0x4b4>
      default:
        pclk = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	76bb      	strb	r3, [r7, #26]
        break;
 8003f82:	bf00      	nop
    }

    if (pclk != 0U)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d018      	beq.n	8003fbc <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	085a      	lsrs	r2, r3, #1
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	441a      	add	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b0f      	cmp	r3, #15
 8003fa4:	d908      	bls.n	8003fb8 <UART_SetConfig+0x4e8>
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fac:	d204      	bcs.n	8003fb8 <UART_SetConfig+0x4e8>
      {
        huart->Instance->BRR = usartdiv;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	e001      	b.n	8003fbc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003fc8:	7ebb      	ldrb	r3, [r7, #26]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	00f42400 	.word	0x00f42400

08003fd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	6852      	ldr	r2, [r2, #4]
 8003ff6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6812      	ldr	r2, [r2, #0]
 8004016:	6852      	ldr	r2, [r2, #4]
 8004018:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	6852      	ldr	r2, [r2, #4]
 800403a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	6852      	ldr	r2, [r2, #4]
 800405c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004064:	430a      	orrs	r2, r1
 8004066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	6892      	ldr	r2, [r2, #8]
 800407e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004086:	430a      	orrs	r2, r1
 8004088:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	6892      	ldr	r2, [r2, #8]
 80040a0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040a8:	430a      	orrs	r2, r1
 80040aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01a      	beq.n	80040ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	6852      	ldr	r2, [r2, #4]
 80040c2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d6:	d10a      	bne.n	80040ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	6852      	ldr	r2, [r2, #4]
 80040e2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	6852      	ldr	r2, [r2, #4]
 8004104:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]
  }
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af02      	add	r7, sp, #8
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800412c:	f7fd f8c8 	bl	80012c0 <HAL_GetTick>
 8004130:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b08      	cmp	r3, #8
 800413e:	d10e      	bne.n	800415e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004140:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f82d 	bl	80041ae <UART_WaitOnFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e023      	b.n	80041a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b04      	cmp	r3, #4
 800416a:	d10e      	bne.n	800418a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f817 	bl	80041ae <UART_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e00d      	b.n	80041a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	4613      	mov	r3, r2
 80041bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041be:	e05e      	b.n	800427e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041c6:	d05a      	beq.n	800427e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c8:	f7fd f87a 	bl	80012c0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	1ad2      	subs	r2, r2, r3
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d802      	bhi.n	80041de <UART_WaitOnFlagUntilTimeout+0x30>
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d11b      	bne.n	8004216 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041ec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	6892      	ldr	r2, [r2, #8]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e043      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d02c      	beq.n	800427e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004232:	d124      	bne.n	800427e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800423c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800424c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	6892      	ldr	r2, [r2, #8]
 8004258:	f022 0201 	bic.w	r2, r2, #1
 800425c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e00f      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	401a      	ands	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	429a      	cmp	r2, r3
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	429a      	cmp	r2, r3
 800429a:	d091      	beq.n	80041c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042a6:	b084      	sub	sp, #16
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	f107 001c 	add.w	r0, r7, #28
 80042b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fa27 	bl	8004718 <USB_CoreReset>
 80042ca:	4603      	mov	r3, r0
 80042cc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80042ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d106      	bne.n	80042e2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	639a      	str	r2, [r3, #56]	; 0x38
 80042e0:	e005      	b.n	80042ee <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042fa:	b004      	add	sp, #16
 80042fc:	4770      	bx	lr

080042fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f023 0201 	bic.w	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d106      	bne.n	800434c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60da      	str	r2, [r3, #12]
 800434a:	e00b      	b.n	8004364 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	e001      	b.n	8004364 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e003      	b.n	800436c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004364:	2032      	movs	r0, #50	; 0x32
 8004366:	f7fc ffb7 	bl	80012d8 <HAL_Delay>

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004374:	b084      	sub	sp, #16
 8004376:	b580      	push	{r7, lr}
 8004378:	b086      	sub	sp, #24
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	e009      	b.n	80043a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	3340      	adds	r3, #64	; 0x40
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	2200      	movs	r2, #0
 80043a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	3301      	adds	r3, #1
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b0e      	cmp	r3, #14
 80043ac:	d9f2      	bls.n	8004394 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d11d      	bne.n	80043f0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ba:	461a      	mov	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f043 0302 	orr.w	r3, r3, #2
 80043c8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	e005      	b.n	80043fc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004402:	461a      	mov	r2, r3
 8004404:	2300      	movs	r3, #0
 8004406:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440e:	461a      	mov	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800441a:	2103      	movs	r1, #3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f93d 	bl	800469c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004422:	2110      	movs	r1, #16
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f8f1 	bl	800460c <USB_FlushTxFifo>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f90f 	bl	8004658 <USB_FlushRxFifo>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444a:	461a      	mov	r2, r3
 800444c:	2300      	movs	r3, #0
 800444e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004456:	461a      	mov	r2, r3
 8004458:	2300      	movs	r3, #0
 800445a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004462:	461a      	mov	r2, r3
 8004464:	2300      	movs	r3, #0
 8004466:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	e043      	b.n	80044f6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004484:	d118      	bne.n	80044b8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	461a      	mov	r2, r3
 800449a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	e013      	b.n	80044ca <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ae:	461a      	mov	r2, r3
 80044b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e008      	b.n	80044ca <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c4:	461a      	mov	r2, r3
 80044c6:	2300      	movs	r3, #0
 80044c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d6:	461a      	mov	r2, r3
 80044d8:	2300      	movs	r3, #0
 80044da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e8:	461a      	mov	r2, r3
 80044ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	3301      	adds	r3, #1
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d8b7      	bhi.n	800446e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	e043      	b.n	800458c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800451a:	d118      	bne.n	800454e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452e:	461a      	mov	r2, r3
 8004530:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e013      	b.n	8004560 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	461a      	mov	r2, r3
 8004546:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	e008      	b.n	8004560 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455a:	461a      	mov	r2, r3
 800455c:	2300      	movs	r3, #0
 800455e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456c:	461a      	mov	r2, r3
 800456e:	2300      	movs	r3, #0
 8004570:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457e:	461a      	mov	r2, r3
 8004580:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004584:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	3301      	adds	r3, #1
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	429a      	cmp	r2, r3
 8004592:	d8b7      	bhi.n	8004504 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459a:	461a      	mov	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80045b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	f043 0210 	orr.w	r2, r3, #16
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699a      	ldr	r2, [r3, #24]
 80045c8:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <USB_DevInit+0x294>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f043 0208 	orr.w	r2, r3, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d107      	bne.n	80045f8 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045f0:	f043 0304 	orr.w	r3, r3, #4
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004604:	b004      	add	sp, #16
 8004606:	4770      	bx	lr
 8004608:	803c3800 	.word	0x803c3800

0800460c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	f043 0220 	orr.w	r2, r3, #32
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3301      	adds	r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a09      	ldr	r2, [pc, #36]	; (8004654 <USB_FlushTxFifo+0x48>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d901      	bls.n	8004638 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e006      	b.n	8004646 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b20      	cmp	r3, #32
 8004642:	d0f0      	beq.n	8004626 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	00030d40 	.word	0x00030d40

08004658 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2210      	movs	r2, #16
 8004668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3301      	adds	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a09      	ldr	r2, [pc, #36]	; (8004698 <USB_FlushRxFifo+0x40>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d901      	bls.n	800467c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e006      	b.n	800468a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b10      	cmp	r3, #16
 8004686:	d0f0      	beq.n	800466a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	00030d40 	.word	0x00030d40

0800469c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	4619      	mov	r1, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046e2:	461a      	mov	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 0303 	bic.w	r3, r3, #3
 80046f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f8:	461a      	mov	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f043 0302 	orr.w	r3, r3, #2
 8004706:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3301      	adds	r3, #1
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4a13      	ldr	r2, [pc, #76]	; (800477c <USB_CoreReset+0x64>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e01b      	b.n	800476e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	daf2      	bge.n	8004724 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f043 0201 	orr.w	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3301      	adds	r3, #1
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <USB_CoreReset+0x64>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e006      	b.n	800476e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b01      	cmp	r3, #1
 800476a:	d0f0      	beq.n	800474e <USB_CoreReset+0x36>

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	00030d40 	.word	0x00030d40

08004780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004784:	f7fc fd02 	bl	800118c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004788:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800478a:	e003      	b.n	8004794 <LoopCopyDataInit>

0800478c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800478c:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800478e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004790:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004792:	3104      	adds	r1, #4

08004794 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004794:	480a      	ldr	r0, [pc, #40]	; (80047c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004798:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800479a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800479c:	d3f6      	bcc.n	800478c <CopyDataInit>
	ldr	r2, =_sbss
 800479e:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80047a0:	e002      	b.n	80047a8 <LoopFillZerobss>

080047a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80047a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80047a4:	f842 3b04 	str.w	r3, [r2], #4

080047a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80047a8:	4b08      	ldr	r3, [pc, #32]	; (80047cc <LoopForever+0x16>)
	cmp	r2, r3
 80047aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80047ac:	d3f9      	bcc.n	80047a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047ae:	f000 f811 	bl	80047d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80047b2:	f7fb fe91 	bl	80004d8 <main>

080047b6 <LoopForever>:

LoopForever:
    b LoopForever
 80047b6:	e7fe      	b.n	80047b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80047b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80047bc:	080048ac 	.word	0x080048ac
	ldr	r0, =_sdata
 80047c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80047c4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80047c8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80047cc:	20000690 	.word	0x20000690

080047d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047d0:	e7fe      	b.n	80047d0 <ADC1_2_IRQHandler>
	...

080047d4 <__libc_init_array>:
 80047d4:	b570      	push	{r4, r5, r6, lr}
 80047d6:	4e0d      	ldr	r6, [pc, #52]	; (800480c <__libc_init_array+0x38>)
 80047d8:	4c0d      	ldr	r4, [pc, #52]	; (8004810 <__libc_init_array+0x3c>)
 80047da:	1ba4      	subs	r4, r4, r6
 80047dc:	10a4      	asrs	r4, r4, #2
 80047de:	2500      	movs	r5, #0
 80047e0:	42a5      	cmp	r5, r4
 80047e2:	d109      	bne.n	80047f8 <__libc_init_array+0x24>
 80047e4:	4e0b      	ldr	r6, [pc, #44]	; (8004814 <__libc_init_array+0x40>)
 80047e6:	4c0c      	ldr	r4, [pc, #48]	; (8004818 <__libc_init_array+0x44>)
 80047e8:	f000 f820 	bl	800482c <_init>
 80047ec:	1ba4      	subs	r4, r4, r6
 80047ee:	10a4      	asrs	r4, r4, #2
 80047f0:	2500      	movs	r5, #0
 80047f2:	42a5      	cmp	r5, r4
 80047f4:	d105      	bne.n	8004802 <__libc_init_array+0x2e>
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
 80047f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047fc:	4798      	blx	r3
 80047fe:	3501      	adds	r5, #1
 8004800:	e7ee      	b.n	80047e0 <__libc_init_array+0xc>
 8004802:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004806:	4798      	blx	r3
 8004808:	3501      	adds	r5, #1
 800480a:	e7f2      	b.n	80047f2 <__libc_init_array+0x1e>
 800480c:	080048a4 	.word	0x080048a4
 8004810:	080048a4 	.word	0x080048a4
 8004814:	080048a4 	.word	0x080048a4
 8004818:	080048a8 	.word	0x080048a8

0800481c <memset>:
 800481c:	4402      	add	r2, r0
 800481e:	4603      	mov	r3, r0
 8004820:	4293      	cmp	r3, r2
 8004822:	d100      	bne.n	8004826 <memset+0xa>
 8004824:	4770      	bx	lr
 8004826:	f803 1b01 	strb.w	r1, [r3], #1
 800482a:	e7f9      	b.n	8004820 <memset+0x4>

0800482c <_init>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	bf00      	nop
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr

08004838 <_fini>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	bf00      	nop
 800483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483e:	bc08      	pop	{r3}
 8004840:	469e      	mov	lr, r3
 8004842:	4770      	bx	lr
