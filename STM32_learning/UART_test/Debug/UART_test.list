
UART_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d18  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002ea0  08002ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002ef8  08002ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000a4  2000000c  08002f14  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000b0  08002f14  000200b0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008aed  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000148f  00000000  00000000  00028b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000880  00000000  00000000  00029fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007f8  00000000  00000000  0002a838  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003a98  00000000  00000000  0002b030  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002fdd  00000000  00000000  0002eac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00031aa5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000021d0  00000000  00000000  00031b24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e88 	.word	0x08002e88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002e88 	.word	0x08002e88

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 f98f 	bl	8000800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f819 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f8ad 	bl	8000644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f87b 	bl	80005e4 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t Test[] = "Hop World !!!\r\n"; //Data to send
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <main+0x38>)
 80004f0:	463c      	mov	r4, r7
 80004f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  HAL_UART_Transmit(&huart2,Test,sizeof(Test),10);// Sending in normal mode
 80004f8:	4639      	mov	r1, r7
 80004fa:	230a      	movs	r3, #10
 80004fc:	2210      	movs	r2, #16
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x3c>)
 8000500:	f001 ffec 	bl	80024dc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000508:	f000 f9ee 	bl	80008e8 <HAL_Delay>
  {
 800050c:	e7ef      	b.n	80004ee <main+0x16>
 800050e:	bf00      	nop
 8000510:	08002ea0 	.word	0x08002ea0
 8000514:	20000028 	.word	0x20000028

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b0b8      	sub	sp, #224	; 0xe0
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000522:	2244      	movs	r2, #68	; 0x44
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f002 fca6 	bl	8002e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2288      	movs	r2, #136	; 0x88
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f002 fc98 	bl	8002e78 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000548:	2310      	movs	r3, #16
 800054a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054e:	2301      	movs	r3, #1
 8000550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055a:	2360      	movs	r3, #96	; 0x60
 800055c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000560:	2300      	movs	r3, #0
 8000562:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fcce 	bl	8000f0c <HAL_RCC_OscConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000576:	f000 f87d 	bl	8000674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	230f      	movs	r3, #15
 800057c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000580:	2300      	movs	r3, #0
 8000582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000598:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 f89a 	bl	80016d8 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005aa:	f000 f863 	bl	8000674 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fa91 	bl	8001ae0 <HAL_RCCEx_PeriphCLKConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005c4:	f000 f856 	bl	8000674 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005cc:	f000 fc48 	bl	8000e60 <HAL_PWREx_ControlVoltageScaling>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005d6:	f000 f84d 	bl	8000674 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	37e0      	adds	r7, #224	; 0xe0
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <MX_USART2_UART_Init+0x5c>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_USART2_UART_Init+0x58>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000628:	f001 ff0a 	bl	8002440 <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000632:	f000 f81f 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000028 	.word	0x20000028
 8000640:	40004400 	.word	0x40004400

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4a09      	ldr	r2, [pc, #36]	; (8000670 <MX_GPIO_Init+0x2c>)
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_GPIO_Init+0x2c>)
 800064e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_GPIO_Init+0x2c>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067a:	e7fe      	b.n	800067a <Error_Handler+0x6>

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <HAL_MspInit+0x44>)
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <HAL_MspInit+0x44>)
 8000686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6613      	str	r3, [r2, #96]	; 0x60
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_MspInit+0x44>)
 8000690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4a09      	ldr	r2, [pc, #36]	; (80006c0 <HAL_MspInit+0x44>)
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_MspInit+0x44>)
 800069e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a4:	6593      	str	r3, [r2, #88]	; 0x58
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_MspInit+0x44>)
 80006a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a17      	ldr	r2, [pc, #92]	; (8000740 <HAL_UART_MspInit+0x7c>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d128      	bne.n	8000738 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e6:	4a17      	ldr	r2, [pc, #92]	; (8000744 <HAL_UART_MspInit+0x80>)
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <HAL_UART_MspInit+0x80>)
 80006ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f0:	6593      	str	r3, [r2, #88]	; 0x58
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_UART_MspInit+0x80>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4a11      	ldr	r2, [pc, #68]	; (8000744 <HAL_UART_MspInit+0x80>)
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <HAL_UART_MspInit+0x80>)
 8000702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_UART_MspInit+0x80>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000716:	230c      	movs	r3, #12
 8000718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000726:	2307      	movs	r3, #7
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f000 f9de 	bl	8000af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	; 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40004400 	.word	0x40004400
 8000744:	40021000 	.word	0x40021000

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <MemManage_Handler+0x4>

0800075a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler+0x4>

08000766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 f888 	bl	80008a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007a0:	4a15      	ldr	r2, [pc, #84]	; (80007f8 <SystemInit+0x5c>)
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <SystemInit+0x5c>)
 80007a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007b0:	4a12      	ldr	r2, [pc, #72]	; (80007fc <SystemInit+0x60>)
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <SystemInit+0x60>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <SystemInit+0x60>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <SystemInit+0x60>)
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <SystemInit+0x60>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80007cc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80007d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <SystemInit+0x60>)
 80007d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <SystemInit+0x60>)
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <SystemInit+0x60>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <SystemInit+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080a:	2003      	movs	r0, #3
 800080c:	f000 f93e 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000810:	2000      	movs	r0, #0
 8000812:	f000 f80d 	bl	8000830 <HAL_InitTick>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800081c:	2301      	movs	r3, #1
 800081e:	71fb      	strb	r3, [r7, #7]
 8000820:	e001      	b.n	8000826 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000822:	f7ff ff2b 	bl	800067c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000826:	79fb      	ldrb	r3, [r7, #7]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000838:	2300      	movs	r3, #0
 800083a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_InitTick+0x6c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d023      	beq.n	800088c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_InitTick+0x70>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_InitTick+0x6c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	fbb3 f3f1 	udiv	r3, r3, r1
 8000856:	fbb2 f3f3 	udiv	r3, r2, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f93d 	bl	8000ada <HAL_SYSTICK_Config>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10f      	bne.n	8000886 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b0f      	cmp	r3, #15
 800086a:	d809      	bhi.n	8000880 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800086c:	2200      	movs	r2, #0
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000874:	f000 f915 	bl	8000aa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_InitTick+0x74>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6013      	str	r3, [r2, #0]
 800087e:	e007      	b.n	8000890 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	73fb      	strb	r3, [r7, #15]
 8000884:	e004      	b.n	8000890 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	73fb      	strb	r3, [r7, #15]
 800088a:	e001      	b.n	8000890 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000890:	7bfb      	ldrb	r3, [r7, #15]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000000 	.word	0x20000000
 80008a4:	20000004 	.word	0x20000004

080008a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_IncTick+0x20>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_IncTick+0x24>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <HAL_IncTick+0x24>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000008 	.word	0x20000008
 80008cc:	200000ac 	.word	0x200000ac

080008d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return uwTick;
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <HAL_GetTick+0x14>)
 80008d6:	681b      	ldr	r3, [r3, #0]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	200000ac 	.word	0x200000ac

080008e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f0:	f7ff ffee 	bl	80008d0 <HAL_GetTick>
 80008f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000900:	d005      	beq.n	800090e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_Delay+0x40>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4413      	add	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800090e:	bf00      	nop
 8000910:	f7ff ffde 	bl	80008d0 <HAL_GetTick>
 8000914:	4602      	mov	r2, r0
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	1ad2      	subs	r2, r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	429a      	cmp	r2, r3
 800091e:	d3f7      	bcc.n	8000910 <HAL_Delay+0x28>
  {
  }
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000008 	.word	0x20000008

0800092c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095e:	4a04      	ldr	r2, [pc, #16]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	60d3      	str	r3, [r2, #12]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	490d      	ldr	r1, [pc, #52]	; (80009dc <__NVIC_SetPriority+0x4c>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	4909      	ldr	r1, [pc, #36]	; (80009e0 <__NVIC_SetPriority+0x50>)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	3b04      	subs	r3, #4
 80009c4:	683a      	ldr	r2, [r7, #0]
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	2201      	movs	r2, #1
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	1e5a      	subs	r2, r3, #1
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	401a      	ands	r2, r3
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	1e59      	subs	r1, r3, #1
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	4313      	orrs	r3, r2
         );
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3724      	adds	r7, #36	; 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a58:	d301      	bcc.n	8000a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00f      	b.n	8000a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SysTick_Config+0x40>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a66:	210f      	movs	r1, #15
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a6c:	f7ff ff90 	bl	8000990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SysTick_Config+0x40>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SysTick_Config+0x40>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ff49 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab4:	f7ff ff5e 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000ab8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f7ff ff90 	bl	80009e4 <NVIC_EncodePriority>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5f 	bl	8000990 <__NVIC_SetPriority>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffb0 	bl	8000a48 <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b02:	e17f      	b.n	8000e04 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	2101      	movs	r1, #1
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 8171 	beq.w	8000dfe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d00b      	beq.n	8000b3c <HAL_GPIO_Init+0x48>
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d007      	beq.n	8000b3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b30:	2b11      	cmp	r3, #17
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2b12      	cmp	r3, #18
 8000b3a:	d130      	bne.n	8000b9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	2203      	movs	r2, #3
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	68da      	ldr	r2, [r3, #12]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b72:	2201      	movs	r2, #1
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	091b      	lsrs	r3, r3, #4
 8000b88:	f003 0201 	and.w	r2, r3, #1
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d118      	bne.n	8000bdc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	08db      	lsrs	r3, r3, #3
 8000bc6:	f003 0201 	and.w	r2, r3, #1
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2203      	movs	r2, #3
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	689a      	ldr	r2, [r3, #8]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x128>
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b12      	cmp	r3, #18
 8000c1a:	d123      	bne.n	8000c64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	08da      	lsrs	r2, r3, #3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3208      	adds	r2, #8
 8000c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f003 0307 	and.w	r3, r3, #7
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	220f      	movs	r2, #15
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	691a      	ldr	r2, [r3, #16]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	08da      	lsrs	r2, r3, #3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3208      	adds	r2, #8
 8000c5e:	6939      	ldr	r1, [r7, #16]
 8000c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	2203      	movs	r2, #3
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0203 	and.w	r2, r3, #3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f000 80ac 	beq.w	8000dfe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4a5e      	ldr	r2, [pc, #376]	; (8000e20 <HAL_GPIO_Init+0x32c>)
 8000ca8:	4b5d      	ldr	r3, [pc, #372]	; (8000e20 <HAL_GPIO_Init+0x32c>)
 8000caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cb2:	4b5b      	ldr	r3, [pc, #364]	; (8000e20 <HAL_GPIO_Init+0x32c>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cbe:	4a59      	ldr	r2, [pc, #356]	; (8000e24 <HAL_GPIO_Init+0x330>)
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f003 0303 	and.w	r3, r3, #3
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	220f      	movs	r2, #15
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ce8:	d025      	beq.n	8000d36 <HAL_GPIO_Init+0x242>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a4e      	ldr	r2, [pc, #312]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d01f      	beq.n	8000d32 <HAL_GPIO_Init+0x23e>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a4d      	ldr	r2, [pc, #308]	; (8000e2c <HAL_GPIO_Init+0x338>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d019      	beq.n	8000d2e <HAL_GPIO_Init+0x23a>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a4c      	ldr	r2, [pc, #304]	; (8000e30 <HAL_GPIO_Init+0x33c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d013      	beq.n	8000d2a <HAL_GPIO_Init+0x236>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4b      	ldr	r2, [pc, #300]	; (8000e34 <HAL_GPIO_Init+0x340>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d00d      	beq.n	8000d26 <HAL_GPIO_Init+0x232>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4a      	ldr	r2, [pc, #296]	; (8000e38 <HAL_GPIO_Init+0x344>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d007      	beq.n	8000d22 <HAL_GPIO_Init+0x22e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a49      	ldr	r2, [pc, #292]	; (8000e3c <HAL_GPIO_Init+0x348>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_GPIO_Init+0x22a>
 8000d1a:	2306      	movs	r3, #6
 8000d1c:	e00c      	b.n	8000d38 <HAL_GPIO_Init+0x244>
 8000d1e:	2307      	movs	r3, #7
 8000d20:	e00a      	b.n	8000d38 <HAL_GPIO_Init+0x244>
 8000d22:	2305      	movs	r3, #5
 8000d24:	e008      	b.n	8000d38 <HAL_GPIO_Init+0x244>
 8000d26:	2304      	movs	r3, #4
 8000d28:	e006      	b.n	8000d38 <HAL_GPIO_Init+0x244>
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e004      	b.n	8000d38 <HAL_GPIO_Init+0x244>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	e002      	b.n	8000d38 <HAL_GPIO_Init+0x244>
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <HAL_GPIO_Init+0x244>
 8000d36:	2300      	movs	r3, #0
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	f002 0203 	and.w	r2, r2, #3
 8000d3e:	0092      	lsls	r2, r2, #2
 8000d40:	4093      	lsls	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d48:	4936      	ldr	r1, [pc, #216]	; (8000e24 <HAL_GPIO_Init+0x330>)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d56:	4b3a      	ldr	r3, [pc, #232]	; (8000e40 <HAL_GPIO_Init+0x34c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d7a:	4a31      	ldr	r2, [pc, #196]	; (8000e40 <HAL_GPIO_Init+0x34c>)
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d80:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <HAL_GPIO_Init+0x34c>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000da4:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <HAL_GPIO_Init+0x34c>)
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <HAL_GPIO_Init+0x34c>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dce:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <HAL_GPIO_Init+0x34c>)
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <HAL_GPIO_Init+0x34c>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000df8:	4a11      	ldr	r2, [pc, #68]	; (8000e40 <HAL_GPIO_Init+0x34c>)
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f47f ae78 	bne.w	8000b04 <HAL_GPIO_Init+0x10>
  }
}
 8000e14:	bf00      	nop
 8000e16:	371c      	adds	r7, #28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010000 	.word	0x40010000
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	48000800 	.word	0x48000800
 8000e30:	48000c00 	.word	0x48000c00
 8000e34:	48001000 	.word	0x48001000
 8000e38:	48001400 	.word	0x48001400
 8000e3c:	48001800 	.word	0x48001800
 8000e40:	40010400 	.word	0x40010400

08000e44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <HAL_PWREx_GetVoltageRange+0x18>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40007000 	.word	0x40007000

08000e60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e6e:	d130      	bne.n	8000ed2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e70:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e7c:	d038      	beq.n	8000ef0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e7e:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2232      	movs	r2, #50	; 0x32
 8000e94:	fb02 f303 	mul.w	r3, r2, r3
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9e:	0c9b      	lsrs	r3, r3, #18
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ea4:	e002      	b.n	8000eac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eb8:	d102      	bne.n	8000ec0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f2      	bne.n	8000ea6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ecc:	d110      	bne.n	8000ef0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e00f      	b.n	8000ef2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ede:	d007      	beq.n	8000ef0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40007000 	.word	0x40007000
 8000f04:	20000000 	.word	0x20000000
 8000f08:	431bde83 	.word	0x431bde83

08000f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e3d4      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f1e:	4ba1      	ldr	r3, [pc, #644]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f28:	4b9e      	ldr	r3, [pc, #632]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 80e4 	beq.w	8001108 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d007      	beq.n	8000f56 <HAL_RCC_OscConfig+0x4a>
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2b0c      	cmp	r3, #12
 8000f4a:	f040 808b 	bne.w	8001064 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	f040 8087 	bne.w	8001064 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f56:	4b93      	ldr	r3, [pc, #588]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d005      	beq.n	8000f6e <HAL_RCC_OscConfig+0x62>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e3ac      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a1a      	ldr	r2, [r3, #32]
 8000f72:	4b8c      	ldr	r3, [pc, #560]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <HAL_RCC_OscConfig+0x7c>
 8000f7e:	4b89      	ldr	r3, [pc, #548]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f86:	e005      	b.n	8000f94 <HAL_RCC_OscConfig+0x88>
 8000f88:	4b86      	ldr	r3, [pc, #536]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d923      	bls.n	8000fe0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fd3f 	bl	8001a20 <RCC_SetFlashLatencyFromMSIRange>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e38d      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fac:	4a7d      	ldr	r2, [pc, #500]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000fae:	4b7d      	ldr	r3, [pc, #500]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	497a      	ldr	r1, [pc, #488]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000fba:	4b7a      	ldr	r3, [pc, #488]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fca:	4976      	ldr	r1, [pc, #472]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000fcc:	4b75      	ldr	r3, [pc, #468]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	604b      	str	r3, [r1, #4]
 8000fde:	e025      	b.n	800102c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe0:	4a70      	ldr	r2, [pc, #448]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000fe2:	4b70      	ldr	r3, [pc, #448]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	496d      	ldr	r1, [pc, #436]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000fee:	4b6d      	ldr	r3, [pc, #436]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ffe:	4969      	ldr	r1, [pc, #420]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8001000:	4b68      	ldr	r3, [pc, #416]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	4313      	orrs	r3, r2
 8001010:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d109      	bne.n	800102c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fcff 	bl	8001a20 <RCC_SetFlashLatencyFromMSIRange>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e34d      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800102c:	f000 fc36 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8001030:	4601      	mov	r1, r0
 8001032:	4b5c      	ldr	r3, [pc, #368]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	4a5a      	ldr	r2, [pc, #360]	; (80011a8 <HAL_RCC_OscConfig+0x29c>)
 800103e:	5cd3      	ldrb	r3, [r2, r3]
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	fa21 f303 	lsr.w	r3, r1, r3
 8001048:	4a58      	ldr	r2, [pc, #352]	; (80011ac <HAL_RCC_OscConfig+0x2a0>)
 800104a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800104c:	4b58      	ldr	r3, [pc, #352]	; (80011b0 <HAL_RCC_OscConfig+0x2a4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fbed 	bl	8000830 <HAL_InitTick>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d052      	beq.n	8001106 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	e331      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d032      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800106c:	4a4d      	ldr	r2, [pc, #308]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 800106e:	4b4d      	ldr	r3, [pc, #308]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001078:	f7ff fc2a 	bl	80008d0 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001080:	f7ff fc26 	bl	80008d0 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e31a      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001092:	4b44      	ldr	r3, [pc, #272]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f0      	beq.n	8001080 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800109e:	4a41      	ldr	r2, [pc, #260]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 80010a0:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	493e      	ldr	r1, [pc, #248]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 80010ac:	4b3d      	ldr	r3, [pc, #244]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010bc:	4939      	ldr	r1, [pc, #228]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 80010be:	4b39      	ldr	r3, [pc, #228]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	4313      	orrs	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]
 80010d0:	e01a      	b.n	8001108 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010d2:	4a34      	ldr	r2, [pc, #208]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 80010d4:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010de:	f7ff fbf7 	bl	80008d0 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010e6:	f7ff fbf3 	bl	80008d0 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e2e7      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010f8:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f0      	bne.n	80010e6 <HAL_RCC_OscConfig+0x1da>
 8001104:	e000      	b.n	8001108 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001106:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d074      	beq.n	80011fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	2b08      	cmp	r3, #8
 8001118:	d005      	beq.n	8001126 <HAL_RCC_OscConfig+0x21a>
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b0c      	cmp	r3, #12
 800111e:	d10e      	bne.n	800113e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b03      	cmp	r3, #3
 8001124:	d10b      	bne.n	800113e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d064      	beq.n	80011fc <HAL_RCC_OscConfig+0x2f0>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d160      	bne.n	80011fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e2c4      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001146:	d106      	bne.n	8001156 <HAL_RCC_OscConfig+0x24a>
 8001148:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	e01d      	b.n	8001192 <HAL_RCC_OscConfig+0x286>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115e:	d10c      	bne.n	800117a <HAL_RCC_OscConfig+0x26e>
 8001160:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	e00b      	b.n	8001192 <HAL_RCC_OscConfig+0x286>
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_RCC_OscConfig+0x298>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001190:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d01c      	beq.n	80011d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119a:	f7ff fb99 	bl	80008d0 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011a0:	e011      	b.n	80011c6 <HAL_RCC_OscConfig+0x2ba>
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	08002eb0 	.word	0x08002eb0
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fb8c 	bl	80008d0 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e280      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011c6:	4baf      	ldr	r3, [pc, #700]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0x2a8>
 80011d2:	e014      	b.n	80011fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d4:	f7ff fb7c 	bl	80008d0 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fb78 	bl	80008d0 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e26c      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ee:	4ba5      	ldr	r3, [pc, #660]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x2d0>
 80011fa:	e000      	b.n	80011fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d060      	beq.n	80012cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b04      	cmp	r3, #4
 800120e:	d005      	beq.n	800121c <HAL_RCC_OscConfig+0x310>
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2b0c      	cmp	r3, #12
 8001214:	d119      	bne.n	800124a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d116      	bne.n	800124a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800121c:	4b99      	ldr	r3, [pc, #612]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_OscConfig+0x328>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e249      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001234:	4993      	ldr	r1, [pc, #588]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001236:	4b93      	ldr	r3, [pc, #588]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	061b      	lsls	r3, r3, #24
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001248:	e040      	b.n	80012cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d023      	beq.n	800129a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001252:	4a8c      	ldr	r2, [pc, #560]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001254:	4b8b      	ldr	r3, [pc, #556]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fb37 	bl	80008d0 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff fb33 	bl	80008d0 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e227      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001278:	4b82      	ldr	r3, [pc, #520]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001284:	497f      	ldr	r1, [pc, #508]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001286:	4b7f      	ldr	r3, [pc, #508]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	061b      	lsls	r3, r3, #24
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
 8001298:	e018      	b.n	80012cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129a:	4a7a      	ldr	r2, [pc, #488]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 800129c:	4b79      	ldr	r3, [pc, #484]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a6:	f7ff fb13 	bl	80008d0 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ae:	f7ff fb0f 	bl	80008d0 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e203      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012c0:	4b70      	ldr	r3, [pc, #448]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f0      	bne.n	80012ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d03c      	beq.n	8001352 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d01c      	beq.n	800131a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e0:	4a68      	ldr	r2, [pc, #416]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 80012e2:	4b68      	ldr	r3, [pc, #416]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 80012e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f0:	f7ff faee 	bl	80008d0 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f8:	f7ff faea 	bl	80008d0 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1de      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800130a:	4b5e      	ldr	r3, [pc, #376]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 800130c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0ef      	beq.n	80012f8 <HAL_RCC_OscConfig+0x3ec>
 8001318:	e01b      	b.n	8001352 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131a:	4a5a      	ldr	r2, [pc, #360]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 800131c:	4b59      	ldr	r3, [pc, #356]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 800131e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001322:	f023 0301 	bic.w	r3, r3, #1
 8001326:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132a:	f7ff fad1 	bl	80008d0 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001332:	f7ff facd 	bl	80008d0 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e1c1      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001344:	4b4f      	ldr	r3, [pc, #316]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1ef      	bne.n	8001332 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 80a6 	beq.w	80014ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001364:	4b47      	ldr	r3, [pc, #284]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10d      	bne.n	800138c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001370:	4a44      	ldr	r2, [pc, #272]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001372:	4b44      	ldr	r3, [pc, #272]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137a:	6593      	str	r3, [r2, #88]	; 0x58
 800137c:	4b41      	ldr	r3, [pc, #260]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 800137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001388:	2301      	movs	r3, #1
 800138a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800138c:	4b3e      	ldr	r3, [pc, #248]	; (8001488 <HAL_RCC_OscConfig+0x57c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d118      	bne.n	80013ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001398:	4a3b      	ldr	r2, [pc, #236]	; (8001488 <HAL_RCC_OscConfig+0x57c>)
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <HAL_RCC_OscConfig+0x57c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a4:	f7ff fa94 	bl	80008d0 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ac:	f7ff fa90 	bl	80008d0 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e184      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013be:	4b32      	ldr	r3, [pc, #200]	; (8001488 <HAL_RCC_OscConfig+0x57c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d108      	bne.n	80013e4 <HAL_RCC_OscConfig+0x4d8>
 80013d2:	4a2c      	ldr	r2, [pc, #176]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 80013d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013e2:	e024      	b.n	800142e <HAL_RCC_OscConfig+0x522>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d110      	bne.n	800140e <HAL_RCC_OscConfig+0x502>
 80013ec:	4a25      	ldr	r2, [pc, #148]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 80013f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013fc:	4a21      	ldr	r2, [pc, #132]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800140c:	e00f      	b.n	800142e <HAL_RCC_OscConfig+0x522>
 800140e:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800141e:	4a19      	ldr	r2, [pc, #100]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001426:	f023 0304 	bic.w	r3, r3, #4
 800142a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d016      	beq.n	8001464 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001436:	f7ff fa4b 	bl	80008d0 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800143c:	e00a      	b.n	8001454 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143e:	f7ff fa47 	bl	80008d0 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	f241 3288 	movw	r2, #5000	; 0x1388
 800144c:	4293      	cmp	r3, r2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e139      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_RCC_OscConfig+0x578>)
 8001456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0ed      	beq.n	800143e <HAL_RCC_OscConfig+0x532>
 8001462:	e01a      	b.n	800149a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff fa34 	bl	80008d0 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800146a:	e00f      	b.n	800148c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800146c:	f7ff fa30 	bl	80008d0 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d906      	bls.n	800148c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e122      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800148c:	4b90      	ldr	r3, [pc, #576]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 800148e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1e8      	bne.n	800146c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800149a:	7ffb      	ldrb	r3, [r7, #31]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d105      	bne.n	80014ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a0:	4a8b      	ldr	r2, [pc, #556]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 80014a2:	4b8b      	ldr	r3, [pc, #556]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 8108 	beq.w	80016c6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	f040 80d0 	bne.w	8001660 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014c0:	4b83      	ldr	r3, [pc, #524]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d130      	bne.n	8001536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	3b01      	subs	r3, #1
 80014e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d127      	bne.n	8001536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d11f      	bne.n	8001536 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001500:	2a07      	cmp	r2, #7
 8001502:	bf14      	ite	ne
 8001504:	2201      	movne	r2, #1
 8001506:	2200      	moveq	r2, #0
 8001508:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800150a:	4293      	cmp	r3, r2
 800150c:	d113      	bne.n	8001536 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	3b01      	subs	r3, #1
 800151c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d109      	bne.n	8001536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	3b01      	subs	r3, #1
 8001530:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001532:	429a      	cmp	r2, r3
 8001534:	d06e      	beq.n	8001614 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b0c      	cmp	r3, #12
 800153a:	d069      	beq.n	8001610 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800153c:	4b64      	ldr	r3, [pc, #400]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d105      	bne.n	8001554 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001548:	4b61      	ldr	r3, [pc, #388]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0b7      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001558:	4a5d      	ldr	r2, [pc, #372]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 800155a:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001562:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001564:	f7ff f9b4 	bl	80008d0 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156c:	f7ff f9b0 	bl	80008d0 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0a4      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800157e:	4b54      	ldr	r3, [pc, #336]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800158a:	4851      	ldr	r0, [pc, #324]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 800158c:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	4b50      	ldr	r3, [pc, #320]	; (80016d4 <HAL_RCC_OscConfig+0x7c8>)
 8001592:	4013      	ands	r3, r2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800159c:	3a01      	subs	r2, #1
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	4311      	orrs	r1, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015a6:	0212      	lsls	r2, r2, #8
 80015a8:	4311      	orrs	r1, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015ae:	0852      	lsrs	r2, r2, #1
 80015b0:	3a01      	subs	r2, #1
 80015b2:	0552      	lsls	r2, r2, #21
 80015b4:	4311      	orrs	r1, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015ba:	0852      	lsrs	r2, r2, #1
 80015bc:	3a01      	subs	r2, #1
 80015be:	0652      	lsls	r2, r2, #25
 80015c0:	4311      	orrs	r1, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015c6:	0912      	lsrs	r2, r2, #4
 80015c8:	0452      	lsls	r2, r2, #17
 80015ca:	430a      	orrs	r2, r1
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015d0:	4a3f      	ldr	r2, [pc, #252]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 80015d2:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015dc:	4a3c      	ldr	r2, [pc, #240]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 80015de:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015e8:	f7ff f972 	bl	80008d0 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff f96e 	bl	80008d0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e062      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001602:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800160e:	e05a      	b.n	80016c6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e059      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d152      	bne.n	80016c6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001620:	4a2b      	ldr	r2, [pc, #172]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 8001622:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800162a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800162c:	4a28      	ldr	r2, [pc, #160]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001636:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001638:	f7ff f94a 	bl	80008d0 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff f946 	bl	80008d0 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e03a      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x734>
 800165e:	e032      	b.n	80016c6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d02d      	beq.n	80016c2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4a1a      	ldr	r2, [pc, #104]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001670:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800167e:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f023 0303 	bic.w	r3, r3, #3
 8001688:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800168a:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001698:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff f919 	bl	80008d0 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff f915 	bl	80008d0 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e009      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_RCC_OscConfig+0x7c4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x796>
 80016c0:	e001      	b.n	80016c6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	f99d808c 	.word	0xf99d808c

080016d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0c8      	b.n	800187e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016ec:	4b66      	ldr	r3, [pc, #408]	; (8001888 <HAL_RCC_ClockConfig+0x1b0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0207 	and.w	r2, r3, #7
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d210      	bcs.n	800171c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4963      	ldr	r1, [pc, #396]	; (8001888 <HAL_RCC_ClockConfig+0x1b0>)
 80016fc:	4b62      	ldr	r3, [pc, #392]	; (8001888 <HAL_RCC_ClockConfig+0x1b0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 0207 	bic.w	r2, r3, #7
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <HAL_RCC_ClockConfig+0x1b0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0207 	and.w	r2, r3, #7
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0b0      	b.n	800187e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d04c      	beq.n	80017c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d107      	bne.n	8001740 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001730:	4b56      	ldr	r3, [pc, #344]	; (800188c <HAL_RCC_ClockConfig+0x1b4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d121      	bne.n	8001780 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e09e      	b.n	800187e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d107      	bne.n	8001758 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001748:	4b50      	ldr	r3, [pc, #320]	; (800188c <HAL_RCC_ClockConfig+0x1b4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d115      	bne.n	8001780 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e092      	b.n	800187e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d107      	bne.n	8001770 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001760:	4b4a      	ldr	r3, [pc, #296]	; (800188c <HAL_RCC_ClockConfig+0x1b4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d109      	bne.n	8001780 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e086      	b.n	800187e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001770:	4b46      	ldr	r3, [pc, #280]	; (800188c <HAL_RCC_ClockConfig+0x1b4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e07e      	b.n	800187e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001780:	4942      	ldr	r1, [pc, #264]	; (800188c <HAL_RCC_ClockConfig+0x1b4>)
 8001782:	4b42      	ldr	r3, [pc, #264]	; (800188c <HAL_RCC_ClockConfig+0x1b4>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f023 0203 	bic.w	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4313      	orrs	r3, r2
 8001790:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001792:	f7ff f89d 	bl	80008d0 <HAL_GetTick>
 8001796:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179a:	f7ff f899 	bl	80008d0 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e066      	b.n	800187e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b0:	4b36      	ldr	r3, [pc, #216]	; (800188c <HAL_RCC_ClockConfig+0x1b4>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 020c 	and.w	r2, r3, #12
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	429a      	cmp	r2, r3
 80017c0:	d1eb      	bne.n	800179a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d008      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ce:	492f      	ldr	r1, [pc, #188]	; (800188c <HAL_RCC_ClockConfig+0x1b4>)
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <HAL_RCC_ClockConfig+0x1b4>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b29      	ldr	r3, [pc, #164]	; (8001888 <HAL_RCC_ClockConfig+0x1b0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0207 	and.w	r2, r3, #7
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d910      	bls.n	8001810 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4926      	ldr	r1, [pc, #152]	; (8001888 <HAL_RCC_ClockConfig+0x1b0>)
 80017f0:	4b25      	ldr	r3, [pc, #148]	; (8001888 <HAL_RCC_ClockConfig+0x1b0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 0207 	bic.w	r2, r3, #7
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b22      	ldr	r3, [pc, #136]	; (8001888 <HAL_RCC_ClockConfig+0x1b0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0207 	and.w	r2, r3, #7
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e036      	b.n	800187e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	491b      	ldr	r1, [pc, #108]	; (800188c <HAL_RCC_ClockConfig+0x1b4>)
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_RCC_ClockConfig+0x1b4>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183a:	4914      	ldr	r1, [pc, #80]	; (800188c <HAL_RCC_ClockConfig+0x1b4>)
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <HAL_RCC_ClockConfig+0x1b4>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800184e:	f000 f825 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8001852:	4601      	mov	r1, r0
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_RCC_ClockConfig+0x1b4>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	5cd3      	ldrb	r3, [r2, r3]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	fa21 f303 	lsr.w	r3, r1, r3
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe ffdc 	bl	8000830 <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
 800187a:	72fb      	strb	r3, [r7, #11]

  return status;
 800187c:	7afb      	ldrb	r3, [r7, #11]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40022000 	.word	0x40022000
 800188c:	40021000 	.word	0x40021000
 8001890:	08002eb0 	.word	0x08002eb0
 8001894:	20000000 	.word	0x20000000
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b4:	4b3a      	ldr	r3, [pc, #232]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x34>
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d121      	bne.n	800190e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d11e      	bne.n	800190e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018d0:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d107      	bne.n	80018ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018dc:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80018de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e2:	0a1b      	lsrs	r3, r3, #8
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	e005      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018ec:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018f8:	4a2a      	ldr	r2, [pc, #168]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001900:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10d      	bne.n	8001924 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	2b04      	cmp	r3, #4
 8001912:	d102      	bne.n	800191a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001914:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	e004      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	2b08      	cmp	r3, #8
 800191e:	d101      	bne.n	8001924 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <HAL_RCC_GetSysClockFreq+0x110>)
 8001922:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	2b0c      	cmp	r3, #12
 8001928:	d133      	bne.n	8001992 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x104>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d002      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0xa4>
 800193a:	2b03      	cmp	r3, #3
 800193c:	d003      	beq.n	8001946 <HAL_RCC_GetSysClockFreq+0xaa>
 800193e:	e005      	b.n	800194c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001942:	617b      	str	r3, [r7, #20]
      break;
 8001944:	e005      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_RCC_GetSysClockFreq+0x110>)
 8001948:	617b      	str	r3, [r7, #20]
      break;
 800194a:	e002      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	617b      	str	r3, [r7, #20]
      break;
 8001950:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	3301      	adds	r3, #1
 800195e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	fb02 f203 	mul.w	r2, r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x104>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0e5b      	lsrs	r3, r3, #25
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	3301      	adds	r3, #1
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001990:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001992:	69bb      	ldr	r3, [r7, #24]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3724      	adds	r7, #36	; 0x24
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40021000 	.word	0x40021000
 80019a4:	08002ec8 	.word	0x08002ec8
 80019a8:	00f42400 	.word	0x00f42400
 80019ac:	007a1200 	.word	0x007a1200

080019b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000000 	.word	0x20000000

080019c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80019cc:	f7ff fff0 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019d0:	4601      	mov	r1, r0
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019de:	5cd3      	ldrb	r3, [r2, r3]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40021000 	.word	0x40021000
 80019f0:	08002ec0 	.word	0x08002ec0

080019f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80019f8:	f7ff ffda 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019fc:	4601      	mov	r1, r0
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	0adb      	lsrs	r3, r3, #11
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a0a:	5cd3      	ldrb	r3, [r2, r3]
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08002ec0 	.word	0x08002ec0

08001a20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a38:	f7ff fa04 	bl	8000e44 <HAL_PWREx_GetVoltageRange>
 8001a3c:	6178      	str	r0, [r7, #20]
 8001a3e:	e014      	b.n	8001a6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a40:	4a25      	ldr	r2, [pc, #148]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a58:	f7ff f9f4 	bl	8000e44 <HAL_PWREx_GetVoltageRange>
 8001a5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a5e:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a70:	d10b      	bne.n	8001a8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b80      	cmp	r3, #128	; 0x80
 8001a76:	d919      	bls.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2ba0      	cmp	r3, #160	; 0xa0
 8001a7c:	d902      	bls.n	8001a84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a7e:	2302      	movs	r3, #2
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e013      	b.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a84:	2301      	movs	r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	e010      	b.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b80      	cmp	r3, #128	; 0x80
 8001a8e:	d902      	bls.n	8001a96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a90:	2303      	movs	r3, #3
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	e00a      	b.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b80      	cmp	r3, #128	; 0x80
 8001a9a:	d102      	bne.n	8001aa2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	e004      	b.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b70      	cmp	r3, #112	; 0x70
 8001aa6:	d101      	bne.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001aac:	490b      	ldr	r1, [pc, #44]	; (8001adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 0207 	bic.w	r2, r3, #7
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0207 	and.w	r2, r3, #7
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d001      	beq.n	8001ace <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40022000 	.word	0x40022000

08001ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ae8:	2300      	movs	r3, #0
 8001aea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001aec:	2300      	movs	r3, #0
 8001aee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d03f      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b04:	d01c      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b0a:	d802      	bhi.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00e      	beq.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001b10:	e01f      	b.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001b12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b16:	d003      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001b18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001b1c:	d01c      	beq.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001b1e:	e018      	b.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b20:	4a85      	ldr	r2, [pc, #532]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b22:	4b85      	ldr	r3, [pc, #532]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b2c:	e015      	b.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3304      	adds	r3, #4
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 fab9 	bl	80020ac <RCCEx_PLLSAI1_Config>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b3e:	e00c      	b.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3320      	adds	r3, #32
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 fba0 	bl	800228c <RCCEx_PLLSAI2_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b50:	e003      	b.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	74fb      	strb	r3, [r7, #19]
      break;
 8001b56:	e000      	b.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b5a:	7cfb      	ldrb	r3, [r7, #19]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10b      	bne.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b60:	4975      	ldr	r1, [pc, #468]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b62:	4b75      	ldr	r3, [pc, #468]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b70:	4313      	orrs	r3, r2
 8001b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001b76:	e001      	b.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b78:	7cfb      	ldrb	r3, [r7, #19]
 8001b7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d03f      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b90:	d01c      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001b92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b96:	d802      	bhi.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00e      	beq.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001b9c:	e01f      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ba2:	d003      	beq.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001ba4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ba8:	d01c      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001baa:	e018      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001bac:	4a62      	ldr	r2, [pc, #392]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bae:	4b62      	ldr	r3, [pc, #392]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001bb8:	e015      	b.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 fa73 	bl	80020ac <RCCEx_PLLSAI1_Config>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001bca:	e00c      	b.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3320      	adds	r3, #32
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 fb5a 	bl	800228c <RCCEx_PLLSAI2_Config>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001bdc:	e003      	b.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	74fb      	strb	r3, [r7, #19]
      break;
 8001be2:	e000      	b.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001be6:	7cfb      	ldrb	r3, [r7, #19]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10b      	bne.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bec:	4952      	ldr	r1, [pc, #328]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bee:	4b52      	ldr	r3, [pc, #328]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c02:	e001      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c04:	7cfb      	ldrb	r3, [r7, #19]
 8001c06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80a0 	beq.w	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c1a:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00d      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c30:	4a41      	ldr	r2, [pc, #260]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3c:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c4c:	4a3b      	ldr	r2, [pc, #236]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c58:	f7fe fe3a 	bl	80008d0 <HAL_GetTick>
 8001c5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c5e:	e009      	b.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c60:	f7fe fe36 	bl	80008d0 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d902      	bls.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	74fb      	strb	r3, [r7, #19]
        break;
 8001c72:	e005      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ef      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001c80:	7cfb      	ldrb	r3, [r7, #19]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d15c      	bne.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01f      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d019      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cb0:	4a21      	ldr	r2, [pc, #132]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc0:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d016      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce2:	f7fe fdf5 	bl	80008d0 <HAL_GetTick>
 8001ce6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce8:	e00b      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cea:	f7fe fdf1 	bl	80008d0 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d902      	bls.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	74fb      	strb	r3, [r7, #19]
            break;
 8001d00:	e006      	b.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0ec      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001d10:	7cfb      	ldrb	r3, [r7, #19]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d2e:	e009      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d30:	7cfb      	ldrb	r3, [r7, #19]
 8001d32:	74bb      	strb	r3, [r7, #18]
 8001d34:	e006      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d40:	7cfb      	ldrb	r3, [r7, #19]
 8001d42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d44:	7c7b      	ldrb	r3, [r7, #17]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d105      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4a:	4a9e      	ldr	r2, [pc, #632]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d4c:	4b9d      	ldr	r3, [pc, #628]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d62:	4998      	ldr	r1, [pc, #608]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d64:	4b97      	ldr	r3, [pc, #604]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6a:	f023 0203 	bic.w	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d72:	4313      	orrs	r3, r2
 8001d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00a      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d84:	498f      	ldr	r1, [pc, #572]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d86:	4b8f      	ldr	r3, [pc, #572]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8c:	f023 020c 	bic.w	r2, r3, #12
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d94:	4313      	orrs	r3, r2
 8001d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001da6:	4987      	ldr	r1, [pc, #540]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001da8:	4b86      	ldr	r3, [pc, #536]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4313      	orrs	r3, r2
 8001db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00a      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dc8:	497e      	ldr	r1, [pc, #504]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dca:	4b7e      	ldr	r3, [pc, #504]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00a      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001dea:	4976      	ldr	r1, [pc, #472]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dec:	4b75      	ldr	r3, [pc, #468]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e0c:	496d      	ldr	r1, [pc, #436]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e0e:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e2e:	4965      	ldr	r1, [pc, #404]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e30:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e36:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00a      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e50:	495c      	ldr	r1, [pc, #368]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e52:	4b5c      	ldr	r3, [pc, #368]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e72:	4954      	ldr	r1, [pc, #336]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e74:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e94:	494b      	ldr	r1, [pc, #300]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e96:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001eb6:	4943      	ldr	r1, [pc, #268]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eb8:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d028      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ed8:	493a      	ldr	r1, [pc, #232]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eda:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ef8:	4a32      	ldr	r2, [pc, #200]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001efa:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f02:	60d3      	str	r3, [r2, #12]
 8001f04:	e011      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f0e:	d10c      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3304      	adds	r3, #4
 8001f14:	2101      	movs	r1, #1
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f8c8 	bl	80020ac <RCCEx_PLLSAI1_Config>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001f20:	7cfb      	ldrb	r3, [r7, #19]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001f26:	7cfb      	ldrb	r3, [r7, #19]
 8001f28:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d028      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f36:	4923      	ldr	r1, [pc, #140]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f54:	d106      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f56:	4a1b      	ldr	r2, [pc, #108]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f60:	60d3      	str	r3, [r2, #12]
 8001f62:	e011      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2101      	movs	r1, #1
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f899 	bl	80020ac <RCCEx_PLLSAI1_Config>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f7e:	7cfb      	ldrb	r3, [r7, #19]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d02b      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f94:	490b      	ldr	r1, [pc, #44]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fb2:	d109      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fb4:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fb6:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fbe:	60d3      	str	r3, [r2, #12]
 8001fc0:	e014      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 f867 	bl	80020ac <RCCEx_PLLSAI1_Config>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001fe2:	7cfb      	ldrb	r3, [r7, #19]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001fe8:	7cfb      	ldrb	r3, [r7, #19]
 8001fea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d02f      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ff8:	492b      	ldr	r1, [pc, #172]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001ffa:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002000:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002016:	d10d      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3304      	adds	r3, #4
 800201c:	2102      	movs	r1, #2
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f844 	bl	80020ac <RCCEx_PLLSAI1_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002028:	7cfb      	ldrb	r3, [r7, #19]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d014      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800202e:	7cfb      	ldrb	r3, [r7, #19]
 8002030:	74bb      	strb	r3, [r7, #18]
 8002032:	e011      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800203c:	d10c      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3320      	adds	r3, #32
 8002042:	2102      	movs	r1, #2
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f921 	bl	800228c <RCCEx_PLLSAI2_Config>
 800204a:	4603      	mov	r3, r0
 800204c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800204e:	7cfb      	ldrb	r3, [r7, #19]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002064:	4910      	ldr	r1, [pc, #64]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002086:	4908      	ldr	r1, [pc, #32]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800209e:	7cbb      	ldrb	r3, [r7, #18]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000

080020ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020ba:	4b73      	ldr	r3, [pc, #460]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d018      	beq.n	80020f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80020c6:	4b70      	ldr	r3, [pc, #448]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0203 	and.w	r2, r3, #3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d10d      	bne.n	80020f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
       ||
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80020de:	4b6a      	ldr	r3, [pc, #424]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
       ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d044      	beq.n	800217c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	e041      	b.n	800217c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d00c      	beq.n	800211a <RCCEx_PLLSAI1_Config+0x6e>
 8002100:	2b03      	cmp	r3, #3
 8002102:	d013      	beq.n	800212c <RCCEx_PLLSAI1_Config+0x80>
 8002104:	2b01      	cmp	r3, #1
 8002106:	d120      	bne.n	800214a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002108:	4b5f      	ldr	r3, [pc, #380]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d11d      	bne.n	8002150 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002118:	e01a      	b.n	8002150 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800211a:	4b5b      	ldr	r3, [pc, #364]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800212a:	e013      	b.n	8002154 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800212c:	4b56      	ldr	r3, [pc, #344]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10f      	bne.n	8002158 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002138:	4b53      	ldr	r3, [pc, #332]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002148:	e006      	b.n	8002158 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
      break;
 800214e:	e004      	b.n	800215a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002150:	bf00      	nop
 8002152:	e002      	b.n	800215a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002154:	bf00      	nop
 8002156:	e000      	b.n	800215a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002158:	bf00      	nop
    }

    if(status == HAL_OK)
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10d      	bne.n	800217c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002160:	4849      	ldr	r0, [pc, #292]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002162:	4b49      	ldr	r3, [pc, #292]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6819      	ldr	r1, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	430b      	orrs	r3, r1
 8002178:	4313      	orrs	r3, r2
 800217a:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d17d      	bne.n	800227e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002182:	4a41      	ldr	r2, [pc, #260]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002184:	4b40      	ldr	r3, [pc, #256]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800218c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800218e:	f7fe fb9f 	bl	80008d0 <HAL_GetTick>
 8002192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002194:	e009      	b.n	80021aa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002196:	f7fe fb9b 	bl	80008d0 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d902      	bls.n	80021aa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	73fb      	strb	r3, [r7, #15]
        break;
 80021a8:	e005      	b.n	80021b6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021aa:	4b37      	ldr	r3, [pc, #220]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1ef      	bne.n	8002196 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d160      	bne.n	800227e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d111      	bne.n	80021e6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021c2:	4831      	ldr	r0, [pc, #196]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021c4:	4b30      	ldr	r3, [pc, #192]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80021cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6892      	ldr	r2, [r2, #8]
 80021d4:	0211      	lsls	r1, r2, #8
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68d2      	ldr	r2, [r2, #12]
 80021da:	0912      	lsrs	r2, r2, #4
 80021dc:	0452      	lsls	r2, r2, #17
 80021de:	430a      	orrs	r2, r1
 80021e0:	4313      	orrs	r3, r2
 80021e2:	6103      	str	r3, [r0, #16]
 80021e4:	e027      	b.n	8002236 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d112      	bne.n	8002212 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021ec:	4826      	ldr	r0, [pc, #152]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ee:	4b26      	ldr	r3, [pc, #152]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80021f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6892      	ldr	r2, [r2, #8]
 80021fe:	0211      	lsls	r1, r2, #8
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6912      	ldr	r2, [r2, #16]
 8002204:	0852      	lsrs	r2, r2, #1
 8002206:	3a01      	subs	r2, #1
 8002208:	0552      	lsls	r2, r2, #21
 800220a:	430a      	orrs	r2, r1
 800220c:	4313      	orrs	r3, r2
 800220e:	6103      	str	r3, [r0, #16]
 8002210:	e011      	b.n	8002236 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002212:	481d      	ldr	r0, [pc, #116]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800221c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6892      	ldr	r2, [r2, #8]
 8002224:	0211      	lsls	r1, r2, #8
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6952      	ldr	r2, [r2, #20]
 800222a:	0852      	lsrs	r2, r2, #1
 800222c:	3a01      	subs	r2, #1
 800222e:	0652      	lsls	r2, r2, #25
 8002230:	430a      	orrs	r2, r1
 8002232:	4313      	orrs	r3, r2
 8002234:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002236:	4a14      	ldr	r2, [pc, #80]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002240:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002242:	f7fe fb45 	bl	80008d0 <HAL_GetTick>
 8002246:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002248:	e009      	b.n	800225e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800224a:	f7fe fb41 	bl	80008d0 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d902      	bls.n	800225e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	73fb      	strb	r3, [r7, #15]
          break;
 800225c:	e005      	b.n	800226a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0ef      	beq.n	800224a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d106      	bne.n	800227e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002270:	4905      	ldr	r1, [pc, #20]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000

0800228c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800229a:	4b68      	ldr	r3, [pc, #416]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d018      	beq.n	80022d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80022a6:	4b65      	ldr	r3, [pc, #404]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f003 0203 	and.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d10d      	bne.n	80022d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
       ||
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80022be:	4b5f      	ldr	r3, [pc, #380]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
       ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d044      	beq.n	800235c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	e041      	b.n	800235c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d00c      	beq.n	80022fa <RCCEx_PLLSAI2_Config+0x6e>
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d013      	beq.n	800230c <RCCEx_PLLSAI2_Config+0x80>
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d120      	bne.n	800232a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022e8:	4b54      	ldr	r3, [pc, #336]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d11d      	bne.n	8002330 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f8:	e01a      	b.n	8002330 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022fa:	4b50      	ldr	r3, [pc, #320]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002302:	2b00      	cmp	r3, #0
 8002304:	d116      	bne.n	8002334 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230a:	e013      	b.n	8002334 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800230c:	4b4b      	ldr	r3, [pc, #300]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10f      	bne.n	8002338 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002318:	4b48      	ldr	r3, [pc, #288]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002328:	e006      	b.n	8002338 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
      break;
 800232e:	e004      	b.n	800233a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002330:	bf00      	nop
 8002332:	e002      	b.n	800233a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002334:	bf00      	nop
 8002336:	e000      	b.n	800233a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002338:	bf00      	nop
    }

    if(status == HAL_OK)
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10d      	bne.n	800235c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002340:	483e      	ldr	r0, [pc, #248]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002342:	4b3e      	ldr	r3, [pc, #248]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6819      	ldr	r1, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	430b      	orrs	r3, r1
 8002358:	4313      	orrs	r3, r2
 800235a:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d167      	bne.n	8002432 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002362:	4a36      	ldr	r2, [pc, #216]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002364:	4b35      	ldr	r3, [pc, #212]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800236e:	f7fe faaf 	bl	80008d0 <HAL_GetTick>
 8002372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002374:	e009      	b.n	800238a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002376:	f7fe faab 	bl	80008d0 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d902      	bls.n	800238a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	73fb      	strb	r3, [r7, #15]
        break;
 8002388:	e005      	b.n	8002396 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800238a:	4b2c      	ldr	r3, [pc, #176]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1ef      	bne.n	8002376 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d14a      	bne.n	8002432 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d111      	bne.n	80023c6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80023a2:	4826      	ldr	r0, [pc, #152]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80023ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6892      	ldr	r2, [r2, #8]
 80023b4:	0211      	lsls	r1, r2, #8
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68d2      	ldr	r2, [r2, #12]
 80023ba:	0912      	lsrs	r2, r2, #4
 80023bc:	0452      	lsls	r2, r2, #17
 80023be:	430a      	orrs	r2, r1
 80023c0:	4313      	orrs	r3, r2
 80023c2:	6143      	str	r3, [r0, #20]
 80023c4:	e011      	b.n	80023ea <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80023c6:	481d      	ldr	r0, [pc, #116]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 80023c8:	4b1c      	ldr	r3, [pc, #112]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6892      	ldr	r2, [r2, #8]
 80023d8:	0211      	lsls	r1, r2, #8
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6912      	ldr	r2, [r2, #16]
 80023de:	0852      	lsrs	r2, r2, #1
 80023e0:	3a01      	subs	r2, #1
 80023e2:	0652      	lsls	r2, r2, #25
 80023e4:	430a      	orrs	r2, r1
 80023e6:	4313      	orrs	r3, r2
 80023e8:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80023ea:	4a14      	ldr	r2, [pc, #80]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 80023ec:	4b13      	ldr	r3, [pc, #76]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f6:	f7fe fa6b 	bl	80008d0 <HAL_GetTick>
 80023fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80023fc:	e009      	b.n	8002412 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80023fe:	f7fe fa67 	bl	80008d0 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d902      	bls.n	8002412 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	73fb      	strb	r3, [r7, #15]
          break;
 8002410:	e005      	b.n	800241e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0ef      	beq.n	80023fe <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d106      	bne.n	8002432 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002424:	4905      	ldr	r1, [pc, #20]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000

08002440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e040      	b.n	80024d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe f92e 	bl	80006c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2224      	movs	r2, #36	; 0x24
 800246c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f8c0 	bl	8002604 <UART_SetConfig>
 8002484:	4603      	mov	r3, r0
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e022      	b.n	80024d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fb38 	bl	8002b0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	6852      	ldr	r2, [r2, #4]
 80024a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	6892      	ldr	r2, [r2, #8]
 80024b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fbbf 	bl	8002c50 <UART_CheckIdleState>
 80024d2:	4603      	mov	r3, r0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	f040 8082 	bne.w	80025fa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_UART_Transmit+0x26>
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e07a      	b.n	80025fc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_UART_Transmit+0x38>
 8002510:	2302      	movs	r3, #2
 8002512:	e073      	b.n	80025fc <HAL_UART_Transmit+0x120>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2221      	movs	r2, #33	; 0x21
 8002528:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800252a:	f7fe f9d1 	bl	80008d0 <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	88fa      	ldrh	r2, [r7, #6]
 800253c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002548:	d108      	bne.n	800255c <HAL_UART_Transmit+0x80>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d104      	bne.n	800255c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	e003      	b.n	8002564 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800256c:	e02d      	b.n	80025ca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2200      	movs	r2, #0
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fbb2 	bl	8002ce2 <UART_WaitOnFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e039      	b.n	80025fc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10b      	bne.n	80025a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	8812      	ldrh	r2, [r2, #0]
 8002596:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800259a:	b292      	uxth	r2, r2
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	3302      	adds	r3, #2
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	e008      	b.n	80025b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	b292      	uxth	r2, r2
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3301      	adds	r3, #1
 80025b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1cb      	bne.n	800256e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2200      	movs	r2, #0
 80025de:	2140      	movs	r1, #64	; 0x40
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fb7e 	bl	8002ce2 <UART_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e005      	b.n	80025fc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e000      	b.n	80025fc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80025fa:	2302      	movs	r3, #2
  }
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3720      	adds	r7, #32
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002604:	b5b0      	push	{r4, r5, r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	4313      	orrs	r3, r2
 8002626:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6819      	ldr	r1, [r3, #0]
 8002632:	4bac      	ldr	r3, [pc, #688]	; (80028e4 <UART_SetConfig+0x2e0>)
 8002634:	400b      	ands	r3, r1
 8002636:	69f9      	ldr	r1, [r7, #28]
 8002638:	430b      	orrs	r3, r1
 800263a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	6852      	ldr	r2, [r2, #4]
 8002646:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68d2      	ldr	r2, [r2, #12]
 800264e:	430a      	orrs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4aa2      	ldr	r2, [pc, #648]	; (80028e8 <UART_SetConfig+0x2e4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d004      	beq.n	800266c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	4313      	orrs	r3, r2
 800266a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	6892      	ldr	r2, [r2, #8]
 8002676:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	430a      	orrs	r2, r1
 800267e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a99      	ldr	r2, [pc, #612]	; (80028ec <UART_SetConfig+0x2e8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d122      	bne.n	80026d0 <UART_SetConfig+0xcc>
 800268a:	4b99      	ldr	r3, [pc, #612]	; (80028f0 <UART_SetConfig+0x2ec>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b03      	cmp	r3, #3
 8002696:	d817      	bhi.n	80026c8 <UART_SetConfig+0xc4>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <UART_SetConfig+0x9c>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026b1 	.word	0x080026b1
 80026a4:	080026bd 	.word	0x080026bd
 80026a8:	080026b7 	.word	0x080026b7
 80026ac:	080026c3 	.word	0x080026c3
 80026b0:	2301      	movs	r3, #1
 80026b2:	76fb      	strb	r3, [r7, #27]
 80026b4:	e0e8      	b.n	8002888 <UART_SetConfig+0x284>
 80026b6:	2302      	movs	r3, #2
 80026b8:	76fb      	strb	r3, [r7, #27]
 80026ba:	e0e5      	b.n	8002888 <UART_SetConfig+0x284>
 80026bc:	2304      	movs	r3, #4
 80026be:	76fb      	strb	r3, [r7, #27]
 80026c0:	e0e2      	b.n	8002888 <UART_SetConfig+0x284>
 80026c2:	2308      	movs	r3, #8
 80026c4:	76fb      	strb	r3, [r7, #27]
 80026c6:	e0df      	b.n	8002888 <UART_SetConfig+0x284>
 80026c8:	2310      	movs	r3, #16
 80026ca:	76fb      	strb	r3, [r7, #27]
 80026cc:	bf00      	nop
 80026ce:	e0db      	b.n	8002888 <UART_SetConfig+0x284>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a87      	ldr	r2, [pc, #540]	; (80028f4 <UART_SetConfig+0x2f0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d134      	bne.n	8002744 <UART_SetConfig+0x140>
 80026da:	4b85      	ldr	r3, [pc, #532]	; (80028f0 <UART_SetConfig+0x2ec>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	d829      	bhi.n	800273c <UART_SetConfig+0x138>
 80026e8:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <UART_SetConfig+0xec>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	08002725 	.word	0x08002725
 80026f4:	0800273d 	.word	0x0800273d
 80026f8:	0800273d 	.word	0x0800273d
 80026fc:	0800273d 	.word	0x0800273d
 8002700:	08002731 	.word	0x08002731
 8002704:	0800273d 	.word	0x0800273d
 8002708:	0800273d 	.word	0x0800273d
 800270c:	0800273d 	.word	0x0800273d
 8002710:	0800272b 	.word	0x0800272b
 8002714:	0800273d 	.word	0x0800273d
 8002718:	0800273d 	.word	0x0800273d
 800271c:	0800273d 	.word	0x0800273d
 8002720:	08002737 	.word	0x08002737
 8002724:	2300      	movs	r3, #0
 8002726:	76fb      	strb	r3, [r7, #27]
 8002728:	e0ae      	b.n	8002888 <UART_SetConfig+0x284>
 800272a:	2302      	movs	r3, #2
 800272c:	76fb      	strb	r3, [r7, #27]
 800272e:	e0ab      	b.n	8002888 <UART_SetConfig+0x284>
 8002730:	2304      	movs	r3, #4
 8002732:	76fb      	strb	r3, [r7, #27]
 8002734:	e0a8      	b.n	8002888 <UART_SetConfig+0x284>
 8002736:	2308      	movs	r3, #8
 8002738:	76fb      	strb	r3, [r7, #27]
 800273a:	e0a5      	b.n	8002888 <UART_SetConfig+0x284>
 800273c:	2310      	movs	r3, #16
 800273e:	76fb      	strb	r3, [r7, #27]
 8002740:	bf00      	nop
 8002742:	e0a1      	b.n	8002888 <UART_SetConfig+0x284>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a6b      	ldr	r2, [pc, #428]	; (80028f8 <UART_SetConfig+0x2f4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d120      	bne.n	8002790 <UART_SetConfig+0x18c>
 800274e:	4b68      	ldr	r3, [pc, #416]	; (80028f0 <UART_SetConfig+0x2ec>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002758:	2b10      	cmp	r3, #16
 800275a:	d00f      	beq.n	800277c <UART_SetConfig+0x178>
 800275c:	2b10      	cmp	r3, #16
 800275e:	d802      	bhi.n	8002766 <UART_SetConfig+0x162>
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <UART_SetConfig+0x16c>
 8002764:	e010      	b.n	8002788 <UART_SetConfig+0x184>
 8002766:	2b20      	cmp	r3, #32
 8002768:	d005      	beq.n	8002776 <UART_SetConfig+0x172>
 800276a:	2b30      	cmp	r3, #48	; 0x30
 800276c:	d009      	beq.n	8002782 <UART_SetConfig+0x17e>
 800276e:	e00b      	b.n	8002788 <UART_SetConfig+0x184>
 8002770:	2300      	movs	r3, #0
 8002772:	76fb      	strb	r3, [r7, #27]
 8002774:	e088      	b.n	8002888 <UART_SetConfig+0x284>
 8002776:	2302      	movs	r3, #2
 8002778:	76fb      	strb	r3, [r7, #27]
 800277a:	e085      	b.n	8002888 <UART_SetConfig+0x284>
 800277c:	2304      	movs	r3, #4
 800277e:	76fb      	strb	r3, [r7, #27]
 8002780:	e082      	b.n	8002888 <UART_SetConfig+0x284>
 8002782:	2308      	movs	r3, #8
 8002784:	76fb      	strb	r3, [r7, #27]
 8002786:	e07f      	b.n	8002888 <UART_SetConfig+0x284>
 8002788:	2310      	movs	r3, #16
 800278a:	76fb      	strb	r3, [r7, #27]
 800278c:	bf00      	nop
 800278e:	e07b      	b.n	8002888 <UART_SetConfig+0x284>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a59      	ldr	r2, [pc, #356]	; (80028fc <UART_SetConfig+0x2f8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d120      	bne.n	80027dc <UART_SetConfig+0x1d8>
 800279a:	4b55      	ldr	r3, [pc, #340]	; (80028f0 <UART_SetConfig+0x2ec>)
 800279c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80027a4:	2b40      	cmp	r3, #64	; 0x40
 80027a6:	d00f      	beq.n	80027c8 <UART_SetConfig+0x1c4>
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d802      	bhi.n	80027b2 <UART_SetConfig+0x1ae>
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <UART_SetConfig+0x1b8>
 80027b0:	e010      	b.n	80027d4 <UART_SetConfig+0x1d0>
 80027b2:	2b80      	cmp	r3, #128	; 0x80
 80027b4:	d005      	beq.n	80027c2 <UART_SetConfig+0x1be>
 80027b6:	2bc0      	cmp	r3, #192	; 0xc0
 80027b8:	d009      	beq.n	80027ce <UART_SetConfig+0x1ca>
 80027ba:	e00b      	b.n	80027d4 <UART_SetConfig+0x1d0>
 80027bc:	2300      	movs	r3, #0
 80027be:	76fb      	strb	r3, [r7, #27]
 80027c0:	e062      	b.n	8002888 <UART_SetConfig+0x284>
 80027c2:	2302      	movs	r3, #2
 80027c4:	76fb      	strb	r3, [r7, #27]
 80027c6:	e05f      	b.n	8002888 <UART_SetConfig+0x284>
 80027c8:	2304      	movs	r3, #4
 80027ca:	76fb      	strb	r3, [r7, #27]
 80027cc:	e05c      	b.n	8002888 <UART_SetConfig+0x284>
 80027ce:	2308      	movs	r3, #8
 80027d0:	76fb      	strb	r3, [r7, #27]
 80027d2:	e059      	b.n	8002888 <UART_SetConfig+0x284>
 80027d4:	2310      	movs	r3, #16
 80027d6:	76fb      	strb	r3, [r7, #27]
 80027d8:	bf00      	nop
 80027da:	e055      	b.n	8002888 <UART_SetConfig+0x284>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a47      	ldr	r2, [pc, #284]	; (8002900 <UART_SetConfig+0x2fc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d124      	bne.n	8002830 <UART_SetConfig+0x22c>
 80027e6:	4b42      	ldr	r3, [pc, #264]	; (80028f0 <UART_SetConfig+0x2ec>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f4:	d012      	beq.n	800281c <UART_SetConfig+0x218>
 80027f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fa:	d802      	bhi.n	8002802 <UART_SetConfig+0x1fe>
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <UART_SetConfig+0x20c>
 8002800:	e012      	b.n	8002828 <UART_SetConfig+0x224>
 8002802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002806:	d006      	beq.n	8002816 <UART_SetConfig+0x212>
 8002808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800280c:	d009      	beq.n	8002822 <UART_SetConfig+0x21e>
 800280e:	e00b      	b.n	8002828 <UART_SetConfig+0x224>
 8002810:	2300      	movs	r3, #0
 8002812:	76fb      	strb	r3, [r7, #27]
 8002814:	e038      	b.n	8002888 <UART_SetConfig+0x284>
 8002816:	2302      	movs	r3, #2
 8002818:	76fb      	strb	r3, [r7, #27]
 800281a:	e035      	b.n	8002888 <UART_SetConfig+0x284>
 800281c:	2304      	movs	r3, #4
 800281e:	76fb      	strb	r3, [r7, #27]
 8002820:	e032      	b.n	8002888 <UART_SetConfig+0x284>
 8002822:	2308      	movs	r3, #8
 8002824:	76fb      	strb	r3, [r7, #27]
 8002826:	e02f      	b.n	8002888 <UART_SetConfig+0x284>
 8002828:	2310      	movs	r3, #16
 800282a:	76fb      	strb	r3, [r7, #27]
 800282c:	bf00      	nop
 800282e:	e02b      	b.n	8002888 <UART_SetConfig+0x284>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a2c      	ldr	r2, [pc, #176]	; (80028e8 <UART_SetConfig+0x2e4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d124      	bne.n	8002884 <UART_SetConfig+0x280>
 800283a:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <UART_SetConfig+0x2ec>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002848:	d012      	beq.n	8002870 <UART_SetConfig+0x26c>
 800284a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284e:	d802      	bhi.n	8002856 <UART_SetConfig+0x252>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <UART_SetConfig+0x260>
 8002854:	e012      	b.n	800287c <UART_SetConfig+0x278>
 8002856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800285a:	d006      	beq.n	800286a <UART_SetConfig+0x266>
 800285c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002860:	d009      	beq.n	8002876 <UART_SetConfig+0x272>
 8002862:	e00b      	b.n	800287c <UART_SetConfig+0x278>
 8002864:	2300      	movs	r3, #0
 8002866:	76fb      	strb	r3, [r7, #27]
 8002868:	e00e      	b.n	8002888 <UART_SetConfig+0x284>
 800286a:	2302      	movs	r3, #2
 800286c:	76fb      	strb	r3, [r7, #27]
 800286e:	e00b      	b.n	8002888 <UART_SetConfig+0x284>
 8002870:	2304      	movs	r3, #4
 8002872:	76fb      	strb	r3, [r7, #27]
 8002874:	e008      	b.n	8002888 <UART_SetConfig+0x284>
 8002876:	2308      	movs	r3, #8
 8002878:	76fb      	strb	r3, [r7, #27]
 800287a:	e005      	b.n	8002888 <UART_SetConfig+0x284>
 800287c:	2310      	movs	r3, #16
 800287e:	76fb      	strb	r3, [r7, #27]
 8002880:	bf00      	nop
 8002882:	e001      	b.n	8002888 <UART_SetConfig+0x284>
 8002884:	2310      	movs	r3, #16
 8002886:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <UART_SetConfig+0x2e4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	f040 8080 	bne.w	8002994 <UART_SetConfig+0x390>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002894:	7efb      	ldrb	r3, [r7, #27]
 8002896:	2b08      	cmp	r3, #8
 8002898:	d836      	bhi.n	8002908 <UART_SetConfig+0x304>
 800289a:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <UART_SetConfig+0x29c>)
 800289c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a0:	080028c5 	.word	0x080028c5
 80028a4:	08002909 	.word	0x08002909
 80028a8:	080028cd 	.word	0x080028cd
 80028ac:	08002909 	.word	0x08002909
 80028b0:	080028d3 	.word	0x080028d3
 80028b4:	08002909 	.word	0x08002909
 80028b8:	08002909 	.word	0x08002909
 80028bc:	08002909 	.word	0x08002909
 80028c0:	080028db 	.word	0x080028db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028c4:	f7ff f880 	bl	80019c8 <HAL_RCC_GetPCLK1Freq>
 80028c8:	6178      	str	r0, [r7, #20]
        break;
 80028ca:	e022      	b.n	8002912 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <UART_SetConfig+0x300>)
 80028ce:	617b      	str	r3, [r7, #20]
        break;
 80028d0:	e01f      	b.n	8002912 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028d2:	f7fe ffe3 	bl	800189c <HAL_RCC_GetSysClockFreq>
 80028d6:	6178      	str	r0, [r7, #20]
        break;
 80028d8:	e01b      	b.n	8002912 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028de:	617b      	str	r3, [r7, #20]
        break;
 80028e0:	e017      	b.n	8002912 <UART_SetConfig+0x30e>
 80028e2:	bf00      	nop
 80028e4:	efff69f3 	.word	0xefff69f3
 80028e8:	40008000 	.word	0x40008000
 80028ec:	40013800 	.word	0x40013800
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40004400 	.word	0x40004400
 80028f8:	40004800 	.word	0x40004800
 80028fc:	40004c00 	.word	0x40004c00
 8002900:	40005000 	.word	0x40005000
 8002904:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	76bb      	strb	r3, [r7, #26]
        break;
 8002910:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80eb 	beq.w	8002af0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	441a      	add	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	429a      	cmp	r2, r3
 8002928:	d805      	bhi.n	8002936 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	429a      	cmp	r2, r3
 8002934:	d202      	bcs.n	800293c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	76bb      	strb	r3, [r7, #26]
 800293a:	e0d9      	b.n	8002af0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	461a      	mov	r2, r3
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	021d      	lsls	r5, r3, #8
 8002946:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800294a:	0214      	lsls	r4, r2, #8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	461a      	mov	r2, r3
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	18a0      	adds	r0, r4, r2
 800295a:	eb45 0103 	adc.w	r1, r5, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f04f 0400 	mov.w	r4, #0
 8002966:	461a      	mov	r2, r3
 8002968:	4623      	mov	r3, r4
 800296a:	f7fd fc2d 	bl	80001c8 <__aeabi_uldivmod>
 800296e:	4603      	mov	r3, r0
 8002970:	460c      	mov	r4, r1
 8002972:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800297a:	d308      	bcc.n	800298e <UART_SetConfig+0x38a>
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002982:	d204      	bcs.n	800298e <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	60da      	str	r2, [r3, #12]
 800298c:	e0b0      	b.n	8002af0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	76bb      	strb	r3, [r7, #26]
 8002992:	e0ad      	b.n	8002af0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800299c:	d15c      	bne.n	8002a58 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800299e:	7efb      	ldrb	r3, [r7, #27]
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d828      	bhi.n	80029f6 <UART_SetConfig+0x3f2>
 80029a4:	a201      	add	r2, pc, #4	; (adr r2, 80029ac <UART_SetConfig+0x3a8>)
 80029a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029aa:	bf00      	nop
 80029ac:	080029d1 	.word	0x080029d1
 80029b0:	080029d9 	.word	0x080029d9
 80029b4:	080029e1 	.word	0x080029e1
 80029b8:	080029f7 	.word	0x080029f7
 80029bc:	080029e7 	.word	0x080029e7
 80029c0:	080029f7 	.word	0x080029f7
 80029c4:	080029f7 	.word	0x080029f7
 80029c8:	080029f7 	.word	0x080029f7
 80029cc:	080029ef 	.word	0x080029ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029d0:	f7fe fffa 	bl	80019c8 <HAL_RCC_GetPCLK1Freq>
 80029d4:	6178      	str	r0, [r7, #20]
        break;
 80029d6:	e013      	b.n	8002a00 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029d8:	f7ff f80c 	bl	80019f4 <HAL_RCC_GetPCLK2Freq>
 80029dc:	6178      	str	r0, [r7, #20]
        break;
 80029de:	e00f      	b.n	8002a00 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029e0:	4b49      	ldr	r3, [pc, #292]	; (8002b08 <UART_SetConfig+0x504>)
 80029e2:	617b      	str	r3, [r7, #20]
        break;
 80029e4:	e00c      	b.n	8002a00 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029e6:	f7fe ff59 	bl	800189c <HAL_RCC_GetSysClockFreq>
 80029ea:	6178      	str	r0, [r7, #20]
        break;
 80029ec:	e008      	b.n	8002a00 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f2:	617b      	str	r3, [r7, #20]
        break;
 80029f4:	e004      	b.n	8002a00 <UART_SetConfig+0x3fc>
      default:
        pclk = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	76bb      	strb	r3, [r7, #26]
        break;
 80029fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d074      	beq.n	8002af0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	005a      	lsls	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	441a      	add	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	d916      	bls.n	8002a52 <UART_SetConfig+0x44e>
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2a:	d212      	bcs.n	8002a52 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f023 030f 	bic.w	r3, r3, #15
 8002a34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	89fb      	ldrh	r3, [r7, #14]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	89fa      	ldrh	r2, [r7, #14]
 8002a4e:	60da      	str	r2, [r3, #12]
 8002a50:	e04e      	b.n	8002af0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	76bb      	strb	r3, [r7, #26]
 8002a56:	e04b      	b.n	8002af0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a58:	7efb      	ldrb	r3, [r7, #27]
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d827      	bhi.n	8002aae <UART_SetConfig+0x4aa>
 8002a5e:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <UART_SetConfig+0x460>)
 8002a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a64:	08002a89 	.word	0x08002a89
 8002a68:	08002a91 	.word	0x08002a91
 8002a6c:	08002a99 	.word	0x08002a99
 8002a70:	08002aaf 	.word	0x08002aaf
 8002a74:	08002a9f 	.word	0x08002a9f
 8002a78:	08002aaf 	.word	0x08002aaf
 8002a7c:	08002aaf 	.word	0x08002aaf
 8002a80:	08002aaf 	.word	0x08002aaf
 8002a84:	08002aa7 	.word	0x08002aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a88:	f7fe ff9e 	bl	80019c8 <HAL_RCC_GetPCLK1Freq>
 8002a8c:	6178      	str	r0, [r7, #20]
        break;
 8002a8e:	e013      	b.n	8002ab8 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a90:	f7fe ffb0 	bl	80019f4 <HAL_RCC_GetPCLK2Freq>
 8002a94:	6178      	str	r0, [r7, #20]
        break;
 8002a96:	e00f      	b.n	8002ab8 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <UART_SetConfig+0x504>)
 8002a9a:	617b      	str	r3, [r7, #20]
        break;
 8002a9c:	e00c      	b.n	8002ab8 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a9e:	f7fe fefd 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8002aa2:	6178      	str	r0, [r7, #20]
        break;
 8002aa4:	e008      	b.n	8002ab8 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aaa:	617b      	str	r3, [r7, #20]
        break;
 8002aac:	e004      	b.n	8002ab8 <UART_SetConfig+0x4b4>
      default:
        pclk = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	76bb      	strb	r3, [r7, #26]
        break;
 8002ab6:	bf00      	nop
    }

    if (pclk != 0U)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d018      	beq.n	8002af0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	085a      	lsrs	r2, r3, #1
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	441a      	add	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b0f      	cmp	r3, #15
 8002ad8:	d908      	bls.n	8002aec <UART_SetConfig+0x4e8>
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae0:	d204      	bcs.n	8002aec <UART_SetConfig+0x4e8>
      {
        huart->Instance->BRR = usartdiv;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	e001      	b.n	8002af0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002afc:	7ebb      	ldrb	r3, [r7, #26]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bdb0      	pop	{r4, r5, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	00f42400 	.word	0x00f42400

08002b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	6852      	ldr	r2, [r2, #4]
 8002b2a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	6852      	ldr	r2, [r2, #4]
 8002b4c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	6852      	ldr	r2, [r2, #4]
 8002b6e:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	6852      	ldr	r2, [r2, #4]
 8002b90:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	6892      	ldr	r2, [r2, #8]
 8002bb2:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	6892      	ldr	r2, [r2, #8]
 8002bd4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01a      	beq.n	8002c22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	6852      	ldr	r2, [r2, #4]
 8002bf6:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c0a:	d10a      	bne.n	8002c22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	6852      	ldr	r2, [r2, #4]
 8002c16:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	6852      	ldr	r2, [r2, #4]
 8002c38:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c40:	430a      	orrs	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]
  }
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c60:	f7fd fe36 	bl	80008d0 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d10e      	bne.n	8002c92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f82d 	bl	8002ce2 <UART_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e023      	b.n	8002cda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d10e      	bne.n	8002cbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f817 	bl	8002ce2 <UART_WaitOnFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e00d      	b.n	8002cda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf2:	e05e      	b.n	8002db2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cfa:	d05a      	beq.n	8002db2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfc:	f7fd fde8 	bl	80008d0 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	1ad2      	subs	r2, r2, r3
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d802      	bhi.n	8002d12 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d11b      	bne.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d20:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	6892      	ldr	r2, [r2, #8]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e043      	b.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d02c      	beq.n	8002db2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d66:	d124      	bne.n	8002db2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d70:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d80:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	6892      	ldr	r2, [r2, #8]
 8002d8c:	f022 0201 	bic.w	r2, r2, #1
 8002d90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e00f      	b.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69da      	ldr	r2, [r3, #28]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	401a      	ands	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d091      	beq.n	8002cf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002de0:	f7fd fcdc 	bl	800079c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002de4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002de6:	e003      	b.n	8002df0 <LoopCopyDataInit>

08002de8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002dea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002dec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002dee:	3104      	adds	r1, #4

08002df0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002df0:	480a      	ldr	r0, [pc, #40]	; (8002e1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002df4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002df6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002df8:	d3f6      	bcc.n	8002de8 <CopyDataInit>
	ldr	r2, =_sbss
 8002dfa:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002dfc:	e002      	b.n	8002e04 <LoopFillZerobss>

08002dfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002dfe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002e00:	f842 3b04 	str.w	r3, [r2], #4

08002e04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <LoopForever+0x16>)
	cmp	r2, r3
 8002e06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002e08:	d3f9      	bcc.n	8002dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e0a:	f000 f811 	bl	8002e30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e0e:	f7fd fb63 	bl	80004d8 <main>

08002e12 <LoopForever>:

LoopForever:
    b LoopForever
 8002e12:	e7fe      	b.n	8002e12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e14:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002e18:	08002f08 	.word	0x08002f08
	ldr	r0, =_sdata
 8002e1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002e20:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002e24:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002e28:	200000b0 	.word	0x200000b0

08002e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e2c:	e7fe      	b.n	8002e2c <ADC1_2_IRQHandler>
	...

08002e30 <__libc_init_array>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	4e0d      	ldr	r6, [pc, #52]	; (8002e68 <__libc_init_array+0x38>)
 8002e34:	4c0d      	ldr	r4, [pc, #52]	; (8002e6c <__libc_init_array+0x3c>)
 8002e36:	1ba4      	subs	r4, r4, r6
 8002e38:	10a4      	asrs	r4, r4, #2
 8002e3a:	2500      	movs	r5, #0
 8002e3c:	42a5      	cmp	r5, r4
 8002e3e:	d109      	bne.n	8002e54 <__libc_init_array+0x24>
 8002e40:	4e0b      	ldr	r6, [pc, #44]	; (8002e70 <__libc_init_array+0x40>)
 8002e42:	4c0c      	ldr	r4, [pc, #48]	; (8002e74 <__libc_init_array+0x44>)
 8002e44:	f000 f820 	bl	8002e88 <_init>
 8002e48:	1ba4      	subs	r4, r4, r6
 8002e4a:	10a4      	asrs	r4, r4, #2
 8002e4c:	2500      	movs	r5, #0
 8002e4e:	42a5      	cmp	r5, r4
 8002e50:	d105      	bne.n	8002e5e <__libc_init_array+0x2e>
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e58:	4798      	blx	r3
 8002e5a:	3501      	adds	r5, #1
 8002e5c:	e7ee      	b.n	8002e3c <__libc_init_array+0xc>
 8002e5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e62:	4798      	blx	r3
 8002e64:	3501      	adds	r5, #1
 8002e66:	e7f2      	b.n	8002e4e <__libc_init_array+0x1e>
 8002e68:	08002f00 	.word	0x08002f00
 8002e6c:	08002f00 	.word	0x08002f00
 8002e70:	08002f00 	.word	0x08002f00
 8002e74:	08002f04 	.word	0x08002f04

08002e78 <memset>:
 8002e78:	4402      	add	r2, r0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d100      	bne.n	8002e82 <memset+0xa>
 8002e80:	4770      	bx	lr
 8002e82:	f803 1b01 	strb.w	r1, [r3], #1
 8002e86:	e7f9      	b.n	8002e7c <memset+0x4>

08002e88 <_init>:
 8002e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8a:	bf00      	nop
 8002e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8e:	bc08      	pop	{r3}
 8002e90:	469e      	mov	lr, r3
 8002e92:	4770      	bx	lr

08002e94 <_fini>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	bf00      	nop
 8002e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9a:	bc08      	pop	{r3}
 8002e9c:	469e      	mov	lr, r3
 8002e9e:	4770      	bx	lr
