
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000370c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003894  08003894  00013894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080038e4  080038e4  000138e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080038ec  080038ec  000138ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080038f0  080038f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080038f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000f4  2000000c  08003900  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000100  08003900  00020100  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e2b0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b48  00000000  00000000  0002e2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e20  00000000  00000000  0002fe38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d68  00000000  00000000  00030c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006fae  00000000  00000000  000319c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000491c  00000000  00000000  0003896e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003d28a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003b54  00000000  00000000  0003d308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800387c 	.word	0x0800387c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800387c 	.word	0x0800387c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b0a6      	sub	sp, #152	; 0x98
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fa25 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f829 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f8cf 	bl	8000698 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004fa:	f000 f89d 	bl	8000638 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <main+0x54>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2201      	movs	r2, #1
 8000504:	4619      	mov	r1, r3
 8000506:	480e      	ldr	r0, [pc, #56]	; (8000540 <main+0x58>)
 8000508:	f002 fbbc 	bl	8002c84 <HAL_UART_Receive_IT>
	  	if (rx_data == 'r')
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <main+0x54>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b72      	cmp	r3, #114	; 0x72
 8000512:	d1f4      	bne.n	80004fe <main+0x16>
	  	{
	  		char str[150];
	  		strcpy(str,"hey\r\n");
 8000514:	463b      	mov	r3, r7
 8000516:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <main+0x5c>)
 8000518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800051c:	6018      	str	r0, [r3, #0]
 800051e:	3304      	adds	r3, #4
 8000520:	8019      	strh	r1, [r3, #0]
	  	    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);;
 8000522:	463b      	mov	r3, r7
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff fe4f 	bl	80001c8 <strlen>
 800052a:	4603      	mov	r3, r0
 800052c:	b29a      	uxth	r2, r3
 800052e:	4639      	mov	r1, r7
 8000530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <main+0x58>)
 8000536:	f002 fb11 	bl	8002b5c <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 800053a:	e7e0      	b.n	80004fe <main+0x16>
 800053c:	20000028 	.word	0x20000028
 8000540:	2000002c 	.word	0x2000002c
 8000544:	08003894 	.word	0x08003894

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b0b8      	sub	sp, #224	; 0xe0
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000552:	2244      	movs	r2, #68	; 0x44
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 f988 	bl	800386c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2288      	movs	r2, #136	; 0x88
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 f97a 	bl	800386c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000578:	2310      	movs	r3, #16
 800057a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800057e:	2301      	movs	r3, #1
 8000580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800058a:	2360      	movs	r3, #96	; 0x60
 800058c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000596:	2301      	movs	r3, #1
 8000598:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800059c:	2301      	movs	r3, #1
 800059e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005a2:	2328      	movs	r3, #40	; 0x28
 80005a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005a8:	2307      	movs	r3, #7
 80005aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fce0 	bl	8000f84 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005ca:	f000 f88f 	bl	80006ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2303      	movs	r3, #3
 80005d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005f0:	2104      	movs	r1, #4
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 f8ac 	bl	8001750 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80005fe:	f000 f875 	bl	80006ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000602:	2302      	movs	r3, #2
 8000604:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000606:	2300      	movs	r3, #0
 8000608:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fad5 	bl	8001bbc <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000618:	f000 f868 	bl	80006ec <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000620:	f000 fc5a 	bl	8000ed8 <HAL_PWREx_ControlVoltageScaling>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800062a:	f000 f85f 	bl	80006ec <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	37e0      	adds	r7, #224	; 0xe0
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_USART2_UART_Init+0x58>)
 800063e:	4a15      	ldr	r2, [pc, #84]	; (8000694 <MX_USART2_UART_Init+0x5c>)
 8000640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_USART2_UART_Init+0x58>)
 8000644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_USART2_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_USART2_UART_Init+0x58>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_USART2_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_USART2_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_USART2_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_USART2_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_USART2_UART_Init+0x58>)
 800067c:	f002 fa20 	bl	8002ac0 <HAL_UART_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000686:	f000 f831 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000002c 	.word	0x2000002c
 8000694:	40004400 	.word	0x40004400

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <MX_GPIO_Init+0x2c>)
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_GPIO_Init+0x2c>)
 80006a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_GPIO_Init+0x2c>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d101      	bne.n	80006de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006da:	f000 f947 	bl	800096c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40012c00 	.word	0x40012c00

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <Error_Handler+0x6>

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4a0f      	ldr	r2, [pc, #60]	; (8000738 <HAL_MspInit+0x44>)
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_MspInit+0x44>)
 80006fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6613      	str	r3, [r2, #96]	; 0x60
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_MspInit+0x44>)
 8000708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4a09      	ldr	r2, [pc, #36]	; (8000738 <HAL_MspInit+0x44>)
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_MspInit+0x44>)
 8000716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	6593      	str	r3, [r2, #88]	; 0x58
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_MspInit+0x44>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <HAL_UART_MspInit+0x7c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d128      	bne.n	80007b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <HAL_UART_MspInit+0x80>)
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <HAL_UART_MspInit+0x80>)
 8000762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	6593      	str	r3, [r2, #88]	; 0x58
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <HAL_UART_MspInit+0x80>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4a11      	ldr	r2, [pc, #68]	; (80007bc <HAL_UART_MspInit+0x80>)
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_UART_MspInit+0x80>)
 800077a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <HAL_UART_MspInit+0x80>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800078e:	230c      	movs	r3, #12
 8000790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800079e:	2307      	movs	r3, #7
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f000 f9de 	bl	8000b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40004400 	.word	0x40004400
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	2019      	movs	r0, #25
 80007d6:	f000 f99f 	bl	8000b18 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80007da:	2019      	movs	r0, #25
 80007dc:	f000 f9b8 	bl	8000b50 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007e0:	4a1e      	ldr	r2, [pc, #120]	; (800085c <HAL_InitTick+0x9c>)
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <HAL_InitTick+0x9c>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007ea:	6613      	str	r3, [r2, #96]	; 0x60
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <HAL_InitTick+0x9c>)
 80007ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007f8:	f107 0210 	add.w	r2, r7, #16
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4611      	mov	r1, r2
 8000802:	4618      	mov	r0, r3
 8000804:	f001 f948 	bl	8001a98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000808:	f001 f930 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
 800080c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800080e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000810:	4a13      	ldr	r2, [pc, #76]	; (8000860 <HAL_InitTick+0xa0>)
 8000812:	fba2 2303 	umull	r2, r3, r2, r3
 8000816:	0c9b      	lsrs	r3, r3, #18
 8000818:	3b01      	subs	r3, #1
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_InitTick+0xa4>)
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <HAL_InitTick+0xa8>)
 8000820:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <HAL_InitTick+0xa4>)
 8000824:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000828:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_InitTick+0xa4>)
 800082c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_InitTick+0xa4>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_InitTick+0xa4>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <HAL_InitTick+0xa4>)
 800083e:	f001 fe6d 	bl	800251c <HAL_TIM_Base_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d104      	bne.n	8000852 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000848:	4806      	ldr	r0, [pc, #24]	; (8000864 <HAL_InitTick+0xa4>)
 800084a:	f001 fec9 	bl	80025e0 <HAL_TIM_Base_Start_IT>
 800084e:	4603      	mov	r3, r0
 8000850:	e000      	b.n	8000854 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3730      	adds	r7, #48	; 0x30
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	431bde83 	.word	0x431bde83
 8000864:	200000b0 	.word	0x200000b0
 8000868:	40012c00 	.word	0x40012c00

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <NMI_Handler+0x4>

08000872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <HardFault_Handler+0x4>

08000878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <MemManage_Handler+0x4>

0800087e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <UsageFault_Handler+0x4>

0800088a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80008ca:	f001 fef9 	bl	80026c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000b0 	.word	0x200000b0

080008d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008dc:	4a15      	ldr	r2, [pc, #84]	; (8000934 <SystemInit+0x5c>)
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <SystemInit+0x5c>)
 80008e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008ec:	4a12      	ldr	r2, [pc, #72]	; (8000938 <SystemInit+0x60>)
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <SystemInit+0x60>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <SystemInit+0x60>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <SystemInit+0x60>)
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <SystemInit+0x60>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000908:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800090c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <SystemInit+0x60>)
 8000910:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000914:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <SystemInit+0x60>)
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <SystemInit+0x60>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000920:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <SystemInit+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000946:	2003      	movs	r0, #3
 8000948:	f000 f8db 	bl	8000b02 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff ff37 	bl	80007c0 <HAL_InitTick>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	e001      	b.n	8000962 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800095e:	f7ff fec9 	bl	80006f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000962:	79fb      	ldrb	r3, [r7, #7]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x20>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_IncTick+0x24>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_IncTick+0x24>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008
 8000990:	200000fc 	.word	0x200000fc

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <HAL_GetTick+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	200000fc 	.word	0x200000fc

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	4909      	ldr	r1, [pc, #36]	; (8000a48 <__NVIC_EnableIRQ+0x38>)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	095b      	lsrs	r3, r3, #5
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	f002 021f 	and.w	r2, r2, #31
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	490d      	ldr	r1, [pc, #52]	; (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	4909      	ldr	r1, [pc, #36]	; (8000a9c <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	; 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	1e5a      	subs	r2, r3, #1
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	1e59      	subs	r1, r3, #1
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ff4e 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2a:	f7ff ff63 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	68b9      	ldr	r1, [r7, #8]
 8000b34:	6978      	ldr	r0, [r7, #20]
 8000b36:	f7ff ffb3 	bl	8000aa0 <NVIC_EncodePriority>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff82 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff56 	bl	8000a10 <__NVIC_EnableIRQ>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7a:	e17f      	b.n	8000e7c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 8171 	beq.w	8000e76 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d00b      	beq.n	8000bb4 <HAL_GPIO_Init+0x48>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d007      	beq.n	8000bb4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba8:	2b11      	cmp	r3, #17
 8000baa:	d003      	beq.n	8000bb4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b12      	cmp	r3, #18
 8000bb2:	d130      	bne.n	8000c16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bea:	2201      	movs	r2, #1
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	091b      	lsrs	r3, r3, #4
 8000c00:	f003 0201 	and.w	r2, r3, #1
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	2b03      	cmp	r3, #3
 8000c20:	d118      	bne.n	8000c54 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	08db      	lsrs	r3, r3, #3
 8000c3e:	f003 0201 	and.w	r2, r3, #1
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2203      	movs	r2, #3
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x128>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b12      	cmp	r3, #18
 8000c92:	d123      	bne.n	8000cdc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	08da      	lsrs	r2, r3, #3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3208      	adds	r2, #8
 8000c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	220f      	movs	r2, #15
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	08da      	lsrs	r2, r3, #3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3208      	adds	r2, #8
 8000cd6:	6939      	ldr	r1, [r7, #16]
 8000cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0203 	and.w	r2, r3, #3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 80ac 	beq.w	8000e76 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4a5e      	ldr	r2, [pc, #376]	; (8000e98 <HAL_GPIO_Init+0x32c>)
 8000d20:	4b5d      	ldr	r3, [pc, #372]	; (8000e98 <HAL_GPIO_Init+0x32c>)
 8000d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2a:	4b5b      	ldr	r3, [pc, #364]	; (8000e98 <HAL_GPIO_Init+0x32c>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d36:	4a59      	ldr	r2, [pc, #356]	; (8000e9c <HAL_GPIO_Init+0x330>)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d60:	d025      	beq.n	8000dae <HAL_GPIO_Init+0x242>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a4e      	ldr	r2, [pc, #312]	; (8000ea0 <HAL_GPIO_Init+0x334>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d01f      	beq.n	8000daa <HAL_GPIO_Init+0x23e>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4d      	ldr	r2, [pc, #308]	; (8000ea4 <HAL_GPIO_Init+0x338>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d019      	beq.n	8000da6 <HAL_GPIO_Init+0x23a>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4c      	ldr	r2, [pc, #304]	; (8000ea8 <HAL_GPIO_Init+0x33c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d013      	beq.n	8000da2 <HAL_GPIO_Init+0x236>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4b      	ldr	r2, [pc, #300]	; (8000eac <HAL_GPIO_Init+0x340>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d00d      	beq.n	8000d9e <HAL_GPIO_Init+0x232>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4a      	ldr	r2, [pc, #296]	; (8000eb0 <HAL_GPIO_Init+0x344>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d007      	beq.n	8000d9a <HAL_GPIO_Init+0x22e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a49      	ldr	r2, [pc, #292]	; (8000eb4 <HAL_GPIO_Init+0x348>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d101      	bne.n	8000d96 <HAL_GPIO_Init+0x22a>
 8000d92:	2306      	movs	r3, #6
 8000d94:	e00c      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000d96:	2307      	movs	r3, #7
 8000d98:	e00a      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e008      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000d9e:	2304      	movs	r3, #4
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000da2:	2303      	movs	r3, #3
 8000da4:	e004      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e002      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000dae:	2300      	movs	r3, #0
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	f002 0203 	and.w	r2, r2, #3
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	4093      	lsls	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dc0:	4936      	ldr	r1, [pc, #216]	; (8000e9c <HAL_GPIO_Init+0x330>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dce:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <HAL_GPIO_Init+0x34c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000df2:	4a31      	ldr	r2, [pc, #196]	; (8000eb8 <HAL_GPIO_Init+0x34c>)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <HAL_GPIO_Init+0x34c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e1c:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <HAL_GPIO_Init+0x34c>)
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e22:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <HAL_GPIO_Init+0x34c>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e46:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <HAL_GPIO_Init+0x34c>)
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <HAL_GPIO_Init+0x34c>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e70:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <HAL_GPIO_Init+0x34c>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa22 f303 	lsr.w	r3, r2, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f47f ae78 	bne.w	8000b7c <HAL_GPIO_Init+0x10>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	371c      	adds	r7, #28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	48000800 	.word	0x48000800
 8000ea8:	48000c00 	.word	0x48000c00
 8000eac:	48001000 	.word	0x48001000
 8000eb0:	48001400 	.word	0x48001400
 8000eb4:	48001800 	.word	0x48001800
 8000eb8:	40010400 	.word	0x40010400

08000ebc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ee6:	d130      	bne.n	8000f4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ef4:	d038      	beq.n	8000f68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef6:	4a20      	ldr	r2, [pc, #128]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2232      	movs	r2, #50	; 0x32
 8000f0c:	fb02 f303 	mul.w	r3, r2, r3
 8000f10:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f12:	fba2 2303 	umull	r2, r3, r2, r3
 8000f16:	0c9b      	lsrs	r3, r3, #18
 8000f18:	3301      	adds	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f1c:	e002      	b.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f30:	d102      	bne.n	8000f38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f2      	bne.n	8000f1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f44:	d110      	bne.n	8000f68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e00f      	b.n	8000f6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f56:	d007      	beq.n	8000f68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40007000 	.word	0x40007000
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	431bde83 	.word	0x431bde83

08000f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e3d4      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f96:	4ba1      	ldr	r3, [pc, #644]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fa0:	4b9e      	ldr	r3, [pc, #632]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0310 	and.w	r3, r3, #16
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 80e4 	beq.w	8001180 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <HAL_RCC_OscConfig+0x4a>
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	2b0c      	cmp	r3, #12
 8000fc2:	f040 808b 	bne.w	80010dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	f040 8087 	bne.w	80010dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fce:	4b93      	ldr	r3, [pc, #588]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x62>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e3ac      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a1a      	ldr	r2, [r3, #32]
 8000fea:	4b8c      	ldr	r3, [pc, #560]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d004      	beq.n	8001000 <HAL_RCC_OscConfig+0x7c>
 8000ff6:	4b89      	ldr	r3, [pc, #548]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ffe:	e005      	b.n	800100c <HAL_RCC_OscConfig+0x88>
 8001000:	4b86      	ldr	r3, [pc, #536]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800100c:	429a      	cmp	r2, r3
 800100e:	d923      	bls.n	8001058 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 fd71 	bl	8001afc <RCC_SetFlashLatencyFromMSIRange>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e38d      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001024:	4a7d      	ldr	r2, [pc, #500]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001026:	4b7d      	ldr	r3, [pc, #500]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f043 0308 	orr.w	r3, r3, #8
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	497a      	ldr	r1, [pc, #488]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001032:	4b7a      	ldr	r3, [pc, #488]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	4313      	orrs	r3, r2
 8001040:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001042:	4976      	ldr	r1, [pc, #472]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001044:	4b75      	ldr	r3, [pc, #468]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	4313      	orrs	r3, r2
 8001054:	604b      	str	r3, [r1, #4]
 8001056:	e025      	b.n	80010a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001058:	4a70      	ldr	r2, [pc, #448]	; (800121c <HAL_RCC_OscConfig+0x298>)
 800105a:	4b70      	ldr	r3, [pc, #448]	; (800121c <HAL_RCC_OscConfig+0x298>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	496d      	ldr	r1, [pc, #436]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001066:	4b6d      	ldr	r3, [pc, #436]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	4313      	orrs	r3, r2
 8001074:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001076:	4969      	ldr	r1, [pc, #420]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001078:	4b68      	ldr	r3, [pc, #416]	; (800121c <HAL_RCC_OscConfig+0x298>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	4313      	orrs	r3, r2
 8001088:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d109      	bne.n	80010a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fd31 	bl	8001afc <RCC_SetFlashLatencyFromMSIRange>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e34d      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010a4:	f000 fc36 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80010a8:	4601      	mov	r1, r0
 80010aa:	4b5c      	ldr	r3, [pc, #368]	; (800121c <HAL_RCC_OscConfig+0x298>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	4a5a      	ldr	r2, [pc, #360]	; (8001220 <HAL_RCC_OscConfig+0x29c>)
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	fa21 f303 	lsr.w	r3, r1, r3
 80010c0:	4a58      	ldr	r2, [pc, #352]	; (8001224 <HAL_RCC_OscConfig+0x2a0>)
 80010c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010c4:	4b58      	ldr	r3, [pc, #352]	; (8001228 <HAL_RCC_OscConfig+0x2a4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fb79 	bl	80007c0 <HAL_InitTick>
 80010ce:	4603      	mov	r3, r0
 80010d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d052      	beq.n	800117e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	e331      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d032      	beq.n	800114a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010e4:	4a4d      	ldr	r2, [pc, #308]	; (800121c <HAL_RCC_OscConfig+0x298>)
 80010e6:	4b4d      	ldr	r3, [pc, #308]	; (800121c <HAL_RCC_OscConfig+0x298>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fc50 	bl	8000994 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010f8:	f7ff fc4c 	bl	8000994 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e31a      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800110a:	4b44      	ldr	r3, [pc, #272]	; (800121c <HAL_RCC_OscConfig+0x298>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001116:	4a41      	ldr	r2, [pc, #260]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001118:	4b40      	ldr	r3, [pc, #256]	; (800121c <HAL_RCC_OscConfig+0x298>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f043 0308 	orr.w	r3, r3, #8
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	493e      	ldr	r1, [pc, #248]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001124:	4b3d      	ldr	r3, [pc, #244]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	4313      	orrs	r3, r2
 8001132:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001134:	4939      	ldr	r1, [pc, #228]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001136:	4b39      	ldr	r3, [pc, #228]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	4313      	orrs	r3, r2
 8001146:	604b      	str	r3, [r1, #4]
 8001148:	e01a      	b.n	8001180 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800114a:	4a34      	ldr	r2, [pc, #208]	; (800121c <HAL_RCC_OscConfig+0x298>)
 800114c:	4b33      	ldr	r3, [pc, #204]	; (800121c <HAL_RCC_OscConfig+0x298>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f023 0301 	bic.w	r3, r3, #1
 8001154:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001156:	f7ff fc1d 	bl	8000994 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800115e:	f7ff fc19 	bl	8000994 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e2e7      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f0      	bne.n	800115e <HAL_RCC_OscConfig+0x1da>
 800117c:	e000      	b.n	8001180 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800117e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d074      	beq.n	8001276 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2b08      	cmp	r3, #8
 8001190:	d005      	beq.n	800119e <HAL_RCC_OscConfig+0x21a>
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2b0c      	cmp	r3, #12
 8001196:	d10e      	bne.n	80011b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d10b      	bne.n	80011b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <HAL_RCC_OscConfig+0x298>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d064      	beq.n	8001274 <HAL_RCC_OscConfig+0x2f0>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d160      	bne.n	8001274 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e2c4      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x24a>
 80011c0:	4a16      	ldr	r2, [pc, #88]	; (800121c <HAL_RCC_OscConfig+0x298>)
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <HAL_RCC_OscConfig+0x298>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	e01d      	b.n	800120a <HAL_RCC_OscConfig+0x286>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d6:	d10c      	bne.n	80011f2 <HAL_RCC_OscConfig+0x26e>
 80011d8:	4a10      	ldr	r2, [pc, #64]	; (800121c <HAL_RCC_OscConfig+0x298>)
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_RCC_OscConfig+0x298>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_RCC_OscConfig+0x298>)
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HAL_RCC_OscConfig+0x298>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	e00b      	b.n	800120a <HAL_RCC_OscConfig+0x286>
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_RCC_OscConfig+0x298>)
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_RCC_OscConfig+0x298>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_RCC_OscConfig+0x298>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d01c      	beq.n	800124c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001212:	f7ff fbbf 	bl	8000994 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001218:	e011      	b.n	800123e <HAL_RCC_OscConfig+0x2ba>
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	0800389c 	.word	0x0800389c
 8001224:	20000000 	.word	0x20000000
 8001228:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800122c:	f7ff fbb2 	bl	8000994 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	; 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e280      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800123e:	4baf      	ldr	r3, [pc, #700]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x2a8>
 800124a:	e014      	b.n	8001276 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fba2 	bl	8000994 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fb9e 	bl	8000994 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e26c      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001266:	4ba5      	ldr	r3, [pc, #660]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x2d0>
 8001272:	e000      	b.n	8001276 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d060      	beq.n	8001344 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2b04      	cmp	r3, #4
 8001286:	d005      	beq.n	8001294 <HAL_RCC_OscConfig+0x310>
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2b0c      	cmp	r3, #12
 800128c:	d119      	bne.n	80012c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d116      	bne.n	80012c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001294:	4b99      	ldr	r3, [pc, #612]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <HAL_RCC_OscConfig+0x328>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e249      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ac:	4993      	ldr	r1, [pc, #588]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 80012ae:	4b93      	ldr	r3, [pc, #588]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	061b      	lsls	r3, r3, #24
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c0:	e040      	b.n	8001344 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d023      	beq.n	8001312 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ca:	4a8c      	ldr	r2, [pc, #560]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 80012cc:	4b8b      	ldr	r3, [pc, #556]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d6:	f7ff fb5d 	bl	8000994 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012de:	f7ff fb59 	bl	8000994 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e227      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f0:	4b82      	ldr	r3, [pc, #520]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fc:	497f      	ldr	r1, [pc, #508]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 80012fe:	4b7f      	ldr	r3, [pc, #508]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	061b      	lsls	r3, r3, #24
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
 8001310:	e018      	b.n	8001344 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001312:	4a7a      	ldr	r2, [pc, #488]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001314:	4b79      	ldr	r3, [pc, #484]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800131c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131e:	f7ff fb39 	bl	8000994 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff fb35 	bl	8000994 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e203      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001338:	4b70      	ldr	r3, [pc, #448]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	2b00      	cmp	r3, #0
 800134e:	d03c      	beq.n	80013ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01c      	beq.n	8001392 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001358:	4a68      	ldr	r2, [pc, #416]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 800135a:	4b68      	ldr	r3, [pc, #416]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 800135c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001368:	f7ff fb14 	bl	8000994 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fb10 	bl	8000994 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1de      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001382:	4b5e      	ldr	r3, [pc, #376]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0ef      	beq.n	8001370 <HAL_RCC_OscConfig+0x3ec>
 8001390:	e01b      	b.n	80013ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001392:	4a5a      	ldr	r2, [pc, #360]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001394:	4b59      	ldr	r3, [pc, #356]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800139a:	f023 0301 	bic.w	r3, r3, #1
 800139e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a2:	f7ff faf7 	bl	8000994 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013aa:	f7ff faf3 	bl	8000994 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e1c1      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013bc:	4b4f      	ldr	r3, [pc, #316]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 80013be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1ef      	bne.n	80013aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 80a6 	beq.w	8001524 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013dc:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10d      	bne.n	8001404 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e8:	4a44      	ldr	r2, [pc, #272]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 80013ea:	4b44      	ldr	r3, [pc, #272]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 80013ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f2:	6593      	str	r3, [r2, #88]	; 0x58
 80013f4:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001400:	2301      	movs	r3, #1
 8001402:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001404:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <HAL_RCC_OscConfig+0x57c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d118      	bne.n	8001442 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001410:	4a3b      	ldr	r2, [pc, #236]	; (8001500 <HAL_RCC_OscConfig+0x57c>)
 8001412:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <HAL_RCC_OscConfig+0x57c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141c:	f7ff faba 	bl	8000994 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001424:	f7ff fab6 	bl	8000994 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e184      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001436:	4b32      	ldr	r3, [pc, #200]	; (8001500 <HAL_RCC_OscConfig+0x57c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d108      	bne.n	800145c <HAL_RCC_OscConfig+0x4d8>
 800144a:	4a2c      	ldr	r2, [pc, #176]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 800144e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800145a:	e024      	b.n	80014a6 <HAL_RCC_OscConfig+0x522>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b05      	cmp	r3, #5
 8001462:	d110      	bne.n	8001486 <HAL_RCC_OscConfig+0x502>
 8001464:	4a25      	ldr	r2, [pc, #148]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001484:	e00f      	b.n	80014a6 <HAL_RCC_OscConfig+0x522>
 8001486:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 800148a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001496:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 800149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149e:	f023 0304 	bic.w	r3, r3, #4
 80014a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d016      	beq.n	80014dc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ae:	f7ff fa71 	bl	8000994 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b6:	f7ff fa6d 	bl	8000994 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e139      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_OscConfig+0x578>)
 80014ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0ed      	beq.n	80014b6 <HAL_RCC_OscConfig+0x532>
 80014da:	e01a      	b.n	8001512 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014dc:	f7ff fa5a 	bl	8000994 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014e2:	e00f      	b.n	8001504 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e4:	f7ff fa56 	bl	8000994 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d906      	bls.n	8001504 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e122      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001504:	4b90      	ldr	r3, [pc, #576]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 8001506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1e8      	bne.n	80014e4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001512:	7ffb      	ldrb	r3, [r7, #31]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d105      	bne.n	8001524 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001518:	4a8b      	ldr	r2, [pc, #556]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 800151a:	4b8b      	ldr	r3, [pc, #556]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001522:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8108 	beq.w	800173e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	2b02      	cmp	r3, #2
 8001534:	f040 80d0 	bne.w	80016d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001538:	4b83      	ldr	r3, [pc, #524]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f003 0203 	and.w	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	429a      	cmp	r2, r3
 800154a:	d130      	bne.n	80015ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	3b01      	subs	r3, #1
 8001558:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800155a:	429a      	cmp	r2, r3
 800155c:	d127      	bne.n	80015ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001568:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800156a:	429a      	cmp	r2, r3
 800156c:	d11f      	bne.n	80015ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001578:	2a07      	cmp	r2, #7
 800157a:	bf14      	ite	ne
 800157c:	2201      	movne	r2, #1
 800157e:	2200      	moveq	r2, #0
 8001580:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001582:	4293      	cmp	r3, r2
 8001584:	d113      	bne.n	80015ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	3b01      	subs	r3, #1
 8001594:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001596:	429a      	cmp	r2, r3
 8001598:	d109      	bne.n	80015ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	085b      	lsrs	r3, r3, #1
 80015a6:	3b01      	subs	r3, #1
 80015a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d06e      	beq.n	800168c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b0c      	cmp	r3, #12
 80015b2:	d069      	beq.n	8001688 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015b4:	4b64      	ldr	r3, [pc, #400]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d105      	bne.n	80015cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80015c0:	4b61      	ldr	r3, [pc, #388]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0b7      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015d0:	4a5d      	ldr	r2, [pc, #372]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 80015d2:	4b5d      	ldr	r3, [pc, #372]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015dc:	f7ff f9da 	bl	8000994 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff f9d6 	bl	8000994 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0a4      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f6:	4b54      	ldr	r3, [pc, #336]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001602:	4851      	ldr	r0, [pc, #324]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	4b50      	ldr	r3, [pc, #320]	; (800174c <HAL_RCC_OscConfig+0x7c8>)
 800160a:	4013      	ands	r3, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001614:	3a01      	subs	r2, #1
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	4311      	orrs	r1, r2
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800161e:	0212      	lsls	r2, r2, #8
 8001620:	4311      	orrs	r1, r2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001626:	0852      	lsrs	r2, r2, #1
 8001628:	3a01      	subs	r2, #1
 800162a:	0552      	lsls	r2, r2, #21
 800162c:	4311      	orrs	r1, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001632:	0852      	lsrs	r2, r2, #1
 8001634:	3a01      	subs	r2, #1
 8001636:	0652      	lsls	r2, r2, #25
 8001638:	4311      	orrs	r1, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800163e:	0912      	lsrs	r2, r2, #4
 8001640:	0452      	lsls	r2, r2, #17
 8001642:	430a      	orrs	r2, r1
 8001644:	4313      	orrs	r3, r2
 8001646:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001648:	4a3f      	ldr	r2, [pc, #252]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 800164a:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001652:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001654:	4a3c      	ldr	r2, [pc, #240]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 8001656:	4b3c      	ldr	r3, [pc, #240]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800165e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001660:	f7ff f998 	bl	8000994 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff f994 	bl	8000994 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e062      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800167a:	4b33      	ldr	r3, [pc, #204]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001686:	e05a      	b.n	800173e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e059      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800168c:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d152      	bne.n	800173e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001698:	4a2b      	ldr	r2, [pc, #172]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 800169a:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016a4:	4a28      	ldr	r2, [pc, #160]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 80016a6:	4b28      	ldr	r3, [pc, #160]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016b0:	f7ff f970 	bl	8000994 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff f96c 	bl	8000994 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e03a      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x734>
 80016d6:	e032      	b.n	800173e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	d02d      	beq.n	800173a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016de:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016e8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d105      	bne.n	8001702 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80016f6:	4a14      	ldr	r2, [pc, #80]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f023 0303 	bic.w	r3, r3, #3
 8001700:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001702:	4a11      	ldr	r2, [pc, #68]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800170c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001710:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff f93f 	bl	8000994 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff f93b 	bl	8000994 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e009      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_RCC_OscConfig+0x7c4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x796>
 8001738:	e001      	b.n	800173e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40021000 	.word	0x40021000
 800174c:	f99d808c 	.word	0xf99d808c

08001750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0c8      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001764:	4b66      	ldr	r3, [pc, #408]	; (8001900 <HAL_RCC_ClockConfig+0x1b0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0207 	and.w	r2, r3, #7
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d210      	bcs.n	8001794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4963      	ldr	r1, [pc, #396]	; (8001900 <HAL_RCC_ClockConfig+0x1b0>)
 8001774:	4b62      	ldr	r3, [pc, #392]	; (8001900 <HAL_RCC_ClockConfig+0x1b0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 0207 	bic.w	r2, r3, #7
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b5f      	ldr	r3, [pc, #380]	; (8001900 <HAL_RCC_ClockConfig+0x1b0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0207 	and.w	r2, r3, #7
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0b0      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d04c      	beq.n	800183a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a8:	4b56      	ldr	r3, [pc, #344]	; (8001904 <HAL_RCC_ClockConfig+0x1b4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d121      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e09e      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017c0:	4b50      	ldr	r3, [pc, #320]	; (8001904 <HAL_RCC_ClockConfig+0x1b4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d115      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e092      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d107      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017d8:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <HAL_RCC_ClockConfig+0x1b4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d109      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e086      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e8:	4b46      	ldr	r3, [pc, #280]	; (8001904 <HAL_RCC_ClockConfig+0x1b4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e07e      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017f8:	4942      	ldr	r1, [pc, #264]	; (8001904 <HAL_RCC_ClockConfig+0x1b4>)
 80017fa:	4b42      	ldr	r3, [pc, #264]	; (8001904 <HAL_RCC_ClockConfig+0x1b4>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f023 0203 	bic.w	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800180a:	f7ff f8c3 	bl	8000994 <HAL_GetTick>
 800180e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001810:	e00a      	b.n	8001828 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001812:	f7ff f8bf 	bl	8000994 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e066      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <HAL_RCC_ClockConfig+0x1b4>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 020c 	and.w	r2, r3, #12
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	429a      	cmp	r2, r3
 8001838:	d1eb      	bne.n	8001812 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d008      	beq.n	8001858 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001846:	492f      	ldr	r1, [pc, #188]	; (8001904 <HAL_RCC_ClockConfig+0x1b4>)
 8001848:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <HAL_RCC_ClockConfig+0x1b4>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001858:	4b29      	ldr	r3, [pc, #164]	; (8001900 <HAL_RCC_ClockConfig+0x1b0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0207 	and.w	r2, r3, #7
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d910      	bls.n	8001888 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4926      	ldr	r1, [pc, #152]	; (8001900 <HAL_RCC_ClockConfig+0x1b0>)
 8001868:	4b25      	ldr	r3, [pc, #148]	; (8001900 <HAL_RCC_ClockConfig+0x1b0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f023 0207 	bic.w	r2, r3, #7
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <HAL_RCC_ClockConfig+0x1b0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0207 	and.w	r2, r3, #7
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e036      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001894:	491b      	ldr	r1, [pc, #108]	; (8001904 <HAL_RCC_ClockConfig+0x1b4>)
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_RCC_ClockConfig+0x1b4>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b2:	4914      	ldr	r1, [pc, #80]	; (8001904 <HAL_RCC_ClockConfig+0x1b4>)
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_RCC_ClockConfig+0x1b4>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018c6:	f000 f825 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80018ca:	4601      	mov	r1, r0
 80018cc:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <HAL_RCC_ClockConfig+0x1b4>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	5cd3      	ldrb	r3, [r2, r3]
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	fa21 f303 	lsr.w	r3, r1, r3
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe ff68 	bl	80007c0 <HAL_InitTick>
 80018f0:	4603      	mov	r3, r0
 80018f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80018f4:	7afb      	ldrb	r3, [r7, #11]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40022000 	.word	0x40022000
 8001904:	40021000 	.word	0x40021000
 8001908:	0800389c 	.word	0x0800389c
 800190c:	20000000 	.word	0x20000000
 8001910:	20000004 	.word	0x20000004

08001914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001922:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x104>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800192c:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x104>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x34>
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d121      	bne.n	8001986 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d11e      	bne.n	8001986 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001948:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x104>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d107      	bne.n	8001964 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001954:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x104>)
 8001956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	e005      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001964:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x104>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001970:	4a2a      	ldr	r2, [pc, #168]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001978:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10d      	bne.n	800199c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001984:	e00a      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	2b04      	cmp	r3, #4
 800198a:	d102      	bne.n	8001992 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x10c>)
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	e004      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	2b08      	cmp	r3, #8
 8001996:	d101      	bne.n	800199c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x110>)
 800199a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	2b0c      	cmp	r3, #12
 80019a0:	d133      	bne.n	8001a0a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019a2:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x104>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0xa4>
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d003      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0xaa>
 80019b6:	e005      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019ba:	617b      	str	r3, [r7, #20]
      break;
 80019bc:	e005      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x110>)
 80019c0:	617b      	str	r3, [r7, #20]
      break;
 80019c2:	e002      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	617b      	str	r3, [r7, #20]
      break;
 80019c8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x104>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	3301      	adds	r3, #1
 80019d6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x104>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	fb02 f203 	mul.w	r2, r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x104>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0e5b      	lsrs	r3, r3, #25
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	3301      	adds	r3, #1
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a0a:	69bb      	ldr	r3, [r7, #24]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3724      	adds	r7, #36	; 0x24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	080038b4 	.word	0x080038b4
 8001a20:	00f42400 	.word	0x00f42400
 8001a24:	007a1200 	.word	0x007a1200

08001a28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000000 	.word	0x20000000

08001a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a44:	f7ff fff0 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a48:	4601      	mov	r1, r0
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	080038ac 	.word	0x080038ac

08001a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001a70:	f7ff ffda 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a74:	4601      	mov	r1, r0
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	0adb      	lsrs	r3, r3, #11
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a82:	5cd3      	ldrb	r3, [r2, r3]
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	080038ac 	.word	0x080038ac

08001a98 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0203 	and.w	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <HAL_RCC_GetClockConfig+0x60>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0207 	and.w	r2, r3, #7
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	601a      	str	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40022000 	.word	0x40022000

08001afc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b08:	4b2a      	ldr	r3, [pc, #168]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b14:	f7ff f9d2 	bl	8000ebc <HAL_PWREx_GetVoltageRange>
 8001b18:	6178      	str	r0, [r7, #20]
 8001b1a:	e014      	b.n	8001b46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b1c:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b26:	6593      	str	r3, [r2, #88]	; 0x58
 8001b28:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b34:	f7ff f9c2 	bl	8000ebc <HAL_PWREx_GetVoltageRange>
 8001b38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b4c:	d10b      	bne.n	8001b66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b80      	cmp	r3, #128	; 0x80
 8001b52:	d919      	bls.n	8001b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2ba0      	cmp	r3, #160	; 0xa0
 8001b58:	d902      	bls.n	8001b60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	e013      	b.n	8001b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b60:	2301      	movs	r3, #1
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	e010      	b.n	8001b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b80      	cmp	r3, #128	; 0x80
 8001b6a:	d902      	bls.n	8001b72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	e00a      	b.n	8001b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b80      	cmp	r3, #128	; 0x80
 8001b76:	d102      	bne.n	8001b7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b78:	2302      	movs	r3, #2
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	e004      	b.n	8001b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b70      	cmp	r3, #112	; 0x70
 8001b82:	d101      	bne.n	8001b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b84:	2301      	movs	r3, #1
 8001b86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b88:	490b      	ldr	r1, [pc, #44]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 0207 	bic.w	r2, r3, #7
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b98:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0207 	and.w	r2, r3, #7
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d001      	beq.n	8001baa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40022000 	.word	0x40022000

08001bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bc8:	2300      	movs	r3, #0
 8001bca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d03f      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001be0:	d01c      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001be6:	d802      	bhi.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00e      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001bec:	e01f      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001bee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bf2:	d003      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001bf4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001bf8:	d01c      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001bfa:	e018      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001bfc:	4a85      	ldr	r2, [pc, #532]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bfe:	4b85      	ldr	r3, [pc, #532]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c08:	e015      	b.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fab9 	bl	8002188 <RCCEx_PLLSAI1_Config>
 8001c16:	4603      	mov	r3, r0
 8001c18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c1a:	e00c      	b.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3320      	adds	r3, #32
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fba0 	bl	8002368 <RCCEx_PLLSAI2_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c2c:	e003      	b.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	74fb      	strb	r3, [r7, #19]
      break;
 8001c32:	e000      	b.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c36:	7cfb      	ldrb	r3, [r7, #19]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10b      	bne.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c3c:	4975      	ldr	r1, [pc, #468]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c3e:	4b75      	ldr	r3, [pc, #468]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c52:	e001      	b.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c54:	7cfb      	ldrb	r3, [r7, #19]
 8001c56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d03f      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c6c:	d01c      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001c6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c72:	d802      	bhi.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00e      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001c78:	e01f      	b.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001c7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c7e:	d003      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001c80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001c84:	d01c      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001c86:	e018      	b.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c88:	4a62      	ldr	r2, [pc, #392]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c8a:	4b62      	ldr	r3, [pc, #392]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c94:	e015      	b.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 fa73 	bl	8002188 <RCCEx_PLLSAI1_Config>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ca6:	e00c      	b.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3320      	adds	r3, #32
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 fb5a 	bl	8002368 <RCCEx_PLLSAI2_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001cb8:	e003      	b.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	74fb      	strb	r3, [r7, #19]
      break;
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cc2:	7cfb      	ldrb	r3, [r7, #19]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cc8:	4952      	ldr	r1, [pc, #328]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cca:	4b52      	ldr	r3, [pc, #328]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001cde:	e001      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ce0:	7cfb      	ldrb	r3, [r7, #19]
 8001ce2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80a0 	beq.w	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cf6:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00d      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0c:	4a41      	ldr	r2, [pc, #260]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d0e:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d16:	6593      	str	r3, [r2, #88]	; 0x58
 8001d18:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d24:	2301      	movs	r3, #1
 8001d26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d28:	4a3b      	ldr	r2, [pc, #236]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001d2a:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d34:	f7fe fe2e 	bl	8000994 <HAL_GetTick>
 8001d38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d3a:	e009      	b.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3c:	f7fe fe2a 	bl	8000994 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d902      	bls.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	74fb      	strb	r3, [r7, #19]
        break;
 8001d4e:	e005      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d50:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ef      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001d5c:	7cfb      	ldrb	r3, [r7, #19]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d15c      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01f      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d019      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d8c:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dac:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d016      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7fe fde9 	bl	8000994 <HAL_GetTick>
 8001dc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc4:	e00b      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc6:	f7fe fde5 	bl	8000994 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d902      	bls.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	74fb      	strb	r3, [r7, #19]
            break;
 8001ddc:	e006      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0ec      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001dec:	7cfb      	ldrb	r3, [r7, #19]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e0a:	e009      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e0c:	7cfb      	ldrb	r3, [r7, #19]
 8001e0e:	74bb      	strb	r3, [r7, #18]
 8001e10:	e006      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e1c:	7cfb      	ldrb	r3, [r7, #19]
 8001e1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e20:	7c7b      	ldrb	r3, [r7, #17]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d105      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e26:	4a9e      	ldr	r2, [pc, #632]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e28:	4b9d      	ldr	r3, [pc, #628]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e3e:	4998      	ldr	r1, [pc, #608]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e40:	4b97      	ldr	r3, [pc, #604]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	f023 0203 	bic.w	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00a      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e60:	498f      	ldr	r1, [pc, #572]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e62:	4b8f      	ldr	r3, [pc, #572]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e68:	f023 020c 	bic.w	r2, r3, #12
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e82:	4987      	ldr	r1, [pc, #540]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e84:	4b86      	ldr	r3, [pc, #536]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ea4:	497e      	ldr	r1, [pc, #504]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ea6:	4b7e      	ldr	r3, [pc, #504]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ec6:	4976      	ldr	r1, [pc, #472]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ec8:	4b75      	ldr	r3, [pc, #468]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ece:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ee8:	496d      	ldr	r1, [pc, #436]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eea:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f0a:	4965      	ldr	r1, [pc, #404]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f0c:	4b64      	ldr	r3, [pc, #400]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f12:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f2c:	495c      	ldr	r1, [pc, #368]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f2e:	4b5c      	ldr	r3, [pc, #368]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f4e:	4954      	ldr	r1, [pc, #336]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f70:	494b      	ldr	r1, [pc, #300]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f72:	4b4b      	ldr	r3, [pc, #300]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f92:	4943      	ldr	r1, [pc, #268]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f94:	4b42      	ldr	r3, [pc, #264]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d028      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fb4:	493a      	ldr	r1, [pc, #232]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fd4:	4a32      	ldr	r2, [pc, #200]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fd6:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fde:	60d3      	str	r3, [r2, #12]
 8001fe0:	e011      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fe6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fea:	d10c      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f8c8 	bl	8002188 <RCCEx_PLLSAI1_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002002:	7cfb      	ldrb	r3, [r7, #19]
 8002004:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d028      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002012:	4923      	ldr	r1, [pc, #140]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002014:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002030:	d106      	bne.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800203c:	60d3      	str	r3, [r2, #12]
 800203e:	e011      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002048:	d10c      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3304      	adds	r3, #4
 800204e:	2101      	movs	r1, #1
 8002050:	4618      	mov	r0, r3
 8002052:	f000 f899 	bl	8002188 <RCCEx_PLLSAI1_Config>
 8002056:	4603      	mov	r3, r0
 8002058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800205a:	7cfb      	ldrb	r3, [r7, #19]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d02b      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002070:	490b      	ldr	r1, [pc, #44]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002078:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800208e:	d109      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002090:	4a03      	ldr	r2, [pc, #12]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002092:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800209a:	60d3      	str	r3, [r2, #12]
 800209c:	e014      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2101      	movs	r1, #1
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 f867 	bl	8002188 <RCCEx_PLLSAI1_Config>
 80020ba:	4603      	mov	r3, r0
 80020bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020be:	7cfb      	ldrb	r3, [r7, #19]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d02f      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020d4:	492b      	ldr	r1, [pc, #172]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80020d6:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020f2:	d10d      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3304      	adds	r3, #4
 80020f8:	2102      	movs	r1, #2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f844 	bl	8002188 <RCCEx_PLLSAI1_Config>
 8002100:	4603      	mov	r3, r0
 8002102:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d014      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800210a:	7cfb      	ldrb	r3, [r7, #19]
 800210c:	74bb      	strb	r3, [r7, #18]
 800210e:	e011      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002118:	d10c      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3320      	adds	r3, #32
 800211e:	2102      	movs	r1, #2
 8002120:	4618      	mov	r0, r3
 8002122:	f000 f921 	bl	8002368 <RCCEx_PLLSAI2_Config>
 8002126:	4603      	mov	r3, r0
 8002128:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800212a:	7cfb      	ldrb	r3, [r7, #19]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002140:	4910      	ldr	r1, [pc, #64]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002148:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00b      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002162:	4908      	ldr	r1, [pc, #32]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002164:	4b07      	ldr	r3, [pc, #28]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800217a:	7cbb      	ldrb	r3, [r7, #18]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000

08002188 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002196:	4b73      	ldr	r3, [pc, #460]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d018      	beq.n	80021d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021a2:	4b70      	ldr	r3, [pc, #448]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0203 	and.w	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d10d      	bne.n	80021ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
       ||
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80021ba:	4b6a      	ldr	r3, [pc, #424]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
       ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d044      	beq.n	8002258 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
 80021d2:	e041      	b.n	8002258 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d00c      	beq.n	80021f6 <RCCEx_PLLSAI1_Config+0x6e>
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d013      	beq.n	8002208 <RCCEx_PLLSAI1_Config+0x80>
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d120      	bne.n	8002226 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021e4:	4b5f      	ldr	r3, [pc, #380]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d11d      	bne.n	800222c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f4:	e01a      	b.n	800222c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021f6:	4b5b      	ldr	r3, [pc, #364]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d116      	bne.n	8002230 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002206:	e013      	b.n	8002230 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002208:	4b56      	ldr	r3, [pc, #344]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10f      	bne.n	8002234 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002214:	4b53      	ldr	r3, [pc, #332]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d109      	bne.n	8002234 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002224:	e006      	b.n	8002234 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
      break;
 800222a:	e004      	b.n	8002236 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800222c:	bf00      	nop
 800222e:	e002      	b.n	8002236 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002230:	bf00      	nop
 8002232:	e000      	b.n	8002236 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002234:	bf00      	nop
    }

    if(status == HAL_OK)
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10d      	bne.n	8002258 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800223c:	4849      	ldr	r0, [pc, #292]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 800223e:	4b49      	ldr	r3, [pc, #292]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6819      	ldr	r1, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	430b      	orrs	r3, r1
 8002254:	4313      	orrs	r3, r2
 8002256:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d17d      	bne.n	800235a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800225e:	4a41      	ldr	r2, [pc, #260]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002260:	4b40      	ldr	r3, [pc, #256]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226a:	f7fe fb93 	bl	8000994 <HAL_GetTick>
 800226e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002270:	e009      	b.n	8002286 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002272:	f7fe fb8f 	bl	8000994 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d902      	bls.n	8002286 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	73fb      	strb	r3, [r7, #15]
        break;
 8002284:	e005      	b.n	8002292 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002286:	4b37      	ldr	r3, [pc, #220]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1ef      	bne.n	8002272 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d160      	bne.n	800235a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d111      	bne.n	80022c2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800229e:	4831      	ldr	r0, [pc, #196]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022a0:	4b30      	ldr	r3, [pc, #192]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80022a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6892      	ldr	r2, [r2, #8]
 80022b0:	0211      	lsls	r1, r2, #8
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68d2      	ldr	r2, [r2, #12]
 80022b6:	0912      	lsrs	r2, r2, #4
 80022b8:	0452      	lsls	r2, r2, #17
 80022ba:	430a      	orrs	r2, r1
 80022bc:	4313      	orrs	r3, r2
 80022be:	6103      	str	r3, [r0, #16]
 80022c0:	e027      	b.n	8002312 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d112      	bne.n	80022ee <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022c8:	4826      	ldr	r0, [pc, #152]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022ca:	4b26      	ldr	r3, [pc, #152]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80022d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6892      	ldr	r2, [r2, #8]
 80022da:	0211      	lsls	r1, r2, #8
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6912      	ldr	r2, [r2, #16]
 80022e0:	0852      	lsrs	r2, r2, #1
 80022e2:	3a01      	subs	r2, #1
 80022e4:	0552      	lsls	r2, r2, #21
 80022e6:	430a      	orrs	r2, r1
 80022e8:	4313      	orrs	r3, r2
 80022ea:	6103      	str	r3, [r0, #16]
 80022ec:	e011      	b.n	8002312 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022ee:	481d      	ldr	r0, [pc, #116]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022f0:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80022f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6892      	ldr	r2, [r2, #8]
 8002300:	0211      	lsls	r1, r2, #8
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6952      	ldr	r2, [r2, #20]
 8002306:	0852      	lsrs	r2, r2, #1
 8002308:	3a01      	subs	r2, #1
 800230a:	0652      	lsls	r2, r2, #25
 800230c:	430a      	orrs	r2, r1
 800230e:	4313      	orrs	r3, r2
 8002310:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002312:	4a14      	ldr	r2, [pc, #80]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800231c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231e:	f7fe fb39 	bl	8000994 <HAL_GetTick>
 8002322:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002324:	e009      	b.n	800233a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002326:	f7fe fb35 	bl	8000994 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d902      	bls.n	800233a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	73fb      	strb	r3, [r7, #15]
          break;
 8002338:	e005      	b.n	8002346 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0ef      	beq.n	8002326 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d106      	bne.n	800235a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800234c:	4905      	ldr	r1, [pc, #20]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000

08002368 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002376:	4b68      	ldr	r3, [pc, #416]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d018      	beq.n	80023b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002382:	4b65      	ldr	r3, [pc, #404]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0203 	and.w	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d10d      	bne.n	80023ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
       ||
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800239a:	4b5f      	ldr	r3, [pc, #380]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
       ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d044      	beq.n	8002438 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
 80023b2:	e041      	b.n	8002438 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d00c      	beq.n	80023d6 <RCCEx_PLLSAI2_Config+0x6e>
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d013      	beq.n	80023e8 <RCCEx_PLLSAI2_Config+0x80>
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d120      	bne.n	8002406 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023c4:	4b54      	ldr	r3, [pc, #336]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d11d      	bne.n	800240c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d4:	e01a      	b.n	800240c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023d6:	4b50      	ldr	r3, [pc, #320]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d116      	bne.n	8002410 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e6:	e013      	b.n	8002410 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023e8:	4b4b      	ldr	r3, [pc, #300]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10f      	bne.n	8002414 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023f4:	4b48      	ldr	r3, [pc, #288]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002404:	e006      	b.n	8002414 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      break;
 800240a:	e004      	b.n	8002416 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002414:	bf00      	nop
    }

    if(status == HAL_OK)
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10d      	bne.n	8002438 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800241c:	483e      	ldr	r0, [pc, #248]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 800241e:	4b3e      	ldr	r3, [pc, #248]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6819      	ldr	r1, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	430b      	orrs	r3, r1
 8002434:	4313      	orrs	r3, r2
 8002436:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d167      	bne.n	800250e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800243e:	4a36      	ldr	r2, [pc, #216]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002440:	4b35      	ldr	r3, [pc, #212]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800244a:	f7fe faa3 	bl	8000994 <HAL_GetTick>
 800244e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002450:	e009      	b.n	8002466 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002452:	f7fe fa9f 	bl	8000994 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d902      	bls.n	8002466 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	73fb      	strb	r3, [r7, #15]
        break;
 8002464:	e005      	b.n	8002472 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002466:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ef      	bne.n	8002452 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d14a      	bne.n	800250e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d111      	bne.n	80024a2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800247e:	4826      	ldr	r0, [pc, #152]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6892      	ldr	r2, [r2, #8]
 8002490:	0211      	lsls	r1, r2, #8
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68d2      	ldr	r2, [r2, #12]
 8002496:	0912      	lsrs	r2, r2, #4
 8002498:	0452      	lsls	r2, r2, #17
 800249a:	430a      	orrs	r2, r1
 800249c:	4313      	orrs	r3, r2
 800249e:	6143      	str	r3, [r0, #20]
 80024a0:	e011      	b.n	80024c6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024a2:	481d      	ldr	r0, [pc, #116]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024a4:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6892      	ldr	r2, [r2, #8]
 80024b4:	0211      	lsls	r1, r2, #8
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6912      	ldr	r2, [r2, #16]
 80024ba:	0852      	lsrs	r2, r2, #1
 80024bc:	3a01      	subs	r2, #1
 80024be:	0652      	lsls	r2, r2, #25
 80024c0:	430a      	orrs	r2, r1
 80024c2:	4313      	orrs	r3, r2
 80024c4:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80024c6:	4a14      	ldr	r2, [pc, #80]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024c8:	4b13      	ldr	r3, [pc, #76]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7fe fa5f 	bl	8000994 <HAL_GetTick>
 80024d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80024d8:	e009      	b.n	80024ee <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024da:	f7fe fa5b 	bl	8000994 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d902      	bls.n	80024ee <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	73fb      	strb	r3, [r7, #15]
          break;
 80024ec:	e005      	b.n	80024fa <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0ef      	beq.n	80024da <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d106      	bne.n	800250e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002500:	4905      	ldr	r1, [pc, #20]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000

0800251c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e049      	b.n	80025c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f841 	bl	80025ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3304      	adds	r3, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f000 f9f8 	bl	8002950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d001      	beq.n	80025f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e04f      	b.n	8002698 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	68d2      	ldr	r2, [r2, #12]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d01d      	beq.n	8002656 <HAL_TIM_Base_Start_IT+0x76>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002622:	d018      	beq.n	8002656 <HAL_TIM_Base_Start_IT+0x76>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1f      	ldr	r2, [pc, #124]	; (80026a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_TIM_Base_Start_IT+0x76>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1e      	ldr	r2, [pc, #120]	; (80026ac <HAL_TIM_Base_Start_IT+0xcc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00e      	beq.n	8002656 <HAL_TIM_Base_Start_IT+0x76>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a1c      	ldr	r2, [pc, #112]	; (80026b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d009      	beq.n	8002656 <HAL_TIM_Base_Start_IT+0x76>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1b      	ldr	r2, [pc, #108]	; (80026b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d004      	beq.n	8002656 <HAL_TIM_Base_Start_IT+0x76>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d115      	bne.n	8002682 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <HAL_TIM_Base_Start_IT+0xdc>)
 800265e:	4013      	ands	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b06      	cmp	r3, #6
 8002666:	d015      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0xb4>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266e:	d011      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002680:	e008      	b.n	8002694 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e000      	b.n	8002696 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002694:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	40012c00 	.word	0x40012c00
 80026a8:	40000400 	.word	0x40000400
 80026ac:	40000800 	.word	0x40000800
 80026b0:	40000c00 	.word	0x40000c00
 80026b4:	40013400 	.word	0x40013400
 80026b8:	40014000 	.word	0x40014000
 80026bc:	00010007 	.word	0x00010007

080026c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d122      	bne.n	800271c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d11b      	bne.n	800271c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0202 	mvn.w	r2, #2
 80026ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f905 	bl	8002912 <HAL_TIM_IC_CaptureCallback>
 8002708:	e005      	b.n	8002716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8f7 	bl	80028fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f908 	bl	8002926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b04      	cmp	r3, #4
 8002728:	d122      	bne.n	8002770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b04      	cmp	r3, #4
 8002736:	d11b      	bne.n	8002770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0204 	mvn.w	r2, #4
 8002740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2202      	movs	r2, #2
 8002746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f8db 	bl	8002912 <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f8cd 	bl	80028fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f8de 	bl	8002926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b08      	cmp	r3, #8
 800277c:	d122      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b08      	cmp	r3, #8
 800278a:	d11b      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0208 	mvn.w	r2, #8
 8002794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2204      	movs	r2, #4
 800279a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f8b1 	bl	8002912 <HAL_TIM_IC_CaptureCallback>
 80027b0:	e005      	b.n	80027be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f8a3 	bl	80028fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f8b4 	bl	8002926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d122      	bne.n	8002818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b10      	cmp	r3, #16
 80027de:	d11b      	bne.n	8002818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0210 	mvn.w	r2, #16
 80027e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2208      	movs	r2, #8
 80027ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f887 	bl	8002912 <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f879 	bl	80028fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f88a 	bl	8002926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b01      	cmp	r3, #1
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d107      	bne.n	8002844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0201 	mvn.w	r2, #1
 800283c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fd ff42 	bl	80006c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284e:	2b80      	cmp	r3, #128	; 0x80
 8002850:	d10e      	bne.n	8002870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285c:	2b80      	cmp	r3, #128	; 0x80
 800285e:	d107      	bne.n	8002870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f914 	bl	8002a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800287e:	d10e      	bne.n	800289e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288a:	2b80      	cmp	r3, #128	; 0x80
 800288c:	d107      	bne.n	800289e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f907 	bl	8002aac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d10e      	bne.n	80028ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d107      	bne.n	80028ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f838 	bl	800293a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d10e      	bne.n	80028f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d107      	bne.n	80028f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f06f 0220 	mvn.w	r2, #32
 80028ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f8c7 	bl	8002a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a40      	ldr	r2, [pc, #256]	; (8002a64 <TIM_Base_SetConfig+0x114>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d013      	beq.n	8002990 <TIM_Base_SetConfig+0x40>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296e:	d00f      	beq.n	8002990 <TIM_Base_SetConfig+0x40>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a3d      	ldr	r2, [pc, #244]	; (8002a68 <TIM_Base_SetConfig+0x118>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00b      	beq.n	8002990 <TIM_Base_SetConfig+0x40>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a3c      	ldr	r2, [pc, #240]	; (8002a6c <TIM_Base_SetConfig+0x11c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d007      	beq.n	8002990 <TIM_Base_SetConfig+0x40>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a3b      	ldr	r2, [pc, #236]	; (8002a70 <TIM_Base_SetConfig+0x120>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d003      	beq.n	8002990 <TIM_Base_SetConfig+0x40>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a3a      	ldr	r2, [pc, #232]	; (8002a74 <TIM_Base_SetConfig+0x124>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d108      	bne.n	80029a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a2f      	ldr	r2, [pc, #188]	; (8002a64 <TIM_Base_SetConfig+0x114>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01f      	beq.n	80029ea <TIM_Base_SetConfig+0x9a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b0:	d01b      	beq.n	80029ea <TIM_Base_SetConfig+0x9a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a2c      	ldr	r2, [pc, #176]	; (8002a68 <TIM_Base_SetConfig+0x118>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d017      	beq.n	80029ea <TIM_Base_SetConfig+0x9a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a2b      	ldr	r2, [pc, #172]	; (8002a6c <TIM_Base_SetConfig+0x11c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <TIM_Base_SetConfig+0x9a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a2a      	ldr	r2, [pc, #168]	; (8002a70 <TIM_Base_SetConfig+0x120>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00f      	beq.n	80029ea <TIM_Base_SetConfig+0x9a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a29      	ldr	r2, [pc, #164]	; (8002a74 <TIM_Base_SetConfig+0x124>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00b      	beq.n	80029ea <TIM_Base_SetConfig+0x9a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a28      	ldr	r2, [pc, #160]	; (8002a78 <TIM_Base_SetConfig+0x128>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d007      	beq.n	80029ea <TIM_Base_SetConfig+0x9a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <TIM_Base_SetConfig+0x12c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d003      	beq.n	80029ea <TIM_Base_SetConfig+0x9a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a26      	ldr	r2, [pc, #152]	; (8002a80 <TIM_Base_SetConfig+0x130>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d108      	bne.n	80029fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <TIM_Base_SetConfig+0x114>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00f      	beq.n	8002a48 <TIM_Base_SetConfig+0xf8>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <TIM_Base_SetConfig+0x124>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00b      	beq.n	8002a48 <TIM_Base_SetConfig+0xf8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a11      	ldr	r2, [pc, #68]	; (8002a78 <TIM_Base_SetConfig+0x128>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d007      	beq.n	8002a48 <TIM_Base_SetConfig+0xf8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a10      	ldr	r2, [pc, #64]	; (8002a7c <TIM_Base_SetConfig+0x12c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d003      	beq.n	8002a48 <TIM_Base_SetConfig+0xf8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a0f      	ldr	r2, [pc, #60]	; (8002a80 <TIM_Base_SetConfig+0x130>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d103      	bne.n	8002a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	615a      	str	r2, [r3, #20]
}
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800
 8002a70:	40000c00 	.word	0x40000c00
 8002a74:	40013400 	.word	0x40013400
 8002a78:	40014000 	.word	0x40014000
 8002a7c:	40014400 	.word	0x40014400
 8002a80:	40014800 	.word	0x40014800

08002a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e040      	b.n	8002b54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fd fe2a 	bl	800073c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	; 0x24
 8002aec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	f022 0201 	bic.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f91a 	bl	8002d38 <UART_SetConfig>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e022      	b.n	8002b54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fb92 	bl	8003240 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	6852      	ldr	r2, [r2, #4]
 8002b26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	6892      	ldr	r2, [r2, #8]
 8002b36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fc19 	bl	8003384 <UART_CheckIdleState>
 8002b52:	4603      	mov	r3, r0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	f040 8082 	bne.w	8002c7a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_UART_Transmit+0x26>
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e07a      	b.n	8002c7c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_UART_Transmit+0x38>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e073      	b.n	8002c7c <HAL_UART_Transmit+0x120>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2221      	movs	r2, #33	; 0x21
 8002ba8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002baa:	f7fd fef3 	bl	8000994 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	88fa      	ldrh	r2, [r7, #6]
 8002bb4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	88fa      	ldrh	r2, [r7, #6]
 8002bbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc8:	d108      	bne.n	8002bdc <HAL_UART_Transmit+0x80>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d104      	bne.n	8002bdc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	e003      	b.n	8002be4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002bec:	e02d      	b.n	8002c4a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2180      	movs	r1, #128	; 0x80
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fc0c 	bl	8003416 <UART_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e039      	b.n	8002c7c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10b      	bne.n	8002c26 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	8812      	ldrh	r2, [r2, #0]
 8002c16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c1a:	b292      	uxth	r2, r2
 8002c1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	3302      	adds	r3, #2
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	e008      	b.n	8002c38 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	7812      	ldrb	r2, [r2, #0]
 8002c2e:	b292      	uxth	r2, r2
 8002c30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3301      	adds	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1cb      	bne.n	8002bee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2140      	movs	r1, #64	; 0x40
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fbd8 	bl	8003416 <UART_WaitOnFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e005      	b.n	8002c7c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3720      	adds	r7, #32
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d131      	bne.n	8002cfe <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_UART_Receive_IT+0x22>
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e02a      	b.n	8002d00 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_UART_Receive_IT+0x34>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e023      	b.n	8002d00 <HAL_UART_Receive_IT+0x7c>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a0f      	ldr	r2, [pc, #60]	; (8002d08 <HAL_UART_Receive_IT+0x84>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00e      	beq.n	8002cee <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002cec:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 fc0b 	bl	8003510 <UART_Start_Receive_IT>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	e000      	b.n	8002d00 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8002cfe:	2302      	movs	r3, #2
  }
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40008000 	.word	0x40008000

08002d0c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d38:	b5b0      	push	{r4, r5, r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	4bac      	ldr	r3, [pc, #688]	; (8003018 <UART_SetConfig+0x2e0>)
 8002d68:	400b      	ands	r3, r1
 8002d6a:	69f9      	ldr	r1, [r7, #28]
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	6852      	ldr	r2, [r2, #4]
 8002d7a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68d2      	ldr	r2, [r2, #12]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4aa2      	ldr	r2, [pc, #648]	; (800301c <UART_SetConfig+0x2e4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d004      	beq.n	8002da0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	6892      	ldr	r2, [r2, #8]
 8002daa:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a99      	ldr	r2, [pc, #612]	; (8003020 <UART_SetConfig+0x2e8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d122      	bne.n	8002e04 <UART_SetConfig+0xcc>
 8002dbe:	4b99      	ldr	r3, [pc, #612]	; (8003024 <UART_SetConfig+0x2ec>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d817      	bhi.n	8002dfc <UART_SetConfig+0xc4>
 8002dcc:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <UART_SetConfig+0x9c>)
 8002dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd2:	bf00      	nop
 8002dd4:	08002de5 	.word	0x08002de5
 8002dd8:	08002df1 	.word	0x08002df1
 8002ddc:	08002deb 	.word	0x08002deb
 8002de0:	08002df7 	.word	0x08002df7
 8002de4:	2301      	movs	r3, #1
 8002de6:	76fb      	strb	r3, [r7, #27]
 8002de8:	e0e8      	b.n	8002fbc <UART_SetConfig+0x284>
 8002dea:	2302      	movs	r3, #2
 8002dec:	76fb      	strb	r3, [r7, #27]
 8002dee:	e0e5      	b.n	8002fbc <UART_SetConfig+0x284>
 8002df0:	2304      	movs	r3, #4
 8002df2:	76fb      	strb	r3, [r7, #27]
 8002df4:	e0e2      	b.n	8002fbc <UART_SetConfig+0x284>
 8002df6:	2308      	movs	r3, #8
 8002df8:	76fb      	strb	r3, [r7, #27]
 8002dfa:	e0df      	b.n	8002fbc <UART_SetConfig+0x284>
 8002dfc:	2310      	movs	r3, #16
 8002dfe:	76fb      	strb	r3, [r7, #27]
 8002e00:	bf00      	nop
 8002e02:	e0db      	b.n	8002fbc <UART_SetConfig+0x284>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a87      	ldr	r2, [pc, #540]	; (8003028 <UART_SetConfig+0x2f0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d134      	bne.n	8002e78 <UART_SetConfig+0x140>
 8002e0e:	4b85      	ldr	r3, [pc, #532]	; (8003024 <UART_SetConfig+0x2ec>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b0c      	cmp	r3, #12
 8002e1a:	d829      	bhi.n	8002e70 <UART_SetConfig+0x138>
 8002e1c:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <UART_SetConfig+0xec>)
 8002e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e22:	bf00      	nop
 8002e24:	08002e59 	.word	0x08002e59
 8002e28:	08002e71 	.word	0x08002e71
 8002e2c:	08002e71 	.word	0x08002e71
 8002e30:	08002e71 	.word	0x08002e71
 8002e34:	08002e65 	.word	0x08002e65
 8002e38:	08002e71 	.word	0x08002e71
 8002e3c:	08002e71 	.word	0x08002e71
 8002e40:	08002e71 	.word	0x08002e71
 8002e44:	08002e5f 	.word	0x08002e5f
 8002e48:	08002e71 	.word	0x08002e71
 8002e4c:	08002e71 	.word	0x08002e71
 8002e50:	08002e71 	.word	0x08002e71
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2300      	movs	r3, #0
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0ae      	b.n	8002fbc <UART_SetConfig+0x284>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0ab      	b.n	8002fbc <UART_SetConfig+0x284>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0a8      	b.n	8002fbc <UART_SetConfig+0x284>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0a5      	b.n	8002fbc <UART_SetConfig+0x284>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	bf00      	nop
 8002e76:	e0a1      	b.n	8002fbc <UART_SetConfig+0x284>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a6b      	ldr	r2, [pc, #428]	; (800302c <UART_SetConfig+0x2f4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d120      	bne.n	8002ec4 <UART_SetConfig+0x18c>
 8002e82:	4b68      	ldr	r3, [pc, #416]	; (8003024 <UART_SetConfig+0x2ec>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d00f      	beq.n	8002eb0 <UART_SetConfig+0x178>
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d802      	bhi.n	8002e9a <UART_SetConfig+0x162>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <UART_SetConfig+0x16c>
 8002e98:	e010      	b.n	8002ebc <UART_SetConfig+0x184>
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d005      	beq.n	8002eaa <UART_SetConfig+0x172>
 8002e9e:	2b30      	cmp	r3, #48	; 0x30
 8002ea0:	d009      	beq.n	8002eb6 <UART_SetConfig+0x17e>
 8002ea2:	e00b      	b.n	8002ebc <UART_SetConfig+0x184>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	76fb      	strb	r3, [r7, #27]
 8002ea8:	e088      	b.n	8002fbc <UART_SetConfig+0x284>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	76fb      	strb	r3, [r7, #27]
 8002eae:	e085      	b.n	8002fbc <UART_SetConfig+0x284>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	76fb      	strb	r3, [r7, #27]
 8002eb4:	e082      	b.n	8002fbc <UART_SetConfig+0x284>
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	76fb      	strb	r3, [r7, #27]
 8002eba:	e07f      	b.n	8002fbc <UART_SetConfig+0x284>
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	76fb      	strb	r3, [r7, #27]
 8002ec0:	bf00      	nop
 8002ec2:	e07b      	b.n	8002fbc <UART_SetConfig+0x284>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a59      	ldr	r2, [pc, #356]	; (8003030 <UART_SetConfig+0x2f8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d120      	bne.n	8002f10 <UART_SetConfig+0x1d8>
 8002ece:	4b55      	ldr	r3, [pc, #340]	; (8003024 <UART_SetConfig+0x2ec>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d00f      	beq.n	8002efc <UART_SetConfig+0x1c4>
 8002edc:	2b40      	cmp	r3, #64	; 0x40
 8002ede:	d802      	bhi.n	8002ee6 <UART_SetConfig+0x1ae>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <UART_SetConfig+0x1b8>
 8002ee4:	e010      	b.n	8002f08 <UART_SetConfig+0x1d0>
 8002ee6:	2b80      	cmp	r3, #128	; 0x80
 8002ee8:	d005      	beq.n	8002ef6 <UART_SetConfig+0x1be>
 8002eea:	2bc0      	cmp	r3, #192	; 0xc0
 8002eec:	d009      	beq.n	8002f02 <UART_SetConfig+0x1ca>
 8002eee:	e00b      	b.n	8002f08 <UART_SetConfig+0x1d0>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	76fb      	strb	r3, [r7, #27]
 8002ef4:	e062      	b.n	8002fbc <UART_SetConfig+0x284>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	76fb      	strb	r3, [r7, #27]
 8002efa:	e05f      	b.n	8002fbc <UART_SetConfig+0x284>
 8002efc:	2304      	movs	r3, #4
 8002efe:	76fb      	strb	r3, [r7, #27]
 8002f00:	e05c      	b.n	8002fbc <UART_SetConfig+0x284>
 8002f02:	2308      	movs	r3, #8
 8002f04:	76fb      	strb	r3, [r7, #27]
 8002f06:	e059      	b.n	8002fbc <UART_SetConfig+0x284>
 8002f08:	2310      	movs	r3, #16
 8002f0a:	76fb      	strb	r3, [r7, #27]
 8002f0c:	bf00      	nop
 8002f0e:	e055      	b.n	8002fbc <UART_SetConfig+0x284>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a47      	ldr	r2, [pc, #284]	; (8003034 <UART_SetConfig+0x2fc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d124      	bne.n	8002f64 <UART_SetConfig+0x22c>
 8002f1a:	4b42      	ldr	r3, [pc, #264]	; (8003024 <UART_SetConfig+0x2ec>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f28:	d012      	beq.n	8002f50 <UART_SetConfig+0x218>
 8002f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2e:	d802      	bhi.n	8002f36 <UART_SetConfig+0x1fe>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d007      	beq.n	8002f44 <UART_SetConfig+0x20c>
 8002f34:	e012      	b.n	8002f5c <UART_SetConfig+0x224>
 8002f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f3a:	d006      	beq.n	8002f4a <UART_SetConfig+0x212>
 8002f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f40:	d009      	beq.n	8002f56 <UART_SetConfig+0x21e>
 8002f42:	e00b      	b.n	8002f5c <UART_SetConfig+0x224>
 8002f44:	2300      	movs	r3, #0
 8002f46:	76fb      	strb	r3, [r7, #27]
 8002f48:	e038      	b.n	8002fbc <UART_SetConfig+0x284>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	76fb      	strb	r3, [r7, #27]
 8002f4e:	e035      	b.n	8002fbc <UART_SetConfig+0x284>
 8002f50:	2304      	movs	r3, #4
 8002f52:	76fb      	strb	r3, [r7, #27]
 8002f54:	e032      	b.n	8002fbc <UART_SetConfig+0x284>
 8002f56:	2308      	movs	r3, #8
 8002f58:	76fb      	strb	r3, [r7, #27]
 8002f5a:	e02f      	b.n	8002fbc <UART_SetConfig+0x284>
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	76fb      	strb	r3, [r7, #27]
 8002f60:	bf00      	nop
 8002f62:	e02b      	b.n	8002fbc <UART_SetConfig+0x284>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a2c      	ldr	r2, [pc, #176]	; (800301c <UART_SetConfig+0x2e4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d124      	bne.n	8002fb8 <UART_SetConfig+0x280>
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <UART_SetConfig+0x2ec>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7c:	d012      	beq.n	8002fa4 <UART_SetConfig+0x26c>
 8002f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f82:	d802      	bhi.n	8002f8a <UART_SetConfig+0x252>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <UART_SetConfig+0x260>
 8002f88:	e012      	b.n	8002fb0 <UART_SetConfig+0x278>
 8002f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f8e:	d006      	beq.n	8002f9e <UART_SetConfig+0x266>
 8002f90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f94:	d009      	beq.n	8002faa <UART_SetConfig+0x272>
 8002f96:	e00b      	b.n	8002fb0 <UART_SetConfig+0x278>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	76fb      	strb	r3, [r7, #27]
 8002f9c:	e00e      	b.n	8002fbc <UART_SetConfig+0x284>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	76fb      	strb	r3, [r7, #27]
 8002fa2:	e00b      	b.n	8002fbc <UART_SetConfig+0x284>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	76fb      	strb	r3, [r7, #27]
 8002fa8:	e008      	b.n	8002fbc <UART_SetConfig+0x284>
 8002faa:	2308      	movs	r3, #8
 8002fac:	76fb      	strb	r3, [r7, #27]
 8002fae:	e005      	b.n	8002fbc <UART_SetConfig+0x284>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	76fb      	strb	r3, [r7, #27]
 8002fb4:	bf00      	nop
 8002fb6:	e001      	b.n	8002fbc <UART_SetConfig+0x284>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a16      	ldr	r2, [pc, #88]	; (800301c <UART_SetConfig+0x2e4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	f040 8080 	bne.w	80030c8 <UART_SetConfig+0x390>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fc8:	7efb      	ldrb	r3, [r7, #27]
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d836      	bhi.n	800303c <UART_SetConfig+0x304>
 8002fce:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <UART_SetConfig+0x29c>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	08002ff9 	.word	0x08002ff9
 8002fd8:	0800303d 	.word	0x0800303d
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	0800303d 	.word	0x0800303d
 8002fe4:	08003007 	.word	0x08003007
 8002fe8:	0800303d 	.word	0x0800303d
 8002fec:	0800303d 	.word	0x0800303d
 8002ff0:	0800303d 	.word	0x0800303d
 8002ff4:	0800300f 	.word	0x0800300f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff8:	f7fe fd22 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 8002ffc:	6178      	str	r0, [r7, #20]
        break;
 8002ffe:	e022      	b.n	8003046 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <UART_SetConfig+0x300>)
 8003002:	617b      	str	r3, [r7, #20]
        break;
 8003004:	e01f      	b.n	8003046 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003006:	f7fe fc85 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 800300a:	6178      	str	r0, [r7, #20]
        break;
 800300c:	e01b      	b.n	8003046 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800300e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003012:	617b      	str	r3, [r7, #20]
        break;
 8003014:	e017      	b.n	8003046 <UART_SetConfig+0x30e>
 8003016:	bf00      	nop
 8003018:	efff69f3 	.word	0xefff69f3
 800301c:	40008000 	.word	0x40008000
 8003020:	40013800 	.word	0x40013800
 8003024:	40021000 	.word	0x40021000
 8003028:	40004400 	.word	0x40004400
 800302c:	40004800 	.word	0x40004800
 8003030:	40004c00 	.word	0x40004c00
 8003034:	40005000 	.word	0x40005000
 8003038:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	76bb      	strb	r3, [r7, #26]
        break;
 8003044:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80eb 	beq.w	8003224 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	441a      	add	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	429a      	cmp	r2, r3
 800305c:	d805      	bhi.n	800306a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	429a      	cmp	r2, r3
 8003068:	d202      	bcs.n	8003070 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	76bb      	strb	r3, [r7, #26]
 800306e:	e0d9      	b.n	8003224 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	461a      	mov	r2, r3
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	021d      	lsls	r5, r3, #8
 800307a:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800307e:	0214      	lsls	r4, r2, #8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	085b      	lsrs	r3, r3, #1
 8003086:	461a      	mov	r2, r3
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	18a0      	adds	r0, r4, r2
 800308e:	eb45 0103 	adc.w	r1, r5, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f04f 0400 	mov.w	r4, #0
 800309a:	461a      	mov	r2, r3
 800309c:	4623      	mov	r3, r4
 800309e:	f7fd f89b 	bl	80001d8 <__aeabi_uldivmod>
 80030a2:	4603      	mov	r3, r0
 80030a4:	460c      	mov	r4, r1
 80030a6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ae:	d308      	bcc.n	80030c2 <UART_SetConfig+0x38a>
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b6:	d204      	bcs.n	80030c2 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	60da      	str	r2, [r3, #12]
 80030c0:	e0b0      	b.n	8003224 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	76bb      	strb	r3, [r7, #26]
 80030c6:	e0ad      	b.n	8003224 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d0:	d15c      	bne.n	800318c <UART_SetConfig+0x454>
  {
    switch (clocksource)
 80030d2:	7efb      	ldrb	r3, [r7, #27]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d828      	bhi.n	800312a <UART_SetConfig+0x3f2>
 80030d8:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <UART_SetConfig+0x3a8>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	08003105 	.word	0x08003105
 80030e4:	0800310d 	.word	0x0800310d
 80030e8:	08003115 	.word	0x08003115
 80030ec:	0800312b 	.word	0x0800312b
 80030f0:	0800311b 	.word	0x0800311b
 80030f4:	0800312b 	.word	0x0800312b
 80030f8:	0800312b 	.word	0x0800312b
 80030fc:	0800312b 	.word	0x0800312b
 8003100:	08003123 	.word	0x08003123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003104:	f7fe fc9c 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 8003108:	6178      	str	r0, [r7, #20]
        break;
 800310a:	e013      	b.n	8003134 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800310c:	f7fe fcae 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
 8003110:	6178      	str	r0, [r7, #20]
        break;
 8003112:	e00f      	b.n	8003134 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003114:	4b49      	ldr	r3, [pc, #292]	; (800323c <UART_SetConfig+0x504>)
 8003116:	617b      	str	r3, [r7, #20]
        break;
 8003118:	e00c      	b.n	8003134 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800311a:	f7fe fbfb 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 800311e:	6178      	str	r0, [r7, #20]
        break;
 8003120:	e008      	b.n	8003134 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003126:	617b      	str	r3, [r7, #20]
        break;
 8003128:	e004      	b.n	8003134 <UART_SetConfig+0x3fc>
      default:
        pclk = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	76bb      	strb	r3, [r7, #26]
        break;
 8003132:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d074      	beq.n	8003224 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	005a      	lsls	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	441a      	add	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	b29b      	uxth	r3, r3
 8003150:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	2b0f      	cmp	r3, #15
 8003156:	d916      	bls.n	8003186 <UART_SetConfig+0x44e>
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315e:	d212      	bcs.n	8003186 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	b29b      	uxth	r3, r3
 8003164:	f023 030f 	bic.w	r3, r3, #15
 8003168:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	085b      	lsrs	r3, r3, #1
 800316e:	b29b      	uxth	r3, r3
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	b29a      	uxth	r2, r3
 8003176:	89fb      	ldrh	r3, [r7, #14]
 8003178:	4313      	orrs	r3, r2
 800317a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	89fa      	ldrh	r2, [r7, #14]
 8003182:	60da      	str	r2, [r3, #12]
 8003184:	e04e      	b.n	8003224 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	76bb      	strb	r3, [r7, #26]
 800318a:	e04b      	b.n	8003224 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800318c:	7efb      	ldrb	r3, [r7, #27]
 800318e:	2b08      	cmp	r3, #8
 8003190:	d827      	bhi.n	80031e2 <UART_SetConfig+0x4aa>
 8003192:	a201      	add	r2, pc, #4	; (adr r2, 8003198 <UART_SetConfig+0x460>)
 8003194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003198:	080031bd 	.word	0x080031bd
 800319c:	080031c5 	.word	0x080031c5
 80031a0:	080031cd 	.word	0x080031cd
 80031a4:	080031e3 	.word	0x080031e3
 80031a8:	080031d3 	.word	0x080031d3
 80031ac:	080031e3 	.word	0x080031e3
 80031b0:	080031e3 	.word	0x080031e3
 80031b4:	080031e3 	.word	0x080031e3
 80031b8:	080031db 	.word	0x080031db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031bc:	f7fe fc40 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e013      	b.n	80031ec <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031c4:	f7fe fc52 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
 80031c8:	6178      	str	r0, [r7, #20]
        break;
 80031ca:	e00f      	b.n	80031ec <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <UART_SetConfig+0x504>)
 80031ce:	617b      	str	r3, [r7, #20]
        break;
 80031d0:	e00c      	b.n	80031ec <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031d2:	f7fe fb9f 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80031d6:	6178      	str	r0, [r7, #20]
        break;
 80031d8:	e008      	b.n	80031ec <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031de:	617b      	str	r3, [r7, #20]
        break;
 80031e0:	e004      	b.n	80031ec <UART_SetConfig+0x4b4>
      default:
        pclk = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	76bb      	strb	r3, [r7, #26]
        break;
 80031ea:	bf00      	nop
    }

    if (pclk != 0U)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d018      	beq.n	8003224 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	085a      	lsrs	r2, r3, #1
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	441a      	add	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	fbb2 f3f3 	udiv	r3, r2, r3
 8003204:	b29b      	uxth	r3, r3
 8003206:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	d908      	bls.n	8003220 <UART_SetConfig+0x4e8>
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003214:	d204      	bcs.n	8003220 <UART_SetConfig+0x4e8>
      {
        huart->Instance->BRR = usartdiv;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	e001      	b.n	8003224 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003230:	7ebb      	ldrb	r3, [r7, #26]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bdb0      	pop	{r4, r5, r7, pc}
 800323a:	bf00      	nop
 800323c:	00f42400 	.word	0x00f42400

08003240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	6852      	ldr	r2, [r2, #4]
 800325e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	6852      	ldr	r2, [r2, #4]
 8003280:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003288:	430a      	orrs	r2, r1
 800328a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	6852      	ldr	r2, [r2, #4]
 80032a2:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	6852      	ldr	r2, [r2, #4]
 80032c4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032cc:	430a      	orrs	r2, r1
 80032ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	6892      	ldr	r2, [r2, #8]
 80032e6:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032ee:	430a      	orrs	r2, r1
 80032f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	6892      	ldr	r2, [r2, #8]
 8003308:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003310:	430a      	orrs	r2, r1
 8003312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01a      	beq.n	8003356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	6852      	ldr	r2, [r2, #4]
 800332a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333e:	d10a      	bne.n	8003356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	6852      	ldr	r2, [r2, #4]
 800334a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	6852      	ldr	r2, [r2, #4]
 800336c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003374:	430a      	orrs	r2, r1
 8003376:	605a      	str	r2, [r3, #4]
  }
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af02      	add	r7, sp, #8
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003394:	f7fd fafe 	bl	8000994 <HAL_GetTick>
 8003398:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d10e      	bne.n	80033c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f82d 	bl	8003416 <UART_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e023      	b.n	800340e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d10e      	bne.n	80033f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f817 	bl	8003416 <UART_WaitOnFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e00d      	b.n	800340e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	603b      	str	r3, [r7, #0]
 8003422:	4613      	mov	r3, r2
 8003424:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003426:	e05e      	b.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800342e:	d05a      	beq.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003430:	f7fd fab0 	bl	8000994 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	1ad2      	subs	r2, r2, r3
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	429a      	cmp	r2, r3
 800343e:	d802      	bhi.n	8003446 <UART_WaitOnFlagUntilTimeout+0x30>
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d11b      	bne.n	800347e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003454:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	6892      	ldr	r2, [r2, #8]
 8003460:	f022 0201 	bic.w	r2, r2, #1
 8003464:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e043      	b.n	8003506 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d02c      	beq.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800349a:	d124      	bne.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034a4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034b4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	6892      	ldr	r2, [r2, #8]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2220      	movs	r2, #32
 80034ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e00f      	b.n	8003506 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	401a      	ands	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	bf0c      	ite	eq
 80034f6:	2301      	moveq	r3, #1
 80034f8:	2300      	movne	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	429a      	cmp	r2, r3
 8003502:	d091      	beq.n	8003428 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	4613      	mov	r3, r2
 800351c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003542:	d10e      	bne.n	8003562 <UART_Start_Receive_IT+0x52>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d105      	bne.n	8003558 <UART_Start_Receive_IT+0x48>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003552:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003556:	e02d      	b.n	80035b4 <UART_Start_Receive_IT+0xa4>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	22ff      	movs	r2, #255	; 0xff
 800355c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003560:	e028      	b.n	80035b4 <UART_Start_Receive_IT+0xa4>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10d      	bne.n	8003586 <UART_Start_Receive_IT+0x76>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d104      	bne.n	800357c <UART_Start_Receive_IT+0x6c>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	22ff      	movs	r2, #255	; 0xff
 8003576:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800357a:	e01b      	b.n	80035b4 <UART_Start_Receive_IT+0xa4>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	227f      	movs	r2, #127	; 0x7f
 8003580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003584:	e016      	b.n	80035b4 <UART_Start_Receive_IT+0xa4>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800358e:	d10d      	bne.n	80035ac <UART_Start_Receive_IT+0x9c>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <UART_Start_Receive_IT+0x92>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	227f      	movs	r2, #127	; 0x7f
 800359c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035a0:	e008      	b.n	80035b4 <UART_Start_Receive_IT+0xa4>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	223f      	movs	r2, #63	; 0x3f
 80035a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035aa:	e003      	b.n	80035b4 <UART_Start_Receive_IT+0xa4>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2222      	movs	r2, #34	; 0x22
 80035c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	6892      	ldr	r2, [r2, #8]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035da:	d107      	bne.n	80035ec <UART_Start_Receive_IT+0xdc>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a0c      	ldr	r2, [pc, #48]	; (8003618 <UART_Start_Receive_IT+0x108>)
 80035e8:	665a      	str	r2, [r3, #100]	; 0x64
 80035ea:	e002      	b.n	80035f2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a0b      	ldr	r2, [pc, #44]	; (800361c <UART_Start_Receive_IT+0x10c>)
 80035f0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003608:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	080036f9 	.word	0x080036f9
 800361c:	08003621 	.word	0x08003621

08003620 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800362e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003634:	2b22      	cmp	r3, #34	; 0x22
 8003636:	d151      	bne.n	80036dc <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800363e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	89ba      	ldrh	r2, [r7, #12]
 8003646:	b2d1      	uxtb	r1, r2
 8003648:	89fa      	ldrh	r2, [r7, #14]
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	400a      	ands	r2, r1
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d13a      	bne.n	80036f0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003688:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	6892      	ldr	r2, [r2, #8]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d10f      	bne.n	80036ce <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	f022 0210 	bic.w	r2, r2, #16
 80036bc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036c4:	4619      	mov	r1, r3
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff fb2a 	bl	8002d20 <HAL_UARTEx_RxEventCallback>
 80036cc:	e002      	b.n	80036d4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff fb1c 	bl	8002d0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036da:	e009      	b.n	80036f0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	8b12      	ldrh	r2, [r2, #24]
 80036e6:	b292      	uxth	r2, r2
 80036e8:	f042 0208 	orr.w	r2, r2, #8
 80036ec:	b292      	uxth	r2, r2
 80036ee:	831a      	strh	r2, [r3, #24]
}
 80036f0:	bf00      	nop
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003706:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800370c:	2b22      	cmp	r3, #34	; 0x22
 800370e:	d151      	bne.n	80037b4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003716:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800371e:	89ba      	ldrh	r2, [r7, #12]
 8003720:	89fb      	ldrh	r3, [r7, #14]
 8003722:	4013      	ands	r3, r2
 8003724:	b29a      	uxth	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	1c9a      	adds	r2, r3, #2
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d13a      	bne.n	80037c8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003760:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	6892      	ldr	r2, [r2, #8]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003782:	2b01      	cmp	r3, #1
 8003784:	d10f      	bne.n	80037a6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	f022 0210 	bic.w	r2, r2, #16
 8003794:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800379c:	4619      	mov	r1, r3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff fabe 	bl	8002d20 <HAL_UARTEx_RxEventCallback>
 80037a4:	e002      	b.n	80037ac <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff fab0 	bl	8002d0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037b2:	e009      	b.n	80037c8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	8b12      	ldrh	r2, [r2, #24]
 80037be:	b292      	uxth	r2, r2
 80037c0:	f042 0208 	orr.w	r2, r2, #8
 80037c4:	b292      	uxth	r2, r2
 80037c6:	831a      	strh	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80037d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003808 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80037d4:	f7fd f880 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80037d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80037da:	e003      	b.n	80037e4 <LoopCopyDataInit>

080037dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80037de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80037e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80037e2:	3104      	adds	r1, #4

080037e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80037e4:	480a      	ldr	r0, [pc, #40]	; (8003810 <LoopForever+0xa>)
	ldr	r3, =_edata
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <LoopForever+0xe>)
	adds	r2, r0, r1
 80037e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80037ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80037ec:	d3f6      	bcc.n	80037dc <CopyDataInit>
	ldr	r2, =_sbss
 80037ee:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <LoopForever+0x12>)
	b	LoopFillZerobss
 80037f0:	e002      	b.n	80037f8 <LoopFillZerobss>

080037f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80037f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80037f4:	f842 3b04 	str.w	r3, [r2], #4

080037f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <LoopForever+0x16>)
	cmp	r2, r3
 80037fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80037fc:	d3f9      	bcc.n	80037f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037fe:	f000 f811 	bl	8003824 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003802:	f7fc fe71 	bl	80004e8 <main>

08003806 <LoopForever>:

LoopForever:
    b LoopForever
 8003806:	e7fe      	b.n	8003806 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003808:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800380c:	080038f4 	.word	0x080038f4
	ldr	r0, =_sdata
 8003810:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003814:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003818:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800381c:	20000100 	.word	0x20000100

08003820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003820:	e7fe      	b.n	8003820 <ADC1_2_IRQHandler>
	...

08003824 <__libc_init_array>:
 8003824:	b570      	push	{r4, r5, r6, lr}
 8003826:	4e0d      	ldr	r6, [pc, #52]	; (800385c <__libc_init_array+0x38>)
 8003828:	4c0d      	ldr	r4, [pc, #52]	; (8003860 <__libc_init_array+0x3c>)
 800382a:	1ba4      	subs	r4, r4, r6
 800382c:	10a4      	asrs	r4, r4, #2
 800382e:	2500      	movs	r5, #0
 8003830:	42a5      	cmp	r5, r4
 8003832:	d109      	bne.n	8003848 <__libc_init_array+0x24>
 8003834:	4e0b      	ldr	r6, [pc, #44]	; (8003864 <__libc_init_array+0x40>)
 8003836:	4c0c      	ldr	r4, [pc, #48]	; (8003868 <__libc_init_array+0x44>)
 8003838:	f000 f820 	bl	800387c <_init>
 800383c:	1ba4      	subs	r4, r4, r6
 800383e:	10a4      	asrs	r4, r4, #2
 8003840:	2500      	movs	r5, #0
 8003842:	42a5      	cmp	r5, r4
 8003844:	d105      	bne.n	8003852 <__libc_init_array+0x2e>
 8003846:	bd70      	pop	{r4, r5, r6, pc}
 8003848:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800384c:	4798      	blx	r3
 800384e:	3501      	adds	r5, #1
 8003850:	e7ee      	b.n	8003830 <__libc_init_array+0xc>
 8003852:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003856:	4798      	blx	r3
 8003858:	3501      	adds	r5, #1
 800385a:	e7f2      	b.n	8003842 <__libc_init_array+0x1e>
 800385c:	080038ec 	.word	0x080038ec
 8003860:	080038ec 	.word	0x080038ec
 8003864:	080038ec 	.word	0x080038ec
 8003868:	080038f0 	.word	0x080038f0

0800386c <memset>:
 800386c:	4402      	add	r2, r0
 800386e:	4603      	mov	r3, r0
 8003870:	4293      	cmp	r3, r2
 8003872:	d100      	bne.n	8003876 <memset+0xa>
 8003874:	4770      	bx	lr
 8003876:	f803 1b01 	strb.w	r1, [r3], #1
 800387a:	e7f9      	b.n	8003870 <memset+0x4>

0800387c <_init>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	bf00      	nop
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr

08003888 <_fini>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	bf00      	nop
 800388c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388e:	bc08      	pop	{r3}
 8003890:	469e      	mov	lr, r3
 8003892:	4770      	bx	lr
