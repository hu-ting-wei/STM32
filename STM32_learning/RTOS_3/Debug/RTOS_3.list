
RTOS_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08005e48  08005e48  00015e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800603c  0800603c  0001603c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08006040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001060  20000010  08006050  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001070  08006050  00021070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001706b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002d1e  00000000  00000000  000370ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000013f0  00000000  00000000  00039dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012c8  00000000  00000000  0003b1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a28c  00000000  00000000  0003c488  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006f15  00000000  00000000  00046714  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004d629  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005350  00000000  00000000  0004d6a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e30 	.word	0x08005e30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005e30 	.word	0x08005e30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b97a 	b.w	80004ec <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	468c      	mov	ip, r1
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	9e08      	ldr	r6, [sp, #32]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d151      	bne.n	80002c4 <__udivmoddi4+0xb4>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d96d      	bls.n	8000302 <__udivmoddi4+0xf2>
 8000226:	fab2 fe82 	clz	lr, r2
 800022a:	f1be 0f00 	cmp.w	lr, #0
 800022e:	d00b      	beq.n	8000248 <__udivmoddi4+0x38>
 8000230:	f1ce 0c20 	rsb	ip, lr, #32
 8000234:	fa01 f50e 	lsl.w	r5, r1, lr
 8000238:	fa20 fc0c 	lsr.w	ip, r0, ip
 800023c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000240:	ea4c 0c05 	orr.w	ip, ip, r5
 8000244:	fa00 f40e 	lsl.w	r4, r0, lr
 8000248:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800024c:	0c25      	lsrs	r5, r4, #16
 800024e:	fbbc f8fa 	udiv	r8, ip, sl
 8000252:	fa1f f987 	uxth.w	r9, r7
 8000256:	fb0a cc18 	mls	ip, sl, r8, ip
 800025a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800025e:	fb08 f309 	mul.w	r3, r8, r9
 8000262:	42ab      	cmp	r3, r5
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x6c>
 8000266:	19ed      	adds	r5, r5, r7
 8000268:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800026c:	f080 8123 	bcs.w	80004b6 <__udivmoddi4+0x2a6>
 8000270:	42ab      	cmp	r3, r5
 8000272:	f240 8120 	bls.w	80004b6 <__udivmoddi4+0x2a6>
 8000276:	f1a8 0802 	sub.w	r8, r8, #2
 800027a:	443d      	add	r5, r7
 800027c:	1aed      	subs	r5, r5, r3
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb5 f0fa 	udiv	r0, r5, sl
 8000284:	fb0a 5510 	mls	r5, sl, r0, r5
 8000288:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800028c:	fb00 f909 	mul.w	r9, r0, r9
 8000290:	45a1      	cmp	r9, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x98>
 8000294:	19e4      	adds	r4, r4, r7
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 810a 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 800029e:	45a1      	cmp	r9, r4
 80002a0:	f240 8107 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	eba4 0409 	sub.w	r4, r4, r9
 80002ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	d061      	beq.n	800037a <__udivmoddi4+0x16a>
 80002b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ba:	2300      	movs	r3, #0
 80002bc:	6034      	str	r4, [r6, #0]
 80002be:	6073      	str	r3, [r6, #4]
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d907      	bls.n	80002d8 <__udivmoddi4+0xc8>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d054      	beq.n	8000376 <__udivmoddi4+0x166>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	f040 808e 	bne.w	80003fe <__udivmoddi4+0x1ee>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xdc>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2d0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0503 	sbc.w	r5, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	46ac      	mov	ip, r5
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d03f      	beq.n	800037a <__udivmoddi4+0x16a>
 80002fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	b912      	cbnz	r2, 800030a <__udivmoddi4+0xfa>
 8000304:	2701      	movs	r7, #1
 8000306:	fbb7 f7f2 	udiv	r7, r7, r2
 800030a:	fab7 fe87 	clz	lr, r7
 800030e:	f1be 0f00 	cmp.w	lr, #0
 8000312:	d134      	bne.n	800037e <__udivmoddi4+0x16e>
 8000314:	1beb      	subs	r3, r5, r7
 8000316:	0c3a      	lsrs	r2, r7, #16
 8000318:	fa1f fc87 	uxth.w	ip, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb02 3318 	mls	r3, r2, r8, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb0c f308 	mul.w	r3, ip, r8
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x134>
 8000334:	19ed      	adds	r5, r5, r7
 8000336:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x132>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80d1 	bhi.w	80004e4 <__udivmoddi4+0x2d4>
 8000342:	4680      	mov	r8, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0f2 	udiv	r0, r5, r2
 800034c:	fb02 5510 	mls	r5, r2, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb0c fc00 	mul.w	ip, ip, r0
 8000358:	45a4      	cmp	ip, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x15c>
 800035c:	19e4      	adds	r4, r4, r7
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x15a>
 8000364:	45a4      	cmp	ip, r4
 8000366:	f200 80b8 	bhi.w	80004da <__udivmoddi4+0x2ca>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 040c 	sub.w	r4, r4, ip
 8000370:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000374:	e79d      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000376:	4631      	mov	r1, r6
 8000378:	4630      	mov	r0, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	f1ce 0420 	rsb	r4, lr, #32
 8000382:	fa05 f30e 	lsl.w	r3, r5, lr
 8000386:	fa07 f70e 	lsl.w	r7, r7, lr
 800038a:	fa20 f804 	lsr.w	r8, r0, r4
 800038e:	0c3a      	lsrs	r2, r7, #16
 8000390:	fa25 f404 	lsr.w	r4, r5, r4
 8000394:	ea48 0803 	orr.w	r8, r8, r3
 8000398:	fbb4 f1f2 	udiv	r1, r4, r2
 800039c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a0:	fb02 4411 	mls	r4, r2, r1, r4
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ac:	fb01 f30c 	mul.w	r3, r1, ip
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1bc>
 80003b8:	19ed      	adds	r5, r5, r7
 80003ba:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003be:	f080 808a 	bcs.w	80004d6 <__udivmoddi4+0x2c6>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	f240 8087 	bls.w	80004d6 <__udivmoddi4+0x2c6>
 80003c8:	3902      	subs	r1, #2
 80003ca:	443d      	add	r5, r7
 80003cc:	1aeb      	subs	r3, r5, r3
 80003ce:	fa1f f588 	uxth.w	r5, r8
 80003d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003d6:	fb02 3310 	mls	r3, r2, r0, r3
 80003da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003de:	fb00 f30c 	mul.w	r3, r0, ip
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1e6>
 80003e6:	19ed      	adds	r5, r5, r7
 80003e8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003ec:	d26f      	bcs.n	80004ce <__udivmoddi4+0x2be>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d96d      	bls.n	80004ce <__udivmoddi4+0x2be>
 80003f2:	3802      	subs	r0, #2
 80003f4:	443d      	add	r5, r7
 80003f6:	1aeb      	subs	r3, r5, r3
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	e78f      	b.n	800031e <__udivmoddi4+0x10e>
 80003fe:	f1c1 0720 	rsb	r7, r1, #32
 8000402:	fa22 f807 	lsr.w	r8, r2, r7
 8000406:	408b      	lsls	r3, r1
 8000408:	fa05 f401 	lsl.w	r4, r5, r1
 800040c:	ea48 0303 	orr.w	r3, r8, r3
 8000410:	fa20 fe07 	lsr.w	lr, r0, r7
 8000414:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4e 0e04 	orr.w	lr, lr, r4
 800041e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000422:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000426:	fb0c 5519 	mls	r5, ip, r9, r5
 800042a:	fa1f f883 	uxth.w	r8, r3
 800042e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000432:	fb09 f408 	mul.w	r4, r9, r8
 8000436:	42ac      	cmp	r4, r5
 8000438:	fa02 f201 	lsl.w	r2, r2, r1
 800043c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x244>
 8000442:	18ed      	adds	r5, r5, r3
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d243      	bcs.n	80004d2 <__udivmoddi4+0x2c2>
 800044a:	42ac      	cmp	r4, r5
 800044c:	d941      	bls.n	80004d2 <__udivmoddi4+0x2c2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	441d      	add	r5, r3
 8000454:	1b2d      	subs	r5, r5, r4
 8000456:	fa1f fe8e 	uxth.w	lr, lr
 800045a:	fbb5 f0fc 	udiv	r0, r5, ip
 800045e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000462:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45a0      	cmp	r8, r4
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x26e>
 800046e:	18e4      	adds	r4, r4, r3
 8000470:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000474:	d229      	bcs.n	80004ca <__udivmoddi4+0x2ba>
 8000476:	45a0      	cmp	r8, r4
 8000478:	d927      	bls.n	80004ca <__udivmoddi4+0x2ba>
 800047a:	3802      	subs	r0, #2
 800047c:	441c      	add	r4, r3
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba4 0408 	sub.w	r4, r4, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454c      	cmp	r4, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	464d      	mov	r5, r9
 8000490:	d315      	bcc.n	80004be <__udivmoddi4+0x2ae>
 8000492:	d012      	beq.n	80004ba <__udivmoddi4+0x2aa>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x29c>
 8000496:	ebba 030e 	subs.w	r3, sl, lr
 800049a:	eb64 0405 	sbc.w	r4, r4, r5
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40cb      	lsrs	r3, r1
 80004a4:	431f      	orrs	r7, r3
 80004a6:	40cc      	lsrs	r4, r1
 80004a8:	6037      	str	r7, [r6, #0]
 80004aa:	6074      	str	r4, [r6, #4]
 80004ac:	2100      	movs	r1, #0
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	4618      	mov	r0, r3
 80004b4:	e6f8      	b.n	80002a8 <__udivmoddi4+0x98>
 80004b6:	4690      	mov	r8, r2
 80004b8:	e6e0      	b.n	800027c <__udivmoddi4+0x6c>
 80004ba:	45c2      	cmp	sl, r8
 80004bc:	d2ea      	bcs.n	8000494 <__udivmoddi4+0x284>
 80004be:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c2:	eb69 0503 	sbc.w	r5, r9, r3
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7e4      	b.n	8000494 <__udivmoddi4+0x284>
 80004ca:	4628      	mov	r0, r5
 80004cc:	e7d7      	b.n	800047e <__udivmoddi4+0x26e>
 80004ce:	4640      	mov	r0, r8
 80004d0:	e791      	b.n	80003f6 <__udivmoddi4+0x1e6>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e7be      	b.n	8000454 <__udivmoddi4+0x244>
 80004d6:	4601      	mov	r1, r0
 80004d8:	e778      	b.n	80003cc <__udivmoddi4+0x1bc>
 80004da:	3802      	subs	r0, #2
 80004dc:	443c      	add	r4, r7
 80004de:	e745      	b.n	800036c <__udivmoddi4+0x15c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xe6>
 80004e4:	f1a8 0802 	sub.w	r8, r8, #2
 80004e8:	443d      	add	r5, r7
 80004ea:	e72b      	b.n	8000344 <__udivmoddi4+0x134>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	4a07      	ldr	r2, [pc, #28]	; (800051c <vApplicationGetIdleTaskMemory+0x2c>)
 8000500:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	4a06      	ldr	r2, [pc, #24]	; (8000520 <vApplicationGetIdleTaskMemory+0x30>)
 8000506:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	2000002c 	.word	0x2000002c
 8000520:	20000080 	.word	0x20000080

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b5b0      	push	{r4, r5, r7, lr}
 8000526:	b098      	sub	sp, #96	; 0x60
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fb1d 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f859 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f8ff 	bl	8000734 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000536:	f000 f8cd 	bl	80006d4 <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 800053a:	2300      	movs	r3, #0
 800053c:	65bb      	str	r3, [r7, #88]	; 0x58
 800053e:	2300      	movs	r3, #0
 8000540:	65fb      	str	r3, [r7, #92]	; 0x5c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 8000542:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000546:	2101      	movs	r1, #1
 8000548:	4618      	mov	r0, r3
 800054a:	f003 f945 	bl	80037d8 <osSemaphoreCreate>
 800054e:	4602      	mov	r2, r0
 8000550:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <main+0xa4>)
 8000552:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of NormalTask */
  osThreadDef(NormalTask, StartNormalTask, osPriorityNormal, 0, 128);
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <main+0xa8>)
 8000556:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800055a:	461d      	mov	r5, r3
 800055c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000560:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NormalTaskHandle = osThreadCreate(osThread(NormalTask), NULL);
 8000568:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 f8d2 	bl	8003718 <osThreadCreate>
 8000574:	4602      	mov	r2, r0
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <main+0xac>)
 8000578:	601a      	str	r2, [r3, #0]

  /* definition and creation of HighTask */
  osThreadDef(HighTask, StartHighTask, osPriorityAboveNormal, 0, 128);
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <main+0xb0>)
 800057c:	f107 0420 	add.w	r4, r7, #32
 8000580:	461d      	mov	r5, r3
 8000582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000586:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HighTaskHandle = osThreadCreate(osThread(HighTask), NULL);
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f003 f8bf 	bl	8003718 <osThreadCreate>
 800059a:	4602      	mov	r2, r0
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <main+0xb4>)
 800059e:	601a      	str	r2, [r3, #0]

  /* definition and creation of LowTask */
  osThreadDef(LowTask, StartLowTask, osPriorityBelowNormal, 0, 128);
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <main+0xb8>)
 80005a2:	1d3c      	adds	r4, r7, #4
 80005a4:	461d      	mov	r5, r3
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LowTaskHandle = osThreadCreate(osThread(LowTask), NULL);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 f8ae 	bl	8003718 <osThreadCreate>
 80005bc:	4602      	mov	r2, r0
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <main+0xbc>)
 80005c0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005c2:	f003 f8a2 	bl	800370a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <main+0xa2>
 80005c8:	2000101c 	.word	0x2000101c
 80005cc:	08005e54 	.word	0x08005e54
 80005d0:	20000f94 	.word	0x20000f94
 80005d4:	08005e7c 	.word	0x08005e7c
 80005d8:	20000f8c 	.word	0x20000f8c
 80005dc:	08005ea0 	.word	0x08005ea0
 80005e0:	20000f90 	.word	0x20000f90

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b0b8      	sub	sp, #224	; 0xe0
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005ee:	2244      	movs	r2, #68	; 0x44
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f005 fc13 	bl	8005e1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000608:	463b      	mov	r3, r7
 800060a:	2288      	movs	r2, #136	; 0x88
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 fc05 	bl	8005e1e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000614:	2310      	movs	r3, #16
 8000616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061a:	2301      	movs	r3, #1
 800061c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000626:	2360      	movs	r3, #96	; 0x60
 8000628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000632:	2301      	movs	r3, #1
 8000634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000638:	2301      	movs	r3, #1
 800063a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800063e:	2328      	movs	r3, #40	; 0x28
 8000640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000644:	2307      	movs	r3, #7
 8000646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fdc0 	bl	80011e0 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000666:	f000 f969 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2303      	movs	r3, #3
 8000672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000688:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800068c:	2104      	movs	r1, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f001 f98c 	bl	80019ac <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800069a:	f000 f94f 	bl	800093c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800069e:	2302      	movs	r3, #2
 80006a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a6:	463b      	mov	r3, r7
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fbb5 	bl	8001e18 <HAL_RCCEx_PeriphCLKConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006b4:	f000 f942 	bl	800093c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006bc:	f000 fd3a 	bl	8001134 <HAL_PWREx_ControlVoltageScaling>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006c6:	f000 f939 	bl	800093c <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	37e0      	adds	r7, #224	; 0xe0
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000718:	f002 fb00 	bl	8002d1c <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000722:	f000 f90b 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000f98 	.word	0x20000f98
 8000730:	40004400 	.word	0x40004400

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <MX_GPIO_Init+0x68>)
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_GPIO_Init+0x68>)
 800074e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_GPIO_Init+0x68>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <MX_GPIO_Init+0x68>)
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_GPIO_Init+0x68>)
 8000766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_GPIO_Init+0x68>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800077a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0x6c>)
 8000790:	f000 fb02 	bl	8000d98 <HAL_GPIO_Init>

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000800 	.word	0x48000800

080007a4 <StartNormalTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void const * argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  char *str1="Enter NormalTask\r\n";
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <StartNormalTask+0x44>)
 80007ae:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2,(uint8_t *) str1,strlen(str1),100);
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	f7ff fd0d 	bl	80001d0 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	2364      	movs	r3, #100	; 0x64
 80007bc:	68f9      	ldr	r1, [r7, #12]
 80007be:	480b      	ldr	r0, [pc, #44]	; (80007ec <StartNormalTask+0x48>)
 80007c0:	f002 fafa 	bl	8002db8 <HAL_UART_Transmit>

	  char *str2="Leaving NormalTask\r\n";
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <StartNormalTask+0x4c>)
 80007c6:	60bb      	str	r3, [r7, #8]
	  HAL_UART_Transmit(&huart2,(uint8_t *) str2,strlen(str2),100);
 80007c8:	68b8      	ldr	r0, [r7, #8]
 80007ca:	f7ff fd01 	bl	80001d0 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	2364      	movs	r3, #100	; 0x64
 80007d4:	68b9      	ldr	r1, [r7, #8]
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <StartNormalTask+0x48>)
 80007d8:	f002 faee 	bl	8002db8 <HAL_UART_Transmit>
	  osDelay(500);
 80007dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e0:	f002 ffe6 	bl	80037b0 <osDelay>
  {
 80007e4:	e7e2      	b.n	80007ac <StartNormalTask+0x8>
 80007e6:	bf00      	nop
 80007e8:	08005ebc 	.word	0x08005ebc
 80007ec:	20000f98 	.word	0x20000f98
 80007f0:	08005ed0 	.word	0x08005ed0

080007f4 <StartHighTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHighTask */
void StartHighTask(void const * argument)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHighTask */
  /* Infinite loop */
  for(;;)
  {
	  char *str1="Enter HighTask and waiting for semaphore\r\n";
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <StartHighTask+0x74>)
 80007fe:	617b      	str	r3, [r7, #20]
	  HAL_UART_Transmit(&huart2,(uint8_t *) str1,strlen(str1),100);
 8000800:	6978      	ldr	r0, [r7, #20]
 8000802:	f7ff fce5 	bl	80001d0 <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	b29a      	uxth	r2, r3
 800080a:	2364      	movs	r3, #100	; 0x64
 800080c:	6979      	ldr	r1, [r7, #20]
 800080e:	4817      	ldr	r0, [pc, #92]	; (800086c <StartHighTask+0x78>)
 8000810:	f002 fad2 	bl	8002db8 <HAL_UART_Transmit>

	  osSemaphoreWait(BinSemHandle,osWaitForever);
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <StartHighTask+0x7c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800081c:	4618      	mov	r0, r3
 800081e:	f003 f80f 	bl	8003840 <osSemaphoreWait>
	  char *str3="semaphore acquired by high task\r\n";
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <StartHighTask+0x80>)
 8000824:	613b      	str	r3, [r7, #16]
	  HAL_UART_Transmit(&huart2,(uint8_t *) str3,strlen(str3),100);
 8000826:	6938      	ldr	r0, [r7, #16]
 8000828:	f7ff fcd2 	bl	80001d0 <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	6939      	ldr	r1, [r7, #16]
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <StartHighTask+0x78>)
 8000836:	f002 fabf 	bl	8002db8 <HAL_UART_Transmit>

	  char *str2="Leaving HighTask and releasing semaphore\r\n";
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <StartHighTask+0x84>)
 800083c:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2,(uint8_t *) str2,strlen(str2),100);
 800083e:	68f8      	ldr	r0, [r7, #12]
 8000840:	f7ff fcc6 	bl	80001d0 <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	b29a      	uxth	r2, r3
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	68f9      	ldr	r1, [r7, #12]
 800084c:	4807      	ldr	r0, [pc, #28]	; (800086c <StartHighTask+0x78>)
 800084e:	f002 fab3 	bl	8002db8 <HAL_UART_Transmit>

	  osSemaphoreRelease(BinSemHandle);
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <StartHighTask+0x7c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f003 f840 	bl	80038dc <osSemaphoreRelease>
	  osDelay(500);
 800085c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000860:	f002 ffa6 	bl	80037b0 <osDelay>
  {
 8000864:	e7ca      	b.n	80007fc <StartHighTask+0x8>
 8000866:	bf00      	nop
 8000868:	08005ee8 	.word	0x08005ee8
 800086c:	20000f98 	.word	0x20000f98
 8000870:	2000101c 	.word	0x2000101c
 8000874:	08005f14 	.word	0x08005f14
 8000878:	08005f38 	.word	0x08005f38

0800087c <StartLowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLowTask */
void StartLowTask(void const * argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  char *str1="Enter LowTask and waiting for semaphore\r\n";
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <StartLowTask+0x84>)
 8000886:	617b      	str	r3, [r7, #20]
	  HAL_UART_Transmit(&huart2,(uint8_t *) str1,strlen(str1),100);
 8000888:	6978      	ldr	r0, [r7, #20]
 800088a:	f7ff fca1 	bl	80001d0 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b29a      	uxth	r2, r3
 8000892:	2364      	movs	r3, #100	; 0x64
 8000894:	6979      	ldr	r1, [r7, #20]
 8000896:	481b      	ldr	r0, [pc, #108]	; (8000904 <StartLowTask+0x88>)
 8000898:	f002 fa8e 	bl	8002db8 <HAL_UART_Transmit>

	  osSemaphoreWait(BinSemHandle,osWaitForever);
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <StartLowTask+0x8c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 ffcb 	bl	8003840 <osSemaphoreWait>
	  char *str3="semaphore acquired by low task\r\n";
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <StartLowTask+0x90>)
 80008ac:	613b      	str	r3, [r7, #16]
	  HAL_UART_Transmit(&huart2,(uint8_t *) str3,strlen(str3),100);
 80008ae:	6938      	ldr	r0, [r7, #16]
 80008b0:	f7ff fc8e 	bl	80001d0 <strlen>
 80008b4:	4603      	mov	r3, r0
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	2364      	movs	r3, #100	; 0x64
 80008ba:	6939      	ldr	r1, [r7, #16]
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <StartLowTask+0x88>)
 80008be:	f002 fa7b 	bl	8002db8 <HAL_UART_Transmit>

	  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13));
 80008c2:	bf00      	nop
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <StartLowTask+0x94>)
 80008ca:	f000 fc0d 	bl	80010e8 <HAL_GPIO_ReadPin>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f7      	bne.n	80008c4 <StartLowTask+0x48>

	  char *str2="Leaving LowTask and releasing semaphore\r\n";
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <StartLowTask+0x98>)
 80008d6:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2,(uint8_t *) str2,strlen(str2),100);
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f7ff fc79 	bl	80001d0 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	2364      	movs	r3, #100	; 0x64
 80008e4:	68f9      	ldr	r1, [r7, #12]
 80008e6:	4807      	ldr	r0, [pc, #28]	; (8000904 <StartLowTask+0x88>)
 80008e8:	f002 fa66 	bl	8002db8 <HAL_UART_Transmit>

	  osSemaphoreRelease(BinSemHandle);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <StartLowTask+0x8c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f002 fff3 	bl	80038dc <osSemaphoreRelease>
	  osDelay(500);
 80008f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fa:	f002 ff59 	bl	80037b0 <osDelay>
  {
 80008fe:	e7c1      	b.n	8000884 <StartLowTask+0x8>
 8000900:	08005f64 	.word	0x08005f64
 8000904:	20000f98 	.word	0x20000f98
 8000908:	2000101c 	.word	0x2000101c
 800090c:	08005f90 	.word	0x08005f90
 8000910:	48000800 	.word	0x48000800
 8000914:	08005fb4 	.word	0x08005fb4

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 f935 	bl	8000b98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40012c00 	.word	0x40012c00

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000942:	e7fe      	b.n	8000942 <Error_Handler+0x6>

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4a11      	ldr	r2, [pc, #68]	; (8000990 <HAL_MspInit+0x4c>)
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_MspInit+0x4c>)
 800094e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6613      	str	r3, [r2, #96]	; 0x60
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_MspInit+0x4c>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <HAL_MspInit+0x4c>)
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_MspInit+0x4c>)
 8000966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6593      	str	r3, [r2, #88]	; 0x58
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_MspInit+0x4c>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	210f      	movs	r1, #15
 800097e:	f06f 0001 	mvn.w	r0, #1
 8000982:	f000 f9df 	bl	8000d44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <HAL_UART_MspInit+0x7c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d128      	bne.n	8000a08 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <HAL_UART_MspInit+0x80>)
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_UART_MspInit+0x80>)
 80009ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	6593      	str	r3, [r2, #88]	; 0x58
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_UART_MspInit+0x80>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4a11      	ldr	r2, [pc, #68]	; (8000a14 <HAL_UART_MspInit+0x80>)
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <HAL_UART_MspInit+0x80>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_UART_MspInit+0x80>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009e6:	230c      	movs	r3, #12
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f6:	2307      	movs	r3, #7
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f000 f9c8 	bl	8000d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40004400 	.word	0x40004400
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	2019      	movs	r0, #25
 8000a2e:	f000 f989 	bl	8000d44 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a32:	2019      	movs	r0, #25
 8000a34:	f000 f9a2 	bl	8000d7c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a38:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <HAL_InitTick+0x9c>)
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <HAL_InitTick+0x9c>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a42:	6613      	str	r3, [r2, #96]	; 0x60
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_InitTick+0x9c>)
 8000a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a50:	f107 0210 	add.w	r2, r7, #16
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 f94a 	bl	8001cf4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a60:	f001 f932 	bl	8001cc8 <HAL_RCC_GetPCLK2Freq>
 8000a64:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <HAL_InitTick+0xa0>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	0c9b      	lsrs	r3, r3, #18
 8000a70:	3b01      	subs	r3, #1
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_InitTick+0xa4>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <HAL_InitTick+0xa8>)
 8000a78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_InitTick+0xa4>)
 8000a7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_InitTick+0xa4>)
 8000a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_InitTick+0xa4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_InitTick+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <HAL_InitTick+0xa4>)
 8000a96:	f001 fe6f 	bl	8002778 <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d104      	bne.n	8000aaa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000aa0:	4806      	ldr	r0, [pc, #24]	; (8000abc <HAL_InitTick+0xa4>)
 8000aa2:	f001 fecb 	bl	800283c <HAL_TIM_Base_Start_IT>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3730      	adds	r7, #48	; 0x30
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	431bde83 	.word	0x431bde83
 8000abc:	20001020 	.word	0x20001020
 8000ac0:	40012c00 	.word	0x40012c00

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000af6:	f001 ff11 	bl	800291c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20001020 	.word	0x20001020

08000b04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b08:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <SystemInit+0x5c>)
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <SystemInit+0x5c>)
 8000b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b18:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <SystemInit+0x60>)
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <SystemInit+0x60>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <SystemInit+0x60>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <SystemInit+0x60>)
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <SystemInit+0x60>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b34:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <SystemInit+0x60>)
 8000b3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <SystemInit+0x60>)
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <SystemInit+0x60>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <SystemInit+0x60>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00
 8000b64:	40021000 	.word	0x40021000

08000b68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b72:	2003      	movs	r0, #3
 8000b74:	f000 f8db 	bl	8000d2e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff ff4d 	bl	8000a18 <HAL_InitTick>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	e001      	b.n	8000b8e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b8a:	f7ff fedb 	bl	8000944 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	2000106c 	.word	0x2000106c

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	2000106c 	.word	0x2000106c

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	4909      	ldr	r1, [pc, #36]	; (8000c74 <__NVIC_EnableIRQ+0x38>)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	095b      	lsrs	r3, r3, #5
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	f002 021f 	and.w	r2, r2, #31
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	490d      	ldr	r1, [pc, #52]	; (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	4909      	ldr	r1, [pc, #36]	; (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	2201      	movs	r2, #1
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d12:	2101      	movs	r1, #1
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	1e59      	subs	r1, r3, #1
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ff4e 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d56:	f7ff ff63 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000d5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	68b9      	ldr	r1, [r7, #8]
 8000d60:	6978      	ldr	r0, [r7, #20]
 8000d62:	f7ff ffb3 	bl	8000ccc <NVIC_EncodePriority>
 8000d66:	4602      	mov	r2, r0
 8000d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff82 	bl	8000c78 <__NVIC_SetPriority>
}
 8000d74:	bf00      	nop
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff56 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b087      	sub	sp, #28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da6:	e17f      	b.n	80010a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 8171 	beq.w	80010a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d00b      	beq.n	8000de0 <HAL_GPIO_Init+0x48>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d007      	beq.n	8000de0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd4:	2b11      	cmp	r3, #17
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b12      	cmp	r3, #18
 8000dde:	d130      	bne.n	8000e42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e16:	2201      	movs	r2, #1
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	091b      	lsrs	r3, r3, #4
 8000e2c:	f003 0201 	and.w	r2, r3, #1
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d118      	bne.n	8000e80 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e54:	2201      	movs	r2, #1
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	f003 0201 	and.w	r2, r3, #1
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x128>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b12      	cmp	r3, #18
 8000ebe:	d123      	bne.n	8000f08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	6939      	ldr	r1, [r7, #16]
 8000f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0203 	and.w	r2, r3, #3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80ac 	beq.w	80010a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	4a5e      	ldr	r2, [pc, #376]	; (80010c4 <HAL_GPIO_Init+0x32c>)
 8000f4c:	4b5d      	ldr	r3, [pc, #372]	; (80010c4 <HAL_GPIO_Init+0x32c>)
 8000f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6613      	str	r3, [r2, #96]	; 0x60
 8000f56:	4b5b      	ldr	r3, [pc, #364]	; (80010c4 <HAL_GPIO_Init+0x32c>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f62:	4a59      	ldr	r2, [pc, #356]	; (80010c8 <HAL_GPIO_Init+0x330>)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	220f      	movs	r2, #15
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f8c:	d025      	beq.n	8000fda <HAL_GPIO_Init+0x242>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4e      	ldr	r2, [pc, #312]	; (80010cc <HAL_GPIO_Init+0x334>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d01f      	beq.n	8000fd6 <HAL_GPIO_Init+0x23e>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4d      	ldr	r2, [pc, #308]	; (80010d0 <HAL_GPIO_Init+0x338>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d019      	beq.n	8000fd2 <HAL_GPIO_Init+0x23a>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_GPIO_Init+0x33c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0x236>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4b      	ldr	r2, [pc, #300]	; (80010d8 <HAL_GPIO_Init+0x340>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d00d      	beq.n	8000fca <HAL_GPIO_Init+0x232>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4a      	ldr	r2, [pc, #296]	; (80010dc <HAL_GPIO_Init+0x344>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d007      	beq.n	8000fc6 <HAL_GPIO_Init+0x22e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a49      	ldr	r2, [pc, #292]	; (80010e0 <HAL_GPIO_Init+0x348>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_GPIO_Init+0x22a>
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	e00c      	b.n	8000fdc <HAL_GPIO_Init+0x244>
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	e00a      	b.n	8000fdc <HAL_GPIO_Init+0x244>
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	e008      	b.n	8000fdc <HAL_GPIO_Init+0x244>
 8000fca:	2304      	movs	r3, #4
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x244>
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e004      	b.n	8000fdc <HAL_GPIO_Init+0x244>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_Init+0x244>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x244>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	f002 0203 	and.w	r2, r2, #3
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	4093      	lsls	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fec:	4936      	ldr	r1, [pc, #216]	; (80010c8 <HAL_GPIO_Init+0x330>)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <HAL_GPIO_Init+0x34c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800101e:	4a31      	ldr	r2, [pc, #196]	; (80010e4 <HAL_GPIO_Init+0x34c>)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001024:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <HAL_GPIO_Init+0x34c>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001048:	4a26      	ldr	r2, [pc, #152]	; (80010e4 <HAL_GPIO_Init+0x34c>)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800104e:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <HAL_GPIO_Init+0x34c>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001072:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <HAL_GPIO_Init+0x34c>)
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_GPIO_Init+0x34c>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800109c:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <HAL_GPIO_Init+0x34c>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa22 f303 	lsr.w	r3, r2, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f47f ae78 	bne.w	8000da8 <HAL_GPIO_Init+0x10>
  }
}
 80010b8:	bf00      	nop
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000
 80010cc:	48000400 	.word	0x48000400
 80010d0:	48000800 	.word	0x48000800
 80010d4:	48000c00 	.word	0x48000c00
 80010d8:	48001000 	.word	0x48001000
 80010dc:	48001400 	.word	0x48001400
 80010e0:	48001800 	.word	0x48001800
 80010e4:	40010400 	.word	0x40010400

080010e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e001      	b.n	800110a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <HAL_PWREx_GetVoltageRange+0x18>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40007000 	.word	0x40007000

08001134 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001142:	d130      	bne.n	80011a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800114c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001150:	d038      	beq.n	80011c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001152:	4a20      	ldr	r2, [pc, #128]	; (80011d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800115c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001160:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2232      	movs	r2, #50	; 0x32
 8001168:	fb02 f303 	mul.w	r3, r2, r3
 800116c:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0c9b      	lsrs	r3, r3, #18
 8001174:	3301      	adds	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001178:	e002      	b.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3b01      	subs	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800118c:	d102      	bne.n	8001194 <HAL_PWREx_ControlVoltageScaling+0x60>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1f2      	bne.n	800117a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a0:	d110      	bne.n	80011c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e00f      	b.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b2:	d007      	beq.n	80011c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40007000 	.word	0x40007000
 80011d8:	20000000 	.word	0x20000000
 80011dc:	431bde83 	.word	0x431bde83

080011e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e3d4      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f2:	4ba1      	ldr	r3, [pc, #644]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 030c 	and.w	r3, r3, #12
 80011fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011fc:	4b9e      	ldr	r3, [pc, #632]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 80e4 	beq.w	80013dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <HAL_RCC_OscConfig+0x4a>
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	2b0c      	cmp	r3, #12
 800121e:	f040 808b 	bne.w	8001338 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2b01      	cmp	r3, #1
 8001226:	f040 8087 	bne.w	8001338 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800122a:	4b93      	ldr	r3, [pc, #588]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x62>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e3ac      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1a      	ldr	r2, [r3, #32]
 8001246:	4b8c      	ldr	r3, [pc, #560]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <HAL_RCC_OscConfig+0x7c>
 8001252:	4b89      	ldr	r3, [pc, #548]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800125a:	e005      	b.n	8001268 <HAL_RCC_OscConfig+0x88>
 800125c:	4b86      	ldr	r3, [pc, #536]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 800125e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001262:	091b      	lsrs	r3, r3, #4
 8001264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001268:	429a      	cmp	r2, r3
 800126a:	d923      	bls.n	80012b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fd71 	bl	8001d58 <RCC_SetFlashLatencyFromMSIRange>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e38d      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001280:	4a7d      	ldr	r2, [pc, #500]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001282:	4b7d      	ldr	r3, [pc, #500]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	497a      	ldr	r1, [pc, #488]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 800128e:	4b7a      	ldr	r3, [pc, #488]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800129e:	4976      	ldr	r1, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80012a0:	4b75      	ldr	r3, [pc, #468]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	4313      	orrs	r3, r2
 80012b0:	604b      	str	r3, [r1, #4]
 80012b2:	e025      	b.n	8001300 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012b4:	4a70      	ldr	r2, [pc, #448]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80012b6:	4b70      	ldr	r3, [pc, #448]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f043 0308 	orr.w	r3, r3, #8
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	496d      	ldr	r1, [pc, #436]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80012c2:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012d2:	4969      	ldr	r1, [pc, #420]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80012d4:	4b68      	ldr	r3, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d109      	bne.n	8001300 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fd31 	bl	8001d58 <RCC_SetFlashLatencyFromMSIRange>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e34d      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001300:	f000 fc36 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001304:	4601      	mov	r1, r0
 8001306:	4b5c      	ldr	r3, [pc, #368]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	4a5a      	ldr	r2, [pc, #360]	; (800147c <HAL_RCC_OscConfig+0x29c>)
 8001312:	5cd3      	ldrb	r3, [r2, r3]
 8001314:	f003 031f 	and.w	r3, r3, #31
 8001318:	fa21 f303 	lsr.w	r3, r1, r3
 800131c:	4a58      	ldr	r2, [pc, #352]	; (8001480 <HAL_RCC_OscConfig+0x2a0>)
 800131e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001320:	4b58      	ldr	r3, [pc, #352]	; (8001484 <HAL_RCC_OscConfig+0x2a4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fb77 	bl	8000a18 <HAL_InitTick>
 800132a:	4603      	mov	r3, r0
 800132c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d052      	beq.n	80013da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	e331      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d032      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001340:	4a4d      	ldr	r2, [pc, #308]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001342:	4b4d      	ldr	r3, [pc, #308]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800134c:	f7ff fc38 	bl	8000bc0 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001354:	f7ff fc34 	bl	8000bc0 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e31a      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001366:	4b44      	ldr	r3, [pc, #272]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001372:	4a41      	ldr	r2, [pc, #260]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001374:	4b40      	ldr	r3, [pc, #256]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	493e      	ldr	r1, [pc, #248]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001380:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001390:	4939      	ldr	r1, [pc, #228]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
 80013a4:	e01a      	b.n	80013dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013a6:	4a34      	ldr	r2, [pc, #208]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80013a8:	4b33      	ldr	r3, [pc, #204]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fc05 	bl	8000bc0 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ba:	f7ff fc01 	bl	8000bc0 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e2e7      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013cc:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f0      	bne.n	80013ba <HAL_RCC_OscConfig+0x1da>
 80013d8:	e000      	b.n	80013dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d074      	beq.n	80014d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x21a>
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b0c      	cmp	r3, #12
 80013f2:	d10e      	bne.n	8001412 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d10b      	bne.n	8001412 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d064      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2f0>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d160      	bne.n	80014d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e2c4      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141a:	d106      	bne.n	800142a <HAL_RCC_OscConfig+0x24a>
 800141c:	4a16      	ldr	r2, [pc, #88]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	e01d      	b.n	8001466 <HAL_RCC_OscConfig+0x286>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001432:	d10c      	bne.n	800144e <HAL_RCC_OscConfig+0x26e>
 8001434:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e00b      	b.n	8001466 <HAL_RCC_OscConfig+0x286>
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001464:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d01c      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff fba7 	bl	8000bc0 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001474:	e011      	b.n	800149a <HAL_RCC_OscConfig+0x2ba>
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	08005fe8 	.word	0x08005fe8
 8001480:	20000000 	.word	0x20000000
 8001484:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fb9a 	bl	8000bc0 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e280      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800149a:	4baf      	ldr	r3, [pc, #700]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x2a8>
 80014a6:	e014      	b.n	80014d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb8a 	bl	8000bc0 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fb86 	bl	8000bc0 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e26c      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014c2:	4ba5      	ldr	r3, [pc, #660]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2d0>
 80014ce:	e000      	b.n	80014d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d060      	beq.n	80015a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_OscConfig+0x310>
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2b0c      	cmp	r3, #12
 80014e8:	d119      	bne.n	800151e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d116      	bne.n	800151e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f0:	4b99      	ldr	r3, [pc, #612]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_OscConfig+0x328>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e249      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001508:	4993      	ldr	r1, [pc, #588]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 800150a:	4b93      	ldr	r3, [pc, #588]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	061b      	lsls	r3, r3, #24
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800151c:	e040      	b.n	80015a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d023      	beq.n	800156e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001526:	4a8c      	ldr	r2, [pc, #560]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 8001528:	4b8b      	ldr	r3, [pc, #556]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001532:	f7ff fb45 	bl	8000bc0 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fb41 	bl	8000bc0 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e227      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800154c:	4b82      	ldr	r3, [pc, #520]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	497f      	ldr	r1, [pc, #508]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 800155a:	4b7f      	ldr	r3, [pc, #508]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	061b      	lsls	r3, r3, #24
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
 800156c:	e018      	b.n	80015a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156e:	4a7a      	ldr	r2, [pc, #488]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 8001570:	4b79      	ldr	r3, [pc, #484]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fb21 	bl	8000bc0 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff fb1d 	bl	8000bc0 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e203      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001594:	4b70      	ldr	r3, [pc, #448]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f0      	bne.n	8001582 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d03c      	beq.n	8001626 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d01c      	beq.n	80015ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b4:	4a68      	ldr	r2, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80015b6:	4b68      	ldr	r3, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80015b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff fafc 	bl	8000bc0 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015cc:	f7ff faf8 	bl	8000bc0 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e1de      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015de:	4b5e      	ldr	r3, [pc, #376]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80015e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0ef      	beq.n	80015cc <HAL_RCC_OscConfig+0x3ec>
 80015ec:	e01b      	b.n	8001626 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ee:	4a5a      	ldr	r2, [pc, #360]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80015f0:	4b59      	ldr	r3, [pc, #356]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80015f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fe:	f7ff fadf 	bl	8000bc0 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001606:	f7ff fadb 	bl	8000bc0 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e1c1      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001618:	4b4f      	ldr	r3, [pc, #316]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 800161a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1ef      	bne.n	8001606 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 80a6 	beq.w	8001780 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001638:	4b47      	ldr	r3, [pc, #284]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10d      	bne.n	8001660 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001644:	4a44      	ldr	r2, [pc, #272]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 8001646:	4b44      	ldr	r3, [pc, #272]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164e:	6593      	str	r3, [r2, #88]	; 0x58
 8001650:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800165c:	2301      	movs	r3, #1
 800165e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001660:	4b3e      	ldr	r3, [pc, #248]	; (800175c <HAL_RCC_OscConfig+0x57c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001668:	2b00      	cmp	r3, #0
 800166a:	d118      	bne.n	800169e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800166c:	4a3b      	ldr	r2, [pc, #236]	; (800175c <HAL_RCC_OscConfig+0x57c>)
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_RCC_OscConfig+0x57c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001676:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001678:	f7ff faa2 	bl	8000bc0 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001680:	f7ff fa9e 	bl	8000bc0 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e184      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <HAL_RCC_OscConfig+0x57c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d108      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4d8>
 80016a6:	4a2c      	ldr	r2, [pc, #176]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b6:	e024      	b.n	8001702 <HAL_RCC_OscConfig+0x522>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b05      	cmp	r3, #5
 80016be:	d110      	bne.n	80016e2 <HAL_RCC_OscConfig+0x502>
 80016c0:	4a25      	ldr	r2, [pc, #148]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80016c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d0:	4a21      	ldr	r2, [pc, #132]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80016d2:	4b21      	ldr	r3, [pc, #132]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80016d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016e0:	e00f      	b.n	8001702 <HAL_RCC_OscConfig+0x522>
 80016e2:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ea:	f023 0301 	bic.w	r3, r3, #1
 80016ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016f2:	4a19      	ldr	r2, [pc, #100]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 80016f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fa:	f023 0304 	bic.w	r3, r3, #4
 80016fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d016      	beq.n	8001738 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff fa59 	bl	8000bc0 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001710:	e00a      	b.n	8001728 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff fa55 	bl	8000bc0 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e139      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_RCC_OscConfig+0x578>)
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0ed      	beq.n	8001712 <HAL_RCC_OscConfig+0x532>
 8001736:	e01a      	b.n	800176e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff fa42 	bl	8000bc0 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800173e:	e00f      	b.n	8001760 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7ff fa3e 	bl	8000bc0 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	; 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d906      	bls.n	8001760 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e122      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001760:	4b90      	ldr	r3, [pc, #576]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1e8      	bne.n	8001740 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800176e:	7ffb      	ldrb	r3, [r7, #31]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001774:	4a8b      	ldr	r2, [pc, #556]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001776:	4b8b      	ldr	r3, [pc, #556]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 8108 	beq.w	800199a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	2b02      	cmp	r3, #2
 8001790:	f040 80d0 	bne.w	8001934 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001794:	4b83      	ldr	r3, [pc, #524]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 0203 	and.w	r2, r3, #3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d130      	bne.n	800180a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	3b01      	subs	r3, #1
 80017b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d127      	bne.n	800180a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d11f      	bne.n	800180a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017d4:	2a07      	cmp	r2, #7
 80017d6:	bf14      	ite	ne
 80017d8:	2201      	movne	r2, #1
 80017da:	2200      	moveq	r2, #0
 80017dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017de:	4293      	cmp	r3, r2
 80017e0:	d113      	bne.n	800180a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ec:	085b      	lsrs	r3, r3, #1
 80017ee:	3b01      	subs	r3, #1
 80017f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d109      	bne.n	800180a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	085b      	lsrs	r3, r3, #1
 8001802:	3b01      	subs	r3, #1
 8001804:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d06e      	beq.n	80018e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	2b0c      	cmp	r3, #12
 800180e:	d069      	beq.n	80018e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001810:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800181c:	4b61      	ldr	r3, [pc, #388]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0b7      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800182c:	4a5d      	ldr	r2, [pc, #372]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 800182e:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001836:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001838:	f7ff f9c2 	bl	8000bc0 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff f9be 	bl	8000bc0 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e0a4      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001852:	4b54      	ldr	r3, [pc, #336]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185e:	4851      	ldr	r0, [pc, #324]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001860:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	4b50      	ldr	r3, [pc, #320]	; (80019a8 <HAL_RCC_OscConfig+0x7c8>)
 8001866:	4013      	ands	r3, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001870:	3a01      	subs	r2, #1
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	4311      	orrs	r1, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800187a:	0212      	lsls	r2, r2, #8
 800187c:	4311      	orrs	r1, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001882:	0852      	lsrs	r2, r2, #1
 8001884:	3a01      	subs	r2, #1
 8001886:	0552      	lsls	r2, r2, #21
 8001888:	4311      	orrs	r1, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800188e:	0852      	lsrs	r2, r2, #1
 8001890:	3a01      	subs	r2, #1
 8001892:	0652      	lsls	r2, r2, #25
 8001894:	4311      	orrs	r1, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800189a:	0912      	lsrs	r2, r2, #4
 800189c:	0452      	lsls	r2, r2, #17
 800189e:	430a      	orrs	r2, r1
 80018a0:	4313      	orrs	r3, r2
 80018a2:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018a4:	4a3f      	ldr	r2, [pc, #252]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 80018a6:	4b3f      	ldr	r3, [pc, #252]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018b0:	4a3c      	ldr	r2, [pc, #240]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 80018b2:	4b3c      	ldr	r3, [pc, #240]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018bc:	f7ff f980 	bl	8000bc0 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff f97c 	bl	8000bc0 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e062      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e2:	e05a      	b.n	800199a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e059      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e8:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d152      	bne.n	800199a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018f4:	4a2b      	ldr	r2, [pc, #172]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001902:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800190a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800190c:	f7ff f958 	bl	8000bc0 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff f954 	bl	8000bc0 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e03a      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x734>
 8001932:	e032      	b.n	800199a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d02d      	beq.n	8001996 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001944:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d105      	bne.n	800195e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001952:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f023 0303 	bic.w	r3, r3, #3
 800195c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800195e:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff f927 	bl	8000bc0 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001976:	f7ff f923 	bl	8000bc0 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e009      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_RCC_OscConfig+0x7c4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f0      	bne.n	8001976 <HAL_RCC_OscConfig+0x796>
 8001994:	e001      	b.n	800199a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	f99d808c 	.word	0xf99d808c

080019ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0c8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b66      	ldr	r3, [pc, #408]	; (8001b5c <HAL_RCC_ClockConfig+0x1b0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0207 	and.w	r2, r3, #7
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d210      	bcs.n	80019f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4963      	ldr	r1, [pc, #396]	; (8001b5c <HAL_RCC_ClockConfig+0x1b0>)
 80019d0:	4b62      	ldr	r3, [pc, #392]	; (8001b5c <HAL_RCC_ClockConfig+0x1b0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 0207 	bic.w	r2, r3, #7
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b5f      	ldr	r3, [pc, #380]	; (8001b5c <HAL_RCC_ClockConfig+0x1b0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0207 	and.w	r2, r3, #7
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0b0      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d04c      	beq.n	8001a96 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d107      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a04:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <HAL_RCC_ClockConfig+0x1b4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d121      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e09e      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_ClockConfig+0x1b4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d115      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e092      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d107      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a34:	4b4a      	ldr	r3, [pc, #296]	; (8001b60 <HAL_RCC_ClockConfig+0x1b4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d109      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e086      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a44:	4b46      	ldr	r3, [pc, #280]	; (8001b60 <HAL_RCC_ClockConfig+0x1b4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e07e      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a54:	4942      	ldr	r1, [pc, #264]	; (8001b60 <HAL_RCC_ClockConfig+0x1b4>)
 8001a56:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <HAL_RCC_ClockConfig+0x1b4>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f023 0203 	bic.w	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a66:	f7ff f8ab 	bl	8000bc0 <HAL_GetTick>
 8001a6a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6c:	e00a      	b.n	8001a84 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6e:	f7ff f8a7 	bl	8000bc0 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e066      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a84:	4b36      	ldr	r3, [pc, #216]	; (8001b60 <HAL_RCC_ClockConfig+0x1b4>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 020c 	and.w	r2, r3, #12
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d1eb      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa2:	492f      	ldr	r1, [pc, #188]	; (8001b60 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa4:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <HAL_RCC_ClockConfig+0x1b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0207 	and.w	r2, r3, #7
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d910      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4926      	ldr	r1, [pc, #152]	; (8001b5c <HAL_RCC_ClockConfig+0x1b0>)
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_RCC_ClockConfig+0x1b0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f023 0207 	bic.w	r2, r3, #7
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_RCC_ClockConfig+0x1b0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0207 	and.w	r2, r3, #7
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e036      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af0:	491b      	ldr	r1, [pc, #108]	; (8001b60 <HAL_RCC_ClockConfig+0x1b4>)
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_RCC_ClockConfig+0x1b4>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b0e:	4914      	ldr	r1, [pc, #80]	; (8001b60 <HAL_RCC_ClockConfig+0x1b4>)
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_RCC_ClockConfig+0x1b4>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b22:	f000 f825 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b26:	4601      	mov	r1, r0
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_RCC_ClockConfig+0x1b4>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	5cd3      	ldrb	r3, [r2, r3]
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe ff66 	bl	8000a18 <HAL_InitTick>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b50:	7afb      	ldrb	r3, [r7, #11]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40022000 	.word	0x40022000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08005fe8 	.word	0x08005fe8
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d121      	bne.n	8001be2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d11e      	bne.n	8001be2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ba4:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bb0:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	e005      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bc0:	4b2c      	ldr	r3, [pc, #176]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bcc:	4a2a      	ldr	r2, [pc, #168]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10d      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d102      	bne.n	8001bee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	e004      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d133      	bne.n	8001c66 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d002      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0xa4>
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d003      	beq.n	8001c1a <HAL_RCC_GetSysClockFreq+0xaa>
 8001c12:	e005      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c16:	617b      	str	r3, [r7, #20]
      break;
 8001c18:	e005      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c1c:	617b      	str	r3, [r7, #20]
      break;
 8001c1e:	e002      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	617b      	str	r3, [r7, #20]
      break;
 8001c24:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	3301      	adds	r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	fb02 f203 	mul.w	r2, r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0e5b      	lsrs	r3, r3, #25
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	3301      	adds	r3, #1
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c66:	69bb      	ldr	r3, [r7, #24]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3724      	adds	r7, #36	; 0x24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08006000 	.word	0x08006000
 8001c7c:	00f42400 	.word	0x00f42400
 8001c80:	007a1200 	.word	0x007a1200

08001c84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000000 	.word	0x20000000

08001c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ca0:	f7ff fff0 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4601      	mov	r1, r0
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cb2:	5cd3      	ldrb	r3, [r2, r3]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08005ff8 	.word	0x08005ff8

08001cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ccc:	f7ff ffda 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4601      	mov	r1, r0
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	0adb      	lsrs	r3, r3, #11
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cde:	5cd3      	ldrb	r3, [r2, r3]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08005ff8 	.word	0x08005ff8

08001cf4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	220f      	movs	r2, #15
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_RCC_GetClockConfig+0x60>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0207 	and.w	r2, r3, #7
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	601a      	str	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40022000 	.word	0x40022000

08001d58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d70:	f7ff f9d2 	bl	8001118 <HAL_PWREx_GetVoltageRange>
 8001d74:	6178      	str	r0, [r7, #20]
 8001d76:	e014      	b.n	8001da2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	4a25      	ldr	r2, [pc, #148]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7a:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6593      	str	r3, [r2, #88]	; 0x58
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d90:	f7ff f9c2 	bl	8001118 <HAL_PWREx_GetVoltageRange>
 8001d94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d96:	4a1e      	ldr	r2, [pc, #120]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da8:	d10b      	bne.n	8001dc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b80      	cmp	r3, #128	; 0x80
 8001dae:	d919      	bls.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2ba0      	cmp	r3, #160	; 0xa0
 8001db4:	d902      	bls.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001db6:	2302      	movs	r3, #2
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	e013      	b.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	e010      	b.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b80      	cmp	r3, #128	; 0x80
 8001dc6:	d902      	bls.n	8001dce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dc8:	2303      	movs	r3, #3
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	e00a      	b.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b80      	cmp	r3, #128	; 0x80
 8001dd2:	d102      	bne.n	8001dda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	e004      	b.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b70      	cmp	r3, #112	; 0x70
 8001dde:	d101      	bne.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de0:	2301      	movs	r3, #1
 8001de2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001de4:	490b      	ldr	r1, [pc, #44]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 0207 	bic.w	r2, r3, #7
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0207 	and.w	r2, r3, #7
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d001      	beq.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40022000 	.word	0x40022000

08001e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e20:	2300      	movs	r3, #0
 8001e22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e24:	2300      	movs	r3, #0
 8001e26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d03f      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e3c:	d01c      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e42:	d802      	bhi.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00e      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001e48:	e01f      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001e4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e4e:	d003      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001e50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e54:	d01c      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001e56:	e018      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e58:	4a85      	ldr	r2, [pc, #532]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e5a:	4b85      	ldr	r3, [pc, #532]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e64:	e015      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fab9 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 8001e72:	4603      	mov	r3, r0
 8001e74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e76:	e00c      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3320      	adds	r3, #32
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fba0 	bl	80025c4 <RCCEx_PLLSAI2_Config>
 8001e84:	4603      	mov	r3, r0
 8001e86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e88:	e003      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e8e:	e000      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001e90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e92:	7cfb      	ldrb	r3, [r7, #19]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10b      	bne.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e98:	4975      	ldr	r1, [pc, #468]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e9a:	4b75      	ldr	r3, [pc, #468]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001eae:	e001      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eb0:	7cfb      	ldrb	r3, [r7, #19]
 8001eb2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d03f      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec8:	d01c      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001eca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ece:	d802      	bhi.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00e      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001ed4:	e01f      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001ed6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001eda:	d003      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001edc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ee0:	d01c      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001ee2:	e018      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ee4:	4a62      	ldr	r2, [pc, #392]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ee6:	4b62      	ldr	r3, [pc, #392]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ef0:	e015      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fa73 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 8001efe:	4603      	mov	r3, r0
 8001f00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f02:	e00c      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3320      	adds	r3, #32
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fb5a 	bl	80025c4 <RCCEx_PLLSAI2_Config>
 8001f10:	4603      	mov	r3, r0
 8001f12:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f14:	e003      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	74fb      	strb	r3, [r7, #19]
      break;
 8001f1a:	e000      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f1e:	7cfb      	ldrb	r3, [r7, #19]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10b      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f24:	4952      	ldr	r1, [pc, #328]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f26:	4b52      	ldr	r3, [pc, #328]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f3a:	e001      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80a0 	beq.w	800208e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001f62:	2300      	movs	r3, #0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00d      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f68:	4a41      	ldr	r2, [pc, #260]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f72:	6593      	str	r3, [r2, #88]	; 0x58
 8001f74:	4b3e      	ldr	r3, [pc, #248]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f80:	2301      	movs	r3, #1
 8001f82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f84:	4a3b      	ldr	r2, [pc, #236]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f86:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f90:	f7fe fe16 	bl	8000bc0 <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f96:	e009      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f98:	f7fe fe12 	bl	8000bc0 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d902      	bls.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	74fb      	strb	r3, [r7, #19]
        break;
 8001faa:	e005      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fac:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ef      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d15c      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01f      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d019      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fdc:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fe8:	4a21      	ldr	r2, [pc, #132]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002008:	4a19      	ldr	r2, [pc, #100]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d016      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7fe fdd1 	bl	8000bc0 <HAL_GetTick>
 800201e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002020:	e00b      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7fe fdcd 	bl	8000bc0 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d902      	bls.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	74fb      	strb	r3, [r7, #19]
            break;
 8002038:	e006      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ec      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800204e:	4908      	ldr	r1, [pc, #32]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002066:	e009      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	74bb      	strb	r3, [r7, #18]
 800206c:	e006      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800207c:	7c7b      	ldrb	r3, [r7, #17]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4a9e      	ldr	r2, [pc, #632]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002084:	4b9d      	ldr	r3, [pc, #628]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800209a:	4998      	ldr	r1, [pc, #608]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800209c:	4b97      	ldr	r3, [pc, #604]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	f023 0203 	bic.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020bc:	498f      	ldr	r1, [pc, #572]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020be:	4b8f      	ldr	r3, [pc, #572]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c4:	f023 020c 	bic.w	r2, r3, #12
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020de:	4987      	ldr	r1, [pc, #540]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020e0:	4b86      	ldr	r3, [pc, #536]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002100:	497e      	ldr	r1, [pc, #504]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002102:	4b7e      	ldr	r3, [pc, #504]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002108:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002122:	4976      	ldr	r1, [pc, #472]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002124:	4b75      	ldr	r3, [pc, #468]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002144:	496d      	ldr	r1, [pc, #436]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002146:	4b6d      	ldr	r3, [pc, #436]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002166:	4965      	ldr	r1, [pc, #404]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002168:	4b64      	ldr	r3, [pc, #400]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002188:	495c      	ldr	r1, [pc, #368]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800218a:	4b5c      	ldr	r3, [pc, #368]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002190:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021aa:	4954      	ldr	r1, [pc, #336]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ac:	4b53      	ldr	r3, [pc, #332]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021cc:	494b      	ldr	r1, [pc, #300]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ce:	4b4b      	ldr	r3, [pc, #300]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021ee:	4943      	ldr	r1, [pc, #268]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021f0:	4b42      	ldr	r3, [pc, #264]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d028      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002210:	493a      	ldr	r1, [pc, #232]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002212:	4b3a      	ldr	r3, [pc, #232]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002218:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800222a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800222e:	d106      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002230:	4a32      	ldr	r2, [pc, #200]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002232:	4b32      	ldr	r3, [pc, #200]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800223a:	60d3      	str	r3, [r2, #12]
 800223c:	e011      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002242:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002246:	d10c      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3304      	adds	r3, #4
 800224c:	2101      	movs	r1, #1
 800224e:	4618      	mov	r0, r3
 8002250:	f000 f8c8 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800225e:	7cfb      	ldrb	r3, [r7, #19]
 8002260:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d028      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800226e:	4923      	ldr	r1, [pc, #140]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002270:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800228c:	d106      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800228e:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002298:	60d3      	str	r3, [r2, #12]
 800229a:	e011      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3304      	adds	r3, #4
 80022aa:	2101      	movs	r1, #1
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f899 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 80022b2:	4603      	mov	r3, r0
 80022b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022b6:	7cfb      	ldrb	r3, [r7, #19]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d02b      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022cc:	490b      	ldr	r1, [pc, #44]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ea:	d109      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ec:	4a03      	ldr	r2, [pc, #12]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022ee:	4b03      	ldr	r3, [pc, #12]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f6:	60d3      	str	r3, [r2, #12]
 80022f8:	e014      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002308:	d10c      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	2101      	movs	r1, #1
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f867 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 8002316:	4603      	mov	r3, r0
 8002318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800231a:	7cfb      	ldrb	r3, [r7, #19]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d02f      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002330:	492b      	ldr	r1, [pc, #172]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002332:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002338:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800234a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800234e:	d10d      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3304      	adds	r3, #4
 8002354:	2102      	movs	r1, #2
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f844 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d014      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002366:	7cfb      	ldrb	r3, [r7, #19]
 8002368:	74bb      	strb	r3, [r7, #18]
 800236a:	e011      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002374:	d10c      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3320      	adds	r3, #32
 800237a:	2102      	movs	r1, #2
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f921 	bl	80025c4 <RCCEx_PLLSAI2_Config>
 8002382:	4603      	mov	r3, r0
 8002384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800239c:	4910      	ldr	r1, [pc, #64]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023be:	4908      	ldr	r1, [pc, #32]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000

080023e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023f2:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d018      	beq.n	8002430 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023fe:	4b70      	ldr	r3, [pc, #448]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f003 0203 	and.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d10d      	bne.n	800242a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
       ||
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002416:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
       ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d044      	beq.n	80024b4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
 800242e:	e041      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d00c      	beq.n	8002452 <RCCEx_PLLSAI1_Config+0x6e>
 8002438:	2b03      	cmp	r3, #3
 800243a:	d013      	beq.n	8002464 <RCCEx_PLLSAI1_Config+0x80>
 800243c:	2b01      	cmp	r3, #1
 800243e:	d120      	bne.n	8002482 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002440:	4b5f      	ldr	r3, [pc, #380]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d11d      	bne.n	8002488 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002450:	e01a      	b.n	8002488 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002452:	4b5b      	ldr	r3, [pc, #364]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245a:	2b00      	cmp	r3, #0
 800245c:	d116      	bne.n	800248c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002462:	e013      	b.n	800248c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002464:	4b56      	ldr	r3, [pc, #344]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10f      	bne.n	8002490 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002470:	4b53      	ldr	r3, [pc, #332]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d109      	bne.n	8002490 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002480:	e006      	b.n	8002490 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
      break;
 8002486:	e004      	b.n	8002492 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002488:	bf00      	nop
 800248a:	e002      	b.n	8002492 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800248c:	bf00      	nop
 800248e:	e000      	b.n	8002492 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002490:	bf00      	nop
    }

    if(status == HAL_OK)
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10d      	bne.n	80024b4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002498:	4849      	ldr	r0, [pc, #292]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800249a:	4b49      	ldr	r3, [pc, #292]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6819      	ldr	r1, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	430b      	orrs	r3, r1
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d17d      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024ba:	4a41      	ldr	r2, [pc, #260]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024bc:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c6:	f7fe fb7b 	bl	8000bc0 <HAL_GetTick>
 80024ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024cc:	e009      	b.n	80024e2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ce:	f7fe fb77 	bl	8000bc0 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d902      	bls.n	80024e2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	73fb      	strb	r3, [r7, #15]
        break;
 80024e0:	e005      	b.n	80024ee <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024e2:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ef      	bne.n	80024ce <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d160      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d111      	bne.n	800251e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024fa:	4831      	ldr	r0, [pc, #196]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6892      	ldr	r2, [r2, #8]
 800250c:	0211      	lsls	r1, r2, #8
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68d2      	ldr	r2, [r2, #12]
 8002512:	0912      	lsrs	r2, r2, #4
 8002514:	0452      	lsls	r2, r2, #17
 8002516:	430a      	orrs	r2, r1
 8002518:	4313      	orrs	r3, r2
 800251a:	6103      	str	r3, [r0, #16]
 800251c:	e027      	b.n	800256e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d112      	bne.n	800254a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002524:	4826      	ldr	r0, [pc, #152]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002526:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800252e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6892      	ldr	r2, [r2, #8]
 8002536:	0211      	lsls	r1, r2, #8
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6912      	ldr	r2, [r2, #16]
 800253c:	0852      	lsrs	r2, r2, #1
 800253e:	3a01      	subs	r2, #1
 8002540:	0552      	lsls	r2, r2, #21
 8002542:	430a      	orrs	r2, r1
 8002544:	4313      	orrs	r3, r2
 8002546:	6103      	str	r3, [r0, #16]
 8002548:	e011      	b.n	800256e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800254a:	481d      	ldr	r0, [pc, #116]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800254c:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002554:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6892      	ldr	r2, [r2, #8]
 800255c:	0211      	lsls	r1, r2, #8
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6952      	ldr	r2, [r2, #20]
 8002562:	0852      	lsrs	r2, r2, #1
 8002564:	3a01      	subs	r2, #1
 8002566:	0652      	lsls	r2, r2, #25
 8002568:	430a      	orrs	r2, r1
 800256a:	4313      	orrs	r3, r2
 800256c:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800256e:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002578:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7fe fb21 	bl	8000bc0 <HAL_GetTick>
 800257e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002580:	e009      	b.n	8002596 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002582:	f7fe fb1d 	bl	8000bc0 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d902      	bls.n	8002596 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	73fb      	strb	r3, [r7, #15]
          break;
 8002594:	e005      	b.n	80025a2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0ef      	beq.n	8002582 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d106      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025a8:	4905      	ldr	r1, [pc, #20]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000

080025c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025d2:	4b68      	ldr	r3, [pc, #416]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d018      	beq.n	8002610 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025de:	4b65      	ldr	r3, [pc, #404]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f003 0203 	and.w	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d10d      	bne.n	800260a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
       ||
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025f6:	4b5f      	ldr	r3, [pc, #380]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
       ||
 8002606:	429a      	cmp	r2, r3
 8002608:	d044      	beq.n	8002694 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	e041      	b.n	8002694 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d00c      	beq.n	8002632 <RCCEx_PLLSAI2_Config+0x6e>
 8002618:	2b03      	cmp	r3, #3
 800261a:	d013      	beq.n	8002644 <RCCEx_PLLSAI2_Config+0x80>
 800261c:	2b01      	cmp	r3, #1
 800261e:	d120      	bne.n	8002662 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002620:	4b54      	ldr	r3, [pc, #336]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d11d      	bne.n	8002668 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002630:	e01a      	b.n	8002668 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002632:	4b50      	ldr	r3, [pc, #320]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263a:	2b00      	cmp	r3, #0
 800263c:	d116      	bne.n	800266c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002642:	e013      	b.n	800266c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002644:	4b4b      	ldr	r3, [pc, #300]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10f      	bne.n	8002670 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002650:	4b48      	ldr	r3, [pc, #288]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d109      	bne.n	8002670 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002660:	e006      	b.n	8002670 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
      break;
 8002666:	e004      	b.n	8002672 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002668:	bf00      	nop
 800266a:	e002      	b.n	8002672 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800266c:	bf00      	nop
 800266e:	e000      	b.n	8002672 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002670:	bf00      	nop
    }

    if(status == HAL_OK)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10d      	bne.n	8002694 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002678:	483e      	ldr	r0, [pc, #248]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 800267a:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	430b      	orrs	r3, r1
 8002690:	4313      	orrs	r3, r2
 8002692:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d167      	bne.n	800276a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800269a:	4a36      	ldr	r2, [pc, #216]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 800269c:	4b35      	ldr	r3, [pc, #212]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a6:	f7fe fa8b 	bl	8000bc0 <HAL_GetTick>
 80026aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026ac:	e009      	b.n	80026c2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026ae:	f7fe fa87 	bl	8000bc0 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d902      	bls.n	80026c2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	73fb      	strb	r3, [r7, #15]
        break;
 80026c0:	e005      	b.n	80026ce <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026c2:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1ef      	bne.n	80026ae <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d14a      	bne.n	800276a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d111      	bne.n	80026fe <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026da:	4826      	ldr	r0, [pc, #152]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026dc:	4b25      	ldr	r3, [pc, #148]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6892      	ldr	r2, [r2, #8]
 80026ec:	0211      	lsls	r1, r2, #8
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68d2      	ldr	r2, [r2, #12]
 80026f2:	0912      	lsrs	r2, r2, #4
 80026f4:	0452      	lsls	r2, r2, #17
 80026f6:	430a      	orrs	r2, r1
 80026f8:	4313      	orrs	r3, r2
 80026fa:	6143      	str	r3, [r0, #20]
 80026fc:	e011      	b.n	8002722 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026fe:	481d      	ldr	r0, [pc, #116]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002700:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002708:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6892      	ldr	r2, [r2, #8]
 8002710:	0211      	lsls	r1, r2, #8
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6912      	ldr	r2, [r2, #16]
 8002716:	0852      	lsrs	r2, r2, #1
 8002718:	3a01      	subs	r2, #1
 800271a:	0652      	lsls	r2, r2, #25
 800271c:	430a      	orrs	r2, r1
 800271e:	4313      	orrs	r3, r2
 8002720:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002722:	4a14      	ldr	r2, [pc, #80]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272e:	f7fe fa47 	bl	8000bc0 <HAL_GetTick>
 8002732:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002734:	e009      	b.n	800274a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002736:	f7fe fa43 	bl	8000bc0 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d902      	bls.n	800274a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	73fb      	strb	r3, [r7, #15]
          break;
 8002748:	e005      	b.n	8002756 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0ef      	beq.n	8002736 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d106      	bne.n	800276a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800275c:	4905      	ldr	r1, [pc, #20]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000

08002778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e049      	b.n	800281e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f841 	bl	8002826 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f000 f9f8 	bl	8002bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b01      	cmp	r3, #1
 800284e:	d001      	beq.n	8002854 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e04f      	b.n	80028f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	68d2      	ldr	r2, [r2, #12]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a23      	ldr	r2, [pc, #140]	; (8002900 <HAL_TIM_Base_Start_IT+0xc4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01d      	beq.n	80028b2 <HAL_TIM_Base_Start_IT+0x76>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287e:	d018      	beq.n	80028b2 <HAL_TIM_Base_Start_IT+0x76>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1f      	ldr	r2, [pc, #124]	; (8002904 <HAL_TIM_Base_Start_IT+0xc8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_TIM_Base_Start_IT+0x76>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1e      	ldr	r2, [pc, #120]	; (8002908 <HAL_TIM_Base_Start_IT+0xcc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00e      	beq.n	80028b2 <HAL_TIM_Base_Start_IT+0x76>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1c      	ldr	r2, [pc, #112]	; (800290c <HAL_TIM_Base_Start_IT+0xd0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_TIM_Base_Start_IT+0x76>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <HAL_TIM_Base_Start_IT+0xd4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d004      	beq.n	80028b2 <HAL_TIM_Base_Start_IT+0x76>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_TIM_Base_Start_IT+0xd8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d115      	bne.n	80028de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	4b17      	ldr	r3, [pc, #92]	; (8002918 <HAL_TIM_Base_Start_IT+0xdc>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b06      	cmp	r3, #6
 80028c2:	d015      	beq.n	80028f0 <HAL_TIM_Base_Start_IT+0xb4>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ca:	d011      	beq.n	80028f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028dc:	e008      	b.n	80028f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e000      	b.n	80028f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40012c00 	.word	0x40012c00
 8002904:	40000400 	.word	0x40000400
 8002908:	40000800 	.word	0x40000800
 800290c:	40000c00 	.word	0x40000c00
 8002910:	40013400 	.word	0x40013400
 8002914:	40014000 	.word	0x40014000
 8002918:	00010007 	.word	0x00010007

0800291c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b02      	cmp	r3, #2
 8002930:	d122      	bne.n	8002978 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b02      	cmp	r3, #2
 800293e:	d11b      	bne.n	8002978 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0202 	mvn.w	r2, #2
 8002948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f905 	bl	8002b6e <HAL_TIM_IC_CaptureCallback>
 8002964:	e005      	b.n	8002972 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f8f7 	bl	8002b5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f908 	bl	8002b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b04      	cmp	r3, #4
 8002984:	d122      	bne.n	80029cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b04      	cmp	r3, #4
 8002992:	d11b      	bne.n	80029cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0204 	mvn.w	r2, #4
 800299c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2202      	movs	r2, #2
 80029a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8db 	bl	8002b6e <HAL_TIM_IC_CaptureCallback>
 80029b8:	e005      	b.n	80029c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8cd 	bl	8002b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f8de 	bl	8002b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d122      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d11b      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0208 	mvn.w	r2, #8
 80029f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2204      	movs	r2, #4
 80029f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8b1 	bl	8002b6e <HAL_TIM_IC_CaptureCallback>
 8002a0c:	e005      	b.n	8002a1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f8a3 	bl	8002b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f8b4 	bl	8002b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b10      	cmp	r3, #16
 8002a2c:	d122      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d11b      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0210 	mvn.w	r2, #16
 8002a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2208      	movs	r2, #8
 8002a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f887 	bl	8002b6e <HAL_TIM_IC_CaptureCallback>
 8002a60:	e005      	b.n	8002a6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f879 	bl	8002b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f88a 	bl	8002b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d10e      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d107      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0201 	mvn.w	r2, #1
 8002a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fd ff3c 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	2b80      	cmp	r3, #128	; 0x80
 8002aac:	d10e      	bne.n	8002acc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab8:	2b80      	cmp	r3, #128	; 0x80
 8002aba:	d107      	bne.n	8002acc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f914 	bl	8002cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ada:	d10e      	bne.n	8002afa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae6:	2b80      	cmp	r3, #128	; 0x80
 8002ae8:	d107      	bne.n	8002afa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f907 	bl	8002d08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b04:	2b40      	cmp	r3, #64	; 0x40
 8002b06:	d10e      	bne.n	8002b26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	d107      	bne.n	8002b26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f838 	bl	8002b96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d10e      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d107      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f06f 0220 	mvn.w	r2, #32
 8002b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f8c7 	bl	8002ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a40      	ldr	r2, [pc, #256]	; (8002cc0 <TIM_Base_SetConfig+0x114>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d013      	beq.n	8002bec <TIM_Base_SetConfig+0x40>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bca:	d00f      	beq.n	8002bec <TIM_Base_SetConfig+0x40>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a3d      	ldr	r2, [pc, #244]	; (8002cc4 <TIM_Base_SetConfig+0x118>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00b      	beq.n	8002bec <TIM_Base_SetConfig+0x40>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a3c      	ldr	r2, [pc, #240]	; (8002cc8 <TIM_Base_SetConfig+0x11c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d007      	beq.n	8002bec <TIM_Base_SetConfig+0x40>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a3b      	ldr	r2, [pc, #236]	; (8002ccc <TIM_Base_SetConfig+0x120>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d003      	beq.n	8002bec <TIM_Base_SetConfig+0x40>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a3a      	ldr	r2, [pc, #232]	; (8002cd0 <TIM_Base_SetConfig+0x124>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d108      	bne.n	8002bfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a2f      	ldr	r2, [pc, #188]	; (8002cc0 <TIM_Base_SetConfig+0x114>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d01f      	beq.n	8002c46 <TIM_Base_SetConfig+0x9a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0c:	d01b      	beq.n	8002c46 <TIM_Base_SetConfig+0x9a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a2c      	ldr	r2, [pc, #176]	; (8002cc4 <TIM_Base_SetConfig+0x118>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d017      	beq.n	8002c46 <TIM_Base_SetConfig+0x9a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a2b      	ldr	r2, [pc, #172]	; (8002cc8 <TIM_Base_SetConfig+0x11c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <TIM_Base_SetConfig+0x9a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a2a      	ldr	r2, [pc, #168]	; (8002ccc <TIM_Base_SetConfig+0x120>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00f      	beq.n	8002c46 <TIM_Base_SetConfig+0x9a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a29      	ldr	r2, [pc, #164]	; (8002cd0 <TIM_Base_SetConfig+0x124>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00b      	beq.n	8002c46 <TIM_Base_SetConfig+0x9a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a28      	ldr	r2, [pc, #160]	; (8002cd4 <TIM_Base_SetConfig+0x128>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d007      	beq.n	8002c46 <TIM_Base_SetConfig+0x9a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <TIM_Base_SetConfig+0x12c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d003      	beq.n	8002c46 <TIM_Base_SetConfig+0x9a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <TIM_Base_SetConfig+0x130>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d108      	bne.n	8002c58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <TIM_Base_SetConfig+0x114>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00f      	beq.n	8002ca4 <TIM_Base_SetConfig+0xf8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <TIM_Base_SetConfig+0x124>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00b      	beq.n	8002ca4 <TIM_Base_SetConfig+0xf8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a11      	ldr	r2, [pc, #68]	; (8002cd4 <TIM_Base_SetConfig+0x128>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d007      	beq.n	8002ca4 <TIM_Base_SetConfig+0xf8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a10      	ldr	r2, [pc, #64]	; (8002cd8 <TIM_Base_SetConfig+0x12c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_Base_SetConfig+0xf8>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a0f      	ldr	r2, [pc, #60]	; (8002cdc <TIM_Base_SetConfig+0x130>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d103      	bne.n	8002cac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	615a      	str	r2, [r3, #20]
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40000400 	.word	0x40000400
 8002cc8:	40000800 	.word	0x40000800
 8002ccc:	40000c00 	.word	0x40000c00
 8002cd0:	40013400 	.word	0x40013400
 8002cd4:	40014000 	.word	0x40014000
 8002cd8:	40014400 	.word	0x40014400
 8002cdc:	40014800 	.word	0x40014800

08002ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e040      	b.n	8002db0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd fe28 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2224      	movs	r2, #36	; 0x24
 8002d48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8c0 	bl	8002ee0 <UART_SetConfig>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e022      	b.n	8002db0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fb38 	bl	80033e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	6852      	ldr	r2, [r2, #4]
 8002d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	6892      	ldr	r2, [r2, #8]
 8002d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fbbf 	bl	800352c <UART_CheckIdleState>
 8002dae:	4603      	mov	r3, r0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	f040 8082 	bne.w	8002ed6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_UART_Transmit+0x26>
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e07a      	b.n	8002ed8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_UART_Transmit+0x38>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e073      	b.n	8002ed8 <HAL_UART_Transmit+0x120>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2221      	movs	r2, #33	; 0x21
 8002e04:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e06:	f7fd fedb 	bl	8000bc0 <HAL_GetTick>
 8002e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	88fa      	ldrh	r2, [r7, #6]
 8002e18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	d108      	bne.n	8002e38 <HAL_UART_Transmit+0x80>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d104      	bne.n	8002e38 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	e003      	b.n	8002e40 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e48:	e02d      	b.n	8002ea6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2200      	movs	r2, #0
 8002e52:	2180      	movs	r1, #128	; 0x80
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fbb2 	bl	80035be <UART_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e039      	b.n	8002ed8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10b      	bne.n	8002e82 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	8812      	ldrh	r2, [r2, #0]
 8002e72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e76:	b292      	uxth	r2, r2
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	e008      	b.n	8002e94 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	7812      	ldrb	r2, [r2, #0]
 8002e8a:	b292      	uxth	r2, r2
 8002e8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1cb      	bne.n	8002e4a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2140      	movs	r1, #64	; 0x40
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fb7e 	bl	80035be <UART_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e005      	b.n	8002ed8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e000      	b.n	8002ed8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
  }
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3720      	adds	r7, #32
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee0:	b5b0      	push	{r4, r5, r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	4bac      	ldr	r3, [pc, #688]	; (80031c0 <UART_SetConfig+0x2e0>)
 8002f10:	400b      	ands	r3, r1
 8002f12:	69f9      	ldr	r1, [r7, #28]
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	6852      	ldr	r2, [r2, #4]
 8002f22:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68d2      	ldr	r2, [r2, #12]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4aa2      	ldr	r2, [pc, #648]	; (80031c4 <UART_SetConfig+0x2e4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	6892      	ldr	r2, [r2, #8]
 8002f52:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a99      	ldr	r2, [pc, #612]	; (80031c8 <UART_SetConfig+0x2e8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d122      	bne.n	8002fac <UART_SetConfig+0xcc>
 8002f66:	4b99      	ldr	r3, [pc, #612]	; (80031cc <UART_SetConfig+0x2ec>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d817      	bhi.n	8002fa4 <UART_SetConfig+0xc4>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <UART_SetConfig+0x9c>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002f8d 	.word	0x08002f8d
 8002f80:	08002f99 	.word	0x08002f99
 8002f84:	08002f93 	.word	0x08002f93
 8002f88:	08002f9f 	.word	0x08002f9f
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	76fb      	strb	r3, [r7, #27]
 8002f90:	e0e8      	b.n	8003164 <UART_SetConfig+0x284>
 8002f92:	2302      	movs	r3, #2
 8002f94:	76fb      	strb	r3, [r7, #27]
 8002f96:	e0e5      	b.n	8003164 <UART_SetConfig+0x284>
 8002f98:	2304      	movs	r3, #4
 8002f9a:	76fb      	strb	r3, [r7, #27]
 8002f9c:	e0e2      	b.n	8003164 <UART_SetConfig+0x284>
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	76fb      	strb	r3, [r7, #27]
 8002fa2:	e0df      	b.n	8003164 <UART_SetConfig+0x284>
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	76fb      	strb	r3, [r7, #27]
 8002fa8:	bf00      	nop
 8002faa:	e0db      	b.n	8003164 <UART_SetConfig+0x284>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a87      	ldr	r2, [pc, #540]	; (80031d0 <UART_SetConfig+0x2f0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d134      	bne.n	8003020 <UART_SetConfig+0x140>
 8002fb6:	4b85      	ldr	r3, [pc, #532]	; (80031cc <UART_SetConfig+0x2ec>)
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	d829      	bhi.n	8003018 <UART_SetConfig+0x138>
 8002fc4:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <UART_SetConfig+0xec>)
 8002fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fca:	bf00      	nop
 8002fcc:	08003001 	.word	0x08003001
 8002fd0:	08003019 	.word	0x08003019
 8002fd4:	08003019 	.word	0x08003019
 8002fd8:	08003019 	.word	0x08003019
 8002fdc:	0800300d 	.word	0x0800300d
 8002fe0:	08003019 	.word	0x08003019
 8002fe4:	08003019 	.word	0x08003019
 8002fe8:	08003019 	.word	0x08003019
 8002fec:	08003007 	.word	0x08003007
 8002ff0:	08003019 	.word	0x08003019
 8002ff4:	08003019 	.word	0x08003019
 8002ff8:	08003019 	.word	0x08003019
 8002ffc:	08003013 	.word	0x08003013
 8003000:	2300      	movs	r3, #0
 8003002:	76fb      	strb	r3, [r7, #27]
 8003004:	e0ae      	b.n	8003164 <UART_SetConfig+0x284>
 8003006:	2302      	movs	r3, #2
 8003008:	76fb      	strb	r3, [r7, #27]
 800300a:	e0ab      	b.n	8003164 <UART_SetConfig+0x284>
 800300c:	2304      	movs	r3, #4
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e0a8      	b.n	8003164 <UART_SetConfig+0x284>
 8003012:	2308      	movs	r3, #8
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e0a5      	b.n	8003164 <UART_SetConfig+0x284>
 8003018:	2310      	movs	r3, #16
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	bf00      	nop
 800301e:	e0a1      	b.n	8003164 <UART_SetConfig+0x284>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a6b      	ldr	r2, [pc, #428]	; (80031d4 <UART_SetConfig+0x2f4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d120      	bne.n	800306c <UART_SetConfig+0x18c>
 800302a:	4b68      	ldr	r3, [pc, #416]	; (80031cc <UART_SetConfig+0x2ec>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003034:	2b10      	cmp	r3, #16
 8003036:	d00f      	beq.n	8003058 <UART_SetConfig+0x178>
 8003038:	2b10      	cmp	r3, #16
 800303a:	d802      	bhi.n	8003042 <UART_SetConfig+0x162>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <UART_SetConfig+0x16c>
 8003040:	e010      	b.n	8003064 <UART_SetConfig+0x184>
 8003042:	2b20      	cmp	r3, #32
 8003044:	d005      	beq.n	8003052 <UART_SetConfig+0x172>
 8003046:	2b30      	cmp	r3, #48	; 0x30
 8003048:	d009      	beq.n	800305e <UART_SetConfig+0x17e>
 800304a:	e00b      	b.n	8003064 <UART_SetConfig+0x184>
 800304c:	2300      	movs	r3, #0
 800304e:	76fb      	strb	r3, [r7, #27]
 8003050:	e088      	b.n	8003164 <UART_SetConfig+0x284>
 8003052:	2302      	movs	r3, #2
 8003054:	76fb      	strb	r3, [r7, #27]
 8003056:	e085      	b.n	8003164 <UART_SetConfig+0x284>
 8003058:	2304      	movs	r3, #4
 800305a:	76fb      	strb	r3, [r7, #27]
 800305c:	e082      	b.n	8003164 <UART_SetConfig+0x284>
 800305e:	2308      	movs	r3, #8
 8003060:	76fb      	strb	r3, [r7, #27]
 8003062:	e07f      	b.n	8003164 <UART_SetConfig+0x284>
 8003064:	2310      	movs	r3, #16
 8003066:	76fb      	strb	r3, [r7, #27]
 8003068:	bf00      	nop
 800306a:	e07b      	b.n	8003164 <UART_SetConfig+0x284>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a59      	ldr	r2, [pc, #356]	; (80031d8 <UART_SetConfig+0x2f8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d120      	bne.n	80030b8 <UART_SetConfig+0x1d8>
 8003076:	4b55      	ldr	r3, [pc, #340]	; (80031cc <UART_SetConfig+0x2ec>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d00f      	beq.n	80030a4 <UART_SetConfig+0x1c4>
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d802      	bhi.n	800308e <UART_SetConfig+0x1ae>
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <UART_SetConfig+0x1b8>
 800308c:	e010      	b.n	80030b0 <UART_SetConfig+0x1d0>
 800308e:	2b80      	cmp	r3, #128	; 0x80
 8003090:	d005      	beq.n	800309e <UART_SetConfig+0x1be>
 8003092:	2bc0      	cmp	r3, #192	; 0xc0
 8003094:	d009      	beq.n	80030aa <UART_SetConfig+0x1ca>
 8003096:	e00b      	b.n	80030b0 <UART_SetConfig+0x1d0>
 8003098:	2300      	movs	r3, #0
 800309a:	76fb      	strb	r3, [r7, #27]
 800309c:	e062      	b.n	8003164 <UART_SetConfig+0x284>
 800309e:	2302      	movs	r3, #2
 80030a0:	76fb      	strb	r3, [r7, #27]
 80030a2:	e05f      	b.n	8003164 <UART_SetConfig+0x284>
 80030a4:	2304      	movs	r3, #4
 80030a6:	76fb      	strb	r3, [r7, #27]
 80030a8:	e05c      	b.n	8003164 <UART_SetConfig+0x284>
 80030aa:	2308      	movs	r3, #8
 80030ac:	76fb      	strb	r3, [r7, #27]
 80030ae:	e059      	b.n	8003164 <UART_SetConfig+0x284>
 80030b0:	2310      	movs	r3, #16
 80030b2:	76fb      	strb	r3, [r7, #27]
 80030b4:	bf00      	nop
 80030b6:	e055      	b.n	8003164 <UART_SetConfig+0x284>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a47      	ldr	r2, [pc, #284]	; (80031dc <UART_SetConfig+0x2fc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d124      	bne.n	800310c <UART_SetConfig+0x22c>
 80030c2:	4b42      	ldr	r3, [pc, #264]	; (80031cc <UART_SetConfig+0x2ec>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d0:	d012      	beq.n	80030f8 <UART_SetConfig+0x218>
 80030d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d6:	d802      	bhi.n	80030de <UART_SetConfig+0x1fe>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <UART_SetConfig+0x20c>
 80030dc:	e012      	b.n	8003104 <UART_SetConfig+0x224>
 80030de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e2:	d006      	beq.n	80030f2 <UART_SetConfig+0x212>
 80030e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030e8:	d009      	beq.n	80030fe <UART_SetConfig+0x21e>
 80030ea:	e00b      	b.n	8003104 <UART_SetConfig+0x224>
 80030ec:	2300      	movs	r3, #0
 80030ee:	76fb      	strb	r3, [r7, #27]
 80030f0:	e038      	b.n	8003164 <UART_SetConfig+0x284>
 80030f2:	2302      	movs	r3, #2
 80030f4:	76fb      	strb	r3, [r7, #27]
 80030f6:	e035      	b.n	8003164 <UART_SetConfig+0x284>
 80030f8:	2304      	movs	r3, #4
 80030fa:	76fb      	strb	r3, [r7, #27]
 80030fc:	e032      	b.n	8003164 <UART_SetConfig+0x284>
 80030fe:	2308      	movs	r3, #8
 8003100:	76fb      	strb	r3, [r7, #27]
 8003102:	e02f      	b.n	8003164 <UART_SetConfig+0x284>
 8003104:	2310      	movs	r3, #16
 8003106:	76fb      	strb	r3, [r7, #27]
 8003108:	bf00      	nop
 800310a:	e02b      	b.n	8003164 <UART_SetConfig+0x284>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2c      	ldr	r2, [pc, #176]	; (80031c4 <UART_SetConfig+0x2e4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d124      	bne.n	8003160 <UART_SetConfig+0x280>
 8003116:	4b2d      	ldr	r3, [pc, #180]	; (80031cc <UART_SetConfig+0x2ec>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003124:	d012      	beq.n	800314c <UART_SetConfig+0x26c>
 8003126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312a:	d802      	bhi.n	8003132 <UART_SetConfig+0x252>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <UART_SetConfig+0x260>
 8003130:	e012      	b.n	8003158 <UART_SetConfig+0x278>
 8003132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003136:	d006      	beq.n	8003146 <UART_SetConfig+0x266>
 8003138:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800313c:	d009      	beq.n	8003152 <UART_SetConfig+0x272>
 800313e:	e00b      	b.n	8003158 <UART_SetConfig+0x278>
 8003140:	2300      	movs	r3, #0
 8003142:	76fb      	strb	r3, [r7, #27]
 8003144:	e00e      	b.n	8003164 <UART_SetConfig+0x284>
 8003146:	2302      	movs	r3, #2
 8003148:	76fb      	strb	r3, [r7, #27]
 800314a:	e00b      	b.n	8003164 <UART_SetConfig+0x284>
 800314c:	2304      	movs	r3, #4
 800314e:	76fb      	strb	r3, [r7, #27]
 8003150:	e008      	b.n	8003164 <UART_SetConfig+0x284>
 8003152:	2308      	movs	r3, #8
 8003154:	76fb      	strb	r3, [r7, #27]
 8003156:	e005      	b.n	8003164 <UART_SetConfig+0x284>
 8003158:	2310      	movs	r3, #16
 800315a:	76fb      	strb	r3, [r7, #27]
 800315c:	bf00      	nop
 800315e:	e001      	b.n	8003164 <UART_SetConfig+0x284>
 8003160:	2310      	movs	r3, #16
 8003162:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a16      	ldr	r2, [pc, #88]	; (80031c4 <UART_SetConfig+0x2e4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	f040 8080 	bne.w	8003270 <UART_SetConfig+0x390>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003170:	7efb      	ldrb	r3, [r7, #27]
 8003172:	2b08      	cmp	r3, #8
 8003174:	d836      	bhi.n	80031e4 <UART_SetConfig+0x304>
 8003176:	a201      	add	r2, pc, #4	; (adr r2, 800317c <UART_SetConfig+0x29c>)
 8003178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317c:	080031a1 	.word	0x080031a1
 8003180:	080031e5 	.word	0x080031e5
 8003184:	080031a9 	.word	0x080031a9
 8003188:	080031e5 	.word	0x080031e5
 800318c:	080031af 	.word	0x080031af
 8003190:	080031e5 	.word	0x080031e5
 8003194:	080031e5 	.word	0x080031e5
 8003198:	080031e5 	.word	0x080031e5
 800319c:	080031b7 	.word	0x080031b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a0:	f7fe fd7c 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 80031a4:	6178      	str	r0, [r7, #20]
        break;
 80031a6:	e022      	b.n	80031ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031a8:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <UART_SetConfig+0x300>)
 80031aa:	617b      	str	r3, [r7, #20]
        break;
 80031ac:	e01f      	b.n	80031ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ae:	f7fe fcdf 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 80031b2:	6178      	str	r0, [r7, #20]
        break;
 80031b4:	e01b      	b.n	80031ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ba:	617b      	str	r3, [r7, #20]
        break;
 80031bc:	e017      	b.n	80031ee <UART_SetConfig+0x30e>
 80031be:	bf00      	nop
 80031c0:	efff69f3 	.word	0xefff69f3
 80031c4:	40008000 	.word	0x40008000
 80031c8:	40013800 	.word	0x40013800
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40004400 	.word	0x40004400
 80031d4:	40004800 	.word	0x40004800
 80031d8:	40004c00 	.word	0x40004c00
 80031dc:	40005000 	.word	0x40005000
 80031e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	76bb      	strb	r3, [r7, #26]
        break;
 80031ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80eb 	beq.w	80033cc <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	441a      	add	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	429a      	cmp	r2, r3
 8003204:	d805      	bhi.n	8003212 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	429a      	cmp	r2, r3
 8003210:	d202      	bcs.n	8003218 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	76bb      	strb	r3, [r7, #26]
 8003216:	e0d9      	b.n	80033cc <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	461a      	mov	r2, r3
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	021d      	lsls	r5, r3, #8
 8003222:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8003226:	0214      	lsls	r4, r2, #8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	461a      	mov	r2, r3
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	18a0      	adds	r0, r4, r2
 8003236:	eb45 0103 	adc.w	r1, r5, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f04f 0400 	mov.w	r4, #0
 8003242:	461a      	mov	r2, r3
 8003244:	4623      	mov	r3, r4
 8003246:	f7fc ffcb 	bl	80001e0 <__aeabi_uldivmod>
 800324a:	4603      	mov	r3, r0
 800324c:	460c      	mov	r4, r1
 800324e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003256:	d308      	bcc.n	800326a <UART_SetConfig+0x38a>
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800325e:	d204      	bcs.n	800326a <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	60da      	str	r2, [r3, #12]
 8003268:	e0b0      	b.n	80033cc <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	76bb      	strb	r3, [r7, #26]
 800326e:	e0ad      	b.n	80033cc <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003278:	d15c      	bne.n	8003334 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800327a:	7efb      	ldrb	r3, [r7, #27]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d828      	bhi.n	80032d2 <UART_SetConfig+0x3f2>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <UART_SetConfig+0x3a8>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	080032ad 	.word	0x080032ad
 800328c:	080032b5 	.word	0x080032b5
 8003290:	080032bd 	.word	0x080032bd
 8003294:	080032d3 	.word	0x080032d3
 8003298:	080032c3 	.word	0x080032c3
 800329c:	080032d3 	.word	0x080032d3
 80032a0:	080032d3 	.word	0x080032d3
 80032a4:	080032d3 	.word	0x080032d3
 80032a8:	080032cb 	.word	0x080032cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ac:	f7fe fcf6 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 80032b0:	6178      	str	r0, [r7, #20]
        break;
 80032b2:	e013      	b.n	80032dc <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032b4:	f7fe fd08 	bl	8001cc8 <HAL_RCC_GetPCLK2Freq>
 80032b8:	6178      	str	r0, [r7, #20]
        break;
 80032ba:	e00f      	b.n	80032dc <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032bc:	4b49      	ldr	r3, [pc, #292]	; (80033e4 <UART_SetConfig+0x504>)
 80032be:	617b      	str	r3, [r7, #20]
        break;
 80032c0:	e00c      	b.n	80032dc <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032c2:	f7fe fc55 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 80032c6:	6178      	str	r0, [r7, #20]
        break;
 80032c8:	e008      	b.n	80032dc <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ce:	617b      	str	r3, [r7, #20]
        break;
 80032d0:	e004      	b.n	80032dc <UART_SetConfig+0x3fc>
      default:
        pclk = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	76bb      	strb	r3, [r7, #26]
        break;
 80032da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d074      	beq.n	80033cc <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005a      	lsls	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b0f      	cmp	r3, #15
 80032fe:	d916      	bls.n	800332e <UART_SetConfig+0x44e>
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003306:	d212      	bcs.n	800332e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	b29b      	uxth	r3, r3
 800330c:	f023 030f 	bic.w	r3, r3, #15
 8003310:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	b29b      	uxth	r3, r3
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	b29a      	uxth	r2, r3
 800331e:	89fb      	ldrh	r3, [r7, #14]
 8003320:	4313      	orrs	r3, r2
 8003322:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	89fa      	ldrh	r2, [r7, #14]
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	e04e      	b.n	80033cc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	76bb      	strb	r3, [r7, #26]
 8003332:	e04b      	b.n	80033cc <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003334:	7efb      	ldrb	r3, [r7, #27]
 8003336:	2b08      	cmp	r3, #8
 8003338:	d827      	bhi.n	800338a <UART_SetConfig+0x4aa>
 800333a:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <UART_SetConfig+0x460>)
 800333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003340:	08003365 	.word	0x08003365
 8003344:	0800336d 	.word	0x0800336d
 8003348:	08003375 	.word	0x08003375
 800334c:	0800338b 	.word	0x0800338b
 8003350:	0800337b 	.word	0x0800337b
 8003354:	0800338b 	.word	0x0800338b
 8003358:	0800338b 	.word	0x0800338b
 800335c:	0800338b 	.word	0x0800338b
 8003360:	08003383 	.word	0x08003383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003364:	f7fe fc9a 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8003368:	6178      	str	r0, [r7, #20]
        break;
 800336a:	e013      	b.n	8003394 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800336c:	f7fe fcac 	bl	8001cc8 <HAL_RCC_GetPCLK2Freq>
 8003370:	6178      	str	r0, [r7, #20]
        break;
 8003372:	e00f      	b.n	8003394 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <UART_SetConfig+0x504>)
 8003376:	617b      	str	r3, [r7, #20]
        break;
 8003378:	e00c      	b.n	8003394 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7fe fbf9 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 800337e:	6178      	str	r0, [r7, #20]
        break;
 8003380:	e008      	b.n	8003394 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003386:	617b      	str	r3, [r7, #20]
        break;
 8003388:	e004      	b.n	8003394 <UART_SetConfig+0x4b4>
      default:
        pclk = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	76bb      	strb	r3, [r7, #26]
        break;
 8003392:	bf00      	nop
    }

    if (pclk != 0U)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d018      	beq.n	80033cc <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	085a      	lsrs	r2, r3, #1
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	441a      	add	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b0f      	cmp	r3, #15
 80033b4:	d908      	bls.n	80033c8 <UART_SetConfig+0x4e8>
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033bc:	d204      	bcs.n	80033c8 <UART_SetConfig+0x4e8>
      {
        huart->Instance->BRR = usartdiv;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	e001      	b.n	80033cc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033d8:	7ebb      	ldrb	r3, [r7, #26]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bdb0      	pop	{r4, r5, r7, pc}
 80033e2:	bf00      	nop
 80033e4:	00f42400 	.word	0x00f42400

080033e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	6852      	ldr	r2, [r2, #4]
 8003406:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	6852      	ldr	r2, [r2, #4]
 8003428:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	6852      	ldr	r2, [r2, #4]
 800344a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	6852      	ldr	r2, [r2, #4]
 800346c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	6892      	ldr	r2, [r2, #8]
 800348e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	6892      	ldr	r2, [r2, #8]
 80034b0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034b8:	430a      	orrs	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01a      	beq.n	80034fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	6852      	ldr	r2, [r2, #4]
 80034d2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034e6:	d10a      	bne.n	80034fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	6852      	ldr	r2, [r2, #4]
 80034f2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	6852      	ldr	r2, [r2, #4]
 8003514:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800351c:	430a      	orrs	r2, r1
 800351e:	605a      	str	r2, [r3, #4]
  }
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af02      	add	r7, sp, #8
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800353c:	f7fd fb40 	bl	8000bc0 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b08      	cmp	r3, #8
 800354e:	d10e      	bne.n	800356e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f82d 	bl	80035be <UART_WaitOnFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e023      	b.n	80035b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b04      	cmp	r3, #4
 800357a:	d10e      	bne.n	800359a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800357c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f817 	bl	80035be <UART_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e00d      	b.n	80035b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ce:	e05e      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d6:	d05a      	beq.n	800368e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d8:	f7fd faf2 	bl	8000bc0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	1ad2      	subs	r2, r2, r3
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d802      	bhi.n	80035ee <UART_WaitOnFlagUntilTimeout+0x30>
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d11b      	bne.n	8003626 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	6892      	ldr	r2, [r2, #8]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e043      	b.n	80036ae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d02c      	beq.n	800368e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003642:	d124      	bne.n	800368e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800364c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800365c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	6892      	ldr	r2, [r2, #8]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e00f      	b.n	80036ae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	401a      	ands	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	bf0c      	ite	eq
 800369e:	2301      	moveq	r3, #1
 80036a0:	2300      	movne	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d091      	beq.n	80035d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	4603      	mov	r3, r0
 80036be:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80036c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036c8:	2b84      	cmp	r3, #132	; 0x84
 80036ca:	d005      	beq.n	80036d8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80036cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4413      	add	r3, r2
 80036d4:	3303      	adds	r3, #3
 80036d6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80036d8:	68fb      	ldr	r3, [r7, #12]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036ec:	f3ef 8305 	mrs	r3, IPSR
 80036f0:	607b      	str	r3, [r7, #4]
  return(result);
 80036f2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800370e:	f001 fd1b 	bl	8005148 <vTaskStartScheduler>
  
  return osOK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	bd80      	pop	{r7, pc}

08003718 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800371a:	b089      	sub	sp, #36	; 0x24
 800371c:	af04      	add	r7, sp, #16
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d020      	beq.n	800376c <osThreadCreate+0x54>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01c      	beq.n	800376c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685c      	ldr	r4, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681d      	ldr	r5, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691e      	ldr	r6, [r3, #16]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ffb6 	bl	80036b6 <makeFreeRtosPriority>
 800374a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003754:	9202      	str	r2, [sp, #8]
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	9100      	str	r1, [sp, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	4632      	mov	r2, r6
 800375e:	4629      	mov	r1, r5
 8003760:	4620      	mov	r0, r4
 8003762:	f001 fb2e 	bl	8004dc2 <xTaskCreateStatic>
 8003766:	4603      	mov	r3, r0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e01c      	b.n	80037a6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685c      	ldr	r4, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003778:	b29e      	uxth	r6, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff98 	bl	80036b6 <makeFreeRtosPriority>
 8003786:	4602      	mov	r2, r0
 8003788:	f107 030c 	add.w	r3, r7, #12
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	9200      	str	r2, [sp, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	4632      	mov	r2, r6
 8003794:	4629      	mov	r1, r5
 8003796:	4620      	mov	r0, r4
 8003798:	f001 fb6d 	bl	8004e76 <xTaskCreate>
 800379c:	4603      	mov	r3, r0
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d001      	beq.n	80037a6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e000      	b.n	80037a8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80037a6:	68fb      	ldr	r3, [r7, #12]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037b0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <osDelay+0x16>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	e000      	b.n	80037c8 <osDelay+0x18>
 80037c6:	2301      	movs	r3, #1
 80037c8:	4618      	mov	r0, r3
 80037ca:	f001 fc89 	bl	80050e0 <vTaskDelay>
  
  return osOK;
 80037ce:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d010      	beq.n	800380c <osSemaphoreCreate+0x34>
    if (count == 1) {
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10b      	bne.n	8003808 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	2303      	movs	r3, #3
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	2200      	movs	r2, #0
 80037fc:	2100      	movs	r1, #0
 80037fe:	2001      	movs	r0, #1
 8003800:	f000 fde2 	bl	80043c8 <xQueueGenericCreateStatic>
 8003804:	4603      	mov	r3, r0
 8003806:	e016      	b.n	8003836 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003808:	2300      	movs	r3, #0
 800380a:	e014      	b.n	8003836 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d110      	bne.n	8003834 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8003812:	2203      	movs	r2, #3
 8003814:	2100      	movs	r1, #0
 8003816:	2001      	movs	r0, #1
 8003818:	f000 fe49 	bl	80044ae <xQueueGenericCreate>
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <osSemaphoreCreate+0x58>
 8003824:	2300      	movs	r3, #0
 8003826:	2200      	movs	r2, #0
 8003828:	2100      	movs	r1, #0
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fe98 	bl	8004560 <xQueueGenericSend>
      return sema;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	e000      	b.n	8003836 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003834:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	e03a      	b.n	80038ce <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003862:	d103      	bne.n	800386c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	e009      	b.n	8003880 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d006      	beq.n	8003880 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <osSemaphoreWait+0x40>
      ticks = 1;
 800387c:	2301      	movs	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003880:	f7ff ff31 	bl	80036e6 <inHandlerMode>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d017      	beq.n	80038ba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	461a      	mov	r2, r3
 8003890:	2100      	movs	r1, #0
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f001 f8f0 	bl	8004a78 <xQueueReceiveFromISR>
 8003898:	4603      	mov	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d001      	beq.n	80038a2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800389e:	23ff      	movs	r3, #255	; 0xff
 80038a0:	e015      	b.n	80038ce <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d011      	beq.n	80038cc <osSemaphoreWait+0x8c>
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <osSemaphoreWait+0x98>)
 80038aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	e008      	b.n	80038cc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80038ba:	68f9      	ldr	r1, [r7, #12]
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 ffd3 	bl	8004868 <xQueueSemaphoreTake>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d001      	beq.n	80038cc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80038c8:	23ff      	movs	r3, #255	; 0xff
 80038ca:	e000      	b.n	80038ce <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80038ec:	f7ff fefb 	bl	80036e6 <inHandlerMode>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80038f6:	f107 0308 	add.w	r3, r7, #8
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 ff29 	bl	8004754 <xQueueGiveFromISR>
 8003902:	4603      	mov	r3, r0
 8003904:	2b01      	cmp	r3, #1
 8003906:	d001      	beq.n	800390c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003908:	23ff      	movs	r3, #255	; 0xff
 800390a:	e017      	b.n	800393c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d013      	beq.n	800393a <osSemaphoreRelease+0x5e>
 8003912:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <osSemaphoreRelease+0x68>)
 8003914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	e00a      	b.n	800393a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003924:	2300      	movs	r3, #0
 8003926:	2200      	movs	r2, #0
 8003928:	2100      	movs	r1, #0
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fe18 	bl	8004560 <xQueueGenericSend>
 8003930:	4603      	mov	r3, r0
 8003932:	2b01      	cmp	r3, #1
 8003934:	d001      	beq.n	800393a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003936:	23ff      	movs	r3, #255	; 0xff
 8003938:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800393a:	68fb      	ldr	r3, [r7, #12]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	e000ed04 	.word	0xe000ed04

08003948 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f103 0208 	add.w	r2, r3, #8
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003960:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f103 0208 	add.w	r2, r3, #8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f103 0208 	add.w	r2, r3, #8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	601a      	str	r2, [r3, #0]
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039ea:	b480      	push	{r7}
 80039ec:	b085      	sub	sp, #20
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a00:	d103      	bne.n	8003a0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	e00c      	b.n	8003a24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3308      	adds	r3, #8
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e002      	b.n	8003a18 <vListInsert+0x2e>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d9f6      	bls.n	8003a12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	601a      	str	r2, [r3, #0]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6892      	ldr	r2, [r2, #8]
 8003a72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6852      	ldr	r2, [r2, #4]
 8003a7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d103      	bne.n	8003a90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	1e5a      	subs	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3b04      	subs	r3, #4
 8003ac0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3b04      	subs	r3, #4
 8003ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f023 0201 	bic.w	r2, r3, #1
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3b04      	subs	r3, #4
 8003ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ae0:	4a0c      	ldr	r2, [pc, #48]	; (8003b14 <pxPortInitialiseStack+0x64>)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3b14      	subs	r3, #20
 8003aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3b04      	subs	r3, #4
 8003af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f06f 0202 	mvn.w	r2, #2
 8003afe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3b20      	subs	r3, #32
 8003b04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	08003b19 	.word	0x08003b19

08003b18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <prvTaskExitError+0x50>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b2a:	d009      	beq.n	8003b40 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	e7fe      	b.n	8003b3e <prvTaskExitError+0x26>
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b52:	bf00      	nop
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0fc      	beq.n	8003b54 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	2000000c 	.word	0x2000000c
 8003b6c:	00000000 	.word	0x00000000

08003b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <pxCurrentTCBConst2>)
 8003b72:	6819      	ldr	r1, [r3, #0]
 8003b74:	6808      	ldr	r0, [r1, #0]
 8003b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b7a:	f380 8809 	msr	PSP, r0
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f04f 0000 	mov.w	r0, #0
 8003b86:	f380 8811 	msr	BASEPRI, r0
 8003b8a:	4770      	bx	lr
 8003b8c:	f3af 8000 	nop.w

08003b90 <pxCurrentTCBConst2>:
 8003b90:	20000e60 	.word	0x20000e60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop

08003b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003b98:	4808      	ldr	r0, [pc, #32]	; (8003bbc <prvPortStartFirstTask+0x24>)
 8003b9a:	6800      	ldr	r0, [r0, #0]
 8003b9c:	6800      	ldr	r0, [r0, #0]
 8003b9e:	f380 8808 	msr	MSP, r0
 8003ba2:	f04f 0000 	mov.w	r0, #0
 8003ba6:	f380 8814 	msr	CONTROL, r0
 8003baa:	b662      	cpsie	i
 8003bac:	b661      	cpsie	f
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	df00      	svc	0
 8003bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003bba:	bf00      	nop
 8003bbc:	e000ed08 	.word	0xe000ed08

08003bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003bc6:	4b44      	ldr	r3, [pc, #272]	; (8003cd8 <xPortStartScheduler+0x118>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a44      	ldr	r2, [pc, #272]	; (8003cdc <xPortStartScheduler+0x11c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d109      	bne.n	8003be4 <xPortStartScheduler+0x24>
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	e7fe      	b.n	8003be2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003be4:	4b3c      	ldr	r3, [pc, #240]	; (8003cd8 <xPortStartScheduler+0x118>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a3d      	ldr	r2, [pc, #244]	; (8003ce0 <xPortStartScheduler+0x120>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d109      	bne.n	8003c02 <xPortStartScheduler+0x42>
 8003bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e7fe      	b.n	8003c00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c02:	4b38      	ldr	r3, [pc, #224]	; (8003ce4 <xPortStartScheduler+0x124>)
 8003c04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	22ff      	movs	r2, #255	; 0xff
 8003c12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4b30      	ldr	r3, [pc, #192]	; (8003ce8 <xPortStartScheduler+0x128>)
 8003c28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c2a:	4b30      	ldr	r3, [pc, #192]	; (8003cec <xPortStartScheduler+0x12c>)
 8003c2c:	2207      	movs	r2, #7
 8003c2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c30:	e009      	b.n	8003c46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003c32:	4b2e      	ldr	r3, [pc, #184]	; (8003cec <xPortStartScheduler+0x12c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	4a2c      	ldr	r2, [pc, #176]	; (8003cec <xPortStartScheduler+0x12c>)
 8003c3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	2b80      	cmp	r3, #128	; 0x80
 8003c50:	d0ef      	beq.n	8003c32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c52:	4b26      	ldr	r3, [pc, #152]	; (8003cec <xPortStartScheduler+0x12c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f1c3 0307 	rsb	r3, r3, #7
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d009      	beq.n	8003c72 <xPortStartScheduler+0xb2>
 8003c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	e7fe      	b.n	8003c70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c72:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <xPortStartScheduler+0x12c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	4a1c      	ldr	r2, [pc, #112]	; (8003cec <xPortStartScheduler+0x12c>)
 8003c7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <xPortStartScheduler+0x12c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c84:	4a19      	ldr	r2, [pc, #100]	; (8003cec <xPortStartScheduler+0x12c>)
 8003c86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c90:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <xPortStartScheduler+0x130>)
 8003c92:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <xPortStartScheduler+0x130>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c9c:	4a14      	ldr	r2, [pc, #80]	; (8003cf0 <xPortStartScheduler+0x130>)
 8003c9e:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <xPortStartScheduler+0x130>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ca6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ca8:	f000 f8d6 	bl	8003e58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003cac:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <xPortStartScheduler+0x134>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003cb2:	f000 f8f5 	bl	8003ea0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003cb6:	4a10      	ldr	r2, [pc, #64]	; (8003cf8 <xPortStartScheduler+0x138>)
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <xPortStartScheduler+0x138>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003cc0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003cc2:	f7ff ff69 	bl	8003b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003cc6:	f001 fbff 	bl	80054c8 <vTaskSwitchContext>
	prvTaskExitError();
 8003cca:	f7ff ff25 	bl	8003b18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	e000ed00 	.word	0xe000ed00
 8003cdc:	410fc271 	.word	0x410fc271
 8003ce0:	410fc270 	.word	0x410fc270
 8003ce4:	e000e400 	.word	0xe000e400
 8003ce8:	20000280 	.word	0x20000280
 8003cec:	20000284 	.word	0x20000284
 8003cf0:	e000ed20 	.word	0xe000ed20
 8003cf4:	2000000c 	.word	0x2000000c
 8003cf8:	e000ef34 	.word	0xe000ef34

08003cfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d14:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <vPortEnterCritical+0x54>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	4a0d      	ldr	r2, [pc, #52]	; (8003d50 <vPortEnterCritical+0x54>)
 8003d1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <vPortEnterCritical+0x54>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d10e      	bne.n	8003d44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <vPortEnterCritical+0x58>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d009      	beq.n	8003d44 <vPortEnterCritical+0x48>
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	e7fe      	b.n	8003d42 <vPortEnterCritical+0x46>
	}
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	2000000c 	.word	0x2000000c
 8003d54:	e000ed04 	.word	0xe000ed04

08003d58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d5e:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <vPortExitCritical+0x4c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <vPortExitCritical+0x22>
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	e7fe      	b.n	8003d78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <vPortExitCritical+0x4c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	4a08      	ldr	r2, [pc, #32]	; (8003da4 <vPortExitCritical+0x4c>)
 8003d82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <vPortExitCritical+0x4c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <vPortExitCritical+0x3e>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	2000000c 	.word	0x2000000c
	...

08003db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003db0:	f3ef 8009 	mrs	r0, PSP
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <pxCurrentTCBConst>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	f01e 0f10 	tst.w	lr, #16
 8003dc0:	bf08      	it	eq
 8003dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dca:	6010      	str	r0, [r2, #0]
 8003dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003dd4:	f380 8811 	msr	BASEPRI, r0
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f001 fb72 	bl	80054c8 <vTaskSwitchContext>
 8003de4:	f04f 0000 	mov.w	r0, #0
 8003de8:	f380 8811 	msr	BASEPRI, r0
 8003dec:	bc09      	pop	{r0, r3}
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	6808      	ldr	r0, [r1, #0]
 8003df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df6:	f01e 0f10 	tst.w	lr, #16
 8003dfa:	bf08      	it	eq
 8003dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e00:	f380 8809 	msr	PSP, r0
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	f3af 8000 	nop.w

08003e10 <pxCurrentTCBConst>:
 8003e10:	20000e60 	.word	0x20000e60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop

08003e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e30:	f001 fa92 	bl	8005358 <xTaskIncrementTick>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <SysTick_Handler+0x3c>)
 8003e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	2300      	movs	r3, #0
 8003e44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	e000ed04 	.word	0xe000ed04

08003e58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <vPortSetupTimerInterrupt+0x34>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e62:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <vPortSetupTimerInterrupt+0x38>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e68:	4a0a      	ldr	r2, [pc, #40]	; (8003e94 <vPortSetupTimerInterrupt+0x3c>)
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <vPortSetupTimerInterrupt+0x40>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	490b      	ldr	r1, [pc, #44]	; (8003e9c <vPortSetupTimerInterrupt+0x44>)
 8003e70:	fba1 1303 	umull	r1, r3, r1, r3
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	3b01      	subs	r3, #1
 8003e78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e7a:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <vPortSetupTimerInterrupt+0x34>)
 8003e7c:	2207      	movs	r2, #7
 8003e7e:	601a      	str	r2, [r3, #0]
}
 8003e80:	bf00      	nop
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	e000e010 	.word	0xe000e010
 8003e90:	e000e018 	.word	0xe000e018
 8003e94:	e000e014 	.word	0xe000e014
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	10624dd3 	.word	0x10624dd3

08003ea0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ea0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003eb0 <vPortEnableVFP+0x10>
 8003ea4:	6801      	ldr	r1, [r0, #0]
 8003ea6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003eaa:	6001      	str	r1, [r0, #0]
 8003eac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003eae:	bf00      	nop
 8003eb0:	e000ed88 	.word	0xe000ed88

08003eb4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003eba:	f3ef 8305 	mrs	r3, IPSR
 8003ebe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b0f      	cmp	r3, #15
 8003ec4:	d913      	bls.n	8003eee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ec6:	4a16      	ldr	r2, [pc, #88]	; (8003f20 <vPortValidateInterruptPriority+0x6c>)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ed0:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <vPortValidateInterruptPriority+0x70>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	7afa      	ldrb	r2, [r7, #11]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d209      	bcs.n	8003eee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	607b      	str	r3, [r7, #4]
 8003eec:	e7fe      	b.n	8003eec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003eee:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <vPortValidateInterruptPriority+0x74>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <vPortValidateInterruptPriority+0x78>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d909      	bls.n	8003f12 <vPortValidateInterruptPriority+0x5e>
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	e7fe      	b.n	8003f10 <vPortValidateInterruptPriority+0x5c>
	}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	e000e3f0 	.word	0xe000e3f0
 8003f24:	20000280 	.word	0x20000280
 8003f28:	e000ed0c 	.word	0xe000ed0c
 8003f2c:	20000284 	.word	0x20000284

08003f30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08a      	sub	sp, #40	; 0x28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f3c:	f001 f962 	bl	8005204 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f40:	4b59      	ldr	r3, [pc, #356]	; (80040a8 <pvPortMalloc+0x178>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f48:	f000 f91a 	bl	8004180 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f4c:	4b57      	ldr	r3, [pc, #348]	; (80040ac <pvPortMalloc+0x17c>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f040 8091 	bne.w	800407c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01c      	beq.n	8003f9a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003f60:	2208      	movs	r2, #8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d013      	beq.n	8003f9a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f023 0307 	bic.w	r3, r3, #7
 8003f78:	3308      	adds	r3, #8
 8003f7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <pvPortMalloc+0x6a>
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	e7fe      	b.n	8003f98 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d06d      	beq.n	800407c <pvPortMalloc+0x14c>
 8003fa0:	4b43      	ldr	r3, [pc, #268]	; (80040b0 <pvPortMalloc+0x180>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d868      	bhi.n	800407c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003faa:	4b42      	ldr	r3, [pc, #264]	; (80040b4 <pvPortMalloc+0x184>)
 8003fac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003fae:	4b41      	ldr	r3, [pc, #260]	; (80040b4 <pvPortMalloc+0x184>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fb4:	e004      	b.n	8003fc0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d203      	bcs.n	8003fd2 <pvPortMalloc+0xa2>
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f1      	bne.n	8003fb6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003fd2:	4b35      	ldr	r3, [pc, #212]	; (80040a8 <pvPortMalloc+0x178>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d04f      	beq.n	800407c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	4413      	add	r3, r2
 8003fe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	1ad2      	subs	r2, r2, r3
 8003ff6:	2308      	movs	r3, #8
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d91e      	bls.n	800403c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	2b00      	cmp	r3, #0
 800400e:	d009      	beq.n	8004024 <pvPortMalloc+0xf4>
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	e7fe      	b.n	8004022 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	1ad2      	subs	r2, r2, r3
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004036:	69b8      	ldr	r0, [r7, #24]
 8004038:	f000 f904 	bl	8004244 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800403c:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <pvPortMalloc+0x180>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	4a1a      	ldr	r2, [pc, #104]	; (80040b0 <pvPortMalloc+0x180>)
 8004048:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800404a:	4b19      	ldr	r3, [pc, #100]	; (80040b0 <pvPortMalloc+0x180>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <pvPortMalloc+0x188>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d203      	bcs.n	800405e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004056:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <pvPortMalloc+0x180>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a17      	ldr	r2, [pc, #92]	; (80040b8 <pvPortMalloc+0x188>)
 800405c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	4b12      	ldr	r3, [pc, #72]	; (80040ac <pvPortMalloc+0x17c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	431a      	orrs	r2, r3
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <pvPortMalloc+0x18c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3301      	adds	r3, #1
 8004078:	4a10      	ldr	r2, [pc, #64]	; (80040bc <pvPortMalloc+0x18c>)
 800407a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800407c:	f001 f8d0 	bl	8005220 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <pvPortMalloc+0x16e>
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	e7fe      	b.n	800409c <pvPortMalloc+0x16c>
	return pvReturn;
 800409e:	69fb      	ldr	r3, [r7, #28]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3728      	adds	r7, #40	; 0x28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000e48 	.word	0x20000e48
 80040ac:	20000e5c 	.word	0x20000e5c
 80040b0:	20000e4c 	.word	0x20000e4c
 80040b4:	20000e40 	.word	0x20000e40
 80040b8:	20000e50 	.word	0x20000e50
 80040bc:	20000e54 	.word	0x20000e54

080040c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d04b      	beq.n	800416a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80040d2:	2308      	movs	r3, #8
 80040d4:	425b      	negs	r3, r3
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4413      	add	r3, r2
 80040da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	4b23      	ldr	r3, [pc, #140]	; (8004174 <vPortFree+0xb4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <vPortFree+0x42>
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e7fe      	b.n	8004100 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <vPortFree+0x5e>
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	e7fe      	b.n	800411c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <vPortFree+0xb4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01e      	beq.n	800416a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d11a      	bne.n	800416a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <vPortFree+0xb4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	43db      	mvns	r3, r3
 800413e:	401a      	ands	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004144:	f001 f85e 	bl	8005204 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <vPortFree+0xb8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4413      	add	r3, r2
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <vPortFree+0xb8>)
 8004154:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004156:	6938      	ldr	r0, [r7, #16]
 8004158:	f000 f874 	bl	8004244 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <vPortFree+0xbc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3301      	adds	r3, #1
 8004162:	4a06      	ldr	r2, [pc, #24]	; (800417c <vPortFree+0xbc>)
 8004164:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004166:	f001 f85b 	bl	8005220 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800416a:	bf00      	nop
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000e5c 	.word	0x20000e5c
 8004178:	20000e4c 	.word	0x20000e4c
 800417c:	20000e58 	.word	0x20000e58

08004180 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004186:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800418a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800418c:	4b27      	ldr	r3, [pc, #156]	; (800422c <prvHeapInit+0xac>)
 800418e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00c      	beq.n	80041b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3307      	adds	r3, #7
 800419e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0307 	bic.w	r3, r3, #7
 80041a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	4a1f      	ldr	r2, [pc, #124]	; (800422c <prvHeapInit+0xac>)
 80041b0:	4413      	add	r3, r2
 80041b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041b8:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <prvHeapInit+0xb0>)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041be:	4b1c      	ldr	r3, [pc, #112]	; (8004230 <prvHeapInit+0xb0>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4413      	add	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80041cc:	2208      	movs	r2, #8
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0307 	bic.w	r3, r3, #7
 80041da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4a15      	ldr	r2, [pc, #84]	; (8004234 <prvHeapInit+0xb4>)
 80041e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80041e2:	4b14      	ldr	r3, [pc, #80]	; (8004234 <prvHeapInit+0xb4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2200      	movs	r2, #0
 80041e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <prvHeapInit+0xb4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	1ad2      	subs	r2, r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <prvHeapInit+0xb4>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <prvHeapInit+0xb8>)
 800420e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	4a09      	ldr	r2, [pc, #36]	; (800423c <prvHeapInit+0xbc>)
 8004216:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <prvHeapInit+0xc0>)
 800421a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800421e:	601a      	str	r2, [r3, #0]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	20000288 	.word	0x20000288
 8004230:	20000e40 	.word	0x20000e40
 8004234:	20000e48 	.word	0x20000e48
 8004238:	20000e50 	.word	0x20000e50
 800423c:	20000e4c 	.word	0x20000e4c
 8004240:	20000e5c 	.word	0x20000e5c

08004244 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800424c:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <prvInsertBlockIntoFreeList+0xac>)
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e002      	b.n	8004258 <prvInsertBlockIntoFreeList+0x14>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	429a      	cmp	r2, r3
 8004260:	d3f7      	bcc.n	8004252 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	441a      	add	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	429a      	cmp	r2, r3
 8004272:	d108      	bne.n	8004286 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	441a      	add	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	441a      	add	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d118      	bne.n	80042cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <prvInsertBlockIntoFreeList+0xb0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d00d      	beq.n	80042c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	441a      	add	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e008      	b.n	80042d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042c2:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <prvInsertBlockIntoFreeList+0xb0>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e003      	b.n	80042d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d002      	beq.n	80042e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000e40 	.word	0x20000e40
 80042f4:	20000e48 	.word	0x20000e48

080042f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <xQueueGenericReset+0x28>
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	e7fe      	b.n	800431e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004320:	f7ff fcec 	bl	8003cfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	68f9      	ldr	r1, [r7, #12]
 800432e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004330:	fb01 f303 	mul.w	r3, r1, r3
 8004334:	441a      	add	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004350:	3b01      	subs	r3, #1
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	441a      	add	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	22ff      	movs	r2, #255	; 0xff
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	22ff      	movs	r2, #255	; 0xff
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d114      	bne.n	80043a0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d01a      	beq.n	80043b4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3310      	adds	r3, #16
 8004382:	4618      	mov	r0, r3
 8004384:	f001 f91e 	bl	80055c4 <xTaskRemoveFromEventList>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d012      	beq.n	80043b4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800438e:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <xQueueGenericReset+0xcc>)
 8004390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	e009      	b.n	80043b4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3310      	adds	r3, #16
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff facf 	bl	8003948 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3324      	adds	r3, #36	; 0x24
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff faca 	bl	8003948 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043b4:	f7ff fcd0 	bl	8003d58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043b8:	2301      	movs	r3, #1
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08e      	sub	sp, #56	; 0x38
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d109      	bne.n	80043f0 <xQueueGenericCreateStatic+0x28>
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ee:	e7fe      	b.n	80043ee <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <xQueueGenericCreateStatic+0x42>
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
 8004408:	e7fe      	b.n	8004408 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <xQueueGenericCreateStatic+0x4e>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <xQueueGenericCreateStatic+0x52>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <xQueueGenericCreateStatic+0x54>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d109      	bne.n	8004434 <xQueueGenericCreateStatic+0x6c>
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	623b      	str	r3, [r7, #32]
 8004432:	e7fe      	b.n	8004432 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <xQueueGenericCreateStatic+0x78>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <xQueueGenericCreateStatic+0x7c>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <xQueueGenericCreateStatic+0x7e>
 8004444:	2300      	movs	r3, #0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d109      	bne.n	800445e <xQueueGenericCreateStatic+0x96>
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	e7fe      	b.n	800445c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800445e:	2348      	movs	r3, #72	; 0x48
 8004460:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b48      	cmp	r3, #72	; 0x48
 8004466:	d009      	beq.n	800447c <xQueueGenericCreateStatic+0xb4>
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	e7fe      	b.n	800447a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800447c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00d      	beq.n	80044a4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004490:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	4613      	mov	r3, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f83e 	bl	8004520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3730      	adds	r7, #48	; 0x30
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b08a      	sub	sp, #40	; 0x28
 80044b2:	af02      	add	r7, sp, #8
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	4613      	mov	r3, r2
 80044ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <xQueueGenericCreate+0x28>
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	e7fe      	b.n	80044d4 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	fb02 f303 	mul.w	r3, r2, r3
 80044de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	3348      	adds	r3, #72	; 0x48
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fd23 	bl	8003f30 <pvPortMalloc>
 80044ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d011      	beq.n	8004516 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	3348      	adds	r3, #72	; 0x48
 80044fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004504:	79fa      	ldrb	r2, [r7, #7]
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	4613      	mov	r3, r2
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f805 	bl	8004520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004516:	69bb      	ldr	r3, [r7, #24]
	}
 8004518:	4618      	mov	r0, r3
 800451a:	3720      	adds	r7, #32
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d103      	bne.n	800453c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e002      	b.n	8004542 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800454e:	2101      	movs	r1, #1
 8004550:	69b8      	ldr	r0, [r7, #24]
 8004552:	f7ff fed1 	bl	80042f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08e      	sub	sp, #56	; 0x38
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800456e:	2300      	movs	r3, #0
 8004570:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <xQueueGenericSend+0x30>
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	62bb      	str	r3, [r7, #40]	; 0x28
 800458e:	e7fe      	b.n	800458e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <xQueueGenericSend+0x3e>
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <xQueueGenericSend+0x42>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <xQueueGenericSend+0x44>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d109      	bne.n	80045bc <xQueueGenericSend+0x5c>
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ba:	e7fe      	b.n	80045ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d103      	bne.n	80045ca <xQueueGenericSend+0x6a>
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <xQueueGenericSend+0x6e>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <xQueueGenericSend+0x70>
 80045ce:	2300      	movs	r3, #0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d109      	bne.n	80045e8 <xQueueGenericSend+0x88>
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	623b      	str	r3, [r7, #32]
 80045e6:	e7fe      	b.n	80045e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045e8:	f001 f9a2 	bl	8005930 <xTaskGetSchedulerState>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d102      	bne.n	80045f8 <xQueueGenericSend+0x98>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <xQueueGenericSend+0x9c>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <xQueueGenericSend+0x9e>
 80045fc:	2300      	movs	r3, #0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <xQueueGenericSend+0xb6>
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	e7fe      	b.n	8004614 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004616:	f7ff fb71 	bl	8003cfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004622:	429a      	cmp	r2, r3
 8004624:	d302      	bcc.n	800462c <xQueueGenericSend+0xcc>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d129      	bne.n	8004680 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004632:	f000 fab6 	bl	8004ba2 <prvCopyDataToQueue>
 8004636:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	2b00      	cmp	r3, #0
 800463e:	d010      	beq.n	8004662 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	3324      	adds	r3, #36	; 0x24
 8004644:	4618      	mov	r0, r3
 8004646:	f000 ffbd 	bl	80055c4 <xTaskRemoveFromEventList>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d013      	beq.n	8004678 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004650:	4b3f      	ldr	r3, [pc, #252]	; (8004750 <xQueueGenericSend+0x1f0>)
 8004652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	e00a      	b.n	8004678 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004668:	4b39      	ldr	r3, [pc, #228]	; (8004750 <xQueueGenericSend+0x1f0>)
 800466a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004678:	f7ff fb6e 	bl	8003d58 <vPortExitCritical>
				return pdPASS;
 800467c:	2301      	movs	r3, #1
 800467e:	e063      	b.n	8004748 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d103      	bne.n	800468e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004686:	f7ff fb67 	bl	8003d58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800468a:	2300      	movs	r3, #0
 800468c:	e05c      	b.n	8004748 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800468e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004694:	f107 0314 	add.w	r3, r7, #20
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fff5 	bl	8005688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800469e:	2301      	movs	r3, #1
 80046a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046a2:	f7ff fb59 	bl	8003d58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046a6:	f000 fdad 	bl	8005204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046aa:	f7ff fb27 	bl	8003cfc <vPortEnterCritical>
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046b4:	b25b      	sxtb	r3, r3
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ba:	d103      	bne.n	80046c4 <xQueueGenericSend+0x164>
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ca:	b25b      	sxtb	r3, r3
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d0:	d103      	bne.n	80046da <xQueueGenericSend+0x17a>
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046da:	f7ff fb3d 	bl	8003d58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046de:	1d3a      	adds	r2, r7, #4
 80046e0:	f107 0314 	add.w	r3, r7, #20
 80046e4:	4611      	mov	r1, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 ffe4 	bl	80056b4 <xTaskCheckForTimeOut>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d124      	bne.n	800473c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046f4:	f000 fb4d 	bl	8004d92 <prvIsQueueFull>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d018      	beq.n	8004730 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	3310      	adds	r3, #16
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	4611      	mov	r1, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f000 ff38 	bl	800557c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800470c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800470e:	f000 fad8 	bl	8004cc2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004712:	f000 fd85 	bl	8005220 <xTaskResumeAll>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	f47f af7c 	bne.w	8004616 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800471e:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <xQueueGenericSend+0x1f0>)
 8004720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	e772      	b.n	8004616 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004732:	f000 fac6 	bl	8004cc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004736:	f000 fd73 	bl	8005220 <xTaskResumeAll>
 800473a:	e76c      	b.n	8004616 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800473c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800473e:	f000 fac0 	bl	8004cc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004742:	f000 fd6d 	bl	8005220 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004746:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004748:	4618      	mov	r0, r3
 800474a:	3738      	adds	r7, #56	; 0x38
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	e000ed04 	.word	0xe000ed04

08004754 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08e      	sub	sp, #56	; 0x38
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <xQueueGiveFromISR+0x28>
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	623b      	str	r3, [r7, #32]
 800477a:	e7fe      	b.n	800477a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <xQueueGiveFromISR+0x44>
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	e7fe      	b.n	8004796 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d103      	bne.n	80047a8 <xQueueGiveFromISR+0x54>
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <xQueueGiveFromISR+0x58>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <xQueueGiveFromISR+0x5a>
 80047ac:	2300      	movs	r3, #0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <xQueueGiveFromISR+0x72>
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	e7fe      	b.n	80047c4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047c6:	f7ff fb75 	bl	8003eb4 <vPortValidateInterruptPriority>
	__asm volatile
 80047ca:	f3ef 8211 	mrs	r2, BASEPRI
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	617a      	str	r2, [r7, #20]
 80047e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80047e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d92b      	bls.n	800484e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004808:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004810:	d112      	bne.n	8004838 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d016      	beq.n	8004848 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	3324      	adds	r3, #36	; 0x24
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fed0 	bl	80055c4 <xTaskRemoveFromEventList>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00e      	beq.n	8004848 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00b      	beq.n	8004848 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2201      	movs	r2, #1
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	e007      	b.n	8004848 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800483c:	3301      	adds	r3, #1
 800483e:	b2db      	uxtb	r3, r3
 8004840:	b25a      	sxtb	r2, r3
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004848:	2301      	movs	r3, #1
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
 800484c:	e001      	b.n	8004852 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800484e:	2300      	movs	r3, #0
 8004850:	637b      	str	r3, [r7, #52]	; 0x34
 8004852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004854:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800485e:	4618      	mov	r0, r3
 8004860:	3738      	adds	r7, #56	; 0x38
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08e      	sub	sp, #56	; 0x38
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004872:	2300      	movs	r3, #0
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800487a:	2300      	movs	r3, #0
 800487c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	623b      	str	r3, [r7, #32]
 8004896:	e7fe      	b.n	8004896 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <xQueueSemaphoreTake+0x4c>
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	e7fe      	b.n	80048b2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048b4:	f001 f83c 	bl	8005930 <xTaskGetSchedulerState>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <xQueueSemaphoreTake+0x5c>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <xQueueSemaphoreTake+0x60>
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <xQueueSemaphoreTake+0x62>
 80048c8:	2300      	movs	r3, #0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <xQueueSemaphoreTake+0x7a>
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	e7fe      	b.n	80048e0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048e2:	f7ff fa0b 	bl	8003cfc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d024      	beq.n	800493c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	1e5a      	subs	r2, r3, #1
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d104      	bne.n	800490c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004902:	f001 f9b9 	bl	8005c78 <pvTaskIncrementMutexHeldCount>
 8004906:	4602      	mov	r2, r0
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00f      	beq.n	8004934 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	3310      	adds	r3, #16
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fe53 	bl	80055c4 <xTaskRemoveFromEventList>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004924:	4b53      	ldr	r3, [pc, #332]	; (8004a74 <xQueueSemaphoreTake+0x20c>)
 8004926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004934:	f7ff fa10 	bl	8003d58 <vPortExitCritical>
				return pdPASS;
 8004938:	2301      	movs	r3, #1
 800493a:	e096      	b.n	8004a6a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d110      	bne.n	8004964 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	2b00      	cmp	r3, #0
 8004946:	d009      	beq.n	800495c <xQueueSemaphoreTake+0xf4>
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	e7fe      	b.n	800495a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800495c:	f7ff f9fc 	bl	8003d58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004960:	2300      	movs	r3, #0
 8004962:	e082      	b.n	8004a6a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800496a:	f107 030c 	add.w	r3, r7, #12
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fe8a 	bl	8005688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004974:	2301      	movs	r3, #1
 8004976:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004978:	f7ff f9ee 	bl	8003d58 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800497c:	f000 fc42 	bl	8005204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004980:	f7ff f9bc 	bl	8003cfc <vPortEnterCritical>
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800498a:	b25b      	sxtb	r3, r3
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004990:	d103      	bne.n	800499a <xQueueSemaphoreTake+0x132>
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049a0:	b25b      	sxtb	r3, r3
 80049a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a6:	d103      	bne.n	80049b0 <xQueueSemaphoreTake+0x148>
 80049a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b0:	f7ff f9d2 	bl	8003d58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049b4:	463a      	mov	r2, r7
 80049b6:	f107 030c 	add.w	r3, r7, #12
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fe79 	bl	80056b4 <xTaskCheckForTimeOut>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d132      	bne.n	8004a2e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049ca:	f000 f9cc 	bl	8004d66 <prvIsQueueEmpty>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d026      	beq.n	8004a22 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d109      	bne.n	80049f0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80049dc:	f7ff f98e 	bl	8003cfc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 ffc1 	bl	800596c <xTaskPriorityInherit>
 80049ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80049ec:	f7ff f9b4 	bl	8003d58 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f2:	3324      	adds	r3, #36	; 0x24
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fdbf 	bl	800557c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a00:	f000 f95f 	bl	8004cc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a04:	f000 fc0c 	bl	8005220 <xTaskResumeAll>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f47f af69 	bne.w	80048e2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004a10:	4b18      	ldr	r3, [pc, #96]	; (8004a74 <xQueueSemaphoreTake+0x20c>)
 8004a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	e75f      	b.n	80048e2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a24:	f000 f94d 	bl	8004cc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a28:	f000 fbfa 	bl	8005220 <xTaskResumeAll>
 8004a2c:	e759      	b.n	80048e2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004a2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a30:	f000 f947 	bl	8004cc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a34:	f000 fbf4 	bl	8005220 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a3a:	f000 f994 	bl	8004d66 <prvIsQueueEmpty>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f43f af4e 	beq.w	80048e2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004a4c:	f7ff f956 	bl	8003cfc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004a50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a52:	f000 f88e 	bl	8004b72 <prvGetDisinheritPriorityAfterTimeout>
 8004a56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 f87e 	bl	8005b60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004a64:	f7ff f978 	bl	8003d58 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3738      	adds	r7, #56	; 0x38
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	e000ed04 	.word	0xe000ed04

08004a78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08e      	sub	sp, #56	; 0x38
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <xQueueReceiveFromISR+0x2a>
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	623b      	str	r3, [r7, #32]
 8004aa0:	e7fe      	b.n	8004aa0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d103      	bne.n	8004ab0 <xQueueReceiveFromISR+0x38>
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <xQueueReceiveFromISR+0x3c>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <xQueueReceiveFromISR+0x3e>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <xQueueReceiveFromISR+0x56>
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	e7fe      	b.n	8004acc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ace:	f7ff f9f1 	bl	8003eb4 <vPortValidateInterruptPriority>
	__asm volatile
 8004ad2:	f3ef 8211 	mrs	r2, BASEPRI
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	61ba      	str	r2, [r7, #24]
 8004ae8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004aea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004aec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d02f      	beq.n	8004b5a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b08:	f000 f8b5 	bl	8004c76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	1e5a      	subs	r2, r3, #1
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004b14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b1c:	d112      	bne.n	8004b44 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d016      	beq.n	8004b54 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	3310      	adds	r3, #16
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fd4a 	bl	80055c4 <xTaskRemoveFromEventList>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00e      	beq.n	8004b54 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00b      	beq.n	8004b54 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e007      	b.n	8004b54 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b48:	3301      	adds	r3, #1
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	b25a      	sxtb	r2, r3
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004b54:	2301      	movs	r3, #1
 8004b56:	637b      	str	r3, [r7, #52]	; 0x34
 8004b58:	e001      	b.n	8004b5e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b60:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3738      	adds	r7, #56	; 0x38
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004b72:	b480      	push	{r7}
 8004b74:	b085      	sub	sp, #20
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d006      	beq.n	8004b90 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f1c3 0307 	rsb	r3, r3, #7
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e001      	b.n	8004b94 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004b94:	68fb      	ldr	r3, [r7, #12]
	}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10d      	bne.n	8004bdc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d14d      	bne.n	8004c64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 ff43 	bl	8005a58 <xTaskPriorityDisinherit>
 8004bd2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	609a      	str	r2, [r3, #8]
 8004bda:	e043      	b.n	8004c64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d119      	bne.n	8004c16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6858      	ldr	r0, [r3, #4]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	461a      	mov	r2, r3
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	f001 f90b 	bl	8005e08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	441a      	add	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d32b      	bcc.n	8004c64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	605a      	str	r2, [r3, #4]
 8004c14:	e026      	b.n	8004c64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	68d8      	ldr	r0, [r3, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	f001 f8f1 	bl	8005e08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	425b      	negs	r3, r3
 8004c30:	441a      	add	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d207      	bcs.n	8004c52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	425b      	negs	r3, r3
 8004c4c:	441a      	add	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d105      	bne.n	8004c64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c6c:	697b      	ldr	r3, [r7, #20]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d018      	beq.n	8004cba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	441a      	add	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d303      	bcc.n	8004caa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68d9      	ldr	r1, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6838      	ldr	r0, [r7, #0]
 8004cb6:	f001 f8a7 	bl	8005e08 <memcpy>
	}
}
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cca:	f7ff f817 	bl	8003cfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cd4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cd6:	e011      	b.n	8004cfc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d012      	beq.n	8004d06 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3324      	adds	r3, #36	; 0x24
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fc6d 	bl	80055c4 <xTaskRemoveFromEventList>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004cf0:	f000 fd40 	bl	8005774 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	dce9      	bgt.n	8004cd8 <prvUnlockQueue+0x16>
 8004d04:	e000      	b.n	8004d08 <prvUnlockQueue+0x46>
					break;
 8004d06:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	22ff      	movs	r2, #255	; 0xff
 8004d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d10:	f7ff f822 	bl	8003d58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d14:	f7fe fff2 	bl	8003cfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d1e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d20:	e011      	b.n	8004d46 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d012      	beq.n	8004d50 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3310      	adds	r3, #16
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fc48 	bl	80055c4 <xTaskRemoveFromEventList>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d3a:	f000 fd1b 	bl	8005774 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d3e:	7bbb      	ldrb	r3, [r7, #14]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	dce9      	bgt.n	8004d22 <prvUnlockQueue+0x60>
 8004d4e:	e000      	b.n	8004d52 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d50:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	22ff      	movs	r2, #255	; 0xff
 8004d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d5a:	f7fe fffd 	bl	8003d58 <vPortExitCritical>
}
 8004d5e:	bf00      	nop
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d6e:	f7fe ffc5 	bl	8003cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e001      	b.n	8004d84 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d84:	f7fe ffe8 	bl	8003d58 <vPortExitCritical>

	return xReturn;
 8004d88:	68fb      	ldr	r3, [r7, #12]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d9a:	f7fe ffaf 	bl	8003cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d102      	bne.n	8004db0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004daa:	2301      	movs	r3, #1
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e001      	b.n	8004db4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004db4:	f7fe ffd0 	bl	8003d58 <vPortExitCritical>

	return xReturn;
 8004db8:	68fb      	ldr	r3, [r7, #12]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b08e      	sub	sp, #56	; 0x38
 8004dc6:	af04      	add	r7, sp, #16
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <xTaskCreateStatic+0x28>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	623b      	str	r3, [r7, #32]
 8004de8:	e7fe      	b.n	8004de8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <xTaskCreateStatic+0x42>
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	e7fe      	b.n	8004e02 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e04:	2354      	movs	r3, #84	; 0x54
 8004e06:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b54      	cmp	r3, #84	; 0x54
 8004e0c:	d009      	beq.n	8004e22 <xTaskCreateStatic+0x60>
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e7fe      	b.n	8004e20 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d01e      	beq.n	8004e68 <xTaskCreateStatic+0xa6>
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01b      	beq.n	8004e68 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e42:	2300      	movs	r3, #0
 8004e44:	9303      	str	r3, [sp, #12]
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	9302      	str	r3, [sp, #8]
 8004e4a:	f107 0314 	add.w	r3, r7, #20
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f850 	bl	8004f00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e62:	f000 f8d3 	bl	800500c <prvAddNewTaskToReadyList>
 8004e66:	e001      	b.n	8004e6c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e6c:	697b      	ldr	r3, [r7, #20]
	}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3728      	adds	r7, #40	; 0x28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b08c      	sub	sp, #48	; 0x30
 8004e7a:	af04      	add	r7, sp, #16
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e86:	88fb      	ldrh	r3, [r7, #6]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff f850 	bl	8003f30 <pvPortMalloc>
 8004e90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00e      	beq.n	8004eb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e98:	2054      	movs	r0, #84	; 0x54
 8004e9a:	f7ff f849 	bl	8003f30 <pvPortMalloc>
 8004e9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8004eac:	e005      	b.n	8004eba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004eae:	6978      	ldr	r0, [r7, #20]
 8004eb0:	f7ff f906 	bl	80040c0 <vPortFree>
 8004eb4:	e001      	b.n	8004eba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d017      	beq.n	8004ef0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ec8:	88fa      	ldrh	r2, [r7, #6]
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9303      	str	r3, [sp, #12]
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	9302      	str	r3, [sp, #8]
 8004ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f80e 	bl	8004f00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ee4:	69f8      	ldr	r0, [r7, #28]
 8004ee6:	f000 f891 	bl	800500c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004eea:	2301      	movs	r3, #1
 8004eec:	61bb      	str	r3, [r7, #24]
 8004eee:	e002      	b.n	8004ef6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ef4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
	}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3720      	adds	r7, #32
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	f023 0307 	bic.w	r3, r3, #7
 8004f26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <prvInitialiseNewTask+0x46>
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e7fe      	b.n	8004f44 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01f      	beq.n	8004f8c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e012      	b.n	8004f78 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	4413      	add	r3, r2
 8004f58:	7819      	ldrb	r1, [r3, #0]
 8004f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	3334      	adds	r3, #52	; 0x34
 8004f62:	460a      	mov	r2, r1
 8004f64:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d006      	beq.n	8004f80 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	3301      	adds	r3, #1
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	2b0f      	cmp	r3, #15
 8004f7c:	d9e9      	bls.n	8004f52 <prvInitialiseNewTask+0x52>
 8004f7e:	e000      	b.n	8004f82 <prvInitialiseNewTask+0x82>
			{
				break;
 8004f80:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f8a:	e003      	b.n	8004f94 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	2b06      	cmp	r3, #6
 8004f98:	d901      	bls.n	8004f9e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f9a:	2306      	movs	r3, #6
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	2200      	movs	r2, #0
 8004fae:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fe fce7 	bl	8003988 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	3318      	adds	r3, #24
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fe fce2 	bl	8003988 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	f1c3 0207 	rsb	r2, r3, #7
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	2200      	movs	r2, #0
 8004fde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	68f9      	ldr	r1, [r7, #12]
 8004fec:	69b8      	ldr	r0, [r7, #24]
 8004fee:	f7fe fd5f 	bl	8003ab0 <pxPortInitialiseStack>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005002:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005004:	bf00      	nop
 8005006:	3720      	adds	r7, #32
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005014:	f7fe fe72 	bl	8003cfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005018:	4b2a      	ldr	r3, [pc, #168]	; (80050c4 <prvAddNewTaskToReadyList+0xb8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	4a29      	ldr	r2, [pc, #164]	; (80050c4 <prvAddNewTaskToReadyList+0xb8>)
 8005020:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005022:	4b29      	ldr	r3, [pc, #164]	; (80050c8 <prvAddNewTaskToReadyList+0xbc>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800502a:	4a27      	ldr	r2, [pc, #156]	; (80050c8 <prvAddNewTaskToReadyList+0xbc>)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005030:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <prvAddNewTaskToReadyList+0xb8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d110      	bne.n	800505a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005038:	f000 fbc0 	bl	80057bc <prvInitialiseTaskLists>
 800503c:	e00d      	b.n	800505a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800503e:	4b23      	ldr	r3, [pc, #140]	; (80050cc <prvAddNewTaskToReadyList+0xc0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005046:	4b20      	ldr	r3, [pc, #128]	; (80050c8 <prvAddNewTaskToReadyList+0xbc>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	429a      	cmp	r2, r3
 8005052:	d802      	bhi.n	800505a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005054:	4a1c      	ldr	r2, [pc, #112]	; (80050c8 <prvAddNewTaskToReadyList+0xbc>)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800505a:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <prvAddNewTaskToReadyList+0xc4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3301      	adds	r3, #1
 8005060:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <prvAddNewTaskToReadyList+0xc4>)
 8005062:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	2201      	movs	r2, #1
 800506a:	409a      	lsls	r2, r3
 800506c:	4b19      	ldr	r3, [pc, #100]	; (80050d4 <prvAddNewTaskToReadyList+0xc8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4313      	orrs	r3, r2
 8005072:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <prvAddNewTaskToReadyList+0xc8>)
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <prvAddNewTaskToReadyList+0xcc>)
 8005084:	441a      	add	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3304      	adds	r3, #4
 800508a:	4619      	mov	r1, r3
 800508c:	4610      	mov	r0, r2
 800508e:	f7fe fc88 	bl	80039a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005092:	f7fe fe61 	bl	8003d58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005096:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <prvAddNewTaskToReadyList+0xc0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00e      	beq.n	80050bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <prvAddNewTaskToReadyList+0xbc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d207      	bcs.n	80050bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050ac:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <prvAddNewTaskToReadyList+0xd0>)
 80050ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050bc:	bf00      	nop
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	20000f60 	.word	0x20000f60
 80050c8:	20000e60 	.word	0x20000e60
 80050cc:	20000f6c 	.word	0x20000f6c
 80050d0:	20000f7c 	.word	0x20000f7c
 80050d4:	20000f68 	.word	0x20000f68
 80050d8:	20000e64 	.word	0x20000e64
 80050dc:	e000ed04 	.word	0xe000ed04

080050e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d016      	beq.n	8005120 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050f2:	4b13      	ldr	r3, [pc, #76]	; (8005140 <vTaskDelay+0x60>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <vTaskDelay+0x2e>
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	e7fe      	b.n	800510c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800510e:	f000 f879 	bl	8005204 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005112:	2100      	movs	r1, #0
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fdc3 	bl	8005ca0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800511a:	f000 f881 	bl	8005220 <xTaskResumeAll>
 800511e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d107      	bne.n	8005136 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005126:	4b07      	ldr	r3, [pc, #28]	; (8005144 <vTaskDelay+0x64>)
 8005128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000f88 	.word	0x20000f88
 8005144:	e000ed04 	.word	0xe000ed04

08005148 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005156:	463a      	mov	r2, r7
 8005158:	1d39      	adds	r1, r7, #4
 800515a:	f107 0308 	add.w	r3, r7, #8
 800515e:	4618      	mov	r0, r3
 8005160:	f7fb f9c6 	bl	80004f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	9202      	str	r2, [sp, #8]
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	2300      	movs	r3, #0
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	2300      	movs	r3, #0
 8005174:	460a      	mov	r2, r1
 8005176:	491d      	ldr	r1, [pc, #116]	; (80051ec <vTaskStartScheduler+0xa4>)
 8005178:	481d      	ldr	r0, [pc, #116]	; (80051f0 <vTaskStartScheduler+0xa8>)
 800517a:	f7ff fe22 	bl	8004dc2 <xTaskCreateStatic>
 800517e:	4602      	mov	r2, r0
 8005180:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <vTaskStartScheduler+0xac>)
 8005182:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005184:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <vTaskStartScheduler+0xac>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800518c:	2301      	movs	r3, #1
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	e001      	b.n	8005196 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d115      	bne.n	80051c8 <vTaskStartScheduler+0x80>
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	613b      	str	r3, [r7, #16]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051ae:	4b12      	ldr	r3, [pc, #72]	; (80051f8 <vTaskStartScheduler+0xb0>)
 80051b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051b6:	4b11      	ldr	r3, [pc, #68]	; (80051fc <vTaskStartScheduler+0xb4>)
 80051b8:	2201      	movs	r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051bc:	4b10      	ldr	r3, [pc, #64]	; (8005200 <vTaskStartScheduler+0xb8>)
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051c2:	f7fe fcfd 	bl	8003bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051c6:	e00d      	b.n	80051e4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ce:	d109      	bne.n	80051e4 <vTaskStartScheduler+0x9c>
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	e7fe      	b.n	80051e2 <vTaskStartScheduler+0x9a>
}
 80051e4:	bf00      	nop
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	08005fe0 	.word	0x08005fe0
 80051f0:	0800578d 	.word	0x0800578d
 80051f4:	20000f84 	.word	0x20000f84
 80051f8:	20000f80 	.word	0x20000f80
 80051fc:	20000f6c 	.word	0x20000f6c
 8005200:	20000f64 	.word	0x20000f64

08005204 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <vTaskSuspendAll+0x18>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	4a03      	ldr	r2, [pc, #12]	; (800521c <vTaskSuspendAll+0x18>)
 8005210:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005212:	bf00      	nop
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	20000f88 	.word	0x20000f88

08005220 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800522e:	4b41      	ldr	r3, [pc, #260]	; (8005334 <xTaskResumeAll+0x114>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d109      	bne.n	800524a <xTaskResumeAll+0x2a>
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	e7fe      	b.n	8005248 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800524a:	f7fe fd57 	bl	8003cfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800524e:	4b39      	ldr	r3, [pc, #228]	; (8005334 <xTaskResumeAll+0x114>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3b01      	subs	r3, #1
 8005254:	4a37      	ldr	r2, [pc, #220]	; (8005334 <xTaskResumeAll+0x114>)
 8005256:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005258:	4b36      	ldr	r3, [pc, #216]	; (8005334 <xTaskResumeAll+0x114>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d161      	bne.n	8005324 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005260:	4b35      	ldr	r3, [pc, #212]	; (8005338 <xTaskResumeAll+0x118>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d05d      	beq.n	8005324 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005268:	e02e      	b.n	80052c8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800526a:	4b34      	ldr	r3, [pc, #208]	; (800533c <xTaskResumeAll+0x11c>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3318      	adds	r3, #24
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe fbf0 	bl	8003a5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3304      	adds	r3, #4
 8005280:	4618      	mov	r0, r3
 8005282:	f7fe fbeb 	bl	8003a5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	2201      	movs	r2, #1
 800528c:	409a      	lsls	r2, r3
 800528e:	4b2c      	ldr	r3, [pc, #176]	; (8005340 <xTaskResumeAll+0x120>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4313      	orrs	r3, r2
 8005294:	4a2a      	ldr	r2, [pc, #168]	; (8005340 <xTaskResumeAll+0x120>)
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4a27      	ldr	r2, [pc, #156]	; (8005344 <xTaskResumeAll+0x124>)
 80052a6:	441a      	add	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f7fe fb77 	bl	80039a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	4b23      	ldr	r3, [pc, #140]	; (8005348 <xTaskResumeAll+0x128>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	429a      	cmp	r2, r3
 80052c0:	d302      	bcc.n	80052c8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80052c2:	4b22      	ldr	r3, [pc, #136]	; (800534c <xTaskResumeAll+0x12c>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052c8:	4b1c      	ldr	r3, [pc, #112]	; (800533c <xTaskResumeAll+0x11c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1cc      	bne.n	800526a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052d6:	f000 fb0b 	bl	80058f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052da:	4b1d      	ldr	r3, [pc, #116]	; (8005350 <xTaskResumeAll+0x130>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d010      	beq.n	8005308 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052e6:	f000 f837 	bl	8005358 <xTaskIncrementTick>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80052f0:	4b16      	ldr	r3, [pc, #88]	; (800534c <xTaskResumeAll+0x12c>)
 80052f2:	2201      	movs	r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f1      	bne.n	80052e6 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 8005302:	4b13      	ldr	r3, [pc, #76]	; (8005350 <xTaskResumeAll+0x130>)
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005308:	4b10      	ldr	r3, [pc, #64]	; (800534c <xTaskResumeAll+0x12c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005310:	2301      	movs	r3, #1
 8005312:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005314:	4b0f      	ldr	r3, [pc, #60]	; (8005354 <xTaskResumeAll+0x134>)
 8005316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005324:	f7fe fd18 	bl	8003d58 <vPortExitCritical>

	return xAlreadyYielded;
 8005328:	68bb      	ldr	r3, [r7, #8]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000f88 	.word	0x20000f88
 8005338:	20000f60 	.word	0x20000f60
 800533c:	20000f20 	.word	0x20000f20
 8005340:	20000f68 	.word	0x20000f68
 8005344:	20000e64 	.word	0x20000e64
 8005348:	20000e60 	.word	0x20000e60
 800534c:	20000f74 	.word	0x20000f74
 8005350:	20000f70 	.word	0x20000f70
 8005354:	e000ed04 	.word	0xe000ed04

08005358 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005362:	4b4e      	ldr	r3, [pc, #312]	; (800549c <xTaskIncrementTick+0x144>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f040 808d 	bne.w	8005486 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800536c:	4b4c      	ldr	r3, [pc, #304]	; (80054a0 <xTaskIncrementTick+0x148>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3301      	adds	r3, #1
 8005372:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005374:	4a4a      	ldr	r2, [pc, #296]	; (80054a0 <xTaskIncrementTick+0x148>)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d11f      	bne.n	80053c0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005380:	4b48      	ldr	r3, [pc, #288]	; (80054a4 <xTaskIncrementTick+0x14c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <xTaskIncrementTick+0x46>
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	e7fe      	b.n	800539c <xTaskIncrementTick+0x44>
 800539e:	4b41      	ldr	r3, [pc, #260]	; (80054a4 <xTaskIncrementTick+0x14c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	4b40      	ldr	r3, [pc, #256]	; (80054a8 <xTaskIncrementTick+0x150>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a3e      	ldr	r2, [pc, #248]	; (80054a4 <xTaskIncrementTick+0x14c>)
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	4a3e      	ldr	r2, [pc, #248]	; (80054a8 <xTaskIncrementTick+0x150>)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	4b3e      	ldr	r3, [pc, #248]	; (80054ac <xTaskIncrementTick+0x154>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3301      	adds	r3, #1
 80053b8:	4a3c      	ldr	r2, [pc, #240]	; (80054ac <xTaskIncrementTick+0x154>)
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	f000 fa98 	bl	80058f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053c0:	4b3b      	ldr	r3, [pc, #236]	; (80054b0 <xTaskIncrementTick+0x158>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d348      	bcc.n	800545c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ca:	4b36      	ldr	r3, [pc, #216]	; (80054a4 <xTaskIncrementTick+0x14c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d104      	bne.n	80053de <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053d4:	4b36      	ldr	r3, [pc, #216]	; (80054b0 <xTaskIncrementTick+0x158>)
 80053d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053da:	601a      	str	r2, [r3, #0]
					break;
 80053dc:	e03e      	b.n	800545c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053de:	4b31      	ldr	r3, [pc, #196]	; (80054a4 <xTaskIncrementTick+0x14c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d203      	bcs.n	80053fe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053f6:	4a2e      	ldr	r2, [pc, #184]	; (80054b0 <xTaskIncrementTick+0x158>)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053fc:	e02e      	b.n	800545c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	3304      	adds	r3, #4
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fb2a 	bl	8003a5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	3318      	adds	r3, #24
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe fb21 	bl	8003a5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	2201      	movs	r2, #1
 8005420:	409a      	lsls	r2, r3
 8005422:	4b24      	ldr	r3, [pc, #144]	; (80054b4 <xTaskIncrementTick+0x15c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4313      	orrs	r3, r2
 8005428:	4a22      	ldr	r2, [pc, #136]	; (80054b4 <xTaskIncrementTick+0x15c>)
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4a1f      	ldr	r2, [pc, #124]	; (80054b8 <xTaskIncrementTick+0x160>)
 800543a:	441a      	add	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	3304      	adds	r3, #4
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f7fe faad 	bl	80039a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <xTaskIncrementTick+0x164>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	429a      	cmp	r2, r3
 8005454:	d3b9      	bcc.n	80053ca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005456:	2301      	movs	r3, #1
 8005458:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800545a:	e7b6      	b.n	80053ca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <xTaskIncrementTick+0x164>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005462:	4915      	ldr	r1, [pc, #84]	; (80054b8 <xTaskIncrementTick+0x160>)
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d901      	bls.n	8005478 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005478:	4b11      	ldr	r3, [pc, #68]	; (80054c0 <xTaskIncrementTick+0x168>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005480:	2301      	movs	r3, #1
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e004      	b.n	8005490 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005486:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <xTaskIncrementTick+0x16c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3301      	adds	r3, #1
 800548c:	4a0d      	ldr	r2, [pc, #52]	; (80054c4 <xTaskIncrementTick+0x16c>)
 800548e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005490:	697b      	ldr	r3, [r7, #20]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000f88 	.word	0x20000f88
 80054a0:	20000f64 	.word	0x20000f64
 80054a4:	20000f18 	.word	0x20000f18
 80054a8:	20000f1c 	.word	0x20000f1c
 80054ac:	20000f78 	.word	0x20000f78
 80054b0:	20000f80 	.word	0x20000f80
 80054b4:	20000f68 	.word	0x20000f68
 80054b8:	20000e64 	.word	0x20000e64
 80054bc:	20000e60 	.word	0x20000e60
 80054c0:	20000f74 	.word	0x20000f74
 80054c4:	20000f70 	.word	0x20000f70

080054c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054ce:	4b26      	ldr	r3, [pc, #152]	; (8005568 <vTaskSwitchContext+0xa0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054d6:	4b25      	ldr	r3, [pc, #148]	; (800556c <vTaskSwitchContext+0xa4>)
 80054d8:	2201      	movs	r2, #1
 80054da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054dc:	e03e      	b.n	800555c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80054de:	4b23      	ldr	r3, [pc, #140]	; (800556c <vTaskSwitchContext+0xa4>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e4:	4b22      	ldr	r3, [pc, #136]	; (8005570 <vTaskSwitchContext+0xa8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	fab3 f383 	clz	r3, r3
 80054f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80054f2:	7afb      	ldrb	r3, [r7, #11]
 80054f4:	f1c3 031f 	rsb	r3, r3, #31
 80054f8:	617b      	str	r3, [r7, #20]
 80054fa:	491e      	ldr	r1, [pc, #120]	; (8005574 <vTaskSwitchContext+0xac>)
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <vTaskSwitchContext+0x5a>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	607b      	str	r3, [r7, #4]
 8005520:	e7fe      	b.n	8005520 <vTaskSwitchContext+0x58>
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4a11      	ldr	r2, [pc, #68]	; (8005574 <vTaskSwitchContext+0xac>)
 800552e:	4413      	add	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	605a      	str	r2, [r3, #4]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	3308      	adds	r3, #8
 8005544:	429a      	cmp	r2, r3
 8005546:	d104      	bne.n	8005552 <vTaskSwitchContext+0x8a>
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	4a07      	ldr	r2, [pc, #28]	; (8005578 <vTaskSwitchContext+0xb0>)
 800555a:	6013      	str	r3, [r2, #0]
}
 800555c:	bf00      	nop
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	20000f88 	.word	0x20000f88
 800556c:	20000f74 	.word	0x20000f74
 8005570:	20000f68 	.word	0x20000f68
 8005574:	20000e64 	.word	0x20000e64
 8005578:	20000e60 	.word	0x20000e60

0800557c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d109      	bne.n	80055a0 <vTaskPlaceOnEventList+0x24>
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e7fe      	b.n	800559e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055a0:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <vTaskPlaceOnEventList+0x44>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3318      	adds	r3, #24
 80055a6:	4619      	mov	r1, r3
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7fe fa1e 	bl	80039ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055ae:	2101      	movs	r1, #1
 80055b0:	6838      	ldr	r0, [r7, #0]
 80055b2:	f000 fb75 	bl	8005ca0 <prvAddCurrentTaskToDelayedList>
}
 80055b6:	bf00      	nop
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000e60 	.word	0x20000e60

080055c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <xTaskRemoveFromEventList+0x2a>
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e7fe      	b.n	80055ec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	3318      	adds	r3, #24
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fe fa32 	bl	8003a5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055f8:	4b1d      	ldr	r3, [pc, #116]	; (8005670 <xTaskRemoveFromEventList+0xac>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d11c      	bne.n	800563a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	3304      	adds	r3, #4
 8005604:	4618      	mov	r0, r3
 8005606:	f7fe fa29 	bl	8003a5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	2201      	movs	r2, #1
 8005610:	409a      	lsls	r2, r3
 8005612:	4b18      	ldr	r3, [pc, #96]	; (8005674 <xTaskRemoveFromEventList+0xb0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4313      	orrs	r3, r2
 8005618:	4a16      	ldr	r2, [pc, #88]	; (8005674 <xTaskRemoveFromEventList+0xb0>)
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4a13      	ldr	r2, [pc, #76]	; (8005678 <xTaskRemoveFromEventList+0xb4>)
 800562a:	441a      	add	r2, r3
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	3304      	adds	r3, #4
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f7fe f9b5 	bl	80039a2 <vListInsertEnd>
 8005638:	e005      	b.n	8005646 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	3318      	adds	r3, #24
 800563e:	4619      	mov	r1, r3
 8005640:	480e      	ldr	r0, [pc, #56]	; (800567c <xTaskRemoveFromEventList+0xb8>)
 8005642:	f7fe f9ae 	bl	80039a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564a:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <xTaskRemoveFromEventList+0xbc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	429a      	cmp	r2, r3
 8005652:	d905      	bls.n	8005660 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005654:	2301      	movs	r3, #1
 8005656:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005658:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <xTaskRemoveFromEventList+0xc0>)
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e001      	b.n	8005664 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005664:	697b      	ldr	r3, [r7, #20]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000f88 	.word	0x20000f88
 8005674:	20000f68 	.word	0x20000f68
 8005678:	20000e64 	.word	0x20000e64
 800567c:	20000f20 	.word	0x20000f20
 8005680:	20000e60 	.word	0x20000e60
 8005684:	20000f74 	.word	0x20000f74

08005688 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005690:	4b06      	ldr	r3, [pc, #24]	; (80056ac <vTaskInternalSetTimeOutState+0x24>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <vTaskInternalSetTimeOutState+0x28>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	605a      	str	r2, [r3, #4]
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	20000f78 	.word	0x20000f78
 80056b0:	20000f64 	.word	0x20000f64

080056b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d109      	bne.n	80056d8 <xTaskCheckForTimeOut+0x24>
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	613b      	str	r3, [r7, #16]
 80056d6:	e7fe      	b.n	80056d6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <xTaskCheckForTimeOut+0x3e>
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	e7fe      	b.n	80056f0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80056f2:	f7fe fb03 	bl	8003cfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056f6:	4b1d      	ldr	r3, [pc, #116]	; (800576c <xTaskCheckForTimeOut+0xb8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800570e:	d102      	bne.n	8005716 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005710:	2300      	movs	r3, #0
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	e023      	b.n	800575e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4b15      	ldr	r3, [pc, #84]	; (8005770 <xTaskCheckForTimeOut+0xbc>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d007      	beq.n	8005732 <xTaskCheckForTimeOut+0x7e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	429a      	cmp	r2, r3
 800572a:	d802      	bhi.n	8005732 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800572c:	2301      	movs	r3, #1
 800572e:	61fb      	str	r3, [r7, #28]
 8005730:	e015      	b.n	800575e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	429a      	cmp	r2, r3
 800573a:	d90b      	bls.n	8005754 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	1ad2      	subs	r2, r2, r3
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ff9d 	bl	8005688 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800574e:	2300      	movs	r3, #0
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	e004      	b.n	800575e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800575a:	2301      	movs	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800575e:	f7fe fafb 	bl	8003d58 <vPortExitCritical>

	return xReturn;
 8005762:	69fb      	ldr	r3, [r7, #28]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000f64 	.word	0x20000f64
 8005770:	20000f78 	.word	0x20000f78

08005774 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005778:	4b03      	ldr	r3, [pc, #12]	; (8005788 <vTaskMissedYield+0x14>)
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]
}
 800577e:	bf00      	nop
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	20000f74 	.word	0x20000f74

0800578c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005794:	f000 f852 	bl	800583c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005798:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <prvIdleTask+0x28>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d9f9      	bls.n	8005794 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <prvIdleTask+0x2c>)
 80057a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057b0:	e7f0      	b.n	8005794 <prvIdleTask+0x8>
 80057b2:	bf00      	nop
 80057b4:	20000e64 	.word	0x20000e64
 80057b8:	e000ed04 	.word	0xe000ed04

080057bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057c2:	2300      	movs	r3, #0
 80057c4:	607b      	str	r3, [r7, #4]
 80057c6:	e00c      	b.n	80057e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4a12      	ldr	r2, [pc, #72]	; (800581c <prvInitialiseTaskLists+0x60>)
 80057d4:	4413      	add	r3, r2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe f8b6 	bl	8003948 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3301      	adds	r3, #1
 80057e0:	607b      	str	r3, [r7, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b06      	cmp	r3, #6
 80057e6:	d9ef      	bls.n	80057c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057e8:	480d      	ldr	r0, [pc, #52]	; (8005820 <prvInitialiseTaskLists+0x64>)
 80057ea:	f7fe f8ad 	bl	8003948 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057ee:	480d      	ldr	r0, [pc, #52]	; (8005824 <prvInitialiseTaskLists+0x68>)
 80057f0:	f7fe f8aa 	bl	8003948 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057f4:	480c      	ldr	r0, [pc, #48]	; (8005828 <prvInitialiseTaskLists+0x6c>)
 80057f6:	f7fe f8a7 	bl	8003948 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057fa:	480c      	ldr	r0, [pc, #48]	; (800582c <prvInitialiseTaskLists+0x70>)
 80057fc:	f7fe f8a4 	bl	8003948 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005800:	480b      	ldr	r0, [pc, #44]	; (8005830 <prvInitialiseTaskLists+0x74>)
 8005802:	f7fe f8a1 	bl	8003948 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005806:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <prvInitialiseTaskLists+0x78>)
 8005808:	4a05      	ldr	r2, [pc, #20]	; (8005820 <prvInitialiseTaskLists+0x64>)
 800580a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <prvInitialiseTaskLists+0x7c>)
 800580e:	4a05      	ldr	r2, [pc, #20]	; (8005824 <prvInitialiseTaskLists+0x68>)
 8005810:	601a      	str	r2, [r3, #0]
}
 8005812:	bf00      	nop
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000e64 	.word	0x20000e64
 8005820:	20000ef0 	.word	0x20000ef0
 8005824:	20000f04 	.word	0x20000f04
 8005828:	20000f20 	.word	0x20000f20
 800582c:	20000f34 	.word	0x20000f34
 8005830:	20000f4c 	.word	0x20000f4c
 8005834:	20000f18 	.word	0x20000f18
 8005838:	20000f1c 	.word	0x20000f1c

0800583c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005842:	e019      	b.n	8005878 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005844:	f7fe fa5a 	bl	8003cfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005848:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <prvCheckTasksWaitingTermination+0x4c>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3304      	adds	r3, #4
 8005854:	4618      	mov	r0, r3
 8005856:	f7fe f901 	bl	8003a5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800585a:	4b0c      	ldr	r3, [pc, #48]	; (800588c <prvCheckTasksWaitingTermination+0x50>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3b01      	subs	r3, #1
 8005860:	4a0a      	ldr	r2, [pc, #40]	; (800588c <prvCheckTasksWaitingTermination+0x50>)
 8005862:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005864:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <prvCheckTasksWaitingTermination+0x54>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3b01      	subs	r3, #1
 800586a:	4a09      	ldr	r2, [pc, #36]	; (8005890 <prvCheckTasksWaitingTermination+0x54>)
 800586c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800586e:	f7fe fa73 	bl	8003d58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f80e 	bl	8005894 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <prvCheckTasksWaitingTermination+0x54>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e1      	bne.n	8005844 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20000f34 	.word	0x20000f34
 800588c:	20000f60 	.word	0x20000f60
 8005890:	20000f48 	.word	0x20000f48

08005894 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d108      	bne.n	80058b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe fc08 	bl	80040c0 <vPortFree>
				vPortFree( pxTCB );
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fe fc05 	bl	80040c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058b6:	e017      	b.n	80058e8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d103      	bne.n	80058ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fe fbfc 	bl	80040c0 <vPortFree>
	}
 80058c8:	e00e      	b.n	80058e8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d009      	beq.n	80058e8 <prvDeleteTCB+0x54>
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	e7fe      	b.n	80058e6 <prvDeleteTCB+0x52>
	}
 80058e8:	bf00      	nop
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058f6:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <prvResetNextTaskUnblockTime+0x38>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d104      	bne.n	800590a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005900:	4b0a      	ldr	r3, [pc, #40]	; (800592c <prvResetNextTaskUnblockTime+0x3c>)
 8005902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005906:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005908:	e008      	b.n	800591c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800590a:	4b07      	ldr	r3, [pc, #28]	; (8005928 <prvResetNextTaskUnblockTime+0x38>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	4a04      	ldr	r2, [pc, #16]	; (800592c <prvResetNextTaskUnblockTime+0x3c>)
 800591a:	6013      	str	r3, [r2, #0]
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	20000f18 	.word	0x20000f18
 800592c:	20000f80 	.word	0x20000f80

08005930 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005936:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <xTaskGetSchedulerState+0x34>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d102      	bne.n	8005944 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800593e:	2301      	movs	r3, #1
 8005940:	607b      	str	r3, [r7, #4]
 8005942:	e008      	b.n	8005956 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005944:	4b08      	ldr	r3, [pc, #32]	; (8005968 <xTaskGetSchedulerState+0x38>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800594c:	2302      	movs	r3, #2
 800594e:	607b      	str	r3, [r7, #4]
 8005950:	e001      	b.n	8005956 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005952:	2300      	movs	r3, #0
 8005954:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005956:	687b      	ldr	r3, [r7, #4]
	}
 8005958:	4618      	mov	r0, r3
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	20000f6c 	.word	0x20000f6c
 8005968:	20000f88 	.word	0x20000f88

0800596c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d05e      	beq.n	8005a40 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005986:	4b31      	ldr	r3, [pc, #196]	; (8005a4c <xTaskPriorityInherit+0xe0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	429a      	cmp	r2, r3
 800598e:	d24e      	bcs.n	8005a2e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	db06      	blt.n	80059a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005998:	4b2c      	ldr	r3, [pc, #176]	; (8005a4c <xTaskPriorityInherit+0xe0>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	f1c3 0207 	rsb	r2, r3, #7
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	6959      	ldr	r1, [r3, #20]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4a26      	ldr	r2, [pc, #152]	; (8005a50 <xTaskPriorityInherit+0xe4>)
 80059b8:	4413      	add	r3, r2
 80059ba:	4299      	cmp	r1, r3
 80059bc:	d12f      	bne.n	8005a1e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	3304      	adds	r3, #4
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fe f84a 	bl	8003a5c <uxListRemove>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	2201      	movs	r2, #1
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	43da      	mvns	r2, r3
 80059da:	4b1e      	ldr	r3, [pc, #120]	; (8005a54 <xTaskPriorityInherit+0xe8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4013      	ands	r3, r2
 80059e0:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <xTaskPriorityInherit+0xe8>)
 80059e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059e4:	4b19      	ldr	r3, [pc, #100]	; (8005a4c <xTaskPriorityInherit+0xe0>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f2:	2201      	movs	r2, #1
 80059f4:	409a      	lsls	r2, r3
 80059f6:	4b17      	ldr	r3, [pc, #92]	; (8005a54 <xTaskPriorityInherit+0xe8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	4a15      	ldr	r2, [pc, #84]	; (8005a54 <xTaskPriorityInherit+0xe8>)
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4a10      	ldr	r2, [pc, #64]	; (8005a50 <xTaskPriorityInherit+0xe4>)
 8005a0e:	441a      	add	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f7fd ffc3 	bl	80039a2 <vListInsertEnd>
 8005a1c:	e004      	b.n	8005a28 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a1e:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <xTaskPriorityInherit+0xe0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	e008      	b.n	8005a40 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a32:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <xTaskPriorityInherit+0xe0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d201      	bcs.n	8005a40 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a40:	68fb      	ldr	r3, [r7, #12]
	}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000e60 	.word	0x20000e60
 8005a50:	20000e64 	.word	0x20000e64
 8005a54:	20000f68 	.word	0x20000f68

08005a58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d06c      	beq.n	8005b48 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a6e:	4b39      	ldr	r3, [pc, #228]	; (8005b54 <xTaskPriorityDisinherit+0xfc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d009      	beq.n	8005a8c <xTaskPriorityDisinherit+0x34>
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	e7fe      	b.n	8005a8a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d109      	bne.n	8005aa8 <xTaskPriorityDisinherit+0x50>
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	60bb      	str	r3, [r7, #8]
 8005aa6:	e7fe      	b.n	8005aa6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aac:	1e5a      	subs	r2, r3, #1
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d044      	beq.n	8005b48 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d140      	bne.n	8005b48 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fd ffc6 	bl	8003a5c <uxListRemove>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d115      	bne.n	8005b02 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ada:	491f      	ldr	r1, [pc, #124]	; (8005b58 <xTaskPriorityDisinherit+0x100>)
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10a      	bne.n	8005b02 <xTaskPriorityDisinherit+0xaa>
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	2201      	movs	r2, #1
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	43da      	mvns	r2, r3
 8005af8:	4b18      	ldr	r3, [pc, #96]	; (8005b5c <xTaskPriorityDisinherit+0x104>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4013      	ands	r3, r2
 8005afe:	4a17      	ldr	r2, [pc, #92]	; (8005b5c <xTaskPriorityDisinherit+0x104>)
 8005b00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0e:	f1c3 0207 	rsb	r2, r3, #7
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <xTaskPriorityDisinherit+0x104>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	4a0d      	ldr	r2, [pc, #52]	; (8005b5c <xTaskPriorityDisinherit+0x104>)
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4a08      	ldr	r2, [pc, #32]	; (8005b58 <xTaskPriorityDisinherit+0x100>)
 8005b36:	441a      	add	r2, r3
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	f7fd ff2f 	bl	80039a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b44:	2301      	movs	r3, #1
 8005b46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b48:	697b      	ldr	r3, [r7, #20]
	}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000e60 	.word	0x20000e60
 8005b58:	20000e64 	.word	0x20000e64
 8005b5c:	20000f68 	.word	0x20000f68

08005b60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d075      	beq.n	8005c64 <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d109      	bne.n	8005b94 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	e7fe      	b.n	8005b92 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d202      	bcs.n	8005ba4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	61fb      	str	r3, [r7, #28]
 8005ba2:	e002      	b.n	8005baa <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d057      	beq.n	8005c64 <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d152      	bne.n	8005c64 <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005bbe:	4b2b      	ldr	r3, [pc, #172]	; (8005c6c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d109      	bne.n	8005bdc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	e7fe      	b.n	8005bda <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	db04      	blt.n	8005bfa <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f1c3 0207 	rsb	r2, r3, #7
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	6959      	ldr	r1, [r3, #20]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4a19      	ldr	r2, [pc, #100]	; (8005c70 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005c0a:	4413      	add	r3, r2
 8005c0c:	4299      	cmp	r1, r3
 8005c0e:	d129      	bne.n	8005c64 <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	3304      	adds	r3, #4
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fd ff21 	bl	8003a5c <uxListRemove>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	2201      	movs	r2, #1
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	43da      	mvns	r2, r3
 8005c2c:	4b11      	ldr	r3, [pc, #68]	; (8005c74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4013      	ands	r3, r2
 8005c32:	4a10      	ldr	r2, [pc, #64]	; (8005c74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005c34:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	409a      	lsls	r2, r3
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	4a0b      	ldr	r2, [pc, #44]	; (8005c74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4a06      	ldr	r2, [pc, #24]	; (8005c70 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005c56:	441a      	add	r2, r3
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7fd fe9f 	bl	80039a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c64:	bf00      	nop
 8005c66:	3720      	adds	r7, #32
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	20000e60 	.word	0x20000e60
 8005c70:	20000e64 	.word	0x20000e64
 8005c74:	20000f68 	.word	0x20000f68

08005c78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005c7c:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c8a:	3201      	adds	r2, #1
 8005c8c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005c8e:	4b03      	ldr	r3, [pc, #12]	; (8005c9c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c90:	681b      	ldr	r3, [r3, #0]
	}
 8005c92:	4618      	mov	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	20000e60 	.word	0x20000e60

08005ca0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005caa:	4b29      	ldr	r3, [pc, #164]	; (8005d50 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cb0:	4b28      	ldr	r3, [pc, #160]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fd fed0 	bl	8003a5c <uxListRemove>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10b      	bne.n	8005cda <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005cc2:	4b24      	ldr	r3, [pc, #144]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	2201      	movs	r2, #1
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	43da      	mvns	r2, r3
 8005cd0:	4b21      	ldr	r3, [pc, #132]	; (8005d58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	4a20      	ldr	r2, [pc, #128]	; (8005d58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cd8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ce0:	d10a      	bne.n	8005cf8 <prvAddCurrentTaskToDelayedList+0x58>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ce8:	4b1a      	ldr	r3, [pc, #104]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4619      	mov	r1, r3
 8005cf0:	481a      	ldr	r0, [pc, #104]	; (8005d5c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005cf2:	f7fd fe56 	bl	80039a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cf6:	e026      	b.n	8005d46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d00:	4b14      	ldr	r3, [pc, #80]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d209      	bcs.n	8005d24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d10:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	f7fd fe64 	bl	80039ea <vListInsert>
}
 8005d22:	e010      	b.n	8005d46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d24:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4610      	mov	r0, r2
 8005d32:	f7fd fe5a 	bl	80039ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d36:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d202      	bcs.n	8005d46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d40:	4a09      	ldr	r2, [pc, #36]	; (8005d68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6013      	str	r3, [r2, #0]
}
 8005d46:	bf00      	nop
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000f64 	.word	0x20000f64
 8005d54:	20000e60 	.word	0x20000e60
 8005d58:	20000f68 	.word	0x20000f68
 8005d5c:	20000f4c 	.word	0x20000f4c
 8005d60:	20000f1c 	.word	0x20000f1c
 8005d64:	20000f18 	.word	0x20000f18
 8005d68:	20000f80 	.word	0x20000f80

08005d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005d70:	f7fa fec8 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005d74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005d76:	e003      	b.n	8005d80 <LoopCopyDataInit>

08005d78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005d78:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005d7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005d7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005d7e:	3104      	adds	r1, #4

08005d80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005d80:	480a      	ldr	r0, [pc, #40]	; (8005dac <LoopForever+0xa>)
	ldr	r3, =_edata
 8005d82:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005d84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005d86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005d88:	d3f6      	bcc.n	8005d78 <CopyDataInit>
	ldr	r2, =_sbss
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	; (8005db4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005d8c:	e002      	b.n	8005d94 <LoopFillZerobss>

08005d8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005d8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005d90:	f842 3b04 	str.w	r3, [r2], #4

08005d94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005d94:	4b08      	ldr	r3, [pc, #32]	; (8005db8 <LoopForever+0x16>)
	cmp	r2, r3
 8005d96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005d98:	d3f9      	bcc.n	8005d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d9a:	f000 f811 	bl	8005dc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005d9e:	f7fa fbc1 	bl	8000524 <main>

08005da2 <LoopForever>:

LoopForever:
    b LoopForever
 8005da2:	e7fe      	b.n	8005da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005da4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005da8:	08006040 	.word	0x08006040
	ldr	r0, =_sdata
 8005dac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005db0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8005db4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8005db8:	20001070 	.word	0x20001070

08005dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005dbc:	e7fe      	b.n	8005dbc <ADC1_2_IRQHandler>
	...

08005dc0 <__libc_init_array>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	4e0d      	ldr	r6, [pc, #52]	; (8005df8 <__libc_init_array+0x38>)
 8005dc4:	4c0d      	ldr	r4, [pc, #52]	; (8005dfc <__libc_init_array+0x3c>)
 8005dc6:	1ba4      	subs	r4, r4, r6
 8005dc8:	10a4      	asrs	r4, r4, #2
 8005dca:	2500      	movs	r5, #0
 8005dcc:	42a5      	cmp	r5, r4
 8005dce:	d109      	bne.n	8005de4 <__libc_init_array+0x24>
 8005dd0:	4e0b      	ldr	r6, [pc, #44]	; (8005e00 <__libc_init_array+0x40>)
 8005dd2:	4c0c      	ldr	r4, [pc, #48]	; (8005e04 <__libc_init_array+0x44>)
 8005dd4:	f000 f82c 	bl	8005e30 <_init>
 8005dd8:	1ba4      	subs	r4, r4, r6
 8005dda:	10a4      	asrs	r4, r4, #2
 8005ddc:	2500      	movs	r5, #0
 8005dde:	42a5      	cmp	r5, r4
 8005de0:	d105      	bne.n	8005dee <__libc_init_array+0x2e>
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005de8:	4798      	blx	r3
 8005dea:	3501      	adds	r5, #1
 8005dec:	e7ee      	b.n	8005dcc <__libc_init_array+0xc>
 8005dee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005df2:	4798      	blx	r3
 8005df4:	3501      	adds	r5, #1
 8005df6:	e7f2      	b.n	8005dde <__libc_init_array+0x1e>
 8005df8:	08006038 	.word	0x08006038
 8005dfc:	08006038 	.word	0x08006038
 8005e00:	08006038 	.word	0x08006038
 8005e04:	0800603c 	.word	0x0800603c

08005e08 <memcpy>:
 8005e08:	b510      	push	{r4, lr}
 8005e0a:	1e43      	subs	r3, r0, #1
 8005e0c:	440a      	add	r2, r1
 8005e0e:	4291      	cmp	r1, r2
 8005e10:	d100      	bne.n	8005e14 <memcpy+0xc>
 8005e12:	bd10      	pop	{r4, pc}
 8005e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e1c:	e7f7      	b.n	8005e0e <memcpy+0x6>

08005e1e <memset>:
 8005e1e:	4402      	add	r2, r0
 8005e20:	4603      	mov	r3, r0
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d100      	bne.n	8005e28 <memset+0xa>
 8005e26:	4770      	bx	lr
 8005e28:	f803 1b01 	strb.w	r1, [r3], #1
 8005e2c:	e7f9      	b.n	8005e22 <memset+0x4>
	...

08005e30 <_init>:
 8005e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e32:	bf00      	nop
 8005e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e36:	bc08      	pop	{r3}
 8005e38:	469e      	mov	lr, r3
 8005e3a:	4770      	bx	lr

08005e3c <_fini>:
 8005e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3e:	bf00      	nop
 8005e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e42:	bc08      	pop	{r3}
 8005e44:	469e      	mov	lr, r3
 8005e46:	4770      	bx	lr
