
RTOS_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08005f24  08005f24  00015f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080061b4  080061b4  000161b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  080061c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001074  20000074  08006238  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200010e8  08006238  000210e8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001646c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002c39  00000000  00000000  00036510  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000012c8  00000000  00000000  00039150  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011a0  00000000  00000000  0003a418  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009cdd  00000000  00000000  0003b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006886  00000000  00000000  00045295  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004bb1b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005138  00000000  00000000  0004bb98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f0c 	.word	0x08005f0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005f0c 	.word	0x08005f0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000090 	.word	0x20000090
 80005c0:	200000e4 	.word	0x200000e4

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fb91 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f867 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f90d 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 f8db 	bl	8000790 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /***** create QUEUE *****/
   St_Queue_Handler = xQueueCreate(2, sizeof (my_struct));
 80005da:	2200      	movs	r2, #0
 80005dc:	210c      	movs	r1, #12
 80005de:	2002      	movs	r0, #2
 80005e0:	f003 fe1c 	bl	800421c <xQueueGenericCreate>
 80005e4:	4602      	mov	r2, r0
 80005e6:	4b21      	ldr	r3, [pc, #132]	; (800066c <main+0xa8>)
 80005e8:	601a      	str	r2, [r3, #0]

   if (St_Queue_Handler == 0) // if there is some error while creating queue
 80005ea:	4b20      	ldr	r3, [pc, #128]	; (800066c <main+0xa8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10d      	bne.n	800060e <main+0x4a>
   {
  	  char *str = "Unable to create STRUCTURE Queue\r\n\n";
 80005f2:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <main+0xac>)
 80005f4:	607b      	str	r3, [r7, #4]
  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff fdea 	bl	80001d0 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	481b      	ldr	r0, [pc, #108]	; (8000674 <main+0xb0>)
 8000608:	f002 fc82 	bl	8002f10 <HAL_UART_Transmit>
 800060c:	e00c      	b.n	8000628 <main+0x64>
    }
   else
    {
  	  char *str = "STRUCTURE Queue Created successfully\r\n\n";
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <main+0xb4>)
 8000610:	603b      	str	r3, [r7, #0]
  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000612:	6838      	ldr	r0, [r7, #0]
 8000614:	f7ff fddc 	bl	80001d0 <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000620:	6839      	ldr	r1, [r7, #0]
 8000622:	4814      	ldr	r0, [pc, #80]	; (8000674 <main+0xb0>)
 8000624:	f002 fc74 	bl	8002f10 <HAL_UART_Transmit>
    }



   xTaskCreate(Sender1_Task,"Sender1",128,NULL,2,&Sender1_Task_Handler);
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <main+0xb8>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2302      	movs	r3, #2
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	4912      	ldr	r1, [pc, #72]	; (8000680 <main+0xbc>)
 8000636:	4813      	ldr	r0, [pc, #76]	; (8000684 <main+0xc0>)
 8000638:	f004 f988 	bl	800494c <xTaskCreate>
   xTaskCreate(Sender2_Task,"Sender2",128,NULL,2,&Sender2_Task_Handler);
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <main+0xc4>)
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2302      	movs	r3, #2
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	4910      	ldr	r1, [pc, #64]	; (800068c <main+0xc8>)
 800064a:	4811      	ldr	r0, [pc, #68]	; (8000690 <main+0xcc>)
 800064c:	f004 f97e 	bl	800494c <xTaskCreate>
   xTaskCreate(Receiver_Task,"Receiver",128,NULL,1,&Receiver_Task_Handler);
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <main+0xd0>)
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2301      	movs	r3, #1
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2300      	movs	r3, #0
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	490e      	ldr	r1, [pc, #56]	; (8000698 <main+0xd4>)
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <main+0xd8>)
 8000660:	f004 f974 	bl	800494c <xTaskCreate>


   vTaskStartScheduler();
 8000664:	f004 fadc 	bl	8004c20 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000668:	e7fe      	b.n	8000668 <main+0xa4>
 800066a:	bf00      	nop
 800066c:	20001004 	.word	0x20001004
 8000670:	08005f24 	.word	0x08005f24
 8000674:	20001010 	.word	0x20001010
 8000678:	08005f48 	.word	0x08005f48
 800067c:	20001008 	.word	0x20001008
 8000680:	08005f70 	.word	0x08005f70
 8000684:	08000821 	.word	0x08000821
 8000688:	2000100c 	.word	0x2000100c
 800068c:	08005f78 	.word	0x08005f78
 8000690:	080008e5 	.word	0x080008e5
 8000694:	20001000 	.word	0x20001000
 8000698:	08005f80 	.word	0x08005f80
 800069c:	080009a9 	.word	0x080009a9

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0b8      	sub	sp, #224	; 0xe0
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006aa:	2244      	movs	r2, #68	; 0x44
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f005 f811 	bl	80056d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c4:	463b      	mov	r3, r7
 80006c6:	2288      	movs	r2, #136	; 0x88
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 f803 	bl	80056d6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006d0:	2310      	movs	r3, #16
 80006d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e2:	2360      	movs	r3, #96	; 0x60
 80006e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006ee:	2301      	movs	r3, #1
 80006f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006fa:	2328      	movs	r3, #40	; 0x28
 80006fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000700:	2307      	movs	r3, #7
 8000702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fe0e 	bl	8001338 <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000722:	f000 f9a3 	bl	8000a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2303      	movs	r3, #3
 800072e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000744:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000748:	2104      	movs	r1, #4
 800074a:	4618      	mov	r0, r3
 800074c:	f001 f9da 	bl	8001b04 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000756:	f000 f989 	bl	8000a6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800075a:	2302      	movs	r3, #2
 800075c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800075e:	2300      	movs	r3, #0
 8000760:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4618      	mov	r0, r3
 8000766:	f001 fc03 	bl	8001f70 <HAL_RCCEx_PeriphCLKConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000770:	f000 f97c 	bl	8000a6c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000774:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000778:	f000 fd88 	bl	800128c <HAL_PWREx_ControlVoltageScaling>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000782:	f000 f973 	bl	8000a6c <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	37e0      	adds	r7, #224	; 0xe0
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 8000796:	4a15      	ldr	r2, [pc, #84]	; (80007ec <MX_USART2_UART_Init+0x5c>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007d4:	f002 fb4e 	bl	8002e74 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 f945 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20001010 	.word	0x20001010
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4a09      	ldr	r2, [pc, #36]	; (800081c <MX_GPIO_Init+0x2c>)
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_GPIO_Init+0x2c>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_GPIO_Init+0x2c>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000

08000820 <Sender1_Task>:

/* USER CODE BEGIN 4 */
void Sender1_Task (void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	my_struct *ptrtostruct;

	uint32_t TickDelay = pdMS_TO_TICKS(2000);
 8000828:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800082c:	617b      	str	r3, [r7, #20]
	while (1)
	{
		char *str = "Entered SENDER1_Task\r\n about to SEND to the queue\r\n\n";
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <Sender1_Task+0xac>)
 8000830:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000832:	6938      	ldr	r0, [r7, #16]
 8000834:	f7ff fccc 	bl	80001d0 <strlen>
 8000838:	4603      	mov	r3, r0
 800083a:	b29a      	uxth	r2, r3
 800083c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000840:	6939      	ldr	r1, [r7, #16]
 8000842:	4823      	ldr	r0, [pc, #140]	; (80008d0 <Sender1_Task+0xb0>)
 8000844:	f002 fb64 	bl	8002f10 <HAL_UART_Transmit>

		/****** ALOOCATE MEMORY TO THE PTR ********/
		ptrtostruct = pvPortMalloc(sizeof (my_struct));
 8000848:	200c      	movs	r0, #12
 800084a:	f003 fa9b 	bl	8003d84 <pvPortMalloc>
 800084e:	4603      	mov	r3, r0
 8000850:	60bb      	str	r3, [r7, #8]

		/********** LOAD THE DATA ***********/
		ptrtostruct->counter = 1+indx1;
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <Sender1_Task+0xb4>)
 8000856:	6812      	ldr	r2, [r2, #0]
 8000858:	3201      	adds	r2, #1
 800085a:	605a      	str	r2, [r3, #4]
		ptrtostruct->large_value = 1000 + indx1*100;
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <Sender1_Task+0xb4>)
 8000860:	6812      	ldr	r2, [r2, #0]
 8000862:	b292      	uxth	r2, r2
 8000864:	4611      	mov	r1, r2
 8000866:	0089      	lsls	r1, r1, #2
 8000868:	440a      	add	r2, r1
 800086a:	4611      	mov	r1, r2
 800086c:	0088      	lsls	r0, r1, #2
 800086e:	4611      	mov	r1, r2
 8000870:	4602      	mov	r2, r0
 8000872:	440a      	add	r2, r1
 8000874:	0092      	lsls	r2, r2, #2
 8000876:	b292      	uxth	r2, r2
 8000878:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 800087c:	b292      	uxth	r2, r2
 800087e:	811a      	strh	r2, [r3, #8]
		ptrtostruct->str = "HELLO FROM SENDER 1 ";
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <Sender1_Task+0xb8>)
 8000884:	601a      	str	r2, [r3, #0]

		/***** send to the queue ****/
		if (xQueueSend(St_Queue_Handler, &ptrtostruct, portMAX_DELAY) == pdPASS)
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <Sender1_Task+0xbc>)
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	f107 0108 	add.w	r1, r7, #8
 800088e:	2300      	movs	r3, #0
 8000890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000894:	f003 fd1a 	bl	80042cc <xQueueGenericSend>
 8000898:	4603      	mov	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d10c      	bne.n	80008b8 <Sender1_Task+0x98>
		{
			char *str2 = " Successfully sent the to the queue\r\nLeaving SENDER1_Task\r\n\n\n";
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <Sender1_Task+0xc0>)
 80008a0:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f7ff fc94 	bl	80001d0 <strlen>
 80008a8:	4603      	mov	r3, r0
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008b0:	68f9      	ldr	r1, [r7, #12]
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <Sender1_Task+0xb0>)
 80008b4:	f002 fb2c 	bl	8002f10 <HAL_UART_Transmit>
		}

		indx1 = indx1+1;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <Sender1_Task+0xb4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <Sender1_Task+0xb4>)
 80008c0:	6013      	str	r3, [r2, #0]

		vTaskDelay(TickDelay);
 80008c2:	6978      	ldr	r0, [r7, #20]
 80008c4:	f004 f978 	bl	8004bb8 <vTaskDelay>
	{
 80008c8:	e7b1      	b.n	800082e <Sender1_Task+0xe>
 80008ca:	bf00      	nop
 80008cc:	08005f8c 	.word	0x08005f8c
 80008d0:	20001010 	.word	0x20001010
 80008d4:	200002e4 	.word	0x200002e4
 80008d8:	08005fc4 	.word	0x08005fc4
 80008dc:	20001004 	.word	0x20001004
 80008e0:	08005fdc 	.word	0x08005fdc

080008e4 <Sender2_Task>:
}



void Sender2_Task (void *argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	my_struct *ptrtostruct;

	uint32_t TickDelay = pdMS_TO_TICKS(2000);
 80008ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008f0:	617b      	str	r3, [r7, #20]
	while (1)
	{
		char *str = "Entered SENDER2_Task\r\n about to SEND to the queue\r\n\n";
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <Sender2_Task+0xac>)
 80008f4:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80008f6:	6938      	ldr	r0, [r7, #16]
 80008f8:	f7ff fc6a 	bl	80001d0 <strlen>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b29a      	uxth	r2, r3
 8000900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000904:	6939      	ldr	r1, [r7, #16]
 8000906:	4823      	ldr	r0, [pc, #140]	; (8000994 <Sender2_Task+0xb0>)
 8000908:	f002 fb02 	bl	8002f10 <HAL_UART_Transmit>

		/****** ALOOCATE MEMORY TO THE PTR ********/
		ptrtostruct = pvPortMalloc(sizeof (my_struct));
 800090c:	200c      	movs	r0, #12
 800090e:	f003 fa39 	bl	8003d84 <pvPortMalloc>
 8000912:	4603      	mov	r3, r0
 8000914:	60bb      	str	r3, [r7, #8]

		/********** LOAD THE DATA ***********/
		ptrtostruct->counter = 1+indx1;
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	4a1f      	ldr	r2, [pc, #124]	; (8000998 <Sender2_Task+0xb4>)
 800091a:	6812      	ldr	r2, [r2, #0]
 800091c:	3201      	adds	r2, #1
 800091e:	605a      	str	r2, [r3, #4]
		ptrtostruct->large_value = 1000 + indx1*100;
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	4a1d      	ldr	r2, [pc, #116]	; (8000998 <Sender2_Task+0xb4>)
 8000924:	6812      	ldr	r2, [r2, #0]
 8000926:	b292      	uxth	r2, r2
 8000928:	4611      	mov	r1, r2
 800092a:	0089      	lsls	r1, r1, #2
 800092c:	440a      	add	r2, r1
 800092e:	4611      	mov	r1, r2
 8000930:	0088      	lsls	r0, r1, #2
 8000932:	4611      	mov	r1, r2
 8000934:	4602      	mov	r2, r0
 8000936:	440a      	add	r2, r1
 8000938:	0092      	lsls	r2, r2, #2
 800093a:	b292      	uxth	r2, r2
 800093c:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000940:	b292      	uxth	r2, r2
 8000942:	811a      	strh	r2, [r3, #8]
		ptrtostruct->str = "HELLO FROM SENDER 2 ";
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <Sender2_Task+0xb8>)
 8000948:	601a      	str	r2, [r3, #0]

		/***** send to the queue ****/
		if (xQueueSend(St_Queue_Handler, &ptrtostruct, portMAX_DELAY) == pdPASS)
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <Sender2_Task+0xbc>)
 800094c:	6818      	ldr	r0, [r3, #0]
 800094e:	f107 0108 	add.w	r1, r7, #8
 8000952:	2300      	movs	r3, #0
 8000954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000958:	f003 fcb8 	bl	80042cc <xQueueGenericSend>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d10c      	bne.n	800097c <Sender2_Task+0x98>
		{
			char *str2 = " Successfully sent the to the queue\r\nLeaving SENDER2_Task\r\n\n\n";
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <Sender2_Task+0xc0>)
 8000964:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 8000966:	68f8      	ldr	r0, [r7, #12]
 8000968:	f7ff fc32 	bl	80001d0 <strlen>
 800096c:	4603      	mov	r3, r0
 800096e:	b29a      	uxth	r2, r3
 8000970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000974:	68f9      	ldr	r1, [r7, #12]
 8000976:	4807      	ldr	r0, [pc, #28]	; (8000994 <Sender2_Task+0xb0>)
 8000978:	f002 faca 	bl	8002f10 <HAL_UART_Transmit>
		}

		indx1 = indx1+1;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <Sender2_Task+0xb4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <Sender2_Task+0xb4>)
 8000984:	6013      	str	r3, [r2, #0]

		vTaskDelay(TickDelay);
 8000986:	6978      	ldr	r0, [r7, #20]
 8000988:	f004 f916 	bl	8004bb8 <vTaskDelay>
	{
 800098c:	e7b1      	b.n	80008f2 <Sender2_Task+0xe>
 800098e:	bf00      	nop
 8000990:	0800601c 	.word	0x0800601c
 8000994:	20001010 	.word	0x20001010
 8000998:	200002e4 	.word	0x200002e4
 800099c:	08006054 	.word	0x08006054
 80009a0:	20001004 	.word	0x20001004
 80009a4:	0800606c 	.word	0x0800606c

080009a8 <Receiver_Task>:
	}
}

void Receiver_Task (void *argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	6078      	str	r0, [r7, #4]
	my_struct *Rptrtostruct;
	uint32_t TickDelay = pdMS_TO_TICKS(3000);
 80009b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009b4:	617b      	str	r3, [r7, #20]
	char *ptr;

	while (1)
	{
		char *str = "Entered RECEIVER Task\r\n about to RECEIVE FROM the queue\r\n\n";
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <Receiver_Task+0x90>)
 80009b8:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80009ba:	6938      	ldr	r0, [r7, #16]
 80009bc:	f7ff fc08 	bl	80001d0 <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009c8:	6939      	ldr	r1, [r7, #16]
 80009ca:	481c      	ldr	r0, [pc, #112]	; (8000a3c <Receiver_Task+0x94>)
 80009cc:	f002 faa0 	bl	8002f10 <HAL_UART_Transmit>

		/**** RECEIVE FROM QUEUE *****/
		if (xQueueReceive(St_Queue_Handler, &Rptrtostruct, portMAX_DELAY) == pdPASS)
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <Receiver_Task+0x98>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f107 0108 	add.w	r1, r7, #8
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 fd6f 	bl	80044c0 <xQueueReceive>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d11e      	bne.n	8000a26 <Receiver_Task+0x7e>
		{
			ptr = pvPortMalloc(100 * sizeof (char)); // allocate memory for the string
 80009e8:	2064      	movs	r0, #100	; 0x64
 80009ea:	f003 f9cb 	bl	8003d84 <pvPortMalloc>
 80009ee:	60f8      	str	r0, [r7, #12]

			sprintf (ptr, "Received from QUEUE:\n COUNTER = %d\r\n LARGE VALUE = %u\n STRING = %s\r\n\n\n",Rptrtostruct->counter,Rptrtostruct->large_value, Rptrtostruct->str);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	891b      	ldrh	r3, [r3, #8]
 80009f8:	4619      	mov	r1, r3
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	460b      	mov	r3, r1
 8000a02:	4910      	ldr	r1, [pc, #64]	; (8000a44 <Receiver_Task+0x9c>)
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f004 fe6f 	bl	80056e8 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)ptr, strlen(ptr), HAL_MAX_DELAY);
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f7ff fbe0 	bl	80001d0 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a18:	68f9      	ldr	r1, [r7, #12]
 8000a1a:	4808      	ldr	r0, [pc, #32]	; (8000a3c <Receiver_Task+0x94>)
 8000a1c:	f002 fa78 	bl	8002f10 <HAL_UART_Transmit>

			vPortFree(ptr);  // free the string memory
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f003 fa77 	bl	8003f14 <vPortFree>
		}

		vPortFree(Rptrtostruct);  // free the structure memory
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 fa73 	bl	8003f14 <vPortFree>

		vTaskDelay(TickDelay);
 8000a2e:	6978      	ldr	r0, [r7, #20]
 8000a30:	f004 f8c2 	bl	8004bb8 <vTaskDelay>
	{
 8000a34:	e7bf      	b.n	80009b6 <Receiver_Task+0xe>
 8000a36:	bf00      	nop
 8000a38:	080060ac 	.word	0x080060ac
 8000a3c:	20001010 	.word	0x20001010
 8000a40:	20001004 	.word	0x20001004
 8000a44:	080060e8 	.word	0x080060e8

08000a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d101      	bne.n	8000a5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a5a:	f000 f961 	bl	8000d20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40012c00 	.word	0x40012c00

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <Error_Handler+0x6>

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6613      	str	r3, [r2, #96]	; 0x60
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	210f      	movs	r1, #15
 8000aae:	f06f 0001 	mvn.w	r0, #1
 8000ab2:	f000 fa0b 	bl	8000ecc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <HAL_UART_MspInit+0x7c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d128      	bne.n	8000b38 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_UART_MspInit+0x80>)
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_UART_MspInit+0x80>)
 8000aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	6593      	str	r3, [r2, #88]	; 0x58
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_UART_MspInit+0x80>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_UART_MspInit+0x80>)
 8000b00:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_UART_MspInit+0x80>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_UART_MspInit+0x80>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b16:	230c      	movs	r3, #12
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b26:	2307      	movs	r3, #7
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f000 f9f4 	bl	8000f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2019      	movs	r0, #25
 8000b5e:	f000 f9b5 	bl	8000ecc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b62:	2019      	movs	r0, #25
 8000b64:	f000 f9ce 	bl	8000f04 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b68:	4a1e      	ldr	r2, [pc, #120]	; (8000be4 <HAL_InitTick+0x9c>)
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <HAL_InitTick+0x9c>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b72:	6613      	str	r3, [r2, #96]	; 0x60
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <HAL_InitTick+0x9c>)
 8000b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b80:	f107 0210 	add.w	r2, r7, #16
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 f95e 	bl	8001e4c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b90:	f001 f946 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8000b94:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b98:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <HAL_InitTick+0xa0>)
 8000b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9e:	0c9b      	lsrs	r3, r3, #18
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_InitTick+0xa4>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000ba8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_InitTick+0xa4>)
 8000bac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_InitTick+0xa4>)
 8000bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_InitTick+0xa4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_InitTick+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <HAL_InitTick+0xa4>)
 8000bc6:	f001 fe83 	bl	80028d0 <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d104      	bne.n	8000bda <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <HAL_InitTick+0xa4>)
 8000bd2:	f001 fedf 	bl	8002994 <HAL_TIM_Base_Start_IT>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3730      	adds	r7, #48	; 0x30
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000
 8000be8:	431bde83 	.word	0x431bde83
 8000bec:	20001094 	.word	0x20001094
 8000bf0:	40012c00 	.word	0x40012c00

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c26:	f001 ff25 	bl	8002a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20001094 	.word	0x20001094

08000c34 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x50>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x16>
		heap_end = &end;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <_sbrk+0x50>)
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <_sbrk+0x54>)
 8000c48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <_sbrk+0x50>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <_sbrk+0x50>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4413      	add	r3, r2
 8000c58:	466a      	mov	r2, sp
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d907      	bls.n	8000c6e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000c5e:	f004 fd05 	bl	800566c <__errno>
 8000c62:	4602      	mov	r2, r0
 8000c64:	230c      	movs	r3, #12
 8000c66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c6c:	e006      	b.n	8000c7c <_sbrk+0x48>
	}

	heap_end += incr;
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <_sbrk+0x50>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a03      	ldr	r2, [pc, #12]	; (8000c84 <_sbrk+0x50>)
 8000c78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200002e8 	.word	0x200002e8
 8000c88:	200010e8 	.word	0x200010e8

08000c8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c90:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <SystemInit+0x5c>)
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <SystemInit+0x5c>)
 8000c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ca0:	4a12      	ldr	r2, [pc, #72]	; (8000cec <SystemInit+0x60>)
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <SystemInit+0x60>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <SystemInit+0x60>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <SystemInit+0x60>)
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <SystemInit+0x60>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cbc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cc0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <SystemInit+0x60>)
 8000cc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cc8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <SystemInit+0x60>)
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <SystemInit+0x60>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SystemInit+0x60>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfa:	2003      	movs	r0, #3
 8000cfc:	f000 f8db 	bl	8000eb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ff21 	bl	8000b48 <HAL_InitTick>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d002      	beq.n	8000d12 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	e001      	b.n	8000d16 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d12:	f7ff feaf 	bl	8000a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d16:	79fb      	ldrb	r3, [r7, #7]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	200010e0 	.word	0x200010e0

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	200010e0 	.word	0x200010e0

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db0b      	blt.n	8000dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd6:	4909      	ldr	r1, [pc, #36]	; (8000dfc <__NVIC_EnableIRQ+0x38>)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	095b      	lsrs	r3, r3, #5
 8000dde:	79fa      	ldrb	r2, [r7, #7]
 8000de0:	f002 021f 	and.w	r2, r2, #31
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	490d      	ldr	r1, [pc, #52]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	4909      	ldr	r1, [pc, #36]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	1e5a      	subs	r2, r3, #1
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	401a      	ands	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	1e59      	subs	r1, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ff4e 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ede:	f7ff ff63 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000ee2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	6978      	ldr	r0, [r7, #20]
 8000eea:	f7ff ffb3 	bl	8000e54 <NVIC_EncodePriority>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff82 	bl	8000e00 <__NVIC_SetPriority>
}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff56 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2e:	e17f      	b.n	8001230 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	2101      	movs	r1, #1
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 8171 	beq.w	800122a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d00b      	beq.n	8000f68 <HAL_GPIO_Init+0x48>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d007      	beq.n	8000f68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f5c:	2b11      	cmp	r3, #17
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b12      	cmp	r3, #18
 8000f66:	d130      	bne.n	8000fca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	f003 0201 	and.w	r2, r3, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d118      	bne.n	8001008 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	08db      	lsrs	r3, r3, #3
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x128>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b12      	cmp	r3, #18
 8001046:	d123      	bne.n	8001090 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	08da      	lsrs	r2, r3, #3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3208      	adds	r2, #8
 8001050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	6939      	ldr	r1, [r7, #16]
 800108c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0203 	and.w	r2, r3, #3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80ac 	beq.w	800122a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	4a5e      	ldr	r2, [pc, #376]	; (800124c <HAL_GPIO_Init+0x32c>)
 80010d4:	4b5d      	ldr	r3, [pc, #372]	; (800124c <HAL_GPIO_Init+0x32c>)
 80010d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6613      	str	r3, [r2, #96]	; 0x60
 80010de:	4b5b      	ldr	r3, [pc, #364]	; (800124c <HAL_GPIO_Init+0x32c>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ea:	4a59      	ldr	r2, [pc, #356]	; (8001250 <HAL_GPIO_Init+0x330>)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001114:	d025      	beq.n	8001162 <HAL_GPIO_Init+0x242>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <HAL_GPIO_Init+0x334>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d01f      	beq.n	800115e <HAL_GPIO_Init+0x23e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4d      	ldr	r2, [pc, #308]	; (8001258 <HAL_GPIO_Init+0x338>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d019      	beq.n	800115a <HAL_GPIO_Init+0x23a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4c      	ldr	r2, [pc, #304]	; (800125c <HAL_GPIO_Init+0x33c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0x236>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <HAL_GPIO_Init+0x340>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x232>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4a      	ldr	r2, [pc, #296]	; (8001264 <HAL_GPIO_Init+0x344>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x22e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a49      	ldr	r2, [pc, #292]	; (8001268 <HAL_GPIO_Init+0x348>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x22a>
 8001146:	2306      	movs	r3, #6
 8001148:	e00c      	b.n	8001164 <HAL_GPIO_Init+0x244>
 800114a:	2307      	movs	r3, #7
 800114c:	e00a      	b.n	8001164 <HAL_GPIO_Init+0x244>
 800114e:	2305      	movs	r3, #5
 8001150:	e008      	b.n	8001164 <HAL_GPIO_Init+0x244>
 8001152:	2304      	movs	r3, #4
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x244>
 8001156:	2303      	movs	r3, #3
 8001158:	e004      	b.n	8001164 <HAL_GPIO_Init+0x244>
 800115a:	2302      	movs	r3, #2
 800115c:	e002      	b.n	8001164 <HAL_GPIO_Init+0x244>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <HAL_GPIO_Init+0x244>
 8001162:	2300      	movs	r3, #0
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	f002 0203 	and.w	r2, r2, #3
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	4093      	lsls	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001174:	4936      	ldr	r1, [pc, #216]	; (8001250 <HAL_GPIO_Init+0x330>)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3302      	adds	r3, #2
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001182:	4b3a      	ldr	r3, [pc, #232]	; (800126c <HAL_GPIO_Init+0x34c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011a6:	4a31      	ldr	r2, [pc, #196]	; (800126c <HAL_GPIO_Init+0x34c>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011ac:	4b2f      	ldr	r3, [pc, #188]	; (800126c <HAL_GPIO_Init+0x34c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d0:	4a26      	ldr	r2, [pc, #152]	; (800126c <HAL_GPIO_Init+0x34c>)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <HAL_GPIO_Init+0x34c>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <HAL_GPIO_Init+0x34c>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_GPIO_Init+0x34c>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001224:	4a11      	ldr	r2, [pc, #68]	; (800126c <HAL_GPIO_Init+0x34c>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3301      	adds	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa22 f303 	lsr.w	r3, r2, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	f47f ae78 	bne.w	8000f30 <HAL_GPIO_Init+0x10>
  }
}
 8001240:	bf00      	nop
 8001242:	371c      	adds	r7, #28
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000
 8001254:	48000400 	.word	0x48000400
 8001258:	48000800 	.word	0x48000800
 800125c:	48000c00 	.word	0x48000c00
 8001260:	48001000 	.word	0x48001000
 8001264:	48001400 	.word	0x48001400
 8001268:	48001800 	.word	0x48001800
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <HAL_PWREx_GetVoltageRange+0x18>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40007000 	.word	0x40007000

0800128c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800129a:	d130      	bne.n	80012fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012a8:	d038      	beq.n	800131c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012aa:	4a20      	ldr	r2, [pc, #128]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2232      	movs	r2, #50	; 0x32
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	0c9b      	lsrs	r3, r3, #18
 80012cc:	3301      	adds	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d0:	e002      	b.n	80012d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e4:	d102      	bne.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f2      	bne.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f8:	d110      	bne.n	800131c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e00f      	b.n	800131e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800130a:	d007      	beq.n	800131c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40007000 	.word	0x40007000
 8001330:	20000000 	.word	0x20000000
 8001334:	431bde83 	.word	0x431bde83

08001338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e3d4      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134a:	4ba1      	ldr	r3, [pc, #644]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001354:	4b9e      	ldr	r3, [pc, #632]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 80e4 	beq.w	8001534 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <HAL_RCC_OscConfig+0x4a>
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	2b0c      	cmp	r3, #12
 8001376:	f040 808b 	bne.w	8001490 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2b01      	cmp	r3, #1
 800137e:	f040 8087 	bne.w	8001490 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001382:	4b93      	ldr	r3, [pc, #588]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <HAL_RCC_OscConfig+0x62>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e3ac      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1a      	ldr	r2, [r3, #32]
 800139e:	4b8c      	ldr	r3, [pc, #560]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d004      	beq.n	80013b4 <HAL_RCC_OscConfig+0x7c>
 80013aa:	4b89      	ldr	r3, [pc, #548]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013b2:	e005      	b.n	80013c0 <HAL_RCC_OscConfig+0x88>
 80013b4:	4b86      	ldr	r3, [pc, #536]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80013b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d923      	bls.n	800140c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fd71 	bl	8001eb0 <RCC_SetFlashLatencyFromMSIRange>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e38d      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d8:	4a7d      	ldr	r2, [pc, #500]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80013da:	4b7d      	ldr	r3, [pc, #500]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f043 0308 	orr.w	r3, r3, #8
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	497a      	ldr	r1, [pc, #488]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80013e6:	4b7a      	ldr	r3, [pc, #488]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f6:	4976      	ldr	r1, [pc, #472]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80013f8:	4b75      	ldr	r3, [pc, #468]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	4313      	orrs	r3, r2
 8001408:	604b      	str	r3, [r1, #4]
 800140a:	e025      	b.n	8001458 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800140c:	4a70      	ldr	r2, [pc, #448]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800140e:	4b70      	ldr	r3, [pc, #448]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	496d      	ldr	r1, [pc, #436]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800141a:	4b6d      	ldr	r3, [pc, #436]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800142a:	4969      	ldr	r1, [pc, #420]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800142c:	4b68      	ldr	r3, [pc, #416]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	4313      	orrs	r3, r2
 800143c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d109      	bne.n	8001458 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 fd31 	bl	8001eb0 <RCC_SetFlashLatencyFromMSIRange>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e34d      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001458:	f000 fc36 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 800145c:	4601      	mov	r1, r0
 800145e:	4b5c      	ldr	r3, [pc, #368]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	4a5a      	ldr	r2, [pc, #360]	; (80015d4 <HAL_RCC_OscConfig+0x29c>)
 800146a:	5cd3      	ldrb	r3, [r2, r3]
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	fa21 f303 	lsr.w	r3, r1, r3
 8001474:	4a58      	ldr	r2, [pc, #352]	; (80015d8 <HAL_RCC_OscConfig+0x2a0>)
 8001476:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001478:	4b58      	ldr	r3, [pc, #352]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fb63 	bl	8000b48 <HAL_InitTick>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d052      	beq.n	8001532 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	e331      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d032      	beq.n	80014fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001498:	4a4d      	ldr	r2, [pc, #308]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800149a:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fc50 	bl	8000d48 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ac:	f7ff fc4c 	bl	8000d48 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e31a      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ca:	4a41      	ldr	r2, [pc, #260]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80014cc:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	493e      	ldr	r1, [pc, #248]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80014d8:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e8:	4939      	ldr	r1, [pc, #228]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80014ea:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
 80014fc:	e01a      	b.n	8001534 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014fe:	4a34      	ldr	r2, [pc, #208]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001500:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800150a:	f7ff fc1d 	bl	8000d48 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001512:	f7ff fc19 	bl	8000d48 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e2e7      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f0      	bne.n	8001512 <HAL_RCC_OscConfig+0x1da>
 8001530:	e000      	b.n	8001534 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001532:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d074      	beq.n	800162a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2b08      	cmp	r3, #8
 8001544:	d005      	beq.n	8001552 <HAL_RCC_OscConfig+0x21a>
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2b0c      	cmp	r3, #12
 800154a:	d10e      	bne.n	800156a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d10b      	bne.n	800156a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001552:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d064      	beq.n	8001628 <HAL_RCC_OscConfig+0x2f0>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d160      	bne.n	8001628 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e2c4      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x24a>
 8001574:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	e01d      	b.n	80015be <HAL_RCC_OscConfig+0x286>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800158a:	d10c      	bne.n	80015a6 <HAL_RCC_OscConfig+0x26e>
 800158c:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	e00b      	b.n	80015be <HAL_RCC_OscConfig+0x286>
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d01c      	beq.n	8001600 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c6:	f7ff fbbf 	bl	8000d48 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015cc:	e011      	b.n	80015f2 <HAL_RCC_OscConfig+0x2ba>
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	08006138 	.word	0x08006138
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fbb2 	bl	8000d48 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e280      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015f2:	4baf      	ldr	r3, [pc, #700]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x2a8>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fba2 	bl	8000d48 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fb9e 	bl	8000d48 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e26c      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800161a:	4ba5      	ldr	r3, [pc, #660]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x2d0>
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d060      	beq.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b04      	cmp	r3, #4
 800163a:	d005      	beq.n	8001648 <HAL_RCC_OscConfig+0x310>
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b0c      	cmp	r3, #12
 8001640:	d119      	bne.n	8001676 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d116      	bne.n	8001676 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001648:	4b99      	ldr	r3, [pc, #612]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_RCC_OscConfig+0x328>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e249      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4993      	ldr	r1, [pc, #588]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 8001662:	4b93      	ldr	r3, [pc, #588]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	061b      	lsls	r3, r3, #24
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001674:	e040      	b.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d023      	beq.n	80016c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800167e:	4a8c      	ldr	r2, [pc, #560]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 8001680:	4b8b      	ldr	r3, [pc, #556]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168a:	f7ff fb5d 	bl	8000d48 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fb59 	bl	8000d48 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e227      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a4:	4b82      	ldr	r3, [pc, #520]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b0:	497f      	ldr	r1, [pc, #508]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 80016b2:	4b7f      	ldr	r3, [pc, #508]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	061b      	lsls	r3, r3, #24
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
 80016c4:	e018      	b.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c6:	4a7a      	ldr	r2, [pc, #488]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 80016c8:	4b79      	ldr	r3, [pc, #484]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d2:	f7ff fb39 	bl	8000d48 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff fb35 	bl	8000d48 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e203      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ec:	4b70      	ldr	r3, [pc, #448]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f0      	bne.n	80016da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d03c      	beq.n	800177e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01c      	beq.n	8001746 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170c:	4a68      	ldr	r2, [pc, #416]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 800170e:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 8001710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171c:	f7ff fb14 	bl	8000d48 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001724:	f7ff fb10 	bl	8000d48 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e1de      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001736:	4b5e      	ldr	r3, [pc, #376]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 8001738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0ef      	beq.n	8001724 <HAL_RCC_OscConfig+0x3ec>
 8001744:	e01b      	b.n	800177e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001746:	4a5a      	ldr	r2, [pc, #360]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 800174a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001756:	f7ff faf7 	bl	8000d48 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175e:	f7ff faf3 	bl	8000d48 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1c1      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001770:	4b4f      	ldr	r3, [pc, #316]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 8001772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ef      	bne.n	800175e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 80a6 	beq.w	80018d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001790:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10d      	bne.n	80017b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179c:	4a44      	ldr	r2, [pc, #272]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 800179e:	4b44      	ldr	r3, [pc, #272]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a6:	6593      	str	r3, [r2, #88]	; 0x58
 80017a8:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b4:	2301      	movs	r3, #1
 80017b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b8:	4b3e      	ldr	r3, [pc, #248]	; (80018b4 <HAL_RCC_OscConfig+0x57c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d118      	bne.n	80017f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017c4:	4a3b      	ldr	r2, [pc, #236]	; (80018b4 <HAL_RCC_OscConfig+0x57c>)
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <HAL_RCC_OscConfig+0x57c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d0:	f7ff faba 	bl	8000d48 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d8:	f7ff fab6 	bl	8000d48 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e184      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ea:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <HAL_RCC_OscConfig+0x57c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d108      	bne.n	8001810 <HAL_RCC_OscConfig+0x4d8>
 80017fe:	4a2c      	ldr	r2, [pc, #176]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 8001800:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800180e:	e024      	b.n	800185a <HAL_RCC_OscConfig+0x522>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b05      	cmp	r3, #5
 8001816:	d110      	bne.n	800183a <HAL_RCC_OscConfig+0x502>
 8001818:	4a25      	ldr	r2, [pc, #148]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 800181a:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 800181c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001828:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 800182c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001838:	e00f      	b.n	800185a <HAL_RCC_OscConfig+0x522>
 800183a:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800184a:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 800184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001852:	f023 0304 	bic.w	r3, r3, #4
 8001856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d016      	beq.n	8001890 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001862:	f7ff fa71 	bl	8000d48 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001868:	e00a      	b.n	8001880 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186a:	f7ff fa6d 	bl	8000d48 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f241 3288 	movw	r2, #5000	; 0x1388
 8001878:	4293      	cmp	r3, r2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e139      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_OscConfig+0x578>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0ed      	beq.n	800186a <HAL_RCC_OscConfig+0x532>
 800188e:	e01a      	b.n	80018c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff fa5a 	bl	8000d48 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001896:	e00f      	b.n	80018b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7ff fa56 	bl	8000d48 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d906      	bls.n	80018b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e122      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b8:	4b90      	ldr	r3, [pc, #576]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 80018ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1e8      	bne.n	8001898 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018c6:	7ffb      	ldrb	r3, [r7, #31]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d105      	bne.n	80018d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018cc:	4a8b      	ldr	r2, [pc, #556]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 80018ce:	4b8b      	ldr	r3, [pc, #556]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8108 	beq.w	8001af2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	f040 80d0 	bne.w	8001a8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018ec:	4b83      	ldr	r3, [pc, #524]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f003 0203 	and.w	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d130      	bne.n	8001962 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	3b01      	subs	r3, #1
 800190c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d127      	bne.n	8001962 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d11f      	bne.n	8001962 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800192c:	2a07      	cmp	r2, #7
 800192e:	bf14      	ite	ne
 8001930:	2201      	movne	r2, #1
 8001932:	2200      	moveq	r2, #0
 8001934:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001936:	4293      	cmp	r3, r2
 8001938:	d113      	bne.n	8001962 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001944:	085b      	lsrs	r3, r3, #1
 8001946:	3b01      	subs	r3, #1
 8001948:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d109      	bne.n	8001962 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	3b01      	subs	r3, #1
 800195c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d06e      	beq.n	8001a40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b0c      	cmp	r3, #12
 8001966:	d069      	beq.n	8001a3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001968:	4b64      	ldr	r3, [pc, #400]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d105      	bne.n	8001980 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001974:	4b61      	ldr	r3, [pc, #388]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0b7      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001984:	4a5d      	ldr	r2, [pc, #372]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001986:	4b5d      	ldr	r3, [pc, #372]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800198e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001990:	f7ff f9da 	bl	8000d48 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff f9d6 	bl	8000d48 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e0a4      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019aa:	4b54      	ldr	r3, [pc, #336]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b6:	4851      	ldr	r0, [pc, #324]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 80019b8:	4b50      	ldr	r3, [pc, #320]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <HAL_RCC_OscConfig+0x7c8>)
 80019be:	4013      	ands	r3, r2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019c8:	3a01      	subs	r2, #1
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	4311      	orrs	r1, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019d2:	0212      	lsls	r2, r2, #8
 80019d4:	4311      	orrs	r1, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019da:	0852      	lsrs	r2, r2, #1
 80019dc:	3a01      	subs	r2, #1
 80019de:	0552      	lsls	r2, r2, #21
 80019e0:	4311      	orrs	r1, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019e6:	0852      	lsrs	r2, r2, #1
 80019e8:	3a01      	subs	r2, #1
 80019ea:	0652      	lsls	r2, r2, #25
 80019ec:	4311      	orrs	r1, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019f2:	0912      	lsrs	r2, r2, #4
 80019f4:	0452      	lsls	r2, r2, #17
 80019f6:	430a      	orrs	r2, r1
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019fc:	4a3f      	ldr	r2, [pc, #252]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 80019fe:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a08:	4a3c      	ldr	r2, [pc, #240]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001a0a:	4b3c      	ldr	r3, [pc, #240]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a14:	f7ff f998 	bl	8000d48 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff f994 	bl	8000d48 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e062      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2e:	4b33      	ldr	r3, [pc, #204]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3a:	e05a      	b.n	8001af2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e059      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d152      	bne.n	8001af2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a4c:	4a2b      	ldr	r2, [pc, #172]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001a4e:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a58:	4a28      	ldr	r2, [pc, #160]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001a5a:	4b28      	ldr	r3, [pc, #160]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a64:	f7ff f970 	bl	8000d48 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff f96c 	bl	8000d48 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e03a      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x734>
 8001a8a:	e032      	b.n	8001af2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d02d      	beq.n	8001aee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4a1a      	ldr	r2, [pc, #104]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d105      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001aaa:	4a14      	ldr	r2, [pc, #80]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f023 0303 	bic.w	r3, r3, #3
 8001ab4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ab6:	4a11      	ldr	r2, [pc, #68]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f93f 	bl	8000d48 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ace:	f7ff f93b 	bl	8000d48 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e009      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_RCC_OscConfig+0x7c4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x796>
 8001aec:	e001      	b.n	8001af2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021000 	.word	0x40021000
 8001b00:	f99d808c 	.word	0xf99d808c

08001b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0c8      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b18:	4b66      	ldr	r3, [pc, #408]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0207 	and.w	r2, r3, #7
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d210      	bcs.n	8001b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4963      	ldr	r1, [pc, #396]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b28:	4b62      	ldr	r3, [pc, #392]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 0207 	bic.w	r2, r3, #7
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b36:	4b5f      	ldr	r3, [pc, #380]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0207 	and.w	r2, r3, #7
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0b0      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d04c      	beq.n	8001bee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5c:	4b56      	ldr	r3, [pc, #344]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d121      	bne.n	8001bac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e09e      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b74:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d115      	bne.n	8001bac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e092      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b8c:	4b4a      	ldr	r3, [pc, #296]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e086      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b9c:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e07e      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bac:	4942      	ldr	r1, [pc, #264]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bae:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 0203 	bic.w	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bbe:	f7ff f8c3 	bl	8000d48 <HAL_GetTick>
 8001bc2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc6:	f7ff f8bf 	bl	8000d48 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e066      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 020c 	and.w	r2, r3, #12
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d1eb      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d008      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bfa:	492f      	ldr	r1, [pc, #188]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0207 	and.w	r2, r3, #7
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d910      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4926      	ldr	r1, [pc, #152]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 0207 	bic.w	r2, r3, #7
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0207 	and.w	r2, r3, #7
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e036      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c48:	491b      	ldr	r1, [pc, #108]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c66:	4914      	ldr	r1, [pc, #80]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c7a:	f000 f825 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c7e:	4601      	mov	r1, r0
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c8c:	5cd3      	ldrb	r3, [r2, r3]
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	fa21 f303 	lsr.w	r3, r1, r3
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe ff52 	bl	8000b48 <HAL_InitTick>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ca8:	7afb      	ldrb	r3, [r7, #11]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	08006138 	.word	0x08006138
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4b3a      	ldr	r3, [pc, #232]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x34>
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d121      	bne.n	8001d3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d11e      	bne.n	8001d3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cfc:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d08:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e005      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d18:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d24:	4a2a      	ldr	r2, [pc, #168]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10d      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	e004      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d4c:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b0c      	cmp	r3, #12
 8001d54:	d133      	bne.n	8001dbe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d002      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0xa4>
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d003      	beq.n	8001d72 <HAL_RCC_GetSysClockFreq+0xaa>
 8001d6a:	e005      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d6e:	617b      	str	r3, [r7, #20]
      break;
 8001d70:	e005      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d74:	617b      	str	r3, [r7, #20]
      break;
 8001d76:	e002      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	617b      	str	r3, [r7, #20]
      break;
 8001d7c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	3301      	adds	r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	fb02 f203 	mul.w	r2, r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0e5b      	lsrs	r3, r3, #25
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	3301      	adds	r3, #1
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3724      	adds	r7, #36	; 0x24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	08006150 	.word	0x08006150
 8001dd4:	00f42400 	.word	0x00f42400
 8001dd8:	007a1200 	.word	0x007a1200

08001ddc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000000 	.word	0x20000000

08001df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001df8:	f7ff fff0 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001dfc:	4601      	mov	r1, r0
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	08006148 	.word	0x08006148

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e24:	f7ff ffda 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001e28:	4601      	mov	r1, r0
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0adb      	lsrs	r3, r3, #11
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e36:	5cd3      	ldrb	r3, [r2, r3]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	08006148 	.word	0x08006148

08001e4c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	220f      	movs	r2, #15
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0203 	and.w	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <HAL_RCC_GetClockConfig+0x60>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0207 	and.w	r2, r3, #7
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	601a      	str	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40022000 	.word	0x40022000

08001eb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ec8:	f7ff f9d2 	bl	8001270 <HAL_PWREx_GetVoltageRange>
 8001ecc:	6178      	str	r0, [r7, #20]
 8001ece:	e014      	b.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ed0:	4a25      	ldr	r2, [pc, #148]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed2:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eda:	6593      	str	r3, [r2, #88]	; 0x58
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ee8:	f7ff f9c2 	bl	8001270 <HAL_PWREx_GetVoltageRange>
 8001eec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f00:	d10b      	bne.n	8001f1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b80      	cmp	r3, #128	; 0x80
 8001f06:	d919      	bls.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2ba0      	cmp	r3, #160	; 0xa0
 8001f0c:	d902      	bls.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f0e:	2302      	movs	r3, #2
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	e013      	b.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f14:	2301      	movs	r3, #1
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	e010      	b.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b80      	cmp	r3, #128	; 0x80
 8001f1e:	d902      	bls.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f20:	2303      	movs	r3, #3
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	e00a      	b.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b80      	cmp	r3, #128	; 0x80
 8001f2a:	d102      	bne.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	e004      	b.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b70      	cmp	r3, #112	; 0x70
 8001f36:	d101      	bne.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f38:	2301      	movs	r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f3c:	490b      	ldr	r1, [pc, #44]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 0207 	bic.w	r2, r3, #7
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0207 	and.w	r2, r3, #7
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d001      	beq.n	8001f5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40022000 	.word	0x40022000

08001f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f78:	2300      	movs	r3, #0
 8001f7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d03f      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f94:	d01c      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f9a:	d802      	bhi.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00e      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001fa0:	e01f      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001fa2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fa6:	d003      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001fa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fac:	d01c      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001fae:	e018      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fb0:	4a85      	ldr	r2, [pc, #532]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fb2:	4b85      	ldr	r3, [pc, #532]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fbc:	e015      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fab9 	bl	800253c <RCCEx_PLLSAI1_Config>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fce:	e00c      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3320      	adds	r3, #32
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fba0 	bl	800271c <RCCEx_PLLSAI2_Config>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fe0:	e003      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fe6:	e000      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fea:	7cfb      	ldrb	r3, [r7, #19]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10b      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ff0:	4975      	ldr	r1, [pc, #468]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ff2:	4b75      	ldr	r3, [pc, #468]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002006:	e001      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03f      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800201c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002020:	d01c      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002022:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002026:	d802      	bhi.n	800202e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00e      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800202c:	e01f      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800202e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002032:	d003      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002034:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002038:	d01c      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800203a:	e018      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800203c:	4a62      	ldr	r2, [pc, #392]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800203e:	4b62      	ldr	r3, [pc, #392]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002046:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002048:	e015      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3304      	adds	r3, #4
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f000 fa73 	bl	800253c <RCCEx_PLLSAI1_Config>
 8002056:	4603      	mov	r3, r0
 8002058:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800205a:	e00c      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3320      	adds	r3, #32
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fb5a 	bl	800271c <RCCEx_PLLSAI2_Config>
 8002068:	4603      	mov	r3, r0
 800206a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800206c:	e003      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	74fb      	strb	r3, [r7, #19]
      break;
 8002072:	e000      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002076:	7cfb      	ldrb	r3, [r7, #19]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10b      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800207c:	4952      	ldr	r1, [pc, #328]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800207e:	4b52      	ldr	r3, [pc, #328]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002084:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002092:	e001      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a0 	beq.w	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00d      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	4a41      	ldr	r2, [pc, #260]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ca:	6593      	str	r3, [r2, #88]	; 0x58
 80020cc:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d8:	2301      	movs	r3, #1
 80020da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020dc:	4a3b      	ldr	r2, [pc, #236]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80020de:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020e8:	f7fe fe2e 	bl	8000d48 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ee:	e009      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f0:	f7fe fe2a 	bl	8000d48 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d902      	bls.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	74fb      	strb	r3, [r7, #19]
        break;
 8002102:	e005      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002104:	4b31      	ldr	r3, [pc, #196]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0ef      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d15c      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002116:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002120:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01f      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	429a      	cmp	r2, r3
 8002132:	d019      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002134:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800213e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002140:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002150:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002160:	4a19      	ldr	r2, [pc, #100]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d016      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002172:	f7fe fde9 	bl	8000d48 <HAL_GetTick>
 8002176:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002178:	e00b      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7fe fde5 	bl	8000d48 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d902      	bls.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	74fb      	strb	r3, [r7, #19]
            break;
 8002190:	e006      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0ec      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021be:	e009      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	74bb      	strb	r3, [r7, #18]
 80021c4:	e006      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d4:	7c7b      	ldrb	r3, [r7, #17]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4a9e      	ldr	r2, [pc, #632]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021dc:	4b9d      	ldr	r3, [pc, #628]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f2:	4998      	ldr	r1, [pc, #608]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021f4:	4b97      	ldr	r3, [pc, #604]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	f023 0203 	bic.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002214:	498f      	ldr	r1, [pc, #572]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002216:	4b8f      	ldr	r3, [pc, #572]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221c:	f023 020c 	bic.w	r2, r3, #12
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002236:	4987      	ldr	r1, [pc, #540]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002238:	4b86      	ldr	r3, [pc, #536]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002258:	497e      	ldr	r1, [pc, #504]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800225a:	4b7e      	ldr	r3, [pc, #504]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002260:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800227a:	4976      	ldr	r1, [pc, #472]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800227c:	4b75      	ldr	r3, [pc, #468]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800229c:	496d      	ldr	r1, [pc, #436]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800229e:	4b6d      	ldr	r3, [pc, #436]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022be:	4965      	ldr	r1, [pc, #404]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022c0:	4b64      	ldr	r3, [pc, #400]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022e0:	495c      	ldr	r1, [pc, #368]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022e2:	4b5c      	ldr	r3, [pc, #368]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002302:	4954      	ldr	r1, [pc, #336]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002324:	494b      	ldr	r1, [pc, #300]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002326:	4b4b      	ldr	r3, [pc, #300]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002346:	4943      	ldr	r1, [pc, #268]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002348:	4b42      	ldr	r3, [pc, #264]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d028      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002368:	493a      	ldr	r1, [pc, #232]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800236a:	4b3a      	ldr	r3, [pc, #232]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002370:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002386:	d106      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002388:	4a32      	ldr	r2, [pc, #200]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800238a:	4b32      	ldr	r3, [pc, #200]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002392:	60d3      	str	r3, [r2, #12]
 8002394:	e011      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800239a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800239e:	d10c      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f8c8 	bl	800253c <RCCEx_PLLSAI1_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d028      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023c6:	4923      	ldr	r1, [pc, #140]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023e4:	d106      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e6:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f0:	60d3      	str	r3, [r2, #12]
 80023f2:	e011      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	2101      	movs	r1, #1
 8002404:	4618      	mov	r0, r3
 8002406:	f000 f899 	bl	800253c <RCCEx_PLLSAI1_Config>
 800240a:	4603      	mov	r3, r0
 800240c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d02b      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002424:	490b      	ldr	r1, [pc, #44]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002442:	d109      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002444:	4a03      	ldr	r2, [pc, #12]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002446:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800244e:	60d3      	str	r3, [r2, #12]
 8002450:	e014      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002460:	d10c      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3304      	adds	r3, #4
 8002466:	2101      	movs	r1, #1
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f867 	bl	800253c <RCCEx_PLLSAI1_Config>
 800246e:	4603      	mov	r3, r0
 8002470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d02f      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002488:	492b      	ldr	r1, [pc, #172]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800248a:	4b2b      	ldr	r3, [pc, #172]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024a6:	d10d      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3304      	adds	r3, #4
 80024ac:	2102      	movs	r1, #2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f844 	bl	800253c <RCCEx_PLLSAI1_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d014      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	74bb      	strb	r3, [r7, #18]
 80024c2:	e011      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3320      	adds	r3, #32
 80024d2:	2102      	movs	r1, #2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 f921 	bl	800271c <RCCEx_PLLSAI2_Config>
 80024da:	4603      	mov	r3, r0
 80024dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024f4:	4910      	ldr	r1, [pc, #64]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002516:	4908      	ldr	r1, [pc, #32]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800252e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000

0800253c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800254a:	4b73      	ldr	r3, [pc, #460]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d018      	beq.n	8002588 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002556:	4b70      	ldr	r3, [pc, #448]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0203 	and.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d10d      	bne.n	8002582 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
       ||
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800256e:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
       ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d044      	beq.n	800260c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e041      	b.n	800260c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d00c      	beq.n	80025aa <RCCEx_PLLSAI1_Config+0x6e>
 8002590:	2b03      	cmp	r3, #3
 8002592:	d013      	beq.n	80025bc <RCCEx_PLLSAI1_Config+0x80>
 8002594:	2b01      	cmp	r3, #1
 8002596:	d120      	bne.n	80025da <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002598:	4b5f      	ldr	r3, [pc, #380]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d11d      	bne.n	80025e0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a8:	e01a      	b.n	80025e0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025aa:	4b5b      	ldr	r3, [pc, #364]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d116      	bne.n	80025e4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ba:	e013      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025bc:	4b56      	ldr	r3, [pc, #344]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10f      	bne.n	80025e8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025c8:	4b53      	ldr	r3, [pc, #332]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025d8:	e006      	b.n	80025e8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
      break;
 80025de:	e004      	b.n	80025ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80025e0:	bf00      	nop
 80025e2:	e002      	b.n	80025ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80025e4:	bf00      	nop
 80025e6:	e000      	b.n	80025ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80025e8:	bf00      	nop
    }

    if(status == HAL_OK)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10d      	bne.n	800260c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025f0:	4849      	ldr	r0, [pc, #292]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025f2:	4b49      	ldr	r3, [pc, #292]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	430b      	orrs	r3, r1
 8002608:	4313      	orrs	r3, r2
 800260a:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d17d      	bne.n	800270e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002612:	4a41      	ldr	r2, [pc, #260]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002614:	4b40      	ldr	r3, [pc, #256]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800261c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261e:	f7fe fb93 	bl	8000d48 <HAL_GetTick>
 8002622:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002624:	e009      	b.n	800263a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002626:	f7fe fb8f 	bl	8000d48 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d902      	bls.n	800263a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	73fb      	strb	r3, [r7, #15]
        break;
 8002638:	e005      	b.n	8002646 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800263a:	4b37      	ldr	r3, [pc, #220]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ef      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d160      	bne.n	800270e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d111      	bne.n	8002676 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002652:	4831      	ldr	r0, [pc, #196]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002654:	4b30      	ldr	r3, [pc, #192]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800265c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6892      	ldr	r2, [r2, #8]
 8002664:	0211      	lsls	r1, r2, #8
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68d2      	ldr	r2, [r2, #12]
 800266a:	0912      	lsrs	r2, r2, #4
 800266c:	0452      	lsls	r2, r2, #17
 800266e:	430a      	orrs	r2, r1
 8002670:	4313      	orrs	r3, r2
 8002672:	6103      	str	r3, [r0, #16]
 8002674:	e027      	b.n	80026c6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d112      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800267c:	4826      	ldr	r0, [pc, #152]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 800267e:	4b26      	ldr	r3, [pc, #152]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002686:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6892      	ldr	r2, [r2, #8]
 800268e:	0211      	lsls	r1, r2, #8
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6912      	ldr	r2, [r2, #16]
 8002694:	0852      	lsrs	r2, r2, #1
 8002696:	3a01      	subs	r2, #1
 8002698:	0552      	lsls	r2, r2, #21
 800269a:	430a      	orrs	r2, r1
 800269c:	4313      	orrs	r3, r2
 800269e:	6103      	str	r3, [r0, #16]
 80026a0:	e011      	b.n	80026c6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a2:	481d      	ldr	r0, [pc, #116]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026a4:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6892      	ldr	r2, [r2, #8]
 80026b4:	0211      	lsls	r1, r2, #8
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6952      	ldr	r2, [r2, #20]
 80026ba:	0852      	lsrs	r2, r2, #1
 80026bc:	3a01      	subs	r2, #1
 80026be:	0652      	lsls	r2, r2, #25
 80026c0:	430a      	orrs	r2, r1
 80026c2:	4313      	orrs	r3, r2
 80026c4:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026c6:	4a14      	ldr	r2, [pc, #80]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7fe fb39 	bl	8000d48 <HAL_GetTick>
 80026d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026d8:	e009      	b.n	80026ee <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026da:	f7fe fb35 	bl	8000d48 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d902      	bls.n	80026ee <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	73fb      	strb	r3, [r7, #15]
          break;
 80026ec:	e005      	b.n	80026fa <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0ef      	beq.n	80026da <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002700:	4905      	ldr	r1, [pc, #20]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800270e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000

0800271c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800272a:	4b68      	ldr	r3, [pc, #416]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d018      	beq.n	8002768 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002736:	4b65      	ldr	r3, [pc, #404]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f003 0203 	and.w	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d10d      	bne.n	8002762 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
       ||
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800274e:	4b5f      	ldr	r3, [pc, #380]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
       ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d044      	beq.n	80027ec <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	e041      	b.n	80027ec <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d00c      	beq.n	800278a <RCCEx_PLLSAI2_Config+0x6e>
 8002770:	2b03      	cmp	r3, #3
 8002772:	d013      	beq.n	800279c <RCCEx_PLLSAI2_Config+0x80>
 8002774:	2b01      	cmp	r3, #1
 8002776:	d120      	bne.n	80027ba <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002778:	4b54      	ldr	r3, [pc, #336]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d11d      	bne.n	80027c0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002788:	e01a      	b.n	80027c0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800278a:	4b50      	ldr	r3, [pc, #320]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279a:	e013      	b.n	80027c4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800279c:	4b4b      	ldr	r3, [pc, #300]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10f      	bne.n	80027c8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027a8:	4b48      	ldr	r3, [pc, #288]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027b8:	e006      	b.n	80027c8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
      break;
 80027be:	e004      	b.n	80027ca <RCCEx_PLLSAI2_Config+0xae>
      break;
 80027c0:	bf00      	nop
 80027c2:	e002      	b.n	80027ca <RCCEx_PLLSAI2_Config+0xae>
      break;
 80027c4:	bf00      	nop
 80027c6:	e000      	b.n	80027ca <RCCEx_PLLSAI2_Config+0xae>
      break;
 80027c8:	bf00      	nop
    }

    if(status == HAL_OK)
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10d      	bne.n	80027ec <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027d0:	483e      	ldr	r0, [pc, #248]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80027d2:	4b3e      	ldr	r3, [pc, #248]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6819      	ldr	r1, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	430b      	orrs	r3, r1
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d167      	bne.n	80028c2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027f2:	4a36      	ldr	r2, [pc, #216]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80027f4:	4b35      	ldr	r3, [pc, #212]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027fe:	f7fe faa3 	bl	8000d48 <HAL_GetTick>
 8002802:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002804:	e009      	b.n	800281a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002806:	f7fe fa9f 	bl	8000d48 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d902      	bls.n	800281a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	73fb      	strb	r3, [r7, #15]
        break;
 8002818:	e005      	b.n	8002826 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800281a:	4b2c      	ldr	r3, [pc, #176]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1ef      	bne.n	8002806 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d14a      	bne.n	80028c2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d111      	bne.n	8002856 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002832:	4826      	ldr	r0, [pc, #152]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002834:	4b25      	ldr	r3, [pc, #148]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800283c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6892      	ldr	r2, [r2, #8]
 8002844:	0211      	lsls	r1, r2, #8
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68d2      	ldr	r2, [r2, #12]
 800284a:	0912      	lsrs	r2, r2, #4
 800284c:	0452      	lsls	r2, r2, #17
 800284e:	430a      	orrs	r2, r1
 8002850:	4313      	orrs	r3, r2
 8002852:	6143      	str	r3, [r0, #20]
 8002854:	e011      	b.n	800287a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002856:	481d      	ldr	r0, [pc, #116]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002858:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002860:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6892      	ldr	r2, [r2, #8]
 8002868:	0211      	lsls	r1, r2, #8
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6912      	ldr	r2, [r2, #16]
 800286e:	0852      	lsrs	r2, r2, #1
 8002870:	3a01      	subs	r2, #1
 8002872:	0652      	lsls	r2, r2, #25
 8002874:	430a      	orrs	r2, r1
 8002876:	4313      	orrs	r3, r2
 8002878:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800287a:	4a14      	ldr	r2, [pc, #80]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800287c:	4b13      	ldr	r3, [pc, #76]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fa5f 	bl	8000d48 <HAL_GetTick>
 800288a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800288c:	e009      	b.n	80028a2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800288e:	f7fe fa5b 	bl	8000d48 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d902      	bls.n	80028a2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	73fb      	strb	r3, [r7, #15]
          break;
 80028a0:	e005      	b.n	80028ae <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ef      	beq.n	800288e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028b4:	4905      	ldr	r1, [pc, #20]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000

080028d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e049      	b.n	8002976 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f841 	bl	800297e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3304      	adds	r3, #4
 800290c:	4619      	mov	r1, r3
 800290e:	4610      	mov	r0, r2
 8002910:	f000 f9f8 	bl	8002d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d001      	beq.n	80029ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e04f      	b.n	8002a4c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	68d2      	ldr	r2, [r2, #12]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a23      	ldr	r2, [pc, #140]	; (8002a58 <HAL_TIM_Base_Start_IT+0xc4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01d      	beq.n	8002a0a <HAL_TIM_Base_Start_IT+0x76>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d6:	d018      	beq.n	8002a0a <HAL_TIM_Base_Start_IT+0x76>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <HAL_TIM_Base_Start_IT+0xc8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_TIM_Base_Start_IT+0x76>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <HAL_TIM_Base_Start_IT+0xcc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00e      	beq.n	8002a0a <HAL_TIM_Base_Start_IT+0x76>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <HAL_TIM_Base_Start_IT+0xd0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_TIM_Base_Start_IT+0x76>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <HAL_TIM_Base_Start_IT+0xd4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d004      	beq.n	8002a0a <HAL_TIM_Base_Start_IT+0x76>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <HAL_TIM_Base_Start_IT+0xd8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d115      	bne.n	8002a36 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b06      	cmp	r3, #6
 8002a1a:	d015      	beq.n	8002a48 <HAL_TIM_Base_Start_IT+0xb4>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a22:	d011      	beq.n	8002a48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a34:	e008      	b.n	8002a48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	f042 0201 	orr.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e000      	b.n	8002a4a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40012c00 	.word	0x40012c00
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	40000800 	.word	0x40000800
 8002a64:	40000c00 	.word	0x40000c00
 8002a68:	40013400 	.word	0x40013400
 8002a6c:	40014000 	.word	0x40014000
 8002a70:	00010007 	.word	0x00010007

08002a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d122      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d11b      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0202 	mvn.w	r2, #2
 8002aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f905 	bl	8002cc6 <HAL_TIM_IC_CaptureCallback>
 8002abc:	e005      	b.n	8002aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f8f7 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f908 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d122      	bne.n	8002b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d11b      	bne.n	8002b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0204 	mvn.w	r2, #4
 8002af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f8db 	bl	8002cc6 <HAL_TIM_IC_CaptureCallback>
 8002b10:	e005      	b.n	8002b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f8cd 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f8de 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d122      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d11b      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0208 	mvn.w	r2, #8
 8002b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f8b1 	bl	8002cc6 <HAL_TIM_IC_CaptureCallback>
 8002b64:	e005      	b.n	8002b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f8a3 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f8b4 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b10      	cmp	r3, #16
 8002b84:	d122      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d11b      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0210 	mvn.w	r2, #16
 8002b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f887 	bl	8002cc6 <HAL_TIM_IC_CaptureCallback>
 8002bb8:	e005      	b.n	8002bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f879 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f88a 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d107      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0201 	mvn.w	r2, #1
 8002bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fd ff28 	bl	8000a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c02:	2b80      	cmp	r3, #128	; 0x80
 8002c04:	d10e      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c10:	2b80      	cmp	r3, #128	; 0x80
 8002c12:	d107      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f914 	bl	8002e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c32:	d10e      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b80      	cmp	r3, #128	; 0x80
 8002c40:	d107      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f907 	bl	8002e60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b40      	cmp	r3, #64	; 0x40
 8002c5e:	d10e      	bne.n	8002c7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6a:	2b40      	cmp	r3, #64	; 0x40
 8002c6c:	d107      	bne.n	8002c7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f838 	bl	8002cee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d10e      	bne.n	8002caa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d107      	bne.n	8002caa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f06f 0220 	mvn.w	r2, #32
 8002ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f8c7 	bl	8002e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a40      	ldr	r2, [pc, #256]	; (8002e18 <TIM_Base_SetConfig+0x114>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d013      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d22:	d00f      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a3d      	ldr	r2, [pc, #244]	; (8002e1c <TIM_Base_SetConfig+0x118>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00b      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a3c      	ldr	r2, [pc, #240]	; (8002e20 <TIM_Base_SetConfig+0x11c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d007      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a3b      	ldr	r2, [pc, #236]	; (8002e24 <TIM_Base_SetConfig+0x120>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a3a      	ldr	r2, [pc, #232]	; (8002e28 <TIM_Base_SetConfig+0x124>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d108      	bne.n	8002d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a2f      	ldr	r2, [pc, #188]	; (8002e18 <TIM_Base_SetConfig+0x114>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01f      	beq.n	8002d9e <TIM_Base_SetConfig+0x9a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d01b      	beq.n	8002d9e <TIM_Base_SetConfig+0x9a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a2c      	ldr	r2, [pc, #176]	; (8002e1c <TIM_Base_SetConfig+0x118>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d017      	beq.n	8002d9e <TIM_Base_SetConfig+0x9a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a2b      	ldr	r2, [pc, #172]	; (8002e20 <TIM_Base_SetConfig+0x11c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <TIM_Base_SetConfig+0x9a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a2a      	ldr	r2, [pc, #168]	; (8002e24 <TIM_Base_SetConfig+0x120>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00f      	beq.n	8002d9e <TIM_Base_SetConfig+0x9a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a29      	ldr	r2, [pc, #164]	; (8002e28 <TIM_Base_SetConfig+0x124>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00b      	beq.n	8002d9e <TIM_Base_SetConfig+0x9a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a28      	ldr	r2, [pc, #160]	; (8002e2c <TIM_Base_SetConfig+0x128>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <TIM_Base_SetConfig+0x9a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a27      	ldr	r2, [pc, #156]	; (8002e30 <TIM_Base_SetConfig+0x12c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d003      	beq.n	8002d9e <TIM_Base_SetConfig+0x9a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a26      	ldr	r2, [pc, #152]	; (8002e34 <TIM_Base_SetConfig+0x130>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d108      	bne.n	8002db0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a10      	ldr	r2, [pc, #64]	; (8002e18 <TIM_Base_SetConfig+0x114>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00f      	beq.n	8002dfc <TIM_Base_SetConfig+0xf8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <TIM_Base_SetConfig+0x124>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <TIM_Base_SetConfig+0xf8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a11      	ldr	r2, [pc, #68]	; (8002e2c <TIM_Base_SetConfig+0x128>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d007      	beq.n	8002dfc <TIM_Base_SetConfig+0xf8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a10      	ldr	r2, [pc, #64]	; (8002e30 <TIM_Base_SetConfig+0x12c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <TIM_Base_SetConfig+0xf8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a0f      	ldr	r2, [pc, #60]	; (8002e34 <TIM_Base_SetConfig+0x130>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d103      	bne.n	8002e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	615a      	str	r2, [r3, #20]
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40012c00 	.word	0x40012c00
 8002e1c:	40000400 	.word	0x40000400
 8002e20:	40000800 	.word	0x40000800
 8002e24:	40000c00 	.word	0x40000c00
 8002e28:	40013400 	.word	0x40013400
 8002e2c:	40014000 	.word	0x40014000
 8002e30:	40014400 	.word	0x40014400
 8002e34:	40014800 	.word	0x40014800

08002e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e040      	b.n	8002f08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd fe14 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2224      	movs	r2, #36	; 0x24
 8002ea0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	f022 0201 	bic.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f8c0 	bl	8003038 <UART_SetConfig>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e022      	b.n	8002f08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fb38 	bl	8003540 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	6852      	ldr	r2, [r2, #4]
 8002eda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	6892      	ldr	r2, [r2, #8]
 8002eea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fbbf 	bl	8003684 <UART_CheckIdleState>
 8002f06:	4603      	mov	r3, r0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	; 0x28
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	f040 8082 	bne.w	800302e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_UART_Transmit+0x26>
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e07a      	b.n	8003030 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_UART_Transmit+0x38>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e073      	b.n	8003030 <HAL_UART_Transmit+0x120>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2221      	movs	r2, #33	; 0x21
 8002f5c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f5e:	f7fd fef3 	bl	8000d48 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	88fa      	ldrh	r2, [r7, #6]
 8002f68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	88fa      	ldrh	r2, [r7, #6]
 8002f70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7c:	d108      	bne.n	8002f90 <HAL_UART_Transmit+0x80>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d104      	bne.n	8002f90 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	e003      	b.n	8002f98 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002fa0:	e02d      	b.n	8002ffe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fbb2 	bl	8003716 <UART_WaitOnFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e039      	b.n	8003030 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	8812      	ldrh	r2, [r2, #0]
 8002fca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fce:	b292      	uxth	r2, r2
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	e008      	b.n	8002fec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	7812      	ldrb	r2, [r2, #0]
 8002fe2:	b292      	uxth	r2, r2
 8002fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1cb      	bne.n	8002fa2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2200      	movs	r2, #0
 8003012:	2140      	movs	r1, #64	; 0x40
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 fb7e 	bl	8003716 <UART_WaitOnFlagUntilTimeout>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e005      	b.n	8003030 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800302e:	2302      	movs	r3, #2
  }
}
 8003030:	4618      	mov	r0, r3
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003038:	b5b0      	push	{r4, r5, r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	4313      	orrs	r3, r2
 800305a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6819      	ldr	r1, [r3, #0]
 8003066:	4bac      	ldr	r3, [pc, #688]	; (8003318 <UART_SetConfig+0x2e0>)
 8003068:	400b      	ands	r3, r1
 800306a:	69f9      	ldr	r1, [r7, #28]
 800306c:	430b      	orrs	r3, r1
 800306e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	6852      	ldr	r2, [r2, #4]
 800307a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68d2      	ldr	r2, [r2, #12]
 8003082:	430a      	orrs	r2, r1
 8003084:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4aa2      	ldr	r2, [pc, #648]	; (800331c <UART_SetConfig+0x2e4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d004      	beq.n	80030a0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	4313      	orrs	r3, r2
 800309e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	6892      	ldr	r2, [r2, #8]
 80030aa:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80030ae:	69fa      	ldr	r2, [r7, #28]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a99      	ldr	r2, [pc, #612]	; (8003320 <UART_SetConfig+0x2e8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d122      	bne.n	8003104 <UART_SetConfig+0xcc>
 80030be:	4b99      	ldr	r3, [pc, #612]	; (8003324 <UART_SetConfig+0x2ec>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d817      	bhi.n	80030fc <UART_SetConfig+0xc4>
 80030cc:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <UART_SetConfig+0x9c>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	080030e5 	.word	0x080030e5
 80030d8:	080030f1 	.word	0x080030f1
 80030dc:	080030eb 	.word	0x080030eb
 80030e0:	080030f7 	.word	0x080030f7
 80030e4:	2301      	movs	r3, #1
 80030e6:	76fb      	strb	r3, [r7, #27]
 80030e8:	e0e8      	b.n	80032bc <UART_SetConfig+0x284>
 80030ea:	2302      	movs	r3, #2
 80030ec:	76fb      	strb	r3, [r7, #27]
 80030ee:	e0e5      	b.n	80032bc <UART_SetConfig+0x284>
 80030f0:	2304      	movs	r3, #4
 80030f2:	76fb      	strb	r3, [r7, #27]
 80030f4:	e0e2      	b.n	80032bc <UART_SetConfig+0x284>
 80030f6:	2308      	movs	r3, #8
 80030f8:	76fb      	strb	r3, [r7, #27]
 80030fa:	e0df      	b.n	80032bc <UART_SetConfig+0x284>
 80030fc:	2310      	movs	r3, #16
 80030fe:	76fb      	strb	r3, [r7, #27]
 8003100:	bf00      	nop
 8003102:	e0db      	b.n	80032bc <UART_SetConfig+0x284>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a87      	ldr	r2, [pc, #540]	; (8003328 <UART_SetConfig+0x2f0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d134      	bne.n	8003178 <UART_SetConfig+0x140>
 800310e:	4b85      	ldr	r3, [pc, #532]	; (8003324 <UART_SetConfig+0x2ec>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b0c      	cmp	r3, #12
 800311a:	d829      	bhi.n	8003170 <UART_SetConfig+0x138>
 800311c:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <UART_SetConfig+0xec>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003159 	.word	0x08003159
 8003128:	08003171 	.word	0x08003171
 800312c:	08003171 	.word	0x08003171
 8003130:	08003171 	.word	0x08003171
 8003134:	08003165 	.word	0x08003165
 8003138:	08003171 	.word	0x08003171
 800313c:	08003171 	.word	0x08003171
 8003140:	08003171 	.word	0x08003171
 8003144:	0800315f 	.word	0x0800315f
 8003148:	08003171 	.word	0x08003171
 800314c:	08003171 	.word	0x08003171
 8003150:	08003171 	.word	0x08003171
 8003154:	0800316b 	.word	0x0800316b
 8003158:	2300      	movs	r3, #0
 800315a:	76fb      	strb	r3, [r7, #27]
 800315c:	e0ae      	b.n	80032bc <UART_SetConfig+0x284>
 800315e:	2302      	movs	r3, #2
 8003160:	76fb      	strb	r3, [r7, #27]
 8003162:	e0ab      	b.n	80032bc <UART_SetConfig+0x284>
 8003164:	2304      	movs	r3, #4
 8003166:	76fb      	strb	r3, [r7, #27]
 8003168:	e0a8      	b.n	80032bc <UART_SetConfig+0x284>
 800316a:	2308      	movs	r3, #8
 800316c:	76fb      	strb	r3, [r7, #27]
 800316e:	e0a5      	b.n	80032bc <UART_SetConfig+0x284>
 8003170:	2310      	movs	r3, #16
 8003172:	76fb      	strb	r3, [r7, #27]
 8003174:	bf00      	nop
 8003176:	e0a1      	b.n	80032bc <UART_SetConfig+0x284>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a6b      	ldr	r2, [pc, #428]	; (800332c <UART_SetConfig+0x2f4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d120      	bne.n	80031c4 <UART_SetConfig+0x18c>
 8003182:	4b68      	ldr	r3, [pc, #416]	; (8003324 <UART_SetConfig+0x2ec>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003188:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800318c:	2b10      	cmp	r3, #16
 800318e:	d00f      	beq.n	80031b0 <UART_SetConfig+0x178>
 8003190:	2b10      	cmp	r3, #16
 8003192:	d802      	bhi.n	800319a <UART_SetConfig+0x162>
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <UART_SetConfig+0x16c>
 8003198:	e010      	b.n	80031bc <UART_SetConfig+0x184>
 800319a:	2b20      	cmp	r3, #32
 800319c:	d005      	beq.n	80031aa <UART_SetConfig+0x172>
 800319e:	2b30      	cmp	r3, #48	; 0x30
 80031a0:	d009      	beq.n	80031b6 <UART_SetConfig+0x17e>
 80031a2:	e00b      	b.n	80031bc <UART_SetConfig+0x184>
 80031a4:	2300      	movs	r3, #0
 80031a6:	76fb      	strb	r3, [r7, #27]
 80031a8:	e088      	b.n	80032bc <UART_SetConfig+0x284>
 80031aa:	2302      	movs	r3, #2
 80031ac:	76fb      	strb	r3, [r7, #27]
 80031ae:	e085      	b.n	80032bc <UART_SetConfig+0x284>
 80031b0:	2304      	movs	r3, #4
 80031b2:	76fb      	strb	r3, [r7, #27]
 80031b4:	e082      	b.n	80032bc <UART_SetConfig+0x284>
 80031b6:	2308      	movs	r3, #8
 80031b8:	76fb      	strb	r3, [r7, #27]
 80031ba:	e07f      	b.n	80032bc <UART_SetConfig+0x284>
 80031bc:	2310      	movs	r3, #16
 80031be:	76fb      	strb	r3, [r7, #27]
 80031c0:	bf00      	nop
 80031c2:	e07b      	b.n	80032bc <UART_SetConfig+0x284>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a59      	ldr	r2, [pc, #356]	; (8003330 <UART_SetConfig+0x2f8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d120      	bne.n	8003210 <UART_SetConfig+0x1d8>
 80031ce:	4b55      	ldr	r3, [pc, #340]	; (8003324 <UART_SetConfig+0x2ec>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d00f      	beq.n	80031fc <UART_SetConfig+0x1c4>
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d802      	bhi.n	80031e6 <UART_SetConfig+0x1ae>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <UART_SetConfig+0x1b8>
 80031e4:	e010      	b.n	8003208 <UART_SetConfig+0x1d0>
 80031e6:	2b80      	cmp	r3, #128	; 0x80
 80031e8:	d005      	beq.n	80031f6 <UART_SetConfig+0x1be>
 80031ea:	2bc0      	cmp	r3, #192	; 0xc0
 80031ec:	d009      	beq.n	8003202 <UART_SetConfig+0x1ca>
 80031ee:	e00b      	b.n	8003208 <UART_SetConfig+0x1d0>
 80031f0:	2300      	movs	r3, #0
 80031f2:	76fb      	strb	r3, [r7, #27]
 80031f4:	e062      	b.n	80032bc <UART_SetConfig+0x284>
 80031f6:	2302      	movs	r3, #2
 80031f8:	76fb      	strb	r3, [r7, #27]
 80031fa:	e05f      	b.n	80032bc <UART_SetConfig+0x284>
 80031fc:	2304      	movs	r3, #4
 80031fe:	76fb      	strb	r3, [r7, #27]
 8003200:	e05c      	b.n	80032bc <UART_SetConfig+0x284>
 8003202:	2308      	movs	r3, #8
 8003204:	76fb      	strb	r3, [r7, #27]
 8003206:	e059      	b.n	80032bc <UART_SetConfig+0x284>
 8003208:	2310      	movs	r3, #16
 800320a:	76fb      	strb	r3, [r7, #27]
 800320c:	bf00      	nop
 800320e:	e055      	b.n	80032bc <UART_SetConfig+0x284>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a47      	ldr	r2, [pc, #284]	; (8003334 <UART_SetConfig+0x2fc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d124      	bne.n	8003264 <UART_SetConfig+0x22c>
 800321a:	4b42      	ldr	r3, [pc, #264]	; (8003324 <UART_SetConfig+0x2ec>)
 800321c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003228:	d012      	beq.n	8003250 <UART_SetConfig+0x218>
 800322a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800322e:	d802      	bhi.n	8003236 <UART_SetConfig+0x1fe>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <UART_SetConfig+0x20c>
 8003234:	e012      	b.n	800325c <UART_SetConfig+0x224>
 8003236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323a:	d006      	beq.n	800324a <UART_SetConfig+0x212>
 800323c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003240:	d009      	beq.n	8003256 <UART_SetConfig+0x21e>
 8003242:	e00b      	b.n	800325c <UART_SetConfig+0x224>
 8003244:	2300      	movs	r3, #0
 8003246:	76fb      	strb	r3, [r7, #27]
 8003248:	e038      	b.n	80032bc <UART_SetConfig+0x284>
 800324a:	2302      	movs	r3, #2
 800324c:	76fb      	strb	r3, [r7, #27]
 800324e:	e035      	b.n	80032bc <UART_SetConfig+0x284>
 8003250:	2304      	movs	r3, #4
 8003252:	76fb      	strb	r3, [r7, #27]
 8003254:	e032      	b.n	80032bc <UART_SetConfig+0x284>
 8003256:	2308      	movs	r3, #8
 8003258:	76fb      	strb	r3, [r7, #27]
 800325a:	e02f      	b.n	80032bc <UART_SetConfig+0x284>
 800325c:	2310      	movs	r3, #16
 800325e:	76fb      	strb	r3, [r7, #27]
 8003260:	bf00      	nop
 8003262:	e02b      	b.n	80032bc <UART_SetConfig+0x284>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2c      	ldr	r2, [pc, #176]	; (800331c <UART_SetConfig+0x2e4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d124      	bne.n	80032b8 <UART_SetConfig+0x280>
 800326e:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <UART_SetConfig+0x2ec>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003274:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327c:	d012      	beq.n	80032a4 <UART_SetConfig+0x26c>
 800327e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003282:	d802      	bhi.n	800328a <UART_SetConfig+0x252>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d007      	beq.n	8003298 <UART_SetConfig+0x260>
 8003288:	e012      	b.n	80032b0 <UART_SetConfig+0x278>
 800328a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800328e:	d006      	beq.n	800329e <UART_SetConfig+0x266>
 8003290:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003294:	d009      	beq.n	80032aa <UART_SetConfig+0x272>
 8003296:	e00b      	b.n	80032b0 <UART_SetConfig+0x278>
 8003298:	2300      	movs	r3, #0
 800329a:	76fb      	strb	r3, [r7, #27]
 800329c:	e00e      	b.n	80032bc <UART_SetConfig+0x284>
 800329e:	2302      	movs	r3, #2
 80032a0:	76fb      	strb	r3, [r7, #27]
 80032a2:	e00b      	b.n	80032bc <UART_SetConfig+0x284>
 80032a4:	2304      	movs	r3, #4
 80032a6:	76fb      	strb	r3, [r7, #27]
 80032a8:	e008      	b.n	80032bc <UART_SetConfig+0x284>
 80032aa:	2308      	movs	r3, #8
 80032ac:	76fb      	strb	r3, [r7, #27]
 80032ae:	e005      	b.n	80032bc <UART_SetConfig+0x284>
 80032b0:	2310      	movs	r3, #16
 80032b2:	76fb      	strb	r3, [r7, #27]
 80032b4:	bf00      	nop
 80032b6:	e001      	b.n	80032bc <UART_SetConfig+0x284>
 80032b8:	2310      	movs	r3, #16
 80032ba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a16      	ldr	r2, [pc, #88]	; (800331c <UART_SetConfig+0x2e4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	f040 8080 	bne.w	80033c8 <UART_SetConfig+0x390>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032c8:	7efb      	ldrb	r3, [r7, #27]
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d836      	bhi.n	800333c <UART_SetConfig+0x304>
 80032ce:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <UART_SetConfig+0x29c>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	080032f9 	.word	0x080032f9
 80032d8:	0800333d 	.word	0x0800333d
 80032dc:	08003301 	.word	0x08003301
 80032e0:	0800333d 	.word	0x0800333d
 80032e4:	08003307 	.word	0x08003307
 80032e8:	0800333d 	.word	0x0800333d
 80032ec:	0800333d 	.word	0x0800333d
 80032f0:	0800333d 	.word	0x0800333d
 80032f4:	0800330f 	.word	0x0800330f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f8:	f7fe fd7c 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 80032fc:	6178      	str	r0, [r7, #20]
        break;
 80032fe:	e022      	b.n	8003346 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003300:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <UART_SetConfig+0x300>)
 8003302:	617b      	str	r3, [r7, #20]
        break;
 8003304:	e01f      	b.n	8003346 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003306:	f7fe fcdf 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 800330a:	6178      	str	r0, [r7, #20]
        break;
 800330c:	e01b      	b.n	8003346 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800330e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003312:	617b      	str	r3, [r7, #20]
        break;
 8003314:	e017      	b.n	8003346 <UART_SetConfig+0x30e>
 8003316:	bf00      	nop
 8003318:	efff69f3 	.word	0xefff69f3
 800331c:	40008000 	.word	0x40008000
 8003320:	40013800 	.word	0x40013800
 8003324:	40021000 	.word	0x40021000
 8003328:	40004400 	.word	0x40004400
 800332c:	40004800 	.word	0x40004800
 8003330:	40004c00 	.word	0x40004c00
 8003334:	40005000 	.word	0x40005000
 8003338:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	76bb      	strb	r3, [r7, #26]
        break;
 8003344:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80eb 	beq.w	8003524 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	441a      	add	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	429a      	cmp	r2, r3
 800335c:	d805      	bhi.n	800336a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	429a      	cmp	r2, r3
 8003368:	d202      	bcs.n	8003370 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	76bb      	strb	r3, [r7, #26]
 800336e:	e0d9      	b.n	8003524 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	461a      	mov	r2, r3
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	021d      	lsls	r5, r3, #8
 800337a:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800337e:	0214      	lsls	r4, r2, #8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	461a      	mov	r2, r3
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	18a0      	adds	r0, r4, r2
 800338e:	eb45 0103 	adc.w	r1, r5, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f04f 0400 	mov.w	r4, #0
 800339a:	461a      	mov	r2, r3
 800339c:	4623      	mov	r3, r4
 800339e:	f7fc ff6f 	bl	8000280 <__aeabi_uldivmod>
 80033a2:	4603      	mov	r3, r0
 80033a4:	460c      	mov	r4, r1
 80033a6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ae:	d308      	bcc.n	80033c2 <UART_SetConfig+0x38a>
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b6:	d204      	bcs.n	80033c2 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	e0b0      	b.n	8003524 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	76bb      	strb	r3, [r7, #26]
 80033c6:	e0ad      	b.n	8003524 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d0:	d15c      	bne.n	800348c <UART_SetConfig+0x454>
  {
    switch (clocksource)
 80033d2:	7efb      	ldrb	r3, [r7, #27]
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d828      	bhi.n	800342a <UART_SetConfig+0x3f2>
 80033d8:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <UART_SetConfig+0x3a8>)
 80033da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033de:	bf00      	nop
 80033e0:	08003405 	.word	0x08003405
 80033e4:	0800340d 	.word	0x0800340d
 80033e8:	08003415 	.word	0x08003415
 80033ec:	0800342b 	.word	0x0800342b
 80033f0:	0800341b 	.word	0x0800341b
 80033f4:	0800342b 	.word	0x0800342b
 80033f8:	0800342b 	.word	0x0800342b
 80033fc:	0800342b 	.word	0x0800342b
 8003400:	08003423 	.word	0x08003423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003404:	f7fe fcf6 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8003408:	6178      	str	r0, [r7, #20]
        break;
 800340a:	e013      	b.n	8003434 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800340c:	f7fe fd08 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8003410:	6178      	str	r0, [r7, #20]
        break;
 8003412:	e00f      	b.n	8003434 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003414:	4b49      	ldr	r3, [pc, #292]	; (800353c <UART_SetConfig+0x504>)
 8003416:	617b      	str	r3, [r7, #20]
        break;
 8003418:	e00c      	b.n	8003434 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341a:	f7fe fc55 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 800341e:	6178      	str	r0, [r7, #20]
        break;
 8003420:	e008      	b.n	8003434 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003426:	617b      	str	r3, [r7, #20]
        break;
 8003428:	e004      	b.n	8003434 <UART_SetConfig+0x3fc>
      default:
        pclk = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	76bb      	strb	r3, [r7, #26]
        break;
 8003432:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d074      	beq.n	8003524 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	005a      	lsls	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	441a      	add	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	b29b      	uxth	r3, r3
 8003450:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b0f      	cmp	r3, #15
 8003456:	d916      	bls.n	8003486 <UART_SetConfig+0x44e>
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345e:	d212      	bcs.n	8003486 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	b29b      	uxth	r3, r3
 8003464:	f023 030f 	bic.w	r3, r3, #15
 8003468:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	085b      	lsrs	r3, r3, #1
 800346e:	b29b      	uxth	r3, r3
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	b29a      	uxth	r2, r3
 8003476:	89fb      	ldrh	r3, [r7, #14]
 8003478:	4313      	orrs	r3, r2
 800347a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	89fa      	ldrh	r2, [r7, #14]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	e04e      	b.n	8003524 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	76bb      	strb	r3, [r7, #26]
 800348a:	e04b      	b.n	8003524 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800348c:	7efb      	ldrb	r3, [r7, #27]
 800348e:	2b08      	cmp	r3, #8
 8003490:	d827      	bhi.n	80034e2 <UART_SetConfig+0x4aa>
 8003492:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <UART_SetConfig+0x460>)
 8003494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003498:	080034bd 	.word	0x080034bd
 800349c:	080034c5 	.word	0x080034c5
 80034a0:	080034cd 	.word	0x080034cd
 80034a4:	080034e3 	.word	0x080034e3
 80034a8:	080034d3 	.word	0x080034d3
 80034ac:	080034e3 	.word	0x080034e3
 80034b0:	080034e3 	.word	0x080034e3
 80034b4:	080034e3 	.word	0x080034e3
 80034b8:	080034db 	.word	0x080034db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034bc:	f7fe fc9a 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 80034c0:	6178      	str	r0, [r7, #20]
        break;
 80034c2:	e013      	b.n	80034ec <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034c4:	f7fe fcac 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 80034c8:	6178      	str	r0, [r7, #20]
        break;
 80034ca:	e00f      	b.n	80034ec <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <UART_SetConfig+0x504>)
 80034ce:	617b      	str	r3, [r7, #20]
        break;
 80034d0:	e00c      	b.n	80034ec <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034d2:	f7fe fbf9 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 80034d6:	6178      	str	r0, [r7, #20]
        break;
 80034d8:	e008      	b.n	80034ec <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034de:	617b      	str	r3, [r7, #20]
        break;
 80034e0:	e004      	b.n	80034ec <UART_SetConfig+0x4b4>
      default:
        pclk = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	76bb      	strb	r3, [r7, #26]
        break;
 80034ea:	bf00      	nop
    }

    if (pclk != 0U)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d018      	beq.n	8003524 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	085a      	lsrs	r2, r3, #1
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	441a      	add	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	b29b      	uxth	r3, r3
 8003506:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b0f      	cmp	r3, #15
 800350c:	d908      	bls.n	8003520 <UART_SetConfig+0x4e8>
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003514:	d204      	bcs.n	8003520 <UART_SetConfig+0x4e8>
      {
        huart->Instance->BRR = usartdiv;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	e001      	b.n	8003524 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003530:	7ebb      	ldrb	r3, [r7, #26]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bdb0      	pop	{r4, r5, r7, pc}
 800353a:	bf00      	nop
 800353c:	00f42400 	.word	0x00f42400

08003540 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	6852      	ldr	r2, [r2, #4]
 800355e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	6852      	ldr	r2, [r2, #4]
 8003580:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003588:	430a      	orrs	r2, r1
 800358a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	6852      	ldr	r2, [r2, #4]
 80035a2:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	6852      	ldr	r2, [r2, #4]
 80035c4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	6892      	ldr	r2, [r2, #8]
 80035e6:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035ee:	430a      	orrs	r2, r1
 80035f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	6892      	ldr	r2, [r2, #8]
 8003608:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003610:	430a      	orrs	r2, r1
 8003612:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01a      	beq.n	8003656 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	6852      	ldr	r2, [r2, #4]
 800362a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800363e:	d10a      	bne.n	8003656 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	6852      	ldr	r2, [r2, #4]
 800364a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	6852      	ldr	r2, [r2, #4]
 800366c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003674:	430a      	orrs	r2, r1
 8003676:	605a      	str	r2, [r3, #4]
  }
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af02      	add	r7, sp, #8
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003694:	f7fd fb58 	bl	8000d48 <HAL_GetTick>
 8003698:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d10e      	bne.n	80036c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f82d 	bl	8003716 <UART_WaitOnFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e023      	b.n	800370e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d10e      	bne.n	80036f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f817 	bl	8003716 <UART_WaitOnFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e00d      	b.n	800370e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	603b      	str	r3, [r7, #0]
 8003722:	4613      	mov	r3, r2
 8003724:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003726:	e05e      	b.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800372e:	d05a      	beq.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003730:	f7fd fb0a 	bl	8000d48 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	1ad2      	subs	r2, r2, r3
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	429a      	cmp	r2, r3
 800373e:	d802      	bhi.n	8003746 <UART_WaitOnFlagUntilTimeout+0x30>
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d11b      	bne.n	800377e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003754:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	6892      	ldr	r2, [r2, #8]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e043      	b.n	8003806 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d02c      	beq.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800379a:	d124      	bne.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037a4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037b4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	6892      	ldr	r2, [r2, #8]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e00f      	b.n	8003806 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69da      	ldr	r2, [r3, #28]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	401a      	ands	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	bf0c      	ite	eq
 80037f6:	2301      	moveq	r3, #1
 80037f8:	2300      	movne	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	429a      	cmp	r2, r3
 8003802:	d091      	beq.n	8003728 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f103 0208 	add.w	r2, r3, #8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003826:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f103 0208 	add.w	r2, r3, #8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f103 0208 	add.w	r2, r3, #8
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	601a      	str	r2, [r3, #0]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c6:	d103      	bne.n	80038d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	e00c      	b.n	80038ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3308      	adds	r3, #8
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e002      	b.n	80038de <vListInsert+0x2e>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d9f6      	bls.n	80038d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	601a      	str	r2, [r3, #0]
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003922:	b480      	push	{r7}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6892      	ldr	r2, [r2, #8]
 8003938:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6852      	ldr	r2, [r2, #4]
 8003942:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	429a      	cmp	r2, r3
 800394c:	d103      	bne.n	8003956 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	1e5a      	subs	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3b04      	subs	r3, #4
 8003988:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3b04      	subs	r3, #4
 8003996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f023 0201 	bic.w	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3b04      	subs	r3, #4
 80039a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80039a8:	4a0c      	ldr	r2, [pc, #48]	; (80039dc <pxPortInitialiseStack+0x64>)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3b14      	subs	r3, #20
 80039b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3b04      	subs	r3, #4
 80039be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f06f 0202 	mvn.w	r2, #2
 80039c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3b20      	subs	r3, #32
 80039cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80039ce:	68fb      	ldr	r3, [r7, #12]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	080039e1 	.word	0x080039e1

080039e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80039ea:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <prvTaskExitError+0x50>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039f2:	d009      	beq.n	8003a08 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	e7fe      	b.n	8003a06 <prvTaskExitError+0x26>
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a1a:	bf00      	nop
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0fc      	beq.n	8003a1c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	2000000c 	.word	0x2000000c
	...

08003a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003a40:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <pxCurrentTCBConst2>)
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	6808      	ldr	r0, [r1, #0]
 8003a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4a:	f380 8809 	msr	PSP, r0
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f04f 0000 	mov.w	r0, #0
 8003a56:	f380 8811 	msr	BASEPRI, r0
 8003a5a:	4770      	bx	lr
 8003a5c:	f3af 8000 	nop.w

08003a60 <pxCurrentTCBConst2>:
 8003a60:	20000ecc 	.word	0x20000ecc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop

08003a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003a68:	4808      	ldr	r0, [pc, #32]	; (8003a8c <prvPortStartFirstTask+0x24>)
 8003a6a:	6800      	ldr	r0, [r0, #0]
 8003a6c:	6800      	ldr	r0, [r0, #0]
 8003a6e:	f380 8808 	msr	MSP, r0
 8003a72:	f04f 0000 	mov.w	r0, #0
 8003a76:	f380 8814 	msr	CONTROL, r0
 8003a7a:	b662      	cpsie	i
 8003a7c:	b661      	cpsie	f
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	df00      	svc	0
 8003a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a8a:	bf00      	nop
 8003a8c:	e000ed08 	.word	0xe000ed08

08003a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a96:	4b44      	ldr	r3, [pc, #272]	; (8003ba8 <xPortStartScheduler+0x118>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a44      	ldr	r2, [pc, #272]	; (8003bac <xPortStartScheduler+0x11c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d109      	bne.n	8003ab4 <xPortStartScheduler+0x24>
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	e7fe      	b.n	8003ab2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ab4:	4b3c      	ldr	r3, [pc, #240]	; (8003ba8 <xPortStartScheduler+0x118>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3d      	ldr	r2, [pc, #244]	; (8003bb0 <xPortStartScheduler+0x120>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d109      	bne.n	8003ad2 <xPortStartScheduler+0x42>
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e7fe      	b.n	8003ad0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ad2:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <xPortStartScheduler+0x124>)
 8003ad4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	22ff      	movs	r2, #255	; 0xff
 8003ae2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	4b30      	ldr	r3, [pc, #192]	; (8003bb8 <xPortStartScheduler+0x128>)
 8003af8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003afa:	4b30      	ldr	r3, [pc, #192]	; (8003bbc <xPortStartScheduler+0x12c>)
 8003afc:	2207      	movs	r2, #7
 8003afe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b00:	e009      	b.n	8003b16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003b02:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <xPortStartScheduler+0x12c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	4a2c      	ldr	r2, [pc, #176]	; (8003bbc <xPortStartScheduler+0x12c>)
 8003b0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	2b80      	cmp	r3, #128	; 0x80
 8003b20:	d0ef      	beq.n	8003b02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b22:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <xPortStartScheduler+0x12c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f1c3 0307 	rsb	r3, r3, #7
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d009      	beq.n	8003b42 <xPortStartScheduler+0xb2>
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	e7fe      	b.n	8003b40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b42:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <xPortStartScheduler+0x12c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <xPortStartScheduler+0x12c>)
 8003b4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b4c:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <xPortStartScheduler+0x12c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b54:	4a19      	ldr	r2, [pc, #100]	; (8003bbc <xPortStartScheduler+0x12c>)
 8003b56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b60:	4a17      	ldr	r2, [pc, #92]	; (8003bc0 <xPortStartScheduler+0x130>)
 8003b62:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <xPortStartScheduler+0x130>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b6c:	4a14      	ldr	r2, [pc, #80]	; (8003bc0 <xPortStartScheduler+0x130>)
 8003b6e:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <xPortStartScheduler+0x130>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b78:	f000 f8d6 	bl	8003d28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <xPortStartScheduler+0x134>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003b82:	f000 f8f5 	bl	8003d70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b86:	4a10      	ldr	r2, [pc, #64]	; (8003bc8 <xPortStartScheduler+0x138>)
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <xPortStartScheduler+0x138>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003b90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b92:	f7ff ff69 	bl	8003a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b96:	f001 fa03 	bl	8004fa0 <vTaskSwitchContext>
	prvTaskExitError();
 8003b9a:	f7ff ff21 	bl	80039e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	e000ed00 	.word	0xe000ed00
 8003bac:	410fc271 	.word	0x410fc271
 8003bb0:	410fc270 	.word	0x410fc270
 8003bb4:	e000e400 	.word	0xe000e400
 8003bb8:	200002ec 	.word	0x200002ec
 8003bbc:	200002f0 	.word	0x200002f0
 8003bc0:	e000ed20 	.word	0xe000ed20
 8003bc4:	2000000c 	.word	0x2000000c
 8003bc8:	e000ef34 	.word	0xe000ef34

08003bcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003be4:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <vPortEnterCritical+0x54>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3301      	adds	r3, #1
 8003bea:	4a0d      	ldr	r2, [pc, #52]	; (8003c20 <vPortEnterCritical+0x54>)
 8003bec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <vPortEnterCritical+0x54>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d10e      	bne.n	8003c14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <vPortEnterCritical+0x58>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d009      	beq.n	8003c14 <vPortEnterCritical+0x48>
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	e7fe      	b.n	8003c12 <vPortEnterCritical+0x46>
	}
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	2000000c 	.word	0x2000000c
 8003c24:	e000ed04 	.word	0xe000ed04

08003c28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003c2e:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <vPortExitCritical+0x4c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <vPortExitCritical+0x22>
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	607b      	str	r3, [r7, #4]
 8003c48:	e7fe      	b.n	8003c48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <vPortExitCritical+0x4c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <vPortExitCritical+0x4c>)
 8003c52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <vPortExitCritical+0x4c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d104      	bne.n	8003c66 <vPortExitCritical+0x3e>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	2000000c 	.word	0x2000000c
	...

08003c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c80:	f3ef 8009 	mrs	r0, PSP
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <pxCurrentTCBConst>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	f01e 0f10 	tst.w	lr, #16
 8003c90:	bf08      	it	eq
 8003c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9a:	6010      	str	r0, [r2, #0]
 8003c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ca4:	f380 8811 	msr	BASEPRI, r0
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f001 f976 	bl	8004fa0 <vTaskSwitchContext>
 8003cb4:	f04f 0000 	mov.w	r0, #0
 8003cb8:	f380 8811 	msr	BASEPRI, r0
 8003cbc:	bc09      	pop	{r0, r3}
 8003cbe:	6819      	ldr	r1, [r3, #0]
 8003cc0:	6808      	ldr	r0, [r1, #0]
 8003cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc6:	f01e 0f10 	tst.w	lr, #16
 8003cca:	bf08      	it	eq
 8003ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003cd0:	f380 8809 	msr	PSP, r0
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	f3af 8000 	nop.w

08003ce0 <pxCurrentTCBConst>:
 8003ce0:	20000ecc 	.word	0x20000ecc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop

08003ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d00:	f001 f896 	bl	8004e30 <xTaskIncrementTick>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <SysTick_Handler+0x3c>)
 8003d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	2300      	movs	r3, #0
 8003d14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <vPortSetupTimerInterrupt+0x34>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <vPortSetupTimerInterrupt+0x38>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d38:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <vPortSetupTimerInterrupt+0x3c>)
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <vPortSetupTimerInterrupt+0x40>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	490b      	ldr	r1, [pc, #44]	; (8003d6c <vPortSetupTimerInterrupt+0x44>)
 8003d40:	fba1 1303 	umull	r1, r3, r1, r3
 8003d44:	099b      	lsrs	r3, r3, #6
 8003d46:	3b01      	subs	r3, #1
 8003d48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d4a:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <vPortSetupTimerInterrupt+0x34>)
 8003d4c:	2207      	movs	r2, #7
 8003d4e:	601a      	str	r2, [r3, #0]
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	e000e010 	.word	0xe000e010
 8003d60:	e000e018 	.word	0xe000e018
 8003d64:	e000e014 	.word	0xe000e014
 8003d68:	20000000 	.word	0x20000000
 8003d6c:	10624dd3 	.word	0x10624dd3

08003d70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d80 <vPortEnableVFP+0x10>
 8003d74:	6801      	ldr	r1, [r0, #0]
 8003d76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d7a:	6001      	str	r1, [r0, #0]
 8003d7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003d7e:	bf00      	nop
 8003d80:	e000ed88 	.word	0xe000ed88

08003d84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d90:	f000 ffa4 	bl	8004cdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d94:	4b59      	ldr	r3, [pc, #356]	; (8003efc <pvPortMalloc+0x178>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d9c:	f000 f91a 	bl	8003fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003da0:	4b57      	ldr	r3, [pc, #348]	; (8003f00 <pvPortMalloc+0x17c>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f040 8091 	bne.w	8003ed0 <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01c      	beq.n	8003dee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003db4:	2208      	movs	r2, #8
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d013      	beq.n	8003dee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f023 0307 	bic.w	r3, r3, #7
 8003dcc:	3308      	adds	r3, #8
 8003dce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <pvPortMalloc+0x6a>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e7fe      	b.n	8003dec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d06d      	beq.n	8003ed0 <pvPortMalloc+0x14c>
 8003df4:	4b43      	ldr	r3, [pc, #268]	; (8003f04 <pvPortMalloc+0x180>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d868      	bhi.n	8003ed0 <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003dfe:	4b42      	ldr	r3, [pc, #264]	; (8003f08 <pvPortMalloc+0x184>)
 8003e00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003e02:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <pvPortMalloc+0x184>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e08:	e004      	b.n	8003e14 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d203      	bcs.n	8003e26 <pvPortMalloc+0xa2>
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f1      	bne.n	8003e0a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e26:	4b35      	ldr	r3, [pc, #212]	; (8003efc <pvPortMalloc+0x178>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d04f      	beq.n	8003ed0 <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2208      	movs	r2, #8
 8003e36:	4413      	add	r3, r2
 8003e38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	1ad2      	subs	r2, r2, r3
 8003e4a:	2308      	movs	r3, #8
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d91e      	bls.n	8003e90 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4413      	add	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d009      	beq.n	8003e78 <pvPortMalloc+0xf4>
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	e7fe      	b.n	8003e76 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	1ad2      	subs	r2, r2, r3
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e8a:	69b8      	ldr	r0, [r7, #24]
 8003e8c:	f000 f904 	bl	8004098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e90:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <pvPortMalloc+0x180>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	4a1a      	ldr	r2, [pc, #104]	; (8003f04 <pvPortMalloc+0x180>)
 8003e9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e9e:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <pvPortMalloc+0x180>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <pvPortMalloc+0x188>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d203      	bcs.n	8003eb2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003eaa:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <pvPortMalloc+0x180>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <pvPortMalloc+0x188>)
 8003eb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <pvPortMalloc+0x17c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <pvPortMalloc+0x18c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	4a10      	ldr	r2, [pc, #64]	; (8003f10 <pvPortMalloc+0x18c>)
 8003ece:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ed0:	f000 ff12 	bl	8004cf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <pvPortMalloc+0x16e>
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e7fe      	b.n	8003ef0 <pvPortMalloc+0x16c>
	return pvReturn;
 8003ef2:	69fb      	ldr	r3, [r7, #28]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3728      	adds	r7, #40	; 0x28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20000eb4 	.word	0x20000eb4
 8003f00:	20000ec8 	.word	0x20000ec8
 8003f04:	20000eb8 	.word	0x20000eb8
 8003f08:	20000eac 	.word	0x20000eac
 8003f0c:	20000ebc 	.word	0x20000ebc
 8003f10:	20000ec0 	.word	0x20000ec0

08003f14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d04b      	beq.n	8003fbe <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f26:	2308      	movs	r3, #8
 8003f28:	425b      	negs	r3, r3
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <vPortFree+0xb4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <vPortFree+0x42>
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e7fe      	b.n	8003f54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <vPortFree+0x5e>
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	e7fe      	b.n	8003f70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <vPortFree+0xb4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01e      	beq.n	8003fbe <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d11a      	bne.n	8003fbe <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <vPortFree+0xb4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	401a      	ands	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f98:	f000 fea0 	bl	8004cdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <vPortFree+0xb8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <vPortFree+0xb8>)
 8003fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003faa:	6938      	ldr	r0, [r7, #16]
 8003fac:	f000 f874 	bl	8004098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003fb0:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <vPortFree+0xbc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	4a06      	ldr	r2, [pc, #24]	; (8003fd0 <vPortFree+0xbc>)
 8003fb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003fba:	f000 fe9d 	bl	8004cf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003fbe:	bf00      	nop
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000ec8 	.word	0x20000ec8
 8003fcc:	20000eb8 	.word	0x20000eb8
 8003fd0:	20000ec4 	.word	0x20000ec4

08003fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003fda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003fe0:	4b27      	ldr	r3, [pc, #156]	; (8004080 <prvHeapInit+0xac>)
 8003fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00c      	beq.n	8004008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3307      	adds	r3, #7
 8003ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0307 	bic.w	r3, r3, #7
 8003ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <prvHeapInit+0xac>)
 8004004:	4413      	add	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800400c:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <prvHeapInit+0xb0>)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004012:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <prvHeapInit+0xb0>)
 8004014:	2200      	movs	r2, #0
 8004016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4413      	add	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004020:	2208      	movs	r2, #8
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0307 	bic.w	r3, r3, #7
 800402e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a15      	ldr	r2, [pc, #84]	; (8004088 <prvHeapInit+0xb4>)
 8004034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004036:	4b14      	ldr	r3, [pc, #80]	; (8004088 <prvHeapInit+0xb4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <prvHeapInit+0xb4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	1ad2      	subs	r2, r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <prvHeapInit+0xb4>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4a0a      	ldr	r2, [pc, #40]	; (800408c <prvHeapInit+0xb8>)
 8004062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4a09      	ldr	r2, [pc, #36]	; (8004090 <prvHeapInit+0xbc>)
 800406a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800406c:	4b09      	ldr	r3, [pc, #36]	; (8004094 <prvHeapInit+0xc0>)
 800406e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004072:	601a      	str	r2, [r3, #0]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	200002f4 	.word	0x200002f4
 8004084:	20000eac 	.word	0x20000eac
 8004088:	20000eb4 	.word	0x20000eb4
 800408c:	20000ebc 	.word	0x20000ebc
 8004090:	20000eb8 	.word	0x20000eb8
 8004094:	20000ec8 	.word	0x20000ec8

08004098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040a0:	4b28      	ldr	r3, [pc, #160]	; (8004144 <prvInsertBlockIntoFreeList+0xac>)
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e002      	b.n	80040ac <prvInsertBlockIntoFreeList+0x14>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d3f7      	bcc.n	80040a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	441a      	add	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d108      	bne.n	80040da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	441a      	add	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	441a      	add	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d118      	bne.n	8004120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <prvInsertBlockIntoFreeList+0xb0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d00d      	beq.n	8004116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	441a      	add	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e008      	b.n	8004128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004116:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <prvInsertBlockIntoFreeList+0xb0>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e003      	b.n	8004128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d002      	beq.n	8004136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004136:	bf00      	nop
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000eac 	.word	0x20000eac
 8004148:	20000eb4 	.word	0x20000eb4

0800414c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d109      	bne.n	8004174 <xQueueGenericReset+0x28>
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	e7fe      	b.n	8004172 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004174:	f7ff fd2a 	bl	8003bcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004180:	68f9      	ldr	r1, [r7, #12]
 8004182:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	441a      	add	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a4:	3b01      	subs	r3, #1
 80041a6:	68f9      	ldr	r1, [r7, #12]
 80041a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	441a      	add	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	22ff      	movs	r2, #255	; 0xff
 80041b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	22ff      	movs	r2, #255	; 0xff
 80041c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d114      	bne.n	80041f4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01a      	beq.n	8004208 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3310      	adds	r3, #16
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 ff60 	bl	800509c <xTaskRemoveFromEventList>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d012      	beq.n	8004208 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041e2:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <xQueueGenericReset+0xcc>)
 80041e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	e009      	b.n	8004208 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3310      	adds	r3, #16
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fb08 	bl	800380e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3324      	adds	r3, #36	; 0x24
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fb03 	bl	800380e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004208:	f7ff fd0e 	bl	8003c28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800420c:	2301      	movs	r3, #1
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d109      	bne.n	8004244 <xQueueGenericCreate+0x28>
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	e7fe      	b.n	8004242 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	fb02 f303 	mul.w	r3, r2, r3
 800424c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3348      	adds	r3, #72	; 0x48
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fd96 	bl	8003d84 <pvPortMalloc>
 8004258:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d011      	beq.n	8004284 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	3348      	adds	r3, #72	; 0x48
 8004268:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004272:	79fa      	ldrb	r2, [r7, #7]
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	4613      	mov	r3, r2
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f805 	bl	800428e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004284:	69bb      	ldr	r3, [r7, #24]
	}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e002      	b.n	80042b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042bc:	2101      	movs	r1, #1
 80042be:	69b8      	ldr	r0, [r7, #24]
 80042c0:	f7ff ff44 	bl	800414c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08e      	sub	sp, #56	; 0x38
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042da:	2300      	movs	r3, #0
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <xQueueGenericSend+0x30>
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fa:	e7fe      	b.n	80042fa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d103      	bne.n	800430a <xQueueGenericSend+0x3e>
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <xQueueGenericSend+0x42>
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <xQueueGenericSend+0x44>
 800430e:	2300      	movs	r3, #0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <xQueueGenericSend+0x5c>
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
 8004326:	e7fe      	b.n	8004326 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d103      	bne.n	8004336 <xQueueGenericSend+0x6a>
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <xQueueGenericSend+0x6e>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <xQueueGenericSend+0x70>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <xQueueGenericSend+0x88>
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	623b      	str	r3, [r7, #32]
 8004352:	e7fe      	b.n	8004352 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004354:	f001 f858 	bl	8005408 <xTaskGetSchedulerState>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d102      	bne.n	8004364 <xQueueGenericSend+0x98>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <xQueueGenericSend+0x9c>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <xQueueGenericSend+0x9e>
 8004368:	2300      	movs	r3, #0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <xQueueGenericSend+0xb6>
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	e7fe      	b.n	8004380 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004382:	f7ff fc23 	bl	8003bcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	429a      	cmp	r2, r3
 8004390:	d302      	bcc.n	8004398 <xQueueGenericSend+0xcc>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d129      	bne.n	80043ec <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800439e:	f000 f96b 	bl	8004678 <prvCopyDataToQueue>
 80043a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d010      	beq.n	80043ce <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	3324      	adds	r3, #36	; 0x24
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fe73 	bl	800509c <xTaskRemoveFromEventList>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d013      	beq.n	80043e4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043bc:	4b3f      	ldr	r3, [pc, #252]	; (80044bc <xQueueGenericSend+0x1f0>)
 80043be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	e00a      	b.n	80043e4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043d4:	4b39      	ldr	r3, [pc, #228]	; (80044bc <xQueueGenericSend+0x1f0>)
 80043d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80043e4:	f7ff fc20 	bl	8003c28 <vPortExitCritical>
				return pdPASS;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e063      	b.n	80044b4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043f2:	f7ff fc19 	bl	8003c28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e05c      	b.n	80044b4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004400:	f107 0314 	add.w	r3, r7, #20
 8004404:	4618      	mov	r0, r3
 8004406:	f000 feab 	bl	8005160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800440a:	2301      	movs	r3, #1
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800440e:	f7ff fc0b 	bl	8003c28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004412:	f000 fc63 	bl	8004cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004416:	f7ff fbd9 	bl	8003bcc <vPortEnterCritical>
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004420:	b25b      	sxtb	r3, r3
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004426:	d103      	bne.n	8004430 <xQueueGenericSend+0x164>
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004436:	b25b      	sxtb	r3, r3
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800443c:	d103      	bne.n	8004446 <xQueueGenericSend+0x17a>
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004446:	f7ff fbef 	bl	8003c28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800444a:	1d3a      	adds	r2, r7, #4
 800444c:	f107 0314 	add.w	r3, r7, #20
 8004450:	4611      	mov	r1, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fe9a 	bl	800518c <xTaskCheckForTimeOut>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d124      	bne.n	80044a8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800445e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004460:	f000 fa02 	bl	8004868 <prvIsQueueFull>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d018      	beq.n	800449c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	3310      	adds	r3, #16
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fdee 	bl	8005054 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800447a:	f000 f98d 	bl	8004798 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800447e:	f000 fc3b 	bl	8004cf8 <xTaskResumeAll>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	f47f af7c 	bne.w	8004382 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <xQueueGenericSend+0x1f0>)
 800448c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	e772      	b.n	8004382 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800449c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800449e:	f000 f97b 	bl	8004798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044a2:	f000 fc29 	bl	8004cf8 <xTaskResumeAll>
 80044a6:	e76c      	b.n	8004382 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044aa:	f000 f975 	bl	8004798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044ae:	f000 fc23 	bl	8004cf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3738      	adds	r7, #56	; 0x38
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	e000ed04 	.word	0xe000ed04

080044c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	; 0x30
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <xQueueReceive+0x2e>
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	623b      	str	r3, [r7, #32]
 80044ec:	e7fe      	b.n	80044ec <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d103      	bne.n	80044fc <xQueueReceive+0x3c>
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <xQueueReceive+0x40>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <xQueueReceive+0x42>
 8004500:	2300      	movs	r3, #0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <xQueueReceive+0x5a>
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	e7fe      	b.n	8004518 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800451a:	f000 ff75 	bl	8005408 <xTaskGetSchedulerState>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <xQueueReceive+0x6a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <xQueueReceive+0x6e>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <xQueueReceive+0x70>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d109      	bne.n	8004548 <xQueueReceive+0x88>
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	e7fe      	b.n	8004546 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004548:	f7ff fb40 	bl	8003bcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01f      	beq.n	8004598 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004558:	68b9      	ldr	r1, [r7, #8]
 800455a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800455c:	f000 f8f6 	bl	800474c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	1e5a      	subs	r2, r3, #1
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00f      	beq.n	8004590 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	3310      	adds	r3, #16
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fd91 	bl	800509c <xTaskRemoveFromEventList>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004580:	4b3c      	ldr	r3, [pc, #240]	; (8004674 <xQueueReceive+0x1b4>)
 8004582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004590:	f7ff fb4a 	bl	8003c28 <vPortExitCritical>
				return pdPASS;
 8004594:	2301      	movs	r3, #1
 8004596:	e069      	b.n	800466c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d103      	bne.n	80045a6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800459e:	f7ff fb43 	bl	8003c28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e062      	b.n	800466c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045ac:	f107 0310 	add.w	r3, r7, #16
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fdd5 	bl	8005160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045b6:	2301      	movs	r3, #1
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045ba:	f7ff fb35 	bl	8003c28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045be:	f000 fb8d 	bl	8004cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045c2:	f7ff fb03 	bl	8003bcc <vPortEnterCritical>
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045cc:	b25b      	sxtb	r3, r3
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045d2:	d103      	bne.n	80045dc <xQueueReceive+0x11c>
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045e2:	b25b      	sxtb	r3, r3
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e8:	d103      	bne.n	80045f2 <xQueueReceive+0x132>
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f2:	f7ff fb19 	bl	8003c28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045f6:	1d3a      	adds	r2, r7, #4
 80045f8:	f107 0310 	add.w	r3, r7, #16
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fdc4 	bl	800518c <xTaskCheckForTimeOut>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d123      	bne.n	8004652 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800460a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800460c:	f000 f916 	bl	800483c <prvIsQueueEmpty>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d017      	beq.n	8004646 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	3324      	adds	r3, #36	; 0x24
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4611      	mov	r1, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fd18 	bl	8005054 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004626:	f000 f8b7 	bl	8004798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800462a:	f000 fb65 	bl	8004cf8 <xTaskResumeAll>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d189      	bne.n	8004548 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004634:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <xQueueReceive+0x1b4>)
 8004636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	e780      	b.n	8004548 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004648:	f000 f8a6 	bl	8004798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800464c:	f000 fb54 	bl	8004cf8 <xTaskResumeAll>
 8004650:	e77a      	b.n	8004548 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004654:	f000 f8a0 	bl	8004798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004658:	f000 fb4e 	bl	8004cf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800465c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800465e:	f000 f8ed 	bl	800483c <prvIsQueueEmpty>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	f43f af6f 	beq.w	8004548 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800466a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800466c:	4618      	mov	r0, r3
 800466e:	3730      	adds	r7, #48	; 0x30
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10d      	bne.n	80046b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d14d      	bne.n	800473a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fece 	bl	8005444 <xTaskPriorityDisinherit>
 80046a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	e043      	b.n	800473a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d119      	bne.n	80046ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6858      	ldr	r0, [r3, #4]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	461a      	mov	r2, r3
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	f000 fffc 	bl	80056c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	441a      	add	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d32b      	bcc.n	800473a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	e026      	b.n	800473a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	68d8      	ldr	r0, [r3, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	461a      	mov	r2, r3
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	f000 ffe2 	bl	80056c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	425b      	negs	r3, r3
 8004706:	441a      	add	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d207      	bcs.n	8004728 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	425b      	negs	r3, r3
 8004722:	441a      	add	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d105      	bne.n	800473a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	3b01      	subs	r3, #1
 8004738:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004742:	697b      	ldr	r3, [r7, #20]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d018      	beq.n	8004790 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	441a      	add	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	429a      	cmp	r2, r3
 8004776:	d303      	bcc.n	8004780 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68d9      	ldr	r1, [r3, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	461a      	mov	r2, r3
 800478a:	6838      	ldr	r0, [r7, #0]
 800478c:	f000 ff98 	bl	80056c0 <memcpy>
	}
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047a0:	f7ff fa14 	bl	8003bcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047ac:	e011      	b.n	80047d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d012      	beq.n	80047dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3324      	adds	r3, #36	; 0x24
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fc6e 	bl	800509c <xTaskRemoveFromEventList>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047c6:	f000 fd41 	bl	800524c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	dce9      	bgt.n	80047ae <prvUnlockQueue+0x16>
 80047da:	e000      	b.n	80047de <prvUnlockQueue+0x46>
					break;
 80047dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	22ff      	movs	r2, #255	; 0xff
 80047e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80047e6:	f7ff fa1f 	bl	8003c28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047ea:	f7ff f9ef 	bl	8003bcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047f6:	e011      	b.n	800481c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d012      	beq.n	8004826 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3310      	adds	r3, #16
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fc49 	bl	800509c <xTaskRemoveFromEventList>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004810:	f000 fd1c 	bl	800524c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004814:	7bbb      	ldrb	r3, [r7, #14]
 8004816:	3b01      	subs	r3, #1
 8004818:	b2db      	uxtb	r3, r3
 800481a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800481c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004820:	2b00      	cmp	r3, #0
 8004822:	dce9      	bgt.n	80047f8 <prvUnlockQueue+0x60>
 8004824:	e000      	b.n	8004828 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004826:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	22ff      	movs	r2, #255	; 0xff
 800482c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004830:	f7ff f9fa 	bl	8003c28 <vPortExitCritical>
}
 8004834:	bf00      	nop
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004844:	f7ff f9c2 	bl	8003bcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004850:	2301      	movs	r3, #1
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	e001      	b.n	800485a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800485a:	f7ff f9e5 	bl	8003c28 <vPortExitCritical>

	return xReturn;
 800485e:	68fb      	ldr	r3, [r7, #12]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004870:	f7ff f9ac 	bl	8003bcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487c:	429a      	cmp	r2, r3
 800487e:	d102      	bne.n	8004886 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004880:	2301      	movs	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	e001      	b.n	800488a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800488a:	f7ff f9cd 	bl	8003c28 <vPortExitCritical>

	return xReturn;
 800488e:	68fb      	ldr	r3, [r7, #12]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08e      	sub	sp, #56	; 0x38
 800489c:	af04      	add	r7, sp, #16
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d109      	bne.n	80048c0 <xTaskCreateStatic+0x28>
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	623b      	str	r3, [r7, #32]
 80048be:	e7fe      	b.n	80048be <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <xTaskCreateStatic+0x42>
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	61fb      	str	r3, [r7, #28]
 80048d8:	e7fe      	b.n	80048d8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048da:	2354      	movs	r3, #84	; 0x54
 80048dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b54      	cmp	r3, #84	; 0x54
 80048e2:	d009      	beq.n	80048f8 <xTaskCreateStatic+0x60>
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	e7fe      	b.n	80048f6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80048f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01e      	beq.n	800493e <xTaskCreateStatic+0xa6>
 8004900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01b      	beq.n	800493e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800490e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004918:	2300      	movs	r3, #0
 800491a:	9303      	str	r3, [sp, #12]
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	9302      	str	r3, [sp, #8]
 8004920:	f107 0314 	add.w	r3, r7, #20
 8004924:	9301      	str	r3, [sp, #4]
 8004926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f850 	bl	80049d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004936:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004938:	f000 f8d4 	bl	8004ae4 <prvAddNewTaskToReadyList>
 800493c:	e001      	b.n	8004942 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004942:	697b      	ldr	r3, [r7, #20]
	}
 8004944:	4618      	mov	r0, r3
 8004946:	3728      	adds	r7, #40	; 0x28
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08c      	sub	sp, #48	; 0x30
 8004950:	af04      	add	r7, sp, #16
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fa0f 	bl	8003d84 <pvPortMalloc>
 8004966:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00e      	beq.n	800498c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800496e:	2054      	movs	r0, #84	; 0x54
 8004970:	f7ff fa08 	bl	8003d84 <pvPortMalloc>
 8004974:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	631a      	str	r2, [r3, #48]	; 0x30
 8004982:	e005      	b.n	8004990 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004984:	6978      	ldr	r0, [r7, #20]
 8004986:	f7ff fac5 	bl	8003f14 <vPortFree>
 800498a:	e001      	b.n	8004990 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800498c:	2300      	movs	r3, #0
 800498e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d017      	beq.n	80049c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800499e:	88fa      	ldrh	r2, [r7, #6]
 80049a0:	2300      	movs	r3, #0
 80049a2:	9303      	str	r3, [sp, #12]
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	9302      	str	r3, [sp, #8]
 80049a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049aa:	9301      	str	r3, [sp, #4]
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f80e 	bl	80049d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049ba:	69f8      	ldr	r0, [r7, #28]
 80049bc:	f000 f892 	bl	8004ae4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049c0:	2301      	movs	r3, #1
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	e002      	b.n	80049cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049cc:	69bb      	ldr	r3, [r7, #24]
	}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3720      	adds	r7, #32
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b088      	sub	sp, #32
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	607a      	str	r2, [r7, #4]
 80049e2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049ee:	3b01      	subs	r3, #1
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f023 0307 	bic.w	r3, r3, #7
 80049fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d009      	beq.n	8004a1c <prvInitialiseNewTask+0x46>
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	e7fe      	b.n	8004a1a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01f      	beq.n	8004a62 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	e012      	b.n	8004a4e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	7819      	ldrb	r1, [r3, #0]
 8004a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	3334      	adds	r3, #52	; 0x34
 8004a38:	460a      	mov	r2, r1
 8004a3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	4413      	add	r3, r2
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d006      	beq.n	8004a56 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	2b0f      	cmp	r3, #15
 8004a52:	d9e9      	bls.n	8004a28 <prvInitialiseNewTask+0x52>
 8004a54:	e000      	b.n	8004a58 <prvInitialiseNewTask+0x82>
			{
				break;
 8004a56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a60:	e003      	b.n	8004a6a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d901      	bls.n	8004a74 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a70:	2306      	movs	r3, #6
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a7e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	2200      	movs	r2, #0
 8004a84:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe fedf 	bl	800384e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	3318      	adds	r3, #24
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fe feda 	bl	800384e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	f1c3 0207 	rsb	r2, r3, #7
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	68f9      	ldr	r1, [r7, #12]
 8004ac2:	69b8      	ldr	r0, [r7, #24]
 8004ac4:	f7fe ff58 	bl	8003978 <pxPortInitialiseStack>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ada:	bf00      	nop
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004aec:	f7ff f86e 	bl	8003bcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004af0:	4b2a      	ldr	r3, [pc, #168]	; (8004b9c <prvAddNewTaskToReadyList+0xb8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3301      	adds	r3, #1
 8004af6:	4a29      	ldr	r2, [pc, #164]	; (8004b9c <prvAddNewTaskToReadyList+0xb8>)
 8004af8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004afa:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <prvAddNewTaskToReadyList+0xbc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d109      	bne.n	8004b16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b02:	4a27      	ldr	r2, [pc, #156]	; (8004ba0 <prvAddNewTaskToReadyList+0xbc>)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b08:	4b24      	ldr	r3, [pc, #144]	; (8004b9c <prvAddNewTaskToReadyList+0xb8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d110      	bne.n	8004b32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b10:	f000 fbc0 	bl	8005294 <prvInitialiseTaskLists>
 8004b14:	e00d      	b.n	8004b32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b16:	4b23      	ldr	r3, [pc, #140]	; (8004ba4 <prvAddNewTaskToReadyList+0xc0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b1e:	4b20      	ldr	r3, [pc, #128]	; (8004ba0 <prvAddNewTaskToReadyList+0xbc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d802      	bhi.n	8004b32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b2c:	4a1c      	ldr	r2, [pc, #112]	; (8004ba0 <prvAddNewTaskToReadyList+0xbc>)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b32:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <prvAddNewTaskToReadyList+0xc4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3301      	adds	r3, #1
 8004b38:	4a1b      	ldr	r2, [pc, #108]	; (8004ba8 <prvAddNewTaskToReadyList+0xc4>)
 8004b3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	2201      	movs	r2, #1
 8004b42:	409a      	lsls	r2, r3
 8004b44:	4b19      	ldr	r3, [pc, #100]	; (8004bac <prvAddNewTaskToReadyList+0xc8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	4a18      	ldr	r2, [pc, #96]	; (8004bac <prvAddNewTaskToReadyList+0xc8>)
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <prvAddNewTaskToReadyList+0xcc>)
 8004b5c:	441a      	add	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	4619      	mov	r1, r3
 8004b64:	4610      	mov	r0, r2
 8004b66:	f7fe fe7f 	bl	8003868 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b6a:	f7ff f85d 	bl	8003c28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <prvAddNewTaskToReadyList+0xc0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00e      	beq.n	8004b94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <prvAddNewTaskToReadyList+0xbc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d207      	bcs.n	8004b94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <prvAddNewTaskToReadyList+0xd0>)
 8004b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	20000fcc 	.word	0x20000fcc
 8004ba0:	20000ecc 	.word	0x20000ecc
 8004ba4:	20000fd8 	.word	0x20000fd8
 8004ba8:	20000fe8 	.word	0x20000fe8
 8004bac:	20000fd4 	.word	0x20000fd4
 8004bb0:	20000ed0 	.word	0x20000ed0
 8004bb4:	e000ed04 	.word	0xe000ed04

08004bb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d016      	beq.n	8004bf8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bca:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <vTaskDelay+0x60>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d009      	beq.n	8004be6 <vTaskDelay+0x2e>
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	e7fe      	b.n	8004be4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004be6:	f000 f879 	bl	8004cdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bea:	2100      	movs	r1, #0
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fcad 	bl	800554c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bf2:	f000 f881 	bl	8004cf8 <xTaskResumeAll>
 8004bf6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d107      	bne.n	8004c0e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004bfe:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <vTaskDelay+0x64>)
 8004c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c0e:	bf00      	nop
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000ff4 	.word	0x20000ff4
 8004c1c:	e000ed04 	.word	0xe000ed04

08004c20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08a      	sub	sp, #40	; 0x28
 8004c24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c2e:	463a      	mov	r2, r7
 8004c30:	1d39      	adds	r1, r7, #4
 8004c32:	f107 0308 	add.w	r3, r7, #8
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fb fcaa 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c3c:	6839      	ldr	r1, [r7, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	9202      	str	r2, [sp, #8]
 8004c44:	9301      	str	r3, [sp, #4]
 8004c46:	2300      	movs	r3, #0
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	460a      	mov	r2, r1
 8004c4e:	491d      	ldr	r1, [pc, #116]	; (8004cc4 <vTaskStartScheduler+0xa4>)
 8004c50:	481d      	ldr	r0, [pc, #116]	; (8004cc8 <vTaskStartScheduler+0xa8>)
 8004c52:	f7ff fe21 	bl	8004898 <xTaskCreateStatic>
 8004c56:	4602      	mov	r2, r0
 8004c58:	4b1c      	ldr	r3, [pc, #112]	; (8004ccc <vTaskStartScheduler+0xac>)
 8004c5a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <vTaskStartScheduler+0xac>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c64:	2301      	movs	r3, #1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	e001      	b.n	8004c6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d115      	bne.n	8004ca0 <vTaskStartScheduler+0x80>
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	613b      	str	r3, [r7, #16]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c86:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <vTaskStartScheduler+0xb0>)
 8004c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c8e:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <vTaskStartScheduler+0xb4>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c94:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <vTaskStartScheduler+0xb8>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c9a:	f7fe fef9 	bl	8003a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c9e:	e00d      	b.n	8004cbc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca6:	d109      	bne.n	8004cbc <vTaskStartScheduler+0x9c>
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	e7fe      	b.n	8004cba <vTaskStartScheduler+0x9a>
}
 8004cbc:	bf00      	nop
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	08006130 	.word	0x08006130
 8004cc8:	08005265 	.word	0x08005265
 8004ccc:	20000ff0 	.word	0x20000ff0
 8004cd0:	20000fec 	.word	0x20000fec
 8004cd4:	20000fd8 	.word	0x20000fd8
 8004cd8:	20000fd0 	.word	0x20000fd0

08004cdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ce0:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <vTaskSuspendAll+0x18>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	4a03      	ldr	r2, [pc, #12]	; (8004cf4 <vTaskSuspendAll+0x18>)
 8004ce8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004cea:	bf00      	nop
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	20000ff4 	.word	0x20000ff4

08004cf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d06:	4b41      	ldr	r3, [pc, #260]	; (8004e0c <xTaskResumeAll+0x114>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <xTaskResumeAll+0x2a>
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	e7fe      	b.n	8004d20 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d22:	f7fe ff53 	bl	8003bcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d26:	4b39      	ldr	r3, [pc, #228]	; (8004e0c <xTaskResumeAll+0x114>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	4a37      	ldr	r2, [pc, #220]	; (8004e0c <xTaskResumeAll+0x114>)
 8004d2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d30:	4b36      	ldr	r3, [pc, #216]	; (8004e0c <xTaskResumeAll+0x114>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d161      	bne.n	8004dfc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d38:	4b35      	ldr	r3, [pc, #212]	; (8004e10 <xTaskResumeAll+0x118>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d05d      	beq.n	8004dfc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d40:	e02e      	b.n	8004da0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d42:	4b34      	ldr	r3, [pc, #208]	; (8004e14 <xTaskResumeAll+0x11c>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3318      	adds	r3, #24
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fde7 	bl	8003922 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe fde2 	bl	8003922 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	2201      	movs	r2, #1
 8004d64:	409a      	lsls	r2, r3
 8004d66:	4b2c      	ldr	r3, [pc, #176]	; (8004e18 <xTaskResumeAll+0x120>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	4a2a      	ldr	r2, [pc, #168]	; (8004e18 <xTaskResumeAll+0x120>)
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4a27      	ldr	r2, [pc, #156]	; (8004e1c <xTaskResumeAll+0x124>)
 8004d7e:	441a      	add	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3304      	adds	r3, #4
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f7fe fd6e 	bl	8003868 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d90:	4b23      	ldr	r3, [pc, #140]	; (8004e20 <xTaskResumeAll+0x128>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d302      	bcc.n	8004da0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004d9a:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <xTaskResumeAll+0x12c>)
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004da0:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <xTaskResumeAll+0x11c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1cc      	bne.n	8004d42 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004dae:	f000 fb0b 	bl	80053c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004db2:	4b1d      	ldr	r3, [pc, #116]	; (8004e28 <xTaskResumeAll+0x130>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d010      	beq.n	8004de0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dbe:	f000 f837 	bl	8004e30 <xTaskIncrementTick>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004dc8:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <xTaskResumeAll+0x12c>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f1      	bne.n	8004dbe <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 8004dda:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <xTaskResumeAll+0x130>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004de0:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <xTaskResumeAll+0x12c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d009      	beq.n	8004dfc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004de8:	2301      	movs	r3, #1
 8004dea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <xTaskResumeAll+0x134>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dfc:	f7fe ff14 	bl	8003c28 <vPortExitCritical>

	return xAlreadyYielded;
 8004e00:	68bb      	ldr	r3, [r7, #8]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000ff4 	.word	0x20000ff4
 8004e10:	20000fcc 	.word	0x20000fcc
 8004e14:	20000f8c 	.word	0x20000f8c
 8004e18:	20000fd4 	.word	0x20000fd4
 8004e1c:	20000ed0 	.word	0x20000ed0
 8004e20:	20000ecc 	.word	0x20000ecc
 8004e24:	20000fe0 	.word	0x20000fe0
 8004e28:	20000fdc 	.word	0x20000fdc
 8004e2c:	e000ed04 	.word	0xe000ed04

08004e30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e3a:	4b4e      	ldr	r3, [pc, #312]	; (8004f74 <xTaskIncrementTick+0x144>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f040 808d 	bne.w	8004f5e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e44:	4b4c      	ldr	r3, [pc, #304]	; (8004f78 <xTaskIncrementTick+0x148>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e4c:	4a4a      	ldr	r2, [pc, #296]	; (8004f78 <xTaskIncrementTick+0x148>)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d11f      	bne.n	8004e98 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e58:	4b48      	ldr	r3, [pc, #288]	; (8004f7c <xTaskIncrementTick+0x14c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d009      	beq.n	8004e76 <xTaskIncrementTick+0x46>
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	e7fe      	b.n	8004e74 <xTaskIncrementTick+0x44>
 8004e76:	4b41      	ldr	r3, [pc, #260]	; (8004f7c <xTaskIncrementTick+0x14c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	4b40      	ldr	r3, [pc, #256]	; (8004f80 <xTaskIncrementTick+0x150>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a3e      	ldr	r2, [pc, #248]	; (8004f7c <xTaskIncrementTick+0x14c>)
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	4a3e      	ldr	r2, [pc, #248]	; (8004f80 <xTaskIncrementTick+0x150>)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	4b3e      	ldr	r3, [pc, #248]	; (8004f84 <xTaskIncrementTick+0x154>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	4a3c      	ldr	r2, [pc, #240]	; (8004f84 <xTaskIncrementTick+0x154>)
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	f000 fa98 	bl	80053c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e98:	4b3b      	ldr	r3, [pc, #236]	; (8004f88 <xTaskIncrementTick+0x158>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d348      	bcc.n	8004f34 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ea2:	4b36      	ldr	r3, [pc, #216]	; (8004f7c <xTaskIncrementTick+0x14c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d104      	bne.n	8004eb6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eac:	4b36      	ldr	r3, [pc, #216]	; (8004f88 <xTaskIncrementTick+0x158>)
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004eb2:	601a      	str	r2, [r3, #0]
					break;
 8004eb4:	e03e      	b.n	8004f34 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eb6:	4b31      	ldr	r3, [pc, #196]	; (8004f7c <xTaskIncrementTick+0x14c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d203      	bcs.n	8004ed6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ece:	4a2e      	ldr	r2, [pc, #184]	; (8004f88 <xTaskIncrementTick+0x158>)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ed4:	e02e      	b.n	8004f34 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe fd21 	bl	8003922 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d004      	beq.n	8004ef2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	3318      	adds	r3, #24
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fe fd18 	bl	8003922 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	4b24      	ldr	r3, [pc, #144]	; (8004f8c <xTaskIncrementTick+0x15c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	4a22      	ldr	r2, [pc, #136]	; (8004f8c <xTaskIncrementTick+0x15c>)
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4a1f      	ldr	r2, [pc, #124]	; (8004f90 <xTaskIncrementTick+0x160>)
 8004f12:	441a      	add	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f7fe fca4 	bl	8003868 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f24:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <xTaskIncrementTick+0x164>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d3b9      	bcc.n	8004ea2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f32:	e7b6      	b.n	8004ea2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f34:	4b17      	ldr	r3, [pc, #92]	; (8004f94 <xTaskIncrementTick+0x164>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3a:	4915      	ldr	r1, [pc, #84]	; (8004f90 <xTaskIncrementTick+0x160>)
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d901      	bls.n	8004f50 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f50:	4b11      	ldr	r3, [pc, #68]	; (8004f98 <xTaskIncrementTick+0x168>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	e004      	b.n	8004f68 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <xTaskIncrementTick+0x16c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <xTaskIncrementTick+0x16c>)
 8004f66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f68:	697b      	ldr	r3, [r7, #20]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000ff4 	.word	0x20000ff4
 8004f78:	20000fd0 	.word	0x20000fd0
 8004f7c:	20000f84 	.word	0x20000f84
 8004f80:	20000f88 	.word	0x20000f88
 8004f84:	20000fe4 	.word	0x20000fe4
 8004f88:	20000fec 	.word	0x20000fec
 8004f8c:	20000fd4 	.word	0x20000fd4
 8004f90:	20000ed0 	.word	0x20000ed0
 8004f94:	20000ecc 	.word	0x20000ecc
 8004f98:	20000fe0 	.word	0x20000fe0
 8004f9c:	20000fdc 	.word	0x20000fdc

08004fa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fa6:	4b26      	ldr	r3, [pc, #152]	; (8005040 <vTaskSwitchContext+0xa0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fae:	4b25      	ldr	r3, [pc, #148]	; (8005044 <vTaskSwitchContext+0xa4>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fb4:	e03e      	b.n	8005034 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004fb6:	4b23      	ldr	r3, [pc, #140]	; (8005044 <vTaskSwitchContext+0xa4>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fbc:	4b22      	ldr	r3, [pc, #136]	; (8005048 <vTaskSwitchContext+0xa8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	fab3 f383 	clz	r3, r3
 8004fc8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004fca:	7afb      	ldrb	r3, [r7, #11]
 8004fcc:	f1c3 031f 	rsb	r3, r3, #31
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	491e      	ldr	r1, [pc, #120]	; (800504c <vTaskSwitchContext+0xac>)
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <vTaskSwitchContext+0x5a>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	607b      	str	r3, [r7, #4]
 8004ff8:	e7fe      	b.n	8004ff8 <vTaskSwitchContext+0x58>
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4a11      	ldr	r2, [pc, #68]	; (800504c <vTaskSwitchContext+0xac>)
 8005006:	4413      	add	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	605a      	str	r2, [r3, #4]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	3308      	adds	r3, #8
 800501c:	429a      	cmp	r2, r3
 800501e:	d104      	bne.n	800502a <vTaskSwitchContext+0x8a>
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	605a      	str	r2, [r3, #4]
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4a07      	ldr	r2, [pc, #28]	; (8005050 <vTaskSwitchContext+0xb0>)
 8005032:	6013      	str	r3, [r2, #0]
}
 8005034:	bf00      	nop
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	20000ff4 	.word	0x20000ff4
 8005044:	20000fe0 	.word	0x20000fe0
 8005048:	20000fd4 	.word	0x20000fd4
 800504c:	20000ed0 	.word	0x20000ed0
 8005050:	20000ecc 	.word	0x20000ecc

08005054 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d109      	bne.n	8005078 <vTaskPlaceOnEventList+0x24>
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	e7fe      	b.n	8005076 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005078:	4b07      	ldr	r3, [pc, #28]	; (8005098 <vTaskPlaceOnEventList+0x44>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3318      	adds	r3, #24
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7fe fc15 	bl	80038b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005086:	2101      	movs	r1, #1
 8005088:	6838      	ldr	r0, [r7, #0]
 800508a:	f000 fa5f 	bl	800554c <prvAddCurrentTaskToDelayedList>
}
 800508e:	bf00      	nop
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000ecc 	.word	0x20000ecc

0800509c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <xTaskRemoveFromEventList+0x2a>
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	e7fe      	b.n	80050c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	3318      	adds	r3, #24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fc29 	bl	8003922 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050d0:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <xTaskRemoveFromEventList+0xac>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d11c      	bne.n	8005112 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	3304      	adds	r3, #4
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fe fc20 	bl	8003922 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	2201      	movs	r2, #1
 80050e8:	409a      	lsls	r2, r3
 80050ea:	4b18      	ldr	r3, [pc, #96]	; (800514c <xTaskRemoveFromEventList+0xb0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	4a16      	ldr	r2, [pc, #88]	; (800514c <xTaskRemoveFromEventList+0xb0>)
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4a13      	ldr	r2, [pc, #76]	; (8005150 <xTaskRemoveFromEventList+0xb4>)
 8005102:	441a      	add	r2, r3
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	3304      	adds	r3, #4
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f7fe fbac 	bl	8003868 <vListInsertEnd>
 8005110:	e005      	b.n	800511e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	3318      	adds	r3, #24
 8005116:	4619      	mov	r1, r3
 8005118:	480e      	ldr	r0, [pc, #56]	; (8005154 <xTaskRemoveFromEventList+0xb8>)
 800511a:	f7fe fba5 	bl	8003868 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005122:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <xTaskRemoveFromEventList+0xbc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	429a      	cmp	r2, r3
 800512a:	d905      	bls.n	8005138 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800512c:	2301      	movs	r3, #1
 800512e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <xTaskRemoveFromEventList+0xc0>)
 8005132:	2201      	movs	r2, #1
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e001      	b.n	800513c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800513c:	697b      	ldr	r3, [r7, #20]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000ff4 	.word	0x20000ff4
 800514c:	20000fd4 	.word	0x20000fd4
 8005150:	20000ed0 	.word	0x20000ed0
 8005154:	20000f8c 	.word	0x20000f8c
 8005158:	20000ecc 	.word	0x20000ecc
 800515c:	20000fe0 	.word	0x20000fe0

08005160 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005168:	4b06      	ldr	r3, [pc, #24]	; (8005184 <vTaskInternalSetTimeOutState+0x24>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <vTaskInternalSetTimeOutState+0x28>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	605a      	str	r2, [r3, #4]
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	20000fe4 	.word	0x20000fe4
 8005188:	20000fd0 	.word	0x20000fd0

0800518c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d109      	bne.n	80051b0 <xTaskCheckForTimeOut+0x24>
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	e7fe      	b.n	80051ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <xTaskCheckForTimeOut+0x3e>
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	e7fe      	b.n	80051c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80051ca:	f7fe fcff 	bl	8003bcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051ce:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <xTaskCheckForTimeOut+0xb8>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e6:	d102      	bne.n	80051ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	e023      	b.n	8005236 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b15      	ldr	r3, [pc, #84]	; (8005248 <xTaskCheckForTimeOut+0xbc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d007      	beq.n	800520a <xTaskCheckForTimeOut+0x7e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	429a      	cmp	r2, r3
 8005202:	d802      	bhi.n	800520a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005204:	2301      	movs	r3, #1
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	e015      	b.n	8005236 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	429a      	cmp	r2, r3
 8005212:	d90b      	bls.n	800522c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	1ad2      	subs	r2, r2, r3
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff ff9d 	bl	8005160 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	e004      	b.n	8005236 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005232:	2301      	movs	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005236:	f7fe fcf7 	bl	8003c28 <vPortExitCritical>

	return xReturn;
 800523a:	69fb      	ldr	r3, [r7, #28]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20000fd0 	.word	0x20000fd0
 8005248:	20000fe4 	.word	0x20000fe4

0800524c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005250:	4b03      	ldr	r3, [pc, #12]	; (8005260 <vTaskMissedYield+0x14>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]
}
 8005256:	bf00      	nop
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	20000fe0 	.word	0x20000fe0

08005264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800526c:	f000 f852 	bl	8005314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005270:	4b06      	ldr	r3, [pc, #24]	; (800528c <prvIdleTask+0x28>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d9f9      	bls.n	800526c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <prvIdleTask+0x2c>)
 800527a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005288:	e7f0      	b.n	800526c <prvIdleTask+0x8>
 800528a:	bf00      	nop
 800528c:	20000ed0 	.word	0x20000ed0
 8005290:	e000ed04 	.word	0xe000ed04

08005294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800529a:	2300      	movs	r3, #0
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	e00c      	b.n	80052ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4a12      	ldr	r2, [pc, #72]	; (80052f4 <prvInitialiseTaskLists+0x60>)
 80052ac:	4413      	add	r3, r2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe faad 	bl	800380e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3301      	adds	r3, #1
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b06      	cmp	r3, #6
 80052be:	d9ef      	bls.n	80052a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052c0:	480d      	ldr	r0, [pc, #52]	; (80052f8 <prvInitialiseTaskLists+0x64>)
 80052c2:	f7fe faa4 	bl	800380e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052c6:	480d      	ldr	r0, [pc, #52]	; (80052fc <prvInitialiseTaskLists+0x68>)
 80052c8:	f7fe faa1 	bl	800380e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052cc:	480c      	ldr	r0, [pc, #48]	; (8005300 <prvInitialiseTaskLists+0x6c>)
 80052ce:	f7fe fa9e 	bl	800380e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052d2:	480c      	ldr	r0, [pc, #48]	; (8005304 <prvInitialiseTaskLists+0x70>)
 80052d4:	f7fe fa9b 	bl	800380e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052d8:	480b      	ldr	r0, [pc, #44]	; (8005308 <prvInitialiseTaskLists+0x74>)
 80052da:	f7fe fa98 	bl	800380e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052de:	4b0b      	ldr	r3, [pc, #44]	; (800530c <prvInitialiseTaskLists+0x78>)
 80052e0:	4a05      	ldr	r2, [pc, #20]	; (80052f8 <prvInitialiseTaskLists+0x64>)
 80052e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <prvInitialiseTaskLists+0x7c>)
 80052e6:	4a05      	ldr	r2, [pc, #20]	; (80052fc <prvInitialiseTaskLists+0x68>)
 80052e8:	601a      	str	r2, [r3, #0]
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000ed0 	.word	0x20000ed0
 80052f8:	20000f5c 	.word	0x20000f5c
 80052fc:	20000f70 	.word	0x20000f70
 8005300:	20000f8c 	.word	0x20000f8c
 8005304:	20000fa0 	.word	0x20000fa0
 8005308:	20000fb8 	.word	0x20000fb8
 800530c:	20000f84 	.word	0x20000f84
 8005310:	20000f88 	.word	0x20000f88

08005314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800531a:	e019      	b.n	8005350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800531c:	f7fe fc56 	bl	8003bcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005320:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <prvCheckTasksWaitingTermination+0x4c>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3304      	adds	r3, #4
 800532c:	4618      	mov	r0, r3
 800532e:	f7fe faf8 	bl	8003922 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005332:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <prvCheckTasksWaitingTermination+0x50>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3b01      	subs	r3, #1
 8005338:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <prvCheckTasksWaitingTermination+0x50>)
 800533a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <prvCheckTasksWaitingTermination+0x54>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3b01      	subs	r3, #1
 8005342:	4a09      	ldr	r2, [pc, #36]	; (8005368 <prvCheckTasksWaitingTermination+0x54>)
 8005344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005346:	f7fe fc6f 	bl	8003c28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f80e 	bl	800536c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <prvCheckTasksWaitingTermination+0x54>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e1      	bne.n	800531c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005358:	bf00      	nop
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20000fa0 	.word	0x20000fa0
 8005364:	20000fcc 	.word	0x20000fcc
 8005368:	20000fb4 	.word	0x20000fb4

0800536c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800537a:	2b00      	cmp	r3, #0
 800537c:	d108      	bne.n	8005390 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	4618      	mov	r0, r3
 8005384:	f7fe fdc6 	bl	8003f14 <vPortFree>
				vPortFree( pxTCB );
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7fe fdc3 	bl	8003f14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800538e:	e017      	b.n	80053c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005396:	2b01      	cmp	r3, #1
 8005398:	d103      	bne.n	80053a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fe fdba 	bl	8003f14 <vPortFree>
	}
 80053a0:	e00e      	b.n	80053c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d009      	beq.n	80053c0 <prvDeleteTCB+0x54>
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	e7fe      	b.n	80053be <prvDeleteTCB+0x52>
	}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ce:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <prvResetNextTaskUnblockTime+0x38>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053d8:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <prvResetNextTaskUnblockTime+0x3c>)
 80053da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053e0:	e008      	b.n	80053f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e2:	4b07      	ldr	r3, [pc, #28]	; (8005400 <prvResetNextTaskUnblockTime+0x38>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	4a04      	ldr	r2, [pc, #16]	; (8005404 <prvResetNextTaskUnblockTime+0x3c>)
 80053f2:	6013      	str	r3, [r2, #0]
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	20000f84 	.word	0x20000f84
 8005404:	20000fec 	.word	0x20000fec

08005408 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800540e:	4b0b      	ldr	r3, [pc, #44]	; (800543c <xTaskGetSchedulerState+0x34>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d102      	bne.n	800541c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005416:	2301      	movs	r3, #1
 8005418:	607b      	str	r3, [r7, #4]
 800541a:	e008      	b.n	800542e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800541c:	4b08      	ldr	r3, [pc, #32]	; (8005440 <xTaskGetSchedulerState+0x38>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d102      	bne.n	800542a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005424:	2302      	movs	r3, #2
 8005426:	607b      	str	r3, [r7, #4]
 8005428:	e001      	b.n	800542e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800542a:	2300      	movs	r3, #0
 800542c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800542e:	687b      	ldr	r3, [r7, #4]
	}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	20000fd8 	.word	0x20000fd8
 8005440:	20000ff4 	.word	0x20000ff4

08005444 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d06c      	beq.n	8005534 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800545a:	4b39      	ldr	r3, [pc, #228]	; (8005540 <xTaskPriorityDisinherit+0xfc>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	429a      	cmp	r2, r3
 8005462:	d009      	beq.n	8005478 <xTaskPriorityDisinherit+0x34>
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e7fe      	b.n	8005476 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800547c:	2b00      	cmp	r3, #0
 800547e:	d109      	bne.n	8005494 <xTaskPriorityDisinherit+0x50>
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	e7fe      	b.n	8005492 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005498:	1e5a      	subs	r2, r3, #1
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d044      	beq.n	8005534 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d140      	bne.n	8005534 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	3304      	adds	r3, #4
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fe fa33 	bl	8003922 <uxListRemove>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d115      	bne.n	80054ee <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c6:	491f      	ldr	r1, [pc, #124]	; (8005544 <xTaskPriorityDisinherit+0x100>)
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <xTaskPriorityDisinherit+0xaa>
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	2201      	movs	r2, #1
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43da      	mvns	r2, r3
 80054e4:	4b18      	ldr	r3, [pc, #96]	; (8005548 <xTaskPriorityDisinherit+0x104>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4013      	ands	r3, r2
 80054ea:	4a17      	ldr	r2, [pc, #92]	; (8005548 <xTaskPriorityDisinherit+0x104>)
 80054ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	f1c3 0207 	rsb	r2, r3, #7
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	2201      	movs	r2, #1
 8005508:	409a      	lsls	r2, r3
 800550a:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <xTaskPriorityDisinherit+0x104>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4313      	orrs	r3, r2
 8005510:	4a0d      	ldr	r2, [pc, #52]	; (8005548 <xTaskPriorityDisinherit+0x104>)
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4a08      	ldr	r2, [pc, #32]	; (8005544 <xTaskPriorityDisinherit+0x100>)
 8005522:	441a      	add	r2, r3
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	3304      	adds	r3, #4
 8005528:	4619      	mov	r1, r3
 800552a:	4610      	mov	r0, r2
 800552c:	f7fe f99c 	bl	8003868 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005530:	2301      	movs	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005534:	697b      	ldr	r3, [r7, #20]
	}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000ecc 	.word	0x20000ecc
 8005544:	20000ed0 	.word	0x20000ed0
 8005548:	20000fd4 	.word	0x20000fd4

0800554c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005556:	4b29      	ldr	r3, [pc, #164]	; (80055fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800555c:	4b28      	ldr	r3, [pc, #160]	; (8005600 <prvAddCurrentTaskToDelayedList+0xb4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3304      	adds	r3, #4
 8005562:	4618      	mov	r0, r3
 8005564:	f7fe f9dd 	bl	8003922 <uxListRemove>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10b      	bne.n	8005586 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800556e:	4b24      	ldr	r3, [pc, #144]	; (8005600 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	2201      	movs	r2, #1
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	43da      	mvns	r2, r3
 800557c:	4b21      	ldr	r3, [pc, #132]	; (8005604 <prvAddCurrentTaskToDelayedList+0xb8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4013      	ands	r3, r2
 8005582:	4a20      	ldr	r2, [pc, #128]	; (8005604 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005584:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800558c:	d10a      	bne.n	80055a4 <prvAddCurrentTaskToDelayedList+0x58>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005594:	4b1a      	ldr	r3, [pc, #104]	; (8005600 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3304      	adds	r3, #4
 800559a:	4619      	mov	r1, r3
 800559c:	481a      	ldr	r0, [pc, #104]	; (8005608 <prvAddCurrentTaskToDelayedList+0xbc>)
 800559e:	f7fe f963 	bl	8003868 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055a2:	e026      	b.n	80055f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4413      	add	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055ac:	4b14      	ldr	r3, [pc, #80]	; (8005600 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d209      	bcs.n	80055d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055bc:	4b13      	ldr	r3, [pc, #76]	; (800560c <prvAddCurrentTaskToDelayedList+0xc0>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3304      	adds	r3, #4
 80055c6:	4619      	mov	r1, r3
 80055c8:	4610      	mov	r0, r2
 80055ca:	f7fe f971 	bl	80038b0 <vListInsert>
}
 80055ce:	e010      	b.n	80055f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055d0:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <prvAddCurrentTaskToDelayedList+0xc4>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3304      	adds	r3, #4
 80055da:	4619      	mov	r1, r3
 80055dc:	4610      	mov	r0, r2
 80055de:	f7fe f967 	bl	80038b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d202      	bcs.n	80055f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80055ec:	4a09      	ldr	r2, [pc, #36]	; (8005614 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	6013      	str	r3, [r2, #0]
}
 80055f2:	bf00      	nop
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000fd0 	.word	0x20000fd0
 8005600:	20000ecc 	.word	0x20000ecc
 8005604:	20000fd4 	.word	0x20000fd4
 8005608:	20000fb8 	.word	0x20000fb8
 800560c:	20000f88 	.word	0x20000f88
 8005610:	20000f84 	.word	0x20000f84
 8005614:	20000fec 	.word	0x20000fec

08005618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005650 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800561c:	f7fb fb36 	bl	8000c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005620:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005622:	e003      	b.n	800562c <LoopCopyDataInit>

08005624 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005624:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005626:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005628:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800562a:	3104      	adds	r1, #4

0800562c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800562c:	480a      	ldr	r0, [pc, #40]	; (8005658 <LoopForever+0xa>)
	ldr	r3, =_edata
 800562e:	4b0b      	ldr	r3, [pc, #44]	; (800565c <LoopForever+0xe>)
	adds	r2, r0, r1
 8005630:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005632:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005634:	d3f6      	bcc.n	8005624 <CopyDataInit>
	ldr	r2, =_sbss
 8005636:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005638:	e002      	b.n	8005640 <LoopFillZerobss>

0800563a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800563a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800563c:	f842 3b04 	str.w	r3, [r2], #4

08005640 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005640:	4b08      	ldr	r3, [pc, #32]	; (8005664 <LoopForever+0x16>)
	cmp	r2, r3
 8005642:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005644:	d3f9      	bcc.n	800563a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005646:	f000 f817 	bl	8005678 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800564a:	f7fa ffbb 	bl	80005c4 <main>

0800564e <LoopForever>:

LoopForever:
    b LoopForever
 800564e:	e7fe      	b.n	800564e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005650:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005654:	080061c4 	.word	0x080061c4
	ldr	r0, =_sdata
 8005658:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800565c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8005660:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8005664:	200010e8 	.word	0x200010e8

08005668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005668:	e7fe      	b.n	8005668 <ADC1_2_IRQHandler>
	...

0800566c <__errno>:
 800566c:	4b01      	ldr	r3, [pc, #4]	; (8005674 <__errno+0x8>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000010 	.word	0x20000010

08005678 <__libc_init_array>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4e0d      	ldr	r6, [pc, #52]	; (80056b0 <__libc_init_array+0x38>)
 800567c:	4c0d      	ldr	r4, [pc, #52]	; (80056b4 <__libc_init_array+0x3c>)
 800567e:	1ba4      	subs	r4, r4, r6
 8005680:	10a4      	asrs	r4, r4, #2
 8005682:	2500      	movs	r5, #0
 8005684:	42a5      	cmp	r5, r4
 8005686:	d109      	bne.n	800569c <__libc_init_array+0x24>
 8005688:	4e0b      	ldr	r6, [pc, #44]	; (80056b8 <__libc_init_array+0x40>)
 800568a:	4c0c      	ldr	r4, [pc, #48]	; (80056bc <__libc_init_array+0x44>)
 800568c:	f000 fc3e 	bl	8005f0c <_init>
 8005690:	1ba4      	subs	r4, r4, r6
 8005692:	10a4      	asrs	r4, r4, #2
 8005694:	2500      	movs	r5, #0
 8005696:	42a5      	cmp	r5, r4
 8005698:	d105      	bne.n	80056a6 <__libc_init_array+0x2e>
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056a0:	4798      	blx	r3
 80056a2:	3501      	adds	r5, #1
 80056a4:	e7ee      	b.n	8005684 <__libc_init_array+0xc>
 80056a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056aa:	4798      	blx	r3
 80056ac:	3501      	adds	r5, #1
 80056ae:	e7f2      	b.n	8005696 <__libc_init_array+0x1e>
 80056b0:	080061bc 	.word	0x080061bc
 80056b4:	080061bc 	.word	0x080061bc
 80056b8:	080061bc 	.word	0x080061bc
 80056bc:	080061c0 	.word	0x080061c0

080056c0 <memcpy>:
 80056c0:	b510      	push	{r4, lr}
 80056c2:	1e43      	subs	r3, r0, #1
 80056c4:	440a      	add	r2, r1
 80056c6:	4291      	cmp	r1, r2
 80056c8:	d100      	bne.n	80056cc <memcpy+0xc>
 80056ca:	bd10      	pop	{r4, pc}
 80056cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d4:	e7f7      	b.n	80056c6 <memcpy+0x6>

080056d6 <memset>:
 80056d6:	4402      	add	r2, r0
 80056d8:	4603      	mov	r3, r0
 80056da:	4293      	cmp	r3, r2
 80056dc:	d100      	bne.n	80056e0 <memset+0xa>
 80056de:	4770      	bx	lr
 80056e0:	f803 1b01 	strb.w	r1, [r3], #1
 80056e4:	e7f9      	b.n	80056da <memset+0x4>
	...

080056e8 <siprintf>:
 80056e8:	b40e      	push	{r1, r2, r3}
 80056ea:	b500      	push	{lr}
 80056ec:	b09c      	sub	sp, #112	; 0x70
 80056ee:	f44f 7102 	mov.w	r1, #520	; 0x208
 80056f2:	ab1d      	add	r3, sp, #116	; 0x74
 80056f4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80056f8:	9002      	str	r0, [sp, #8]
 80056fa:	9006      	str	r0, [sp, #24]
 80056fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005700:	480a      	ldr	r0, [pc, #40]	; (800572c <siprintf+0x44>)
 8005702:	9104      	str	r1, [sp, #16]
 8005704:	9107      	str	r1, [sp, #28]
 8005706:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800570a:	f853 2b04 	ldr.w	r2, [r3], #4
 800570e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005712:	6800      	ldr	r0, [r0, #0]
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	a902      	add	r1, sp, #8
 8005718:	f000 f866 	bl	80057e8 <_svfiprintf_r>
 800571c:	9b02      	ldr	r3, [sp, #8]
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	b01c      	add	sp, #112	; 0x70
 8005724:	f85d eb04 	ldr.w	lr, [sp], #4
 8005728:	b003      	add	sp, #12
 800572a:	4770      	bx	lr
 800572c:	20000010 	.word	0x20000010

08005730 <__ssputs_r>:
 8005730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005734:	688e      	ldr	r6, [r1, #8]
 8005736:	429e      	cmp	r6, r3
 8005738:	4682      	mov	sl, r0
 800573a:	460c      	mov	r4, r1
 800573c:	4691      	mov	r9, r2
 800573e:	4698      	mov	r8, r3
 8005740:	d835      	bhi.n	80057ae <__ssputs_r+0x7e>
 8005742:	898a      	ldrh	r2, [r1, #12]
 8005744:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005748:	d031      	beq.n	80057ae <__ssputs_r+0x7e>
 800574a:	6825      	ldr	r5, [r4, #0]
 800574c:	6909      	ldr	r1, [r1, #16]
 800574e:	1a6f      	subs	r7, r5, r1
 8005750:	6965      	ldr	r5, [r4, #20]
 8005752:	2302      	movs	r3, #2
 8005754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005758:	fb95 f5f3 	sdiv	r5, r5, r3
 800575c:	f108 0301 	add.w	r3, r8, #1
 8005760:	443b      	add	r3, r7
 8005762:	429d      	cmp	r5, r3
 8005764:	bf38      	it	cc
 8005766:	461d      	movcc	r5, r3
 8005768:	0553      	lsls	r3, r2, #21
 800576a:	d531      	bpl.n	80057d0 <__ssputs_r+0xa0>
 800576c:	4629      	mov	r1, r5
 800576e:	f000 fb2d 	bl	8005dcc <_malloc_r>
 8005772:	4606      	mov	r6, r0
 8005774:	b950      	cbnz	r0, 800578c <__ssputs_r+0x5c>
 8005776:	230c      	movs	r3, #12
 8005778:	f8ca 3000 	str.w	r3, [sl]
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005782:	81a3      	strh	r3, [r4, #12]
 8005784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578c:	463a      	mov	r2, r7
 800578e:	6921      	ldr	r1, [r4, #16]
 8005790:	f7ff ff96 	bl	80056c0 <memcpy>
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800579a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800579e:	81a3      	strh	r3, [r4, #12]
 80057a0:	6126      	str	r6, [r4, #16]
 80057a2:	6165      	str	r5, [r4, #20]
 80057a4:	443e      	add	r6, r7
 80057a6:	1bed      	subs	r5, r5, r7
 80057a8:	6026      	str	r6, [r4, #0]
 80057aa:	60a5      	str	r5, [r4, #8]
 80057ac:	4646      	mov	r6, r8
 80057ae:	4546      	cmp	r6, r8
 80057b0:	bf28      	it	cs
 80057b2:	4646      	movcs	r6, r8
 80057b4:	4632      	mov	r2, r6
 80057b6:	4649      	mov	r1, r9
 80057b8:	6820      	ldr	r0, [r4, #0]
 80057ba:	f000 fa9f 	bl	8005cfc <memmove>
 80057be:	68a3      	ldr	r3, [r4, #8]
 80057c0:	1b9b      	subs	r3, r3, r6
 80057c2:	60a3      	str	r3, [r4, #8]
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	441e      	add	r6, r3
 80057c8:	6026      	str	r6, [r4, #0]
 80057ca:	2000      	movs	r0, #0
 80057cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d0:	462a      	mov	r2, r5
 80057d2:	f000 fb59 	bl	8005e88 <_realloc_r>
 80057d6:	4606      	mov	r6, r0
 80057d8:	2800      	cmp	r0, #0
 80057da:	d1e1      	bne.n	80057a0 <__ssputs_r+0x70>
 80057dc:	6921      	ldr	r1, [r4, #16]
 80057de:	4650      	mov	r0, sl
 80057e0:	f000 faa6 	bl	8005d30 <_free_r>
 80057e4:	e7c7      	b.n	8005776 <__ssputs_r+0x46>
	...

080057e8 <_svfiprintf_r>:
 80057e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ec:	b09d      	sub	sp, #116	; 0x74
 80057ee:	4680      	mov	r8, r0
 80057f0:	9303      	str	r3, [sp, #12]
 80057f2:	898b      	ldrh	r3, [r1, #12]
 80057f4:	061c      	lsls	r4, r3, #24
 80057f6:	460d      	mov	r5, r1
 80057f8:	4616      	mov	r6, r2
 80057fa:	d50f      	bpl.n	800581c <_svfiprintf_r+0x34>
 80057fc:	690b      	ldr	r3, [r1, #16]
 80057fe:	b96b      	cbnz	r3, 800581c <_svfiprintf_r+0x34>
 8005800:	2140      	movs	r1, #64	; 0x40
 8005802:	f000 fae3 	bl	8005dcc <_malloc_r>
 8005806:	6028      	str	r0, [r5, #0]
 8005808:	6128      	str	r0, [r5, #16]
 800580a:	b928      	cbnz	r0, 8005818 <_svfiprintf_r+0x30>
 800580c:	230c      	movs	r3, #12
 800580e:	f8c8 3000 	str.w	r3, [r8]
 8005812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005816:	e0c5      	b.n	80059a4 <_svfiprintf_r+0x1bc>
 8005818:	2340      	movs	r3, #64	; 0x40
 800581a:	616b      	str	r3, [r5, #20]
 800581c:	2300      	movs	r3, #0
 800581e:	9309      	str	r3, [sp, #36]	; 0x24
 8005820:	2320      	movs	r3, #32
 8005822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005826:	2330      	movs	r3, #48	; 0x30
 8005828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800582c:	f04f 0b01 	mov.w	fp, #1
 8005830:	4637      	mov	r7, r6
 8005832:	463c      	mov	r4, r7
 8005834:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005838:	2b00      	cmp	r3, #0
 800583a:	d13c      	bne.n	80058b6 <_svfiprintf_r+0xce>
 800583c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005840:	d00b      	beq.n	800585a <_svfiprintf_r+0x72>
 8005842:	4653      	mov	r3, sl
 8005844:	4632      	mov	r2, r6
 8005846:	4629      	mov	r1, r5
 8005848:	4640      	mov	r0, r8
 800584a:	f7ff ff71 	bl	8005730 <__ssputs_r>
 800584e:	3001      	adds	r0, #1
 8005850:	f000 80a3 	beq.w	800599a <_svfiprintf_r+0x1b2>
 8005854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005856:	4453      	add	r3, sl
 8005858:	9309      	str	r3, [sp, #36]	; 0x24
 800585a:	783b      	ldrb	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 809c 	beq.w	800599a <_svfiprintf_r+0x1b2>
 8005862:	2300      	movs	r3, #0
 8005864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005868:	9304      	str	r3, [sp, #16]
 800586a:	9307      	str	r3, [sp, #28]
 800586c:	9205      	str	r2, [sp, #20]
 800586e:	9306      	str	r3, [sp, #24]
 8005870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005874:	931a      	str	r3, [sp, #104]	; 0x68
 8005876:	2205      	movs	r2, #5
 8005878:	7821      	ldrb	r1, [r4, #0]
 800587a:	4850      	ldr	r0, [pc, #320]	; (80059bc <_svfiprintf_r+0x1d4>)
 800587c:	f7fa fcb0 	bl	80001e0 <memchr>
 8005880:	1c67      	adds	r7, r4, #1
 8005882:	9b04      	ldr	r3, [sp, #16]
 8005884:	b9d8      	cbnz	r0, 80058be <_svfiprintf_r+0xd6>
 8005886:	06d9      	lsls	r1, r3, #27
 8005888:	bf44      	itt	mi
 800588a:	2220      	movmi	r2, #32
 800588c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005890:	071a      	lsls	r2, r3, #28
 8005892:	bf44      	itt	mi
 8005894:	222b      	movmi	r2, #43	; 0x2b
 8005896:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800589a:	7822      	ldrb	r2, [r4, #0]
 800589c:	2a2a      	cmp	r2, #42	; 0x2a
 800589e:	d016      	beq.n	80058ce <_svfiprintf_r+0xe6>
 80058a0:	9a07      	ldr	r2, [sp, #28]
 80058a2:	2100      	movs	r1, #0
 80058a4:	200a      	movs	r0, #10
 80058a6:	4627      	mov	r7, r4
 80058a8:	3401      	adds	r4, #1
 80058aa:	783b      	ldrb	r3, [r7, #0]
 80058ac:	3b30      	subs	r3, #48	; 0x30
 80058ae:	2b09      	cmp	r3, #9
 80058b0:	d951      	bls.n	8005956 <_svfiprintf_r+0x16e>
 80058b2:	b1c9      	cbz	r1, 80058e8 <_svfiprintf_r+0x100>
 80058b4:	e011      	b.n	80058da <_svfiprintf_r+0xf2>
 80058b6:	2b25      	cmp	r3, #37	; 0x25
 80058b8:	d0c0      	beq.n	800583c <_svfiprintf_r+0x54>
 80058ba:	4627      	mov	r7, r4
 80058bc:	e7b9      	b.n	8005832 <_svfiprintf_r+0x4a>
 80058be:	4a3f      	ldr	r2, [pc, #252]	; (80059bc <_svfiprintf_r+0x1d4>)
 80058c0:	1a80      	subs	r0, r0, r2
 80058c2:	fa0b f000 	lsl.w	r0, fp, r0
 80058c6:	4318      	orrs	r0, r3
 80058c8:	9004      	str	r0, [sp, #16]
 80058ca:	463c      	mov	r4, r7
 80058cc:	e7d3      	b.n	8005876 <_svfiprintf_r+0x8e>
 80058ce:	9a03      	ldr	r2, [sp, #12]
 80058d0:	1d11      	adds	r1, r2, #4
 80058d2:	6812      	ldr	r2, [r2, #0]
 80058d4:	9103      	str	r1, [sp, #12]
 80058d6:	2a00      	cmp	r2, #0
 80058d8:	db01      	blt.n	80058de <_svfiprintf_r+0xf6>
 80058da:	9207      	str	r2, [sp, #28]
 80058dc:	e004      	b.n	80058e8 <_svfiprintf_r+0x100>
 80058de:	4252      	negs	r2, r2
 80058e0:	f043 0302 	orr.w	r3, r3, #2
 80058e4:	9207      	str	r2, [sp, #28]
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	783b      	ldrb	r3, [r7, #0]
 80058ea:	2b2e      	cmp	r3, #46	; 0x2e
 80058ec:	d10e      	bne.n	800590c <_svfiprintf_r+0x124>
 80058ee:	787b      	ldrb	r3, [r7, #1]
 80058f0:	2b2a      	cmp	r3, #42	; 0x2a
 80058f2:	f107 0101 	add.w	r1, r7, #1
 80058f6:	d132      	bne.n	800595e <_svfiprintf_r+0x176>
 80058f8:	9b03      	ldr	r3, [sp, #12]
 80058fa:	1d1a      	adds	r2, r3, #4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	9203      	str	r2, [sp, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	bfb8      	it	lt
 8005904:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005908:	3702      	adds	r7, #2
 800590a:	9305      	str	r3, [sp, #20]
 800590c:	4c2c      	ldr	r4, [pc, #176]	; (80059c0 <_svfiprintf_r+0x1d8>)
 800590e:	7839      	ldrb	r1, [r7, #0]
 8005910:	2203      	movs	r2, #3
 8005912:	4620      	mov	r0, r4
 8005914:	f7fa fc64 	bl	80001e0 <memchr>
 8005918:	b138      	cbz	r0, 800592a <_svfiprintf_r+0x142>
 800591a:	2340      	movs	r3, #64	; 0x40
 800591c:	1b00      	subs	r0, r0, r4
 800591e:	fa03 f000 	lsl.w	r0, r3, r0
 8005922:	9b04      	ldr	r3, [sp, #16]
 8005924:	4303      	orrs	r3, r0
 8005926:	9304      	str	r3, [sp, #16]
 8005928:	3701      	adds	r7, #1
 800592a:	7839      	ldrb	r1, [r7, #0]
 800592c:	4825      	ldr	r0, [pc, #148]	; (80059c4 <_svfiprintf_r+0x1dc>)
 800592e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005932:	2206      	movs	r2, #6
 8005934:	1c7e      	adds	r6, r7, #1
 8005936:	f7fa fc53 	bl	80001e0 <memchr>
 800593a:	2800      	cmp	r0, #0
 800593c:	d035      	beq.n	80059aa <_svfiprintf_r+0x1c2>
 800593e:	4b22      	ldr	r3, [pc, #136]	; (80059c8 <_svfiprintf_r+0x1e0>)
 8005940:	b9fb      	cbnz	r3, 8005982 <_svfiprintf_r+0x19a>
 8005942:	9b03      	ldr	r3, [sp, #12]
 8005944:	3307      	adds	r3, #7
 8005946:	f023 0307 	bic.w	r3, r3, #7
 800594a:	3308      	adds	r3, #8
 800594c:	9303      	str	r3, [sp, #12]
 800594e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005950:	444b      	add	r3, r9
 8005952:	9309      	str	r3, [sp, #36]	; 0x24
 8005954:	e76c      	b.n	8005830 <_svfiprintf_r+0x48>
 8005956:	fb00 3202 	mla	r2, r0, r2, r3
 800595a:	2101      	movs	r1, #1
 800595c:	e7a3      	b.n	80058a6 <_svfiprintf_r+0xbe>
 800595e:	2300      	movs	r3, #0
 8005960:	9305      	str	r3, [sp, #20]
 8005962:	4618      	mov	r0, r3
 8005964:	240a      	movs	r4, #10
 8005966:	460f      	mov	r7, r1
 8005968:	3101      	adds	r1, #1
 800596a:	783a      	ldrb	r2, [r7, #0]
 800596c:	3a30      	subs	r2, #48	; 0x30
 800596e:	2a09      	cmp	r2, #9
 8005970:	d903      	bls.n	800597a <_svfiprintf_r+0x192>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0ca      	beq.n	800590c <_svfiprintf_r+0x124>
 8005976:	9005      	str	r0, [sp, #20]
 8005978:	e7c8      	b.n	800590c <_svfiprintf_r+0x124>
 800597a:	fb04 2000 	mla	r0, r4, r0, r2
 800597e:	2301      	movs	r3, #1
 8005980:	e7f1      	b.n	8005966 <_svfiprintf_r+0x17e>
 8005982:	ab03      	add	r3, sp, #12
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	462a      	mov	r2, r5
 8005988:	4b10      	ldr	r3, [pc, #64]	; (80059cc <_svfiprintf_r+0x1e4>)
 800598a:	a904      	add	r1, sp, #16
 800598c:	4640      	mov	r0, r8
 800598e:	f3af 8000 	nop.w
 8005992:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005996:	4681      	mov	r9, r0
 8005998:	d1d9      	bne.n	800594e <_svfiprintf_r+0x166>
 800599a:	89ab      	ldrh	r3, [r5, #12]
 800599c:	065b      	lsls	r3, r3, #25
 800599e:	f53f af38 	bmi.w	8005812 <_svfiprintf_r+0x2a>
 80059a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059a4:	b01d      	add	sp, #116	; 0x74
 80059a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059aa:	ab03      	add	r3, sp, #12
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	462a      	mov	r2, r5
 80059b0:	4b06      	ldr	r3, [pc, #24]	; (80059cc <_svfiprintf_r+0x1e4>)
 80059b2:	a904      	add	r1, sp, #16
 80059b4:	4640      	mov	r0, r8
 80059b6:	f000 f881 	bl	8005abc <_printf_i>
 80059ba:	e7ea      	b.n	8005992 <_svfiprintf_r+0x1aa>
 80059bc:	08006180 	.word	0x08006180
 80059c0:	08006186 	.word	0x08006186
 80059c4:	0800618a 	.word	0x0800618a
 80059c8:	00000000 	.word	0x00000000
 80059cc:	08005731 	.word	0x08005731

080059d0 <_printf_common>:
 80059d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d4:	4691      	mov	r9, r2
 80059d6:	461f      	mov	r7, r3
 80059d8:	688a      	ldr	r2, [r1, #8]
 80059da:	690b      	ldr	r3, [r1, #16]
 80059dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059e0:	4293      	cmp	r3, r2
 80059e2:	bfb8      	it	lt
 80059e4:	4613      	movlt	r3, r2
 80059e6:	f8c9 3000 	str.w	r3, [r9]
 80059ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059ee:	4606      	mov	r6, r0
 80059f0:	460c      	mov	r4, r1
 80059f2:	b112      	cbz	r2, 80059fa <_printf_common+0x2a>
 80059f4:	3301      	adds	r3, #1
 80059f6:	f8c9 3000 	str.w	r3, [r9]
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	0699      	lsls	r1, r3, #26
 80059fe:	bf42      	ittt	mi
 8005a00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005a04:	3302      	addmi	r3, #2
 8005a06:	f8c9 3000 	strmi.w	r3, [r9]
 8005a0a:	6825      	ldr	r5, [r4, #0]
 8005a0c:	f015 0506 	ands.w	r5, r5, #6
 8005a10:	d107      	bne.n	8005a22 <_printf_common+0x52>
 8005a12:	f104 0a19 	add.w	sl, r4, #25
 8005a16:	68e3      	ldr	r3, [r4, #12]
 8005a18:	f8d9 2000 	ldr.w	r2, [r9]
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	429d      	cmp	r5, r3
 8005a20:	db29      	blt.n	8005a76 <_printf_common+0xa6>
 8005a22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005a26:	6822      	ldr	r2, [r4, #0]
 8005a28:	3300      	adds	r3, #0
 8005a2a:	bf18      	it	ne
 8005a2c:	2301      	movne	r3, #1
 8005a2e:	0692      	lsls	r2, r2, #26
 8005a30:	d42e      	bmi.n	8005a90 <_printf_common+0xc0>
 8005a32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a36:	4639      	mov	r1, r7
 8005a38:	4630      	mov	r0, r6
 8005a3a:	47c0      	blx	r8
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d021      	beq.n	8005a84 <_printf_common+0xb4>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	68e5      	ldr	r5, [r4, #12]
 8005a44:	f8d9 2000 	ldr.w	r2, [r9]
 8005a48:	f003 0306 	and.w	r3, r3, #6
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	bf08      	it	eq
 8005a50:	1aad      	subeq	r5, r5, r2
 8005a52:	68a3      	ldr	r3, [r4, #8]
 8005a54:	6922      	ldr	r2, [r4, #16]
 8005a56:	bf0c      	ite	eq
 8005a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a5c:	2500      	movne	r5, #0
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	bfc4      	itt	gt
 8005a62:	1a9b      	subgt	r3, r3, r2
 8005a64:	18ed      	addgt	r5, r5, r3
 8005a66:	f04f 0900 	mov.w	r9, #0
 8005a6a:	341a      	adds	r4, #26
 8005a6c:	454d      	cmp	r5, r9
 8005a6e:	d11b      	bne.n	8005aa8 <_printf_common+0xd8>
 8005a70:	2000      	movs	r0, #0
 8005a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a76:	2301      	movs	r3, #1
 8005a78:	4652      	mov	r2, sl
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	47c0      	blx	r8
 8005a80:	3001      	adds	r0, #1
 8005a82:	d103      	bne.n	8005a8c <_printf_common+0xbc>
 8005a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8c:	3501      	adds	r5, #1
 8005a8e:	e7c2      	b.n	8005a16 <_printf_common+0x46>
 8005a90:	18e1      	adds	r1, r4, r3
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	2030      	movs	r0, #48	; 0x30
 8005a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a9a:	4422      	add	r2, r4
 8005a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aa4:	3302      	adds	r3, #2
 8005aa6:	e7c4      	b.n	8005a32 <_printf_common+0x62>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	4622      	mov	r2, r4
 8005aac:	4639      	mov	r1, r7
 8005aae:	4630      	mov	r0, r6
 8005ab0:	47c0      	blx	r8
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d0e6      	beq.n	8005a84 <_printf_common+0xb4>
 8005ab6:	f109 0901 	add.w	r9, r9, #1
 8005aba:	e7d7      	b.n	8005a6c <_printf_common+0x9c>

08005abc <_printf_i>:
 8005abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ac0:	4617      	mov	r7, r2
 8005ac2:	7e0a      	ldrb	r2, [r1, #24]
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	2a6e      	cmp	r2, #110	; 0x6e
 8005ac8:	4698      	mov	r8, r3
 8005aca:	4606      	mov	r6, r0
 8005acc:	460c      	mov	r4, r1
 8005ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ad0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005ad4:	f000 80bc 	beq.w	8005c50 <_printf_i+0x194>
 8005ad8:	d81a      	bhi.n	8005b10 <_printf_i+0x54>
 8005ada:	2a63      	cmp	r2, #99	; 0x63
 8005adc:	d02e      	beq.n	8005b3c <_printf_i+0x80>
 8005ade:	d80a      	bhi.n	8005af6 <_printf_i+0x3a>
 8005ae0:	2a00      	cmp	r2, #0
 8005ae2:	f000 80c8 	beq.w	8005c76 <_printf_i+0x1ba>
 8005ae6:	2a58      	cmp	r2, #88	; 0x58
 8005ae8:	f000 808a 	beq.w	8005c00 <_printf_i+0x144>
 8005aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005af0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005af4:	e02a      	b.n	8005b4c <_printf_i+0x90>
 8005af6:	2a64      	cmp	r2, #100	; 0x64
 8005af8:	d001      	beq.n	8005afe <_printf_i+0x42>
 8005afa:	2a69      	cmp	r2, #105	; 0x69
 8005afc:	d1f6      	bne.n	8005aec <_printf_i+0x30>
 8005afe:	6821      	ldr	r1, [r4, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005b06:	d023      	beq.n	8005b50 <_printf_i+0x94>
 8005b08:	1d11      	adds	r1, r2, #4
 8005b0a:	6019      	str	r1, [r3, #0]
 8005b0c:	6813      	ldr	r3, [r2, #0]
 8005b0e:	e027      	b.n	8005b60 <_printf_i+0xa4>
 8005b10:	2a73      	cmp	r2, #115	; 0x73
 8005b12:	f000 80b4 	beq.w	8005c7e <_printf_i+0x1c2>
 8005b16:	d808      	bhi.n	8005b2a <_printf_i+0x6e>
 8005b18:	2a6f      	cmp	r2, #111	; 0x6f
 8005b1a:	d02a      	beq.n	8005b72 <_printf_i+0xb6>
 8005b1c:	2a70      	cmp	r2, #112	; 0x70
 8005b1e:	d1e5      	bne.n	8005aec <_printf_i+0x30>
 8005b20:	680a      	ldr	r2, [r1, #0]
 8005b22:	f042 0220 	orr.w	r2, r2, #32
 8005b26:	600a      	str	r2, [r1, #0]
 8005b28:	e003      	b.n	8005b32 <_printf_i+0x76>
 8005b2a:	2a75      	cmp	r2, #117	; 0x75
 8005b2c:	d021      	beq.n	8005b72 <_printf_i+0xb6>
 8005b2e:	2a78      	cmp	r2, #120	; 0x78
 8005b30:	d1dc      	bne.n	8005aec <_printf_i+0x30>
 8005b32:	2278      	movs	r2, #120	; 0x78
 8005b34:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005b38:	496e      	ldr	r1, [pc, #440]	; (8005cf4 <_printf_i+0x238>)
 8005b3a:	e064      	b.n	8005c06 <_printf_i+0x14a>
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005b42:	1d11      	adds	r1, r2, #4
 8005b44:	6019      	str	r1, [r3, #0]
 8005b46:	6813      	ldr	r3, [r2, #0]
 8005b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0a3      	b.n	8005c98 <_printf_i+0x1dc>
 8005b50:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005b54:	f102 0104 	add.w	r1, r2, #4
 8005b58:	6019      	str	r1, [r3, #0]
 8005b5a:	d0d7      	beq.n	8005b0c <_printf_i+0x50>
 8005b5c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	da03      	bge.n	8005b6c <_printf_i+0xb0>
 8005b64:	222d      	movs	r2, #45	; 0x2d
 8005b66:	425b      	negs	r3, r3
 8005b68:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b6c:	4962      	ldr	r1, [pc, #392]	; (8005cf8 <_printf_i+0x23c>)
 8005b6e:	220a      	movs	r2, #10
 8005b70:	e017      	b.n	8005ba2 <_printf_i+0xe6>
 8005b72:	6820      	ldr	r0, [r4, #0]
 8005b74:	6819      	ldr	r1, [r3, #0]
 8005b76:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005b7a:	d003      	beq.n	8005b84 <_printf_i+0xc8>
 8005b7c:	1d08      	adds	r0, r1, #4
 8005b7e:	6018      	str	r0, [r3, #0]
 8005b80:	680b      	ldr	r3, [r1, #0]
 8005b82:	e006      	b.n	8005b92 <_printf_i+0xd6>
 8005b84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b88:	f101 0004 	add.w	r0, r1, #4
 8005b8c:	6018      	str	r0, [r3, #0]
 8005b8e:	d0f7      	beq.n	8005b80 <_printf_i+0xc4>
 8005b90:	880b      	ldrh	r3, [r1, #0]
 8005b92:	4959      	ldr	r1, [pc, #356]	; (8005cf8 <_printf_i+0x23c>)
 8005b94:	2a6f      	cmp	r2, #111	; 0x6f
 8005b96:	bf14      	ite	ne
 8005b98:	220a      	movne	r2, #10
 8005b9a:	2208      	moveq	r2, #8
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005ba2:	6865      	ldr	r5, [r4, #4]
 8005ba4:	60a5      	str	r5, [r4, #8]
 8005ba6:	2d00      	cmp	r5, #0
 8005ba8:	f2c0 809c 	blt.w	8005ce4 <_printf_i+0x228>
 8005bac:	6820      	ldr	r0, [r4, #0]
 8005bae:	f020 0004 	bic.w	r0, r0, #4
 8005bb2:	6020      	str	r0, [r4, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d13f      	bne.n	8005c38 <_printf_i+0x17c>
 8005bb8:	2d00      	cmp	r5, #0
 8005bba:	f040 8095 	bne.w	8005ce8 <_printf_i+0x22c>
 8005bbe:	4675      	mov	r5, lr
 8005bc0:	2a08      	cmp	r2, #8
 8005bc2:	d10b      	bne.n	8005bdc <_printf_i+0x120>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	07da      	lsls	r2, r3, #31
 8005bc8:	d508      	bpl.n	8005bdc <_printf_i+0x120>
 8005bca:	6923      	ldr	r3, [r4, #16]
 8005bcc:	6862      	ldr	r2, [r4, #4]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	bfde      	ittt	le
 8005bd2:	2330      	movle	r3, #48	; 0x30
 8005bd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bd8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005bdc:	ebae 0305 	sub.w	r3, lr, r5
 8005be0:	6123      	str	r3, [r4, #16]
 8005be2:	f8cd 8000 	str.w	r8, [sp]
 8005be6:	463b      	mov	r3, r7
 8005be8:	aa03      	add	r2, sp, #12
 8005bea:	4621      	mov	r1, r4
 8005bec:	4630      	mov	r0, r6
 8005bee:	f7ff feef 	bl	80059d0 <_printf_common>
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	d155      	bne.n	8005ca2 <_printf_i+0x1e6>
 8005bf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bfa:	b005      	add	sp, #20
 8005bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c00:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005c04:	493c      	ldr	r1, [pc, #240]	; (8005cf8 <_printf_i+0x23c>)
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005c0e:	f100 0504 	add.w	r5, r0, #4
 8005c12:	601d      	str	r5, [r3, #0]
 8005c14:	d001      	beq.n	8005c1a <_printf_i+0x15e>
 8005c16:	6803      	ldr	r3, [r0, #0]
 8005c18:	e002      	b.n	8005c20 <_printf_i+0x164>
 8005c1a:	0655      	lsls	r5, r2, #25
 8005c1c:	d5fb      	bpl.n	8005c16 <_printf_i+0x15a>
 8005c1e:	8803      	ldrh	r3, [r0, #0]
 8005c20:	07d0      	lsls	r0, r2, #31
 8005c22:	bf44      	itt	mi
 8005c24:	f042 0220 	orrmi.w	r2, r2, #32
 8005c28:	6022      	strmi	r2, [r4, #0]
 8005c2a:	b91b      	cbnz	r3, 8005c34 <_printf_i+0x178>
 8005c2c:	6822      	ldr	r2, [r4, #0]
 8005c2e:	f022 0220 	bic.w	r2, r2, #32
 8005c32:	6022      	str	r2, [r4, #0]
 8005c34:	2210      	movs	r2, #16
 8005c36:	e7b1      	b.n	8005b9c <_printf_i+0xe0>
 8005c38:	4675      	mov	r5, lr
 8005c3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c3e:	fb02 3310 	mls	r3, r2, r0, r3
 8005c42:	5ccb      	ldrb	r3, [r1, r3]
 8005c44:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d1f5      	bne.n	8005c3a <_printf_i+0x17e>
 8005c4e:	e7b7      	b.n	8005bc0 <_printf_i+0x104>
 8005c50:	6808      	ldr	r0, [r1, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	6949      	ldr	r1, [r1, #20]
 8005c56:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005c5a:	d004      	beq.n	8005c66 <_printf_i+0x1aa>
 8005c5c:	1d10      	adds	r0, r2, #4
 8005c5e:	6018      	str	r0, [r3, #0]
 8005c60:	6813      	ldr	r3, [r2, #0]
 8005c62:	6019      	str	r1, [r3, #0]
 8005c64:	e007      	b.n	8005c76 <_printf_i+0x1ba>
 8005c66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c6a:	f102 0004 	add.w	r0, r2, #4
 8005c6e:	6018      	str	r0, [r3, #0]
 8005c70:	6813      	ldr	r3, [r2, #0]
 8005c72:	d0f6      	beq.n	8005c62 <_printf_i+0x1a6>
 8005c74:	8019      	strh	r1, [r3, #0]
 8005c76:	2300      	movs	r3, #0
 8005c78:	6123      	str	r3, [r4, #16]
 8005c7a:	4675      	mov	r5, lr
 8005c7c:	e7b1      	b.n	8005be2 <_printf_i+0x126>
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	1d11      	adds	r1, r2, #4
 8005c82:	6019      	str	r1, [r3, #0]
 8005c84:	6815      	ldr	r5, [r2, #0]
 8005c86:	6862      	ldr	r2, [r4, #4]
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f7fa faa8 	bl	80001e0 <memchr>
 8005c90:	b108      	cbz	r0, 8005c96 <_printf_i+0x1da>
 8005c92:	1b40      	subs	r0, r0, r5
 8005c94:	6060      	str	r0, [r4, #4]
 8005c96:	6863      	ldr	r3, [r4, #4]
 8005c98:	6123      	str	r3, [r4, #16]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca0:	e79f      	b.n	8005be2 <_printf_i+0x126>
 8005ca2:	6923      	ldr	r3, [r4, #16]
 8005ca4:	462a      	mov	r2, r5
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	4630      	mov	r0, r6
 8005caa:	47c0      	blx	r8
 8005cac:	3001      	adds	r0, #1
 8005cae:	d0a2      	beq.n	8005bf6 <_printf_i+0x13a>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	079b      	lsls	r3, r3, #30
 8005cb4:	d507      	bpl.n	8005cc6 <_printf_i+0x20a>
 8005cb6:	2500      	movs	r5, #0
 8005cb8:	f104 0919 	add.w	r9, r4, #25
 8005cbc:	68e3      	ldr	r3, [r4, #12]
 8005cbe:	9a03      	ldr	r2, [sp, #12]
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	429d      	cmp	r5, r3
 8005cc4:	db05      	blt.n	8005cd2 <_printf_i+0x216>
 8005cc6:	68e0      	ldr	r0, [r4, #12]
 8005cc8:	9b03      	ldr	r3, [sp, #12]
 8005cca:	4298      	cmp	r0, r3
 8005ccc:	bfb8      	it	lt
 8005cce:	4618      	movlt	r0, r3
 8005cd0:	e793      	b.n	8005bfa <_printf_i+0x13e>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	464a      	mov	r2, r9
 8005cd6:	4639      	mov	r1, r7
 8005cd8:	4630      	mov	r0, r6
 8005cda:	47c0      	blx	r8
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d08a      	beq.n	8005bf6 <_printf_i+0x13a>
 8005ce0:	3501      	adds	r5, #1
 8005ce2:	e7eb      	b.n	8005cbc <_printf_i+0x200>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1a7      	bne.n	8005c38 <_printf_i+0x17c>
 8005ce8:	780b      	ldrb	r3, [r1, #0]
 8005cea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cf2:	e765      	b.n	8005bc0 <_printf_i+0x104>
 8005cf4:	080061a2 	.word	0x080061a2
 8005cf8:	08006191 	.word	0x08006191

08005cfc <memmove>:
 8005cfc:	4288      	cmp	r0, r1
 8005cfe:	b510      	push	{r4, lr}
 8005d00:	eb01 0302 	add.w	r3, r1, r2
 8005d04:	d803      	bhi.n	8005d0e <memmove+0x12>
 8005d06:	1e42      	subs	r2, r0, #1
 8005d08:	4299      	cmp	r1, r3
 8005d0a:	d10c      	bne.n	8005d26 <memmove+0x2a>
 8005d0c:	bd10      	pop	{r4, pc}
 8005d0e:	4298      	cmp	r0, r3
 8005d10:	d2f9      	bcs.n	8005d06 <memmove+0xa>
 8005d12:	1881      	adds	r1, r0, r2
 8005d14:	1ad2      	subs	r2, r2, r3
 8005d16:	42d3      	cmn	r3, r2
 8005d18:	d100      	bne.n	8005d1c <memmove+0x20>
 8005d1a:	bd10      	pop	{r4, pc}
 8005d1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005d24:	e7f7      	b.n	8005d16 <memmove+0x1a>
 8005d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d2a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005d2e:	e7eb      	b.n	8005d08 <memmove+0xc>

08005d30 <_free_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4605      	mov	r5, r0
 8005d34:	2900      	cmp	r1, #0
 8005d36:	d045      	beq.n	8005dc4 <_free_r+0x94>
 8005d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d3c:	1f0c      	subs	r4, r1, #4
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	bfb8      	it	lt
 8005d42:	18e4      	addlt	r4, r4, r3
 8005d44:	f000 f8d6 	bl	8005ef4 <__malloc_lock>
 8005d48:	4a1f      	ldr	r2, [pc, #124]	; (8005dc8 <_free_r+0x98>)
 8005d4a:	6813      	ldr	r3, [r2, #0]
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	b933      	cbnz	r3, 8005d5e <_free_r+0x2e>
 8005d50:	6063      	str	r3, [r4, #4]
 8005d52:	6014      	str	r4, [r2, #0]
 8005d54:	4628      	mov	r0, r5
 8005d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d5a:	f000 b8cc 	b.w	8005ef6 <__malloc_unlock>
 8005d5e:	42a3      	cmp	r3, r4
 8005d60:	d90c      	bls.n	8005d7c <_free_r+0x4c>
 8005d62:	6821      	ldr	r1, [r4, #0]
 8005d64:	1862      	adds	r2, r4, r1
 8005d66:	4293      	cmp	r3, r2
 8005d68:	bf04      	itt	eq
 8005d6a:	681a      	ldreq	r2, [r3, #0]
 8005d6c:	685b      	ldreq	r3, [r3, #4]
 8005d6e:	6063      	str	r3, [r4, #4]
 8005d70:	bf04      	itt	eq
 8005d72:	1852      	addeq	r2, r2, r1
 8005d74:	6022      	streq	r2, [r4, #0]
 8005d76:	6004      	str	r4, [r0, #0]
 8005d78:	e7ec      	b.n	8005d54 <_free_r+0x24>
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	b10a      	cbz	r2, 8005d84 <_free_r+0x54>
 8005d80:	42a2      	cmp	r2, r4
 8005d82:	d9fa      	bls.n	8005d7a <_free_r+0x4a>
 8005d84:	6819      	ldr	r1, [r3, #0]
 8005d86:	1858      	adds	r0, r3, r1
 8005d88:	42a0      	cmp	r0, r4
 8005d8a:	d10b      	bne.n	8005da4 <_free_r+0x74>
 8005d8c:	6820      	ldr	r0, [r4, #0]
 8005d8e:	4401      	add	r1, r0
 8005d90:	1858      	adds	r0, r3, r1
 8005d92:	4282      	cmp	r2, r0
 8005d94:	6019      	str	r1, [r3, #0]
 8005d96:	d1dd      	bne.n	8005d54 <_free_r+0x24>
 8005d98:	6810      	ldr	r0, [r2, #0]
 8005d9a:	6852      	ldr	r2, [r2, #4]
 8005d9c:	605a      	str	r2, [r3, #4]
 8005d9e:	4401      	add	r1, r0
 8005da0:	6019      	str	r1, [r3, #0]
 8005da2:	e7d7      	b.n	8005d54 <_free_r+0x24>
 8005da4:	d902      	bls.n	8005dac <_free_r+0x7c>
 8005da6:	230c      	movs	r3, #12
 8005da8:	602b      	str	r3, [r5, #0]
 8005daa:	e7d3      	b.n	8005d54 <_free_r+0x24>
 8005dac:	6820      	ldr	r0, [r4, #0]
 8005dae:	1821      	adds	r1, r4, r0
 8005db0:	428a      	cmp	r2, r1
 8005db2:	bf04      	itt	eq
 8005db4:	6811      	ldreq	r1, [r2, #0]
 8005db6:	6852      	ldreq	r2, [r2, #4]
 8005db8:	6062      	str	r2, [r4, #4]
 8005dba:	bf04      	itt	eq
 8005dbc:	1809      	addeq	r1, r1, r0
 8005dbe:	6021      	streq	r1, [r4, #0]
 8005dc0:	605c      	str	r4, [r3, #4]
 8005dc2:	e7c7      	b.n	8005d54 <_free_r+0x24>
 8005dc4:	bd38      	pop	{r3, r4, r5, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000ff8 	.word	0x20000ff8

08005dcc <_malloc_r>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	1ccd      	adds	r5, r1, #3
 8005dd0:	f025 0503 	bic.w	r5, r5, #3
 8005dd4:	3508      	adds	r5, #8
 8005dd6:	2d0c      	cmp	r5, #12
 8005dd8:	bf38      	it	cc
 8005dda:	250c      	movcc	r5, #12
 8005ddc:	2d00      	cmp	r5, #0
 8005dde:	4606      	mov	r6, r0
 8005de0:	db01      	blt.n	8005de6 <_malloc_r+0x1a>
 8005de2:	42a9      	cmp	r1, r5
 8005de4:	d903      	bls.n	8005dee <_malloc_r+0x22>
 8005de6:	230c      	movs	r3, #12
 8005de8:	6033      	str	r3, [r6, #0]
 8005dea:	2000      	movs	r0, #0
 8005dec:	bd70      	pop	{r4, r5, r6, pc}
 8005dee:	f000 f881 	bl	8005ef4 <__malloc_lock>
 8005df2:	4a23      	ldr	r2, [pc, #140]	; (8005e80 <_malloc_r+0xb4>)
 8005df4:	6814      	ldr	r4, [r2, #0]
 8005df6:	4621      	mov	r1, r4
 8005df8:	b991      	cbnz	r1, 8005e20 <_malloc_r+0x54>
 8005dfa:	4c22      	ldr	r4, [pc, #136]	; (8005e84 <_malloc_r+0xb8>)
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	b91b      	cbnz	r3, 8005e08 <_malloc_r+0x3c>
 8005e00:	4630      	mov	r0, r6
 8005e02:	f000 f867 	bl	8005ed4 <_sbrk_r>
 8005e06:	6020      	str	r0, [r4, #0]
 8005e08:	4629      	mov	r1, r5
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f000 f862 	bl	8005ed4 <_sbrk_r>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d126      	bne.n	8005e62 <_malloc_r+0x96>
 8005e14:	230c      	movs	r3, #12
 8005e16:	6033      	str	r3, [r6, #0]
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f000 f86c 	bl	8005ef6 <__malloc_unlock>
 8005e1e:	e7e4      	b.n	8005dea <_malloc_r+0x1e>
 8005e20:	680b      	ldr	r3, [r1, #0]
 8005e22:	1b5b      	subs	r3, r3, r5
 8005e24:	d41a      	bmi.n	8005e5c <_malloc_r+0x90>
 8005e26:	2b0b      	cmp	r3, #11
 8005e28:	d90f      	bls.n	8005e4a <_malloc_r+0x7e>
 8005e2a:	600b      	str	r3, [r1, #0]
 8005e2c:	50cd      	str	r5, [r1, r3]
 8005e2e:	18cc      	adds	r4, r1, r3
 8005e30:	4630      	mov	r0, r6
 8005e32:	f000 f860 	bl	8005ef6 <__malloc_unlock>
 8005e36:	f104 000b 	add.w	r0, r4, #11
 8005e3a:	1d23      	adds	r3, r4, #4
 8005e3c:	f020 0007 	bic.w	r0, r0, #7
 8005e40:	1ac3      	subs	r3, r0, r3
 8005e42:	d01b      	beq.n	8005e7c <_malloc_r+0xb0>
 8005e44:	425a      	negs	r2, r3
 8005e46:	50e2      	str	r2, [r4, r3]
 8005e48:	bd70      	pop	{r4, r5, r6, pc}
 8005e4a:	428c      	cmp	r4, r1
 8005e4c:	bf0d      	iteet	eq
 8005e4e:	6863      	ldreq	r3, [r4, #4]
 8005e50:	684b      	ldrne	r3, [r1, #4]
 8005e52:	6063      	strne	r3, [r4, #4]
 8005e54:	6013      	streq	r3, [r2, #0]
 8005e56:	bf18      	it	ne
 8005e58:	460c      	movne	r4, r1
 8005e5a:	e7e9      	b.n	8005e30 <_malloc_r+0x64>
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	6849      	ldr	r1, [r1, #4]
 8005e60:	e7ca      	b.n	8005df8 <_malloc_r+0x2c>
 8005e62:	1cc4      	adds	r4, r0, #3
 8005e64:	f024 0403 	bic.w	r4, r4, #3
 8005e68:	42a0      	cmp	r0, r4
 8005e6a:	d005      	beq.n	8005e78 <_malloc_r+0xac>
 8005e6c:	1a21      	subs	r1, r4, r0
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f000 f830 	bl	8005ed4 <_sbrk_r>
 8005e74:	3001      	adds	r0, #1
 8005e76:	d0cd      	beq.n	8005e14 <_malloc_r+0x48>
 8005e78:	6025      	str	r5, [r4, #0]
 8005e7a:	e7d9      	b.n	8005e30 <_malloc_r+0x64>
 8005e7c:	bd70      	pop	{r4, r5, r6, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000ff8 	.word	0x20000ff8
 8005e84:	20000ffc 	.word	0x20000ffc

08005e88 <_realloc_r>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	4607      	mov	r7, r0
 8005e8c:	4614      	mov	r4, r2
 8005e8e:	460e      	mov	r6, r1
 8005e90:	b921      	cbnz	r1, 8005e9c <_realloc_r+0x14>
 8005e92:	4611      	mov	r1, r2
 8005e94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e98:	f7ff bf98 	b.w	8005dcc <_malloc_r>
 8005e9c:	b922      	cbnz	r2, 8005ea8 <_realloc_r+0x20>
 8005e9e:	f7ff ff47 	bl	8005d30 <_free_r>
 8005ea2:	4625      	mov	r5, r4
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ea8:	f000 f826 	bl	8005ef8 <_malloc_usable_size_r>
 8005eac:	4284      	cmp	r4, r0
 8005eae:	d90f      	bls.n	8005ed0 <_realloc_r+0x48>
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	f7ff ff8a 	bl	8005dcc <_malloc_r>
 8005eb8:	4605      	mov	r5, r0
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d0f2      	beq.n	8005ea4 <_realloc_r+0x1c>
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	4622      	mov	r2, r4
 8005ec2:	f7ff fbfd 	bl	80056c0 <memcpy>
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4638      	mov	r0, r7
 8005eca:	f7ff ff31 	bl	8005d30 <_free_r>
 8005ece:	e7e9      	b.n	8005ea4 <_realloc_r+0x1c>
 8005ed0:	4635      	mov	r5, r6
 8005ed2:	e7e7      	b.n	8005ea4 <_realloc_r+0x1c>

08005ed4 <_sbrk_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4c06      	ldr	r4, [pc, #24]	; (8005ef0 <_sbrk_r+0x1c>)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4605      	mov	r5, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	f7fa fea8 	bl	8000c34 <_sbrk>
 8005ee4:	1c43      	adds	r3, r0, #1
 8005ee6:	d102      	bne.n	8005eee <_sbrk_r+0x1a>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	b103      	cbz	r3, 8005eee <_sbrk_r+0x1a>
 8005eec:	602b      	str	r3, [r5, #0]
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	200010e4 	.word	0x200010e4

08005ef4 <__malloc_lock>:
 8005ef4:	4770      	bx	lr

08005ef6 <__malloc_unlock>:
 8005ef6:	4770      	bx	lr

08005ef8 <_malloc_usable_size_r>:
 8005ef8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005efc:	2800      	cmp	r0, #0
 8005efe:	f1a0 0004 	sub.w	r0, r0, #4
 8005f02:	bfbc      	itt	lt
 8005f04:	580b      	ldrlt	r3, [r1, r0]
 8005f06:	18c0      	addlt	r0, r0, r3
 8005f08:	4770      	bx	lr
	...

08005f0c <_init>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	bf00      	nop
 8005f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f12:	bc08      	pop	{r3}
 8005f14:	469e      	mov	lr, r3
 8005f16:	4770      	bx	lr

08005f18 <_fini>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr
