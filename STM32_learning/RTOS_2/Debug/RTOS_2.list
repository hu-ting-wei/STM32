
RTOS_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08004da0  08004da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000000  08005064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000fe8  200001e0  08005244  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200011c8  08005244  000211c8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012681  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002665  00000000  00000000  00032891  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001048  00000000  00000000  00034ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f20  00000000  00000000  00035f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007f77  00000000  00000000  00036e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005bcf  00000000  00000000  0003edd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000449a6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004eac  00000000  00000000  00044a24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d88 	.word	0x08004d88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08004d88 	.word	0x08004d88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	200001fc 	.word	0x200001fc
 80002a0:	20000250 	.word	0x20000250

080002a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002b4:	f003 0301 	and.w	r3, r3, #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d013      	beq.n	80002e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d00b      	beq.n	80002e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002cc:	e000      	b.n	80002d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f9      	beq.n	80002ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002e4:	687b      	ldr	r3, [r7, #4]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <_write>:
void SystemClock_Config(void);
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr , int len)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b086      	sub	sp, #24
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	60f8      	str	r0, [r7, #12]
 80002fa:	60b9      	str	r1, [r7, #8]
 80002fc:	607a      	str	r2, [r7, #4]
	int i = 0 ;
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]
	for(i = 0 ; i < len ; i++)
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]
 8000306:	e009      	b.n	800031c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	1c5a      	adds	r2, r3, #1
 800030c:	60ba      	str	r2, [r7, #8]
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ffc7 	bl	80002a4 <ITM_SendChar>
	for(i = 0 ; i < len ; i++)
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	3301      	adds	r3, #1
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	697a      	ldr	r2, [r7, #20]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	429a      	cmp	r2, r3
 8000322:	dbf1      	blt.n	8000308 <_write+0x16>
	return len;
 8000324:	687b      	ldr	r3, [r7, #4]
}
 8000326:	4618      	mov	r0, r3
 8000328:	3718      	adds	r7, #24
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000330:	b5b0      	push	{r4, r5, r7, lr}
 8000332:	b08e      	sub	sp, #56	; 0x38
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000336:	f000 fa33 	bl	80007a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800033a:	f000 f835 	bl	80003a8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  printf("starting....\n");
 800033e:	4815      	ldr	r0, [pc, #84]	; (8000394 <main+0x64>)
 8000340:	f003 f82c 	bl	800339c <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000344:	4b14      	ldr	r3, [pc, #80]	; (8000398 <main+0x68>)
 8000346:	f107 041c 	add.w	r4, r7, #28
 800034a:	461d      	mov	r5, r3
 800034c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800034e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000350:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000354:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000358:	f107 031c 	add.w	r3, r7, #28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fc91 	bl	8001c86 <osThreadCreate>
 8000364:	4602      	mov	r2, r0
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <main+0x6c>)
 8000368:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(Task2, task2_init, osPriorityAboveNormal, 0, 128);
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <main+0x70>)
 800036c:	463c      	mov	r4, r7
 800036e:	461d      	mov	r5, r3
 8000370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000374:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000378:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 800037c:	463b      	mov	r3, r7
 800037e:	2100      	movs	r1, #0
 8000380:	4618      	mov	r0, r3
 8000382:	f001 fc80 	bl	8001c86 <osThreadCreate>
 8000386:	4602      	mov	r2, r0
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <main+0x74>)
 800038a:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800038c:	f001 fc74 	bl	8001c78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000390:	e7fe      	b.n	8000390 <main+0x60>
 8000392:	bf00      	nop
 8000394:	08004da0 	.word	0x08004da0
 8000398:	08004dbc 	.word	0x08004dbc
 800039c:	2000116c 	.word	0x2000116c
 80003a0:	08004de0 	.word	0x08004de0
 80003a4:	20001170 	.word	0x20001170

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b096      	sub	sp, #88	; 0x58
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	2244      	movs	r2, #68	; 0x44
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 ff73 	bl	80032a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003bc:	463b      	mov	r3, r7
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003ca:	2310      	movs	r3, #16
 80003cc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003d6:	2360      	movs	r3, #96	; 0x60
 80003d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003da:	2302      	movs	r3, #2
 80003dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003de:	2301      	movs	r3, #1
 80003e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003e2:	2301      	movs	r3, #1
 80003e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80003e6:	2328      	movs	r3, #40	; 0x28
 80003e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003ea:	2307      	movs	r3, #7
 80003ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003ee:	2302      	movs	r3, #2
 80003f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003f2:	2302      	movs	r3, #2
 80003f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f6:	f107 0314 	add.w	r3, r7, #20
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 fb4c 	bl	8000a98 <HAL_RCC_OscConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000406:	f000 f879 	bl	80004fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040a:	230f      	movs	r3, #15
 800040c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040e:	2303      	movs	r3, #3
 8000410:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800041e:	463b      	mov	r3, r7
 8000420:	2104      	movs	r1, #4
 8000422:	4618      	mov	r0, r3
 8000424:	f000 ff1e 	bl	8001264 <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800042e:	f000 f865 	bl	80004fc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000432:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000436:	f000 fad9 	bl	80009ec <HAL_PWREx_ControlVoltageScaling>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000440:	f000 f85c 	bl	80004fc <Error_Handler>
  }
}
 8000444:	bf00      	nop
 8000446:	3758      	adds	r7, #88	; 0x58
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  char i;
  scanf("%c",&i);
 8000454:	f107 030f 	add.w	r3, r7, #15
 8000458:	4619      	mov	r1, r3
 800045a:	4808      	ldr	r0, [pc, #32]	; (800047c <StartDefaultTask+0x30>)
 800045c:	f002 ffa6 	bl	80033ac <iscanf>
  if (i=='a')
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	2b61      	cmp	r3, #97	; 0x61
 8000464:	d102      	bne.n	800046c <StartDefaultTask+0x20>
  {
	  printf("aaaa\n");
 8000466:	4806      	ldr	r0, [pc, #24]	; (8000480 <StartDefaultTask+0x34>)
 8000468:	f002 ff98 	bl	800339c <puts>
  }
  for(;;)
  {
	printf("default task\n");
 800046c:	4805      	ldr	r0, [pc, #20]	; (8000484 <StartDefaultTask+0x38>)
 800046e:	f002 ff95 	bl	800339c <puts>
    osDelay(1000);
 8000472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000476:	f001 fc5e 	bl	8001d36 <osDelay>
	printf("default task\n");
 800047a:	e7f7      	b.n	800046c <StartDefaultTask+0x20>
 800047c:	08004dfc 	.word	0x08004dfc
 8000480:	08004e00 	.word	0x08004e00
 8000484:	08004e08 	.word	0x08004e08

08000488 <task2_init>:
  }
  /* USER CODE END 5 */
}

void task2_init(void const * argument)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	while(1)
	{

		printf("task2,indx = %d\n",indx++);
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <task2_init+0x40>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	1c5a      	adds	r2, r3, #1
 8000496:	b2d1      	uxtb	r1, r2
 8000498:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <task2_init+0x40>)
 800049a:	7011      	strb	r1, [r2, #0]
 800049c:	4619      	mov	r1, r3
 800049e:	480b      	ldr	r0, [pc, #44]	; (80004cc <task2_init+0x44>)
 80004a0:	f002 ff08 	bl	80032b4 <iprintf>
	    osDelay(2000);
 80004a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004a8:	f001 fc45 	bl	8001d36 <osDelay>
	    {
	    	 printf("resuming default task\n");
	    	 osThreadResume(defaultTaskHandle);
	    }*/

	    if (indx==4)
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <task2_init+0x40>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	d1ed      	bne.n	8000490 <task2_init+0x8>
	    {
	    	printf("terminate myself\n");
 80004b4:	4806      	ldr	r0, [pc, #24]	; (80004d0 <task2_init+0x48>)
 80004b6:	f002 ff71 	bl	800339c <puts>
	    	osThreadTerminate(Task2Handle);
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <task2_init+0x4c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 fc2d 	bl	8001d1e <osThreadTerminate>
		printf("task2,indx = %d\n",indx++);
 80004c4:	e7e4      	b.n	8000490 <task2_init+0x8>
 80004c6:	bf00      	nop
 80004c8:	20000450 	.word	0x20000450
 80004cc:	08004e18 	.word	0x08004e18
 80004d0:	08004e2c 	.word	0x08004e2c
 80004d4:	20001170 	.word	0x20001170

080004d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d101      	bne.n	80004ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ea:	f000 f971 	bl	80007d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40012c00 	.word	0x40012c00

080004fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000500:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000502:	e7fe      	b.n	8000502 <Error_Handler+0x6>

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <HAL_MspInit+0x4c>)
 800050c:	4b10      	ldr	r3, [pc, #64]	; (8000550 <HAL_MspInit+0x4c>)
 800050e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6613      	str	r3, [r2, #96]	; 0x60
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_MspInit+0x4c>)
 8000518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <HAL_MspInit+0x4c>)
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <HAL_MspInit+0x4c>)
 8000526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052c:	6593      	str	r3, [r2, #88]	; 0x58
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_MspInit+0x4c>)
 8000530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	210f      	movs	r1, #15
 800053e:	f06f 0001 	mvn.w	r0, #1
 8000542:	f000 fa1b 	bl	800097c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08c      	sub	sp, #48	; 0x30
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	2019      	movs	r0, #25
 800056a:	f000 fa07 	bl	800097c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800056e:	2019      	movs	r0, #25
 8000570:	f000 fa20 	bl	80009b4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000574:	4a1e      	ldr	r2, [pc, #120]	; (80005f0 <HAL_InitTick+0x9c>)
 8000576:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <HAL_InitTick+0x9c>)
 8000578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800057a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800057e:	6613      	str	r3, [r2, #96]	; 0x60
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <HAL_InitTick+0x9c>)
 8000582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800058c:	f107 0210 	add.w	r2, r7, #16
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4611      	mov	r1, r2
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fff2 	bl	8001580 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800059c:	f000 ffda 	bl	8001554 <HAL_RCC_GetPCLK2Freq>
 80005a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <HAL_InitTick+0xa0>)
 80005a6:	fba2 2303 	umull	r2, r3, r2, r3
 80005aa:	0c9b      	lsrs	r3, r3, #18
 80005ac:	3b01      	subs	r3, #1
 80005ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <HAL_InitTick+0xa4>)
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <HAL_InitTick+0xa8>)
 80005b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <HAL_InitTick+0xa4>)
 80005b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <HAL_InitTick+0xa4>)
 80005c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_InitTick+0xa4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_InitTick+0xa4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <HAL_InitTick+0xa4>)
 80005d2:	f001 f867 	bl	80016a4 <HAL_TIM_Base_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d104      	bne.n	80005e6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <HAL_InitTick+0xa4>)
 80005de:	f001 f8c3 	bl	8001768 <HAL_TIM_Base_Start_IT>
 80005e2:	4603      	mov	r3, r0
 80005e4:	e000      	b.n	80005e8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3730      	adds	r7, #48	; 0x30
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000
 80005f4:	431bde83 	.word	0x431bde83
 80005f8:	20001174 	.word	0x20001174
 80005fc:	40012c00 	.word	0x40012c00

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <NMI_Handler+0x4>

08000606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <HardFault_Handler+0x4>

0800060c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <MemManage_Handler+0x4>

08000612 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <BusFault_Handler+0x4>

08000618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <UsageFault_Handler+0x4>

0800061e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000630:	4802      	ldr	r0, [pc, #8]	; (800063c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000632:	f001 f909 	bl	8001848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20001174 	.word	0x20001174

08000640 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b087      	sub	sp, #28
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	e00a      	b.n	8000668 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000652:	68bc      	ldr	r4, [r7, #8]
 8000654:	1c63      	adds	r3, r4, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	f3af 8000 	nop.w
 800065c:	4603      	mov	r3, r0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3301      	adds	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	dbf0      	blt.n	8000652 <_read+0x12>
	}

return len;
 8000670:	687b      	ldr	r3, [r7, #4]
}
 8000672:	4618      	mov	r0, r3
 8000674:	371c      	adds	r7, #28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd90      	pop	{r4, r7, pc}
	...

0800067c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <_sbrk+0x50>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d102      	bne.n	8000692 <_sbrk+0x16>
		heap_end = &end;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <_sbrk+0x50>)
 800068e:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <_sbrk+0x54>)
 8000690:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <_sbrk+0x50>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <_sbrk+0x50>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	466a      	mov	r2, sp
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d907      	bls.n	80006b6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80006a6:	f002 fdc7 	bl	8003238 <__errno>
 80006aa:	4602      	mov	r2, r0
 80006ac:	230c      	movs	r3, #12
 80006ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b4:	e006      	b.n	80006c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <_sbrk+0x50>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	4a03      	ldr	r2, [pc, #12]	; (80006cc <_sbrk+0x50>)
 80006c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80006c2:	68fb      	ldr	r3, [r7, #12]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000454 	.word	0x20000454
 80006d0:	200011c8 	.word	0x200011c8

080006d4 <_close>:

int _close(int file)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	return -1;
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006fc:	605a      	str	r2, [r3, #4]
	return 0;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <_isatty>:

int _isatty(int file)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	return 1;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000722:	b480      	push	{r7}
 8000724:	b085      	sub	sp, #20
 8000726:	af00      	add	r7, sp, #0
 8000728:	60f8      	str	r0, [r7, #12]
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
	return 0;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000740:	4a15      	ldr	r2, [pc, #84]	; (8000798 <SystemInit+0x5c>)
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x5c>)
 8000744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800074c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000750:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x60>)
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <SystemInit+0x60>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <SystemInit+0x60>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <SystemInit+0x60>)
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <SystemInit+0x60>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800076c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000770:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <SystemInit+0x60>)
 8000774:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000778:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <SystemInit+0x60>)
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <SystemInit+0x60>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000784:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <SystemInit+0x60>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007a6:	2300      	movs	r3, #0
 80007a8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007aa:	2003      	movs	r0, #3
 80007ac:	f000 f8db 	bl	8000966 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff fecf 	bl	8000554 <HAL_InitTick>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007bc:	2301      	movs	r3, #1
 80007be:	71fb      	strb	r3, [r7, #7]
 80007c0:	e001      	b.n	80007c6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007c2:	f7ff fe9f 	bl	8000504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007c6:	79fb      	ldrb	r3, [r7, #7]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_IncTick+0x20>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_IncTick+0x24>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_IncTick+0x24>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000008 	.word	0x20000008
 80007f4:	200011c0 	.word	0x200011c0

080007f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <HAL_GetTick+0x14>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	200011c0 	.word	0x200011c0

08000810 <__NVIC_SetPriorityGrouping>:
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000842:	4a04      	ldr	r2, [pc, #16]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	60d3      	str	r3, [r2, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_GetPriorityGrouping>:
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_GetPriorityGrouping+0x18>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	f003 0307 	and.w	r3, r3, #7
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_EnableIRQ>:
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	db0b      	blt.n	800089e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000886:	4909      	ldr	r1, [pc, #36]	; (80008ac <__NVIC_EnableIRQ+0x38>)
 8000888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088c:	095b      	lsrs	r3, r3, #5
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	f002 021f 	and.w	r2, r2, #31
 8000894:	2001      	movs	r0, #1
 8000896:	fa00 f202 	lsl.w	r2, r0, r2
 800089a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e100 	.word	0xe000e100

080008b0 <__NVIC_SetPriority>:
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0a      	blt.n	80008da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	490d      	ldr	r1, [pc, #52]	; (80008fc <__NVIC_SetPriority+0x4c>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008d8:	e00a      	b.n	80008f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	4909      	ldr	r1, [pc, #36]	; (8000900 <__NVIC_SetPriority+0x50>)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	f003 030f 	and.w	r3, r3, #15
 80008e2:	3b04      	subs	r3, #4
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	761a      	strb	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <NVIC_EncodePriority>:
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f1c3 0307 	rsb	r3, r3, #7
 800091e:	2b04      	cmp	r3, #4
 8000920:	bf28      	it	cs
 8000922:	2304      	movcs	r3, #4
 8000924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3304      	adds	r3, #4
 800092a:	2b06      	cmp	r3, #6
 800092c:	d902      	bls.n	8000934 <NVIC_EncodePriority+0x30>
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3b03      	subs	r3, #3
 8000932:	e000      	b.n	8000936 <NVIC_EncodePriority+0x32>
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	2201      	movs	r2, #1
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	401a      	ands	r2, r3
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094a:	2101      	movs	r1, #1
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa01 f303 	lsl.w	r3, r1, r3
 8000952:	1e59      	subs	r1, r3, #1
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	4313      	orrs	r3, r2
}
 800095a:	4618      	mov	r0, r3
 800095c:	3724      	adds	r7, #36	; 0x24
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ff4e 	bl	8000810 <__NVIC_SetPriorityGrouping>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800098e:	f7ff ff63 	bl	8000858 <__NVIC_GetPriorityGrouping>
 8000992:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	68b9      	ldr	r1, [r7, #8]
 8000998:	6978      	ldr	r0, [r7, #20]
 800099a:	f7ff ffb3 	bl	8000904 <NVIC_EncodePriority>
 800099e:	4602      	mov	r2, r0
 80009a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a4:	4611      	mov	r1, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff82 	bl	80008b0 <__NVIC_SetPriority>
}
 80009ac:	bf00      	nop
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff56 	bl	8000874 <__NVIC_EnableIRQ>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40007000 	.word	0x40007000

080009ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009fa:	d130      	bne.n	8000a5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a08:	d038      	beq.n	8000a7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0a:	4a20      	ldr	r2, [pc, #128]	; (8000a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2232      	movs	r2, #50	; 0x32
 8000a20:	fb02 f303 	mul.w	r3, r2, r3
 8000a24:	4a1b      	ldr	r2, [pc, #108]	; (8000a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000a26:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2a:	0c9b      	lsrs	r3, r3, #18
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a30:	e002      	b.n	8000a38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a44:	d102      	bne.n	8000a4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1f2      	bne.n	8000a32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a58:	d110      	bne.n	8000a7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	e00f      	b.n	8000a7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a6a:	d007      	beq.n	8000a7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40007000 	.word	0x40007000
 8000a90:	20000000 	.word	0x20000000
 8000a94:	431bde83 	.word	0x431bde83

08000a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e3d4      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000aaa:	4ba1      	ldr	r3, [pc, #644]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	f003 030c 	and.w	r3, r3, #12
 8000ab2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ab4:	4b9e      	ldr	r3, [pc, #632]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	f003 0303 	and.w	r3, r3, #3
 8000abc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0310 	and.w	r3, r3, #16
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 80e4 	beq.w	8000c94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d007      	beq.n	8000ae2 <HAL_RCC_OscConfig+0x4a>
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	2b0c      	cmp	r3, #12
 8000ad6:	f040 808b 	bne.w	8000bf0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	f040 8087 	bne.w	8000bf0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ae2:	4b93      	ldr	r3, [pc, #588]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d005      	beq.n	8000afa <HAL_RCC_OscConfig+0x62>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e3ac      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a1a      	ldr	r2, [r3, #32]
 8000afe:	4b8c      	ldr	r3, [pc, #560]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d004      	beq.n	8000b14 <HAL_RCC_OscConfig+0x7c>
 8000b0a:	4b89      	ldr	r3, [pc, #548]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b12:	e005      	b.n	8000b20 <HAL_RCC_OscConfig+0x88>
 8000b14:	4b86      	ldr	r3, [pc, #536]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b1a:	091b      	lsrs	r3, r3, #4
 8000b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d923      	bls.n	8000b6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a1b      	ldr	r3, [r3, #32]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 fd5b 	bl	80015e4 <RCC_SetFlashLatencyFromMSIRange>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e38d      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b38:	4a7d      	ldr	r2, [pc, #500]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b3a:	4b7d      	ldr	r3, [pc, #500]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	497a      	ldr	r1, [pc, #488]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b46:	4b7a      	ldr	r3, [pc, #488]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a1b      	ldr	r3, [r3, #32]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b56:	4976      	ldr	r1, [pc, #472]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b58:	4b75      	ldr	r3, [pc, #468]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	69db      	ldr	r3, [r3, #28]
 8000b64:	021b      	lsls	r3, r3, #8
 8000b66:	4313      	orrs	r3, r2
 8000b68:	604b      	str	r3, [r1, #4]
 8000b6a:	e025      	b.n	8000bb8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b6c:	4a70      	ldr	r2, [pc, #448]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b6e:	4b70      	ldr	r3, [pc, #448]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f043 0308 	orr.w	r3, r3, #8
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	496d      	ldr	r1, [pc, #436]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b7a:	4b6d      	ldr	r3, [pc, #436]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b8a:	4969      	ldr	r1, [pc, #420]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b8c:	4b68      	ldr	r3, [pc, #416]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69db      	ldr	r3, [r3, #28]
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d109      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a1b      	ldr	r3, [r3, #32]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 fd1b 	bl	80015e4 <RCC_SetFlashLatencyFromMSIRange>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e34d      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000bb8:	f000 fc36 	bl	8001428 <HAL_RCC_GetSysClockFreq>
 8000bbc:	4601      	mov	r1, r0
 8000bbe:	4b5c      	ldr	r3, [pc, #368]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	091b      	lsrs	r3, r3, #4
 8000bc4:	f003 030f 	and.w	r3, r3, #15
 8000bc8:	4a5a      	ldr	r2, [pc, #360]	; (8000d34 <HAL_RCC_OscConfig+0x29c>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	f003 031f 	and.w	r3, r3, #31
 8000bd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000bd4:	4a58      	ldr	r2, [pc, #352]	; (8000d38 <HAL_RCC_OscConfig+0x2a0>)
 8000bd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000bd8:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <HAL_RCC_OscConfig+0x2a4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fcb9 	bl	8000554 <HAL_InitTick>
 8000be2:	4603      	mov	r3, r0
 8000be4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d052      	beq.n	8000c92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	e331      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d032      	beq.n	8000c5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000bf8:	4a4d      	ldr	r2, [pc, #308]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000bfa:	4b4d      	ldr	r3, [pc, #308]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c04:	f7ff fdf8 	bl	80007f8 <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c0c:	f7ff fdf4 	bl	80007f8 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e31a      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c1e:	4b44      	ldr	r3, [pc, #272]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f0      	beq.n	8000c0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c2a:	4a41      	ldr	r2, [pc, #260]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000c2c:	4b40      	ldr	r3, [pc, #256]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	493e      	ldr	r1, [pc, #248]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000c38:	4b3d      	ldr	r3, [pc, #244]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c48:	4939      	ldr	r1, [pc, #228]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000c4a:	4b39      	ldr	r3, [pc, #228]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	021b      	lsls	r3, r3, #8
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	604b      	str	r3, [r1, #4]
 8000c5c:	e01a      	b.n	8000c94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000c5e:	4a34      	ldr	r2, [pc, #208]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000c60:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f023 0301 	bic.w	r3, r3, #1
 8000c68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c6a:	f7ff fdc5 	bl	80007f8 <HAL_GetTick>
 8000c6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c70:	e008      	b.n	8000c84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c72:	f7ff fdc1 	bl	80007f8 <HAL_GetTick>
 8000c76:	4602      	mov	r2, r0
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d901      	bls.n	8000c84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000c80:	2303      	movs	r3, #3
 8000c82:	e2e7      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c84:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1f0      	bne.n	8000c72 <HAL_RCC_OscConfig+0x1da>
 8000c90:	e000      	b.n	8000c94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d074      	beq.n	8000d8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	d005      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x21a>
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	2b0c      	cmp	r3, #12
 8000caa:	d10e      	bne.n	8000cca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d10b      	bne.n	8000cca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d064      	beq.n	8000d88 <HAL_RCC_OscConfig+0x2f0>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d160      	bne.n	8000d88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e2c4      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd2:	d106      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x24a>
 8000cd4:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	e01d      	b.n	8000d1e <HAL_RCC_OscConfig+0x286>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cea:	d10c      	bne.n	8000d06 <HAL_RCC_OscConfig+0x26e>
 8000cec:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	e00b      	b.n	8000d1e <HAL_RCC_OscConfig+0x286>
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_RCC_OscConfig+0x298>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d01c      	beq.n	8000d60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d26:	f7ff fd67 	bl	80007f8 <HAL_GetTick>
 8000d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d2c:	e011      	b.n	8000d52 <HAL_RCC_OscConfig+0x2ba>
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000
 8000d34:	08004e54 	.word	0x08004e54
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d40:	f7ff fd5a 	bl	80007f8 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b64      	cmp	r3, #100	; 0x64
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e280      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d52:	4baf      	ldr	r3, [pc, #700]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0f0      	beq.n	8000d40 <HAL_RCC_OscConfig+0x2a8>
 8000d5e:	e014      	b.n	8000d8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d60:	f7ff fd4a 	bl	80007f8 <HAL_GetTick>
 8000d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d66:	e008      	b.n	8000d7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d68:	f7ff fd46 	bl	80007f8 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b64      	cmp	r3, #100	; 0x64
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e26c      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d7a:	4ba5      	ldr	r3, [pc, #660]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f0      	bne.n	8000d68 <HAL_RCC_OscConfig+0x2d0>
 8000d86:	e000      	b.n	8000d8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d060      	beq.n	8000e58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d005      	beq.n	8000da8 <HAL_RCC_OscConfig+0x310>
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	2b0c      	cmp	r3, #12
 8000da0:	d119      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d116      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000da8:	4b99      	ldr	r3, [pc, #612]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d005      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x328>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e249      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc0:	4993      	ldr	r1, [pc, #588]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000dc2:	4b93      	ldr	r3, [pc, #588]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	061b      	lsls	r3, r3, #24
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000dd4:	e040      	b.n	8000e58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d023      	beq.n	8000e26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dde:	4a8c      	ldr	r2, [pc, #560]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000de0:	4b8b      	ldr	r3, [pc, #556]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dea:	f7ff fd05 	bl	80007f8 <HAL_GetTick>
 8000dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000df0:	e008      	b.n	8000e04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000df2:	f7ff fd01 	bl	80007f8 <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d901      	bls.n	8000e04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e227      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e04:	4b82      	ldr	r3, [pc, #520]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f0      	beq.n	8000df2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e10:	497f      	ldr	r1, [pc, #508]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000e12:	4b7f      	ldr	r3, [pc, #508]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	061b      	lsls	r3, r3, #24
 8000e20:	4313      	orrs	r3, r2
 8000e22:	604b      	str	r3, [r1, #4]
 8000e24:	e018      	b.n	8000e58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e26:	4a7a      	ldr	r2, [pc, #488]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000e28:	4b79      	ldr	r3, [pc, #484]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e32:	f7ff fce1 	bl	80007f8 <HAL_GetTick>
 8000e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e3a:	f7ff fcdd 	bl	80007f8 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e203      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e4c:	4b70      	ldr	r3, [pc, #448]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1f0      	bne.n	8000e3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d03c      	beq.n	8000ede <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d01c      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e6c:	4a68      	ldr	r2, [pc, #416]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000e6e:	4b68      	ldr	r3, [pc, #416]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fcbc 	bl	80007f8 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e84:	f7ff fcb8 	bl	80007f8 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e1de      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e96:	4b5e      	ldr	r3, [pc, #376]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0ef      	beq.n	8000e84 <HAL_RCC_OscConfig+0x3ec>
 8000ea4:	e01b      	b.n	8000ede <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ea6:	4a5a      	ldr	r2, [pc, #360]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000ea8:	4b59      	ldr	r3, [pc, #356]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eae:	f023 0301 	bic.w	r3, r3, #1
 8000eb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eb6:	f7ff fc9f 	bl	80007f8 <HAL_GetTick>
 8000eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ebe:	f7ff fc9b 	bl	80007f8 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e1c1      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ed0:	4b4f      	ldr	r3, [pc, #316]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1ef      	bne.n	8000ebe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 80a6 	beq.w	8001038 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eec:	2300      	movs	r3, #0
 8000eee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000ef0:	4b47      	ldr	r3, [pc, #284]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d10d      	bne.n	8000f18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000efc:	4a44      	ldr	r2, [pc, #272]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000efe:	4b44      	ldr	r3, [pc, #272]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f06:	6593      	str	r3, [r2, #88]	; 0x58
 8000f08:	4b41      	ldr	r3, [pc, #260]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f14:	2301      	movs	r3, #1
 8000f16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f18:	4b3e      	ldr	r3, [pc, #248]	; (8001014 <HAL_RCC_OscConfig+0x57c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d118      	bne.n	8000f56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f24:	4a3b      	ldr	r2, [pc, #236]	; (8001014 <HAL_RCC_OscConfig+0x57c>)
 8000f26:	4b3b      	ldr	r3, [pc, #236]	; (8001014 <HAL_RCC_OscConfig+0x57c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f30:	f7ff fc62 	bl	80007f8 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f38:	f7ff fc5e 	bl	80007f8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e184      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f4a:	4b32      	ldr	r3, [pc, #200]	; (8001014 <HAL_RCC_OscConfig+0x57c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d108      	bne.n	8000f70 <HAL_RCC_OscConfig+0x4d8>
 8000f5e:	4a2c      	ldr	r2, [pc, #176]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f6e:	e024      	b.n	8000fba <HAL_RCC_OscConfig+0x522>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	2b05      	cmp	r3, #5
 8000f76:	d110      	bne.n	8000f9a <HAL_RCC_OscConfig+0x502>
 8000f78:	4a25      	ldr	r2, [pc, #148]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f98:	e00f      	b.n	8000fba <HAL_RCC_OscConfig+0x522>
 8000f9a:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fa2:	f023 0301 	bic.w	r3, r3, #1
 8000fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000faa:	4a19      	ldr	r2, [pc, #100]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fb2:	f023 0304 	bic.w	r3, r3, #4
 8000fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d016      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc2:	f7ff fc19 	bl	80007f8 <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fc8:	e00a      	b.n	8000fe0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fca:	f7ff fc15 	bl	80007f8 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e139      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_RCC_OscConfig+0x578>)
 8000fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0ed      	beq.n	8000fca <HAL_RCC_OscConfig+0x532>
 8000fee:	e01a      	b.n	8001026 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ff0:	f7ff fc02 	bl	80007f8 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ff6:	e00f      	b.n	8001018 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fbfe 	bl	80007f8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	f241 3288 	movw	r2, #5000	; 0x1388
 8001006:	4293      	cmp	r3, r2
 8001008:	d906      	bls.n	8001018 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e122      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000
 8001014:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001018:	4b90      	ldr	r3, [pc, #576]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 800101a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1e8      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001026:	7ffb      	ldrb	r3, [r7, #31]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d105      	bne.n	8001038 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800102c:	4a8b      	ldr	r2, [pc, #556]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 800102e:	4b8b      	ldr	r3, [pc, #556]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001036:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 8108 	beq.w	8001252 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	2b02      	cmp	r3, #2
 8001048:	f040 80d0 	bne.w	80011ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800104c:	4b83      	ldr	r3, [pc, #524]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 0203 	and.w	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	429a      	cmp	r2, r3
 800105e:	d130      	bne.n	80010c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	3b01      	subs	r3, #1
 800106c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800106e:	429a      	cmp	r2, r3
 8001070:	d127      	bne.n	80010c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800107e:	429a      	cmp	r2, r3
 8001080:	d11f      	bne.n	80010c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800108c:	2a07      	cmp	r2, #7
 800108e:	bf14      	ite	ne
 8001090:	2201      	movne	r2, #1
 8001092:	2200      	moveq	r2, #0
 8001094:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001096:	4293      	cmp	r3, r2
 8001098:	d113      	bne.n	80010c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a4:	085b      	lsrs	r3, r3, #1
 80010a6:	3b01      	subs	r3, #1
 80010a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d109      	bne.n	80010c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	3b01      	subs	r3, #1
 80010bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010be:	429a      	cmp	r2, r3
 80010c0:	d06e      	beq.n	80011a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	2b0c      	cmp	r3, #12
 80010c6:	d069      	beq.n	800119c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80010c8:	4b64      	ldr	r3, [pc, #400]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d105      	bne.n	80010e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80010d4:	4b61      	ldr	r3, [pc, #388]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e0b7      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80010e4:	4a5d      	ldr	r2, [pc, #372]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 80010e6:	4b5d      	ldr	r3, [pc, #372]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80010f0:	f7ff fb82 	bl	80007f8 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f8:	f7ff fb7e 	bl	80007f8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e0a4      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800110a:	4b54      	ldr	r3, [pc, #336]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001116:	4851      	ldr	r0, [pc, #324]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 8001118:	4b50      	ldr	r3, [pc, #320]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	4b50      	ldr	r3, [pc, #320]	; (8001260 <HAL_RCC_OscConfig+0x7c8>)
 800111e:	4013      	ands	r3, r2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001128:	3a01      	subs	r2, #1
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	4311      	orrs	r1, r2
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001132:	0212      	lsls	r2, r2, #8
 8001134:	4311      	orrs	r1, r2
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800113a:	0852      	lsrs	r2, r2, #1
 800113c:	3a01      	subs	r2, #1
 800113e:	0552      	lsls	r2, r2, #21
 8001140:	4311      	orrs	r1, r2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001146:	0852      	lsrs	r2, r2, #1
 8001148:	3a01      	subs	r2, #1
 800114a:	0652      	lsls	r2, r2, #25
 800114c:	4311      	orrs	r1, r2
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001152:	0912      	lsrs	r2, r2, #4
 8001154:	0452      	lsls	r2, r2, #17
 8001156:	430a      	orrs	r2, r1
 8001158:	4313      	orrs	r3, r2
 800115a:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800115c:	4a3f      	ldr	r2, [pc, #252]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 800115e:	4b3f      	ldr	r3, [pc, #252]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001166:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001168:	4a3c      	ldr	r2, [pc, #240]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 800116a:	4b3c      	ldr	r3, [pc, #240]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001172:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001174:	f7ff fb40 	bl	80007f8 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117c:	f7ff fb3c 	bl	80007f8 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e062      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800118e:	4b33      	ldr	r3, [pc, #204]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800119a:	e05a      	b.n	8001252 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e059      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011a0:	4b2e      	ldr	r3, [pc, #184]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d152      	bne.n	8001252 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80011ac:	4a2b      	ldr	r2, [pc, #172]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 80011ae:	4b2b      	ldr	r3, [pc, #172]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80011b8:	4a28      	ldr	r2, [pc, #160]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80011c4:	f7ff fb18 	bl	80007f8 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011cc:	f7ff fb14 	bl	80007f8 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e03a      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f0      	beq.n	80011cc <HAL_RCC_OscConfig+0x734>
 80011ea:	e032      	b.n	8001252 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	2b0c      	cmp	r3, #12
 80011f0:	d02d      	beq.n	800124e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f2:	4a1a      	ldr	r2, [pc, #104]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011fc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d105      	bne.n	8001216 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800120a:	4a14      	ldr	r2, [pc, #80]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	f023 0303 	bic.w	r3, r3, #3
 8001214:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001216:	4a11      	ldr	r2, [pc, #68]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001224:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001226:	f7ff fae7 	bl	80007f8 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122e:	f7ff fae3 	bl	80007f8 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e009      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_RCC_OscConfig+0x7c4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f0      	bne.n	800122e <HAL_RCC_OscConfig+0x796>
 800124c:	e001      	b.n	8001252 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000
 8001260:	f99d808c 	.word	0xf99d808c

08001264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0c8      	b.n	800140a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001278:	4b66      	ldr	r3, [pc, #408]	; (8001414 <HAL_RCC_ClockConfig+0x1b0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0207 	and.w	r2, r3, #7
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d210      	bcs.n	80012a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	4963      	ldr	r1, [pc, #396]	; (8001414 <HAL_RCC_ClockConfig+0x1b0>)
 8001288:	4b62      	ldr	r3, [pc, #392]	; (8001414 <HAL_RCC_ClockConfig+0x1b0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 0207 	bic.w	r2, r3, #7
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001296:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <HAL_RCC_ClockConfig+0x1b0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0207 	and.w	r2, r3, #7
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0b0      	b.n	800140a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d04c      	beq.n	800134e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d107      	bne.n	80012cc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012bc:	4b56      	ldr	r3, [pc, #344]	; (8001418 <HAL_RCC_ClockConfig+0x1b4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d121      	bne.n	800130c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e09e      	b.n	800140a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d107      	bne.n	80012e4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012d4:	4b50      	ldr	r3, [pc, #320]	; (8001418 <HAL_RCC_ClockConfig+0x1b4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d115      	bne.n	800130c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e092      	b.n	800140a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d107      	bne.n	80012fc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ec:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <HAL_RCC_ClockConfig+0x1b4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d109      	bne.n	800130c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e086      	b.n	800140a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012fc:	4b46      	ldr	r3, [pc, #280]	; (8001418 <HAL_RCC_ClockConfig+0x1b4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e07e      	b.n	800140a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800130c:	4942      	ldr	r1, [pc, #264]	; (8001418 <HAL_RCC_ClockConfig+0x1b4>)
 800130e:	4b42      	ldr	r3, [pc, #264]	; (8001418 <HAL_RCC_ClockConfig+0x1b4>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f023 0203 	bic.w	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4313      	orrs	r3, r2
 800131c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800131e:	f7ff fa6b 	bl	80007f8 <HAL_GetTick>
 8001322:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001324:	e00a      	b.n	800133c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001326:	f7ff fa67 	bl	80007f8 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	f241 3288 	movw	r2, #5000	; 0x1388
 8001334:	4293      	cmp	r3, r2
 8001336:	d901      	bls.n	800133c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e066      	b.n	800140a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133c:	4b36      	ldr	r3, [pc, #216]	; (8001418 <HAL_RCC_ClockConfig+0x1b4>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 020c 	and.w	r2, r3, #12
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	429a      	cmp	r2, r3
 800134c:	d1eb      	bne.n	8001326 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d008      	beq.n	800136c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800135a:	492f      	ldr	r1, [pc, #188]	; (8001418 <HAL_RCC_ClockConfig+0x1b4>)
 800135c:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <HAL_RCC_ClockConfig+0x1b4>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	4313      	orrs	r3, r2
 800136a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800136c:	4b29      	ldr	r3, [pc, #164]	; (8001414 <HAL_RCC_ClockConfig+0x1b0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0207 	and.w	r2, r3, #7
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d910      	bls.n	800139c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137a:	4926      	ldr	r1, [pc, #152]	; (8001414 <HAL_RCC_ClockConfig+0x1b0>)
 800137c:	4b25      	ldr	r3, [pc, #148]	; (8001414 <HAL_RCC_ClockConfig+0x1b0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 0207 	bic.w	r2, r3, #7
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <HAL_RCC_ClockConfig+0x1b0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0207 	and.w	r2, r3, #7
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d001      	beq.n	800139c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e036      	b.n	800140a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a8:	491b      	ldr	r1, [pc, #108]	; (8001418 <HAL_RCC_ClockConfig+0x1b4>)
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_RCC_ClockConfig+0x1b4>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d009      	beq.n	80013da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013c6:	4914      	ldr	r1, [pc, #80]	; (8001418 <HAL_RCC_ClockConfig+0x1b4>)
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_RCC_ClockConfig+0x1b4>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013da:	f000 f825 	bl	8001428 <HAL_RCC_GetSysClockFreq>
 80013de:	4601      	mov	r1, r0
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_RCC_ClockConfig+0x1b4>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	4a0c      	ldr	r2, [pc, #48]	; (800141c <HAL_RCC_ClockConfig+0x1b8>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	fa21 f303 	lsr.w	r3, r1, r3
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f8a8 	bl	8000554 <HAL_InitTick>
 8001404:	4603      	mov	r3, r0
 8001406:	72fb      	strb	r3, [r7, #11]

  return status;
 8001408:	7afb      	ldrb	r3, [r7, #11]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000
 8001418:	40021000 	.word	0x40021000
 800141c:	08004e54 	.word	0x08004e54
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001436:	4b3d      	ldr	r3, [pc, #244]	; (800152c <HAL_RCC_GetSysClockFreq+0x104>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001440:	4b3a      	ldr	r3, [pc, #232]	; (800152c <HAL_RCC_GetSysClockFreq+0x104>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_GetSysClockFreq+0x34>
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	2b0c      	cmp	r3, #12
 8001454:	d121      	bne.n	800149a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d11e      	bne.n	800149a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800145c:	4b33      	ldr	r3, [pc, #204]	; (800152c <HAL_RCC_GetSysClockFreq+0x104>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d107      	bne.n	8001478 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001468:	4b30      	ldr	r3, [pc, #192]	; (800152c <HAL_RCC_GetSysClockFreq+0x104>)
 800146a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800146e:	0a1b      	lsrs	r3, r3, #8
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	e005      	b.n	8001484 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001478:	4b2c      	ldr	r3, [pc, #176]	; (800152c <HAL_RCC_GetSysClockFreq+0x104>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001484:	4a2a      	ldr	r2, [pc, #168]	; (8001530 <HAL_RCC_GetSysClockFreq+0x108>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10d      	bne.n	80014b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001498:	e00a      	b.n	80014b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	2b04      	cmp	r3, #4
 800149e:	d102      	bne.n	80014a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_RCC_GetSysClockFreq+0x10c>)
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	e004      	b.n	80014b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <HAL_RCC_GetSysClockFreq+0x110>)
 80014ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b0c      	cmp	r3, #12
 80014b4:	d133      	bne.n	800151e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_RCC_GetSysClockFreq+0x104>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d002      	beq.n	80014cc <HAL_RCC_GetSysClockFreq+0xa4>
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d003      	beq.n	80014d2 <HAL_RCC_GetSysClockFreq+0xaa>
 80014ca:	e005      	b.n	80014d8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_RCC_GetSysClockFreq+0x10c>)
 80014ce:	617b      	str	r3, [r7, #20]
      break;
 80014d0:	e005      	b.n	80014de <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_RCC_GetSysClockFreq+0x110>)
 80014d4:	617b      	str	r3, [r7, #20]
      break;
 80014d6:	e002      	b.n	80014de <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	617b      	str	r3, [r7, #20]
      break;
 80014dc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <HAL_RCC_GetSysClockFreq+0x104>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	3301      	adds	r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_RCC_GetSysClockFreq+0x104>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	fb02 f203 	mul.w	r2, r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_RCC_GetSysClockFreq+0x104>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	0e5b      	lsrs	r3, r3, #25
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	3301      	adds	r3, #1
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	fbb2 f3f3 	udiv	r3, r2, r3
 800151c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800151e:	69bb      	ldr	r3, [r7, #24]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3724      	adds	r7, #36	; 0x24
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40021000 	.word	0x40021000
 8001530:	08004e6c 	.word	0x08004e6c
 8001534:	00f42400 	.word	0x00f42400
 8001538:	007a1200 	.word	0x007a1200

0800153c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <HAL_RCC_GetHCLKFreq+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000000 	.word	0x20000000

08001554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001558:	f7ff fff0 	bl	800153c <HAL_RCC_GetHCLKFreq>
 800155c:	4601      	mov	r1, r0
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	0adb      	lsrs	r3, r3, #11
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_RCC_GetPCLK2Freq+0x28>)
 800156a:	5cd3      	ldrb	r3, [r2, r3]
 800156c:	f003 031f 	and.w	r3, r3, #31
 8001570:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000
 800157c:	08004e64 	.word	0x08004e64

08001580 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	220f      	movs	r2, #15
 800158e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_RCC_GetClockConfig+0x5c>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 0203 	and.w	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <HAL_RCC_GetClockConfig+0x5c>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_RCC_GetClockConfig+0x5c>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_RCC_GetClockConfig+0x5c>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	08db      	lsrs	r3, r3, #3
 80015ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <HAL_RCC_GetClockConfig+0x60>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0207 	and.w	r2, r3, #7
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	601a      	str	r2, [r3, #0]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40022000 	.word	0x40022000

080015e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80015f0:	4b2a      	ldr	r3, [pc, #168]	; (800169c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80015fc:	f7ff f9e8 	bl	80009d0 <HAL_PWREx_GetVoltageRange>
 8001600:	6178      	str	r0, [r7, #20]
 8001602:	e014      	b.n	800162e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	4a25      	ldr	r2, [pc, #148]	; (800169c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160e:	6593      	str	r3, [r2, #88]	; 0x58
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800161c:	f7ff f9d8 	bl	80009d0 <HAL_PWREx_GetVoltageRange>
 8001620:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001622:	4a1e      	ldr	r2, [pc, #120]	; (800169c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800162c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001634:	d10b      	bne.n	800164e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b80      	cmp	r3, #128	; 0x80
 800163a:	d919      	bls.n	8001670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2ba0      	cmp	r3, #160	; 0xa0
 8001640:	d902      	bls.n	8001648 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001642:	2302      	movs	r3, #2
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	e013      	b.n	8001670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	e010      	b.n	8001670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b80      	cmp	r3, #128	; 0x80
 8001652:	d902      	bls.n	800165a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001654:	2303      	movs	r3, #3
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	e00a      	b.n	8001670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b80      	cmp	r3, #128	; 0x80
 800165e:	d102      	bne.n	8001666 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001660:	2302      	movs	r3, #2
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	e004      	b.n	8001670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b70      	cmp	r3, #112	; 0x70
 800166a:	d101      	bne.n	8001670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800166c:	2301      	movs	r3, #1
 800166e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001670:	490b      	ldr	r1, [pc, #44]	; (80016a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 0207 	bic.w	r2, r3, #7
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0207 	and.w	r2, r3, #7
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	429a      	cmp	r2, r3
 800168c:	d001      	beq.n	8001692 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	40022000 	.word	0x40022000

080016a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e049      	b.n	800174a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d106      	bne.n	80016d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f841 	bl	8001752 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2202      	movs	r2, #2
 80016d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3304      	adds	r3, #4
 80016e0:	4619      	mov	r1, r3
 80016e2:	4610      	mov	r0, r2
 80016e4:	f000 f9f8 	bl	8001ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b01      	cmp	r3, #1
 800177a:	d001      	beq.n	8001780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e04f      	b.n	8001820 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2202      	movs	r2, #2
 8001784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	68d2      	ldr	r2, [r2, #12]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a23      	ldr	r2, [pc, #140]	; (800182c <HAL_TIM_Base_Start_IT+0xc4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d01d      	beq.n	80017de <HAL_TIM_Base_Start_IT+0x76>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017aa:	d018      	beq.n	80017de <HAL_TIM_Base_Start_IT+0x76>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1f      	ldr	r2, [pc, #124]	; (8001830 <HAL_TIM_Base_Start_IT+0xc8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d013      	beq.n	80017de <HAL_TIM_Base_Start_IT+0x76>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a1e      	ldr	r2, [pc, #120]	; (8001834 <HAL_TIM_Base_Start_IT+0xcc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d00e      	beq.n	80017de <HAL_TIM_Base_Start_IT+0x76>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <HAL_TIM_Base_Start_IT+0xd0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d009      	beq.n	80017de <HAL_TIM_Base_Start_IT+0x76>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1b      	ldr	r2, [pc, #108]	; (800183c <HAL_TIM_Base_Start_IT+0xd4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d004      	beq.n	80017de <HAL_TIM_Base_Start_IT+0x76>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_TIM_Base_Start_IT+0xd8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d115      	bne.n	800180a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_TIM_Base_Start_IT+0xdc>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2b06      	cmp	r3, #6
 80017ee:	d015      	beq.n	800181c <HAL_TIM_Base_Start_IT+0xb4>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f6:	d011      	beq.n	800181c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001808:	e008      	b.n	800181c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	f042 0201 	orr.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e000      	b.n	800181e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800181c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	40012c00 	.word	0x40012c00
 8001830:	40000400 	.word	0x40000400
 8001834:	40000800 	.word	0x40000800
 8001838:	40000c00 	.word	0x40000c00
 800183c:	40013400 	.word	0x40013400
 8001840:	40014000 	.word	0x40014000
 8001844:	00010007 	.word	0x00010007

08001848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b02      	cmp	r3, #2
 800185c:	d122      	bne.n	80018a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b02      	cmp	r3, #2
 800186a:	d11b      	bne.n	80018a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0202 	mvn.w	r2, #2
 8001874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f905 	bl	8001a9a <HAL_TIM_IC_CaptureCallback>
 8001890:	e005      	b.n	800189e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f8f7 	bl	8001a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f908 	bl	8001aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d122      	bne.n	80018f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d11b      	bne.n	80018f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0204 	mvn.w	r2, #4
 80018c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2202      	movs	r2, #2
 80018ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f8db 	bl	8001a9a <HAL_TIM_IC_CaptureCallback>
 80018e4:	e005      	b.n	80018f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f8cd 	bl	8001a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f8de 	bl	8001aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b08      	cmp	r3, #8
 8001904:	d122      	bne.n	800194c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b08      	cmp	r3, #8
 8001912:	d11b      	bne.n	800194c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f06f 0208 	mvn.w	r2, #8
 800191c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2204      	movs	r2, #4
 8001922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f8b1 	bl	8001a9a <HAL_TIM_IC_CaptureCallback>
 8001938:	e005      	b.n	8001946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f8a3 	bl	8001a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f8b4 	bl	8001aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	2b10      	cmp	r3, #16
 8001958:	d122      	bne.n	80019a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	2b10      	cmp	r3, #16
 8001966:	d11b      	bne.n	80019a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f06f 0210 	mvn.w	r2, #16
 8001970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2208      	movs	r2, #8
 8001976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f887 	bl	8001a9a <HAL_TIM_IC_CaptureCallback>
 800198c:	e005      	b.n	800199a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f879 	bl	8001a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f88a 	bl	8001aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d10e      	bne.n	80019cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d107      	bne.n	80019cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f06f 0201 	mvn.w	r2, #1
 80019c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7fe fd86 	bl	80004d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d6:	2b80      	cmp	r3, #128	; 0x80
 80019d8:	d10e      	bne.n	80019f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e4:	2b80      	cmp	r3, #128	; 0x80
 80019e6:	d107      	bne.n	80019f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f914 	bl	8001c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a06:	d10e      	bne.n	8001a26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a12:	2b80      	cmp	r3, #128	; 0x80
 8001a14:	d107      	bne.n	8001a26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f907 	bl	8001c34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a30:	2b40      	cmp	r3, #64	; 0x40
 8001a32:	d10e      	bne.n	8001a52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3e:	2b40      	cmp	r3, #64	; 0x40
 8001a40:	d107      	bne.n	8001a52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f838 	bl	8001ac2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	f003 0320 	and.w	r3, r3, #32
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d10e      	bne.n	8001a7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f003 0320 	and.w	r3, r3, #32
 8001a6a:	2b20      	cmp	r3, #32
 8001a6c:	d107      	bne.n	8001a7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f06f 0220 	mvn.w	r2, #32
 8001a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f8c7 	bl	8001c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a40      	ldr	r2, [pc, #256]	; (8001bec <TIM_Base_SetConfig+0x114>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d013      	beq.n	8001b18 <TIM_Base_SetConfig+0x40>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af6:	d00f      	beq.n	8001b18 <TIM_Base_SetConfig+0x40>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a3d      	ldr	r2, [pc, #244]	; (8001bf0 <TIM_Base_SetConfig+0x118>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00b      	beq.n	8001b18 <TIM_Base_SetConfig+0x40>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3c      	ldr	r2, [pc, #240]	; (8001bf4 <TIM_Base_SetConfig+0x11c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d007      	beq.n	8001b18 <TIM_Base_SetConfig+0x40>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a3b      	ldr	r2, [pc, #236]	; (8001bf8 <TIM_Base_SetConfig+0x120>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d003      	beq.n	8001b18 <TIM_Base_SetConfig+0x40>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a3a      	ldr	r2, [pc, #232]	; (8001bfc <TIM_Base_SetConfig+0x124>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d108      	bne.n	8001b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a2f      	ldr	r2, [pc, #188]	; (8001bec <TIM_Base_SetConfig+0x114>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d01f      	beq.n	8001b72 <TIM_Base_SetConfig+0x9a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b38:	d01b      	beq.n	8001b72 <TIM_Base_SetConfig+0x9a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a2c      	ldr	r2, [pc, #176]	; (8001bf0 <TIM_Base_SetConfig+0x118>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d017      	beq.n	8001b72 <TIM_Base_SetConfig+0x9a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a2b      	ldr	r2, [pc, #172]	; (8001bf4 <TIM_Base_SetConfig+0x11c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <TIM_Base_SetConfig+0x9a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a2a      	ldr	r2, [pc, #168]	; (8001bf8 <TIM_Base_SetConfig+0x120>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00f      	beq.n	8001b72 <TIM_Base_SetConfig+0x9a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <TIM_Base_SetConfig+0x124>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00b      	beq.n	8001b72 <TIM_Base_SetConfig+0x9a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a28      	ldr	r2, [pc, #160]	; (8001c00 <TIM_Base_SetConfig+0x128>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <TIM_Base_SetConfig+0x9a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <TIM_Base_SetConfig+0x12c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d003      	beq.n	8001b72 <TIM_Base_SetConfig+0x9a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a26      	ldr	r2, [pc, #152]	; (8001c08 <TIM_Base_SetConfig+0x130>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d108      	bne.n	8001b84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a10      	ldr	r2, [pc, #64]	; (8001bec <TIM_Base_SetConfig+0x114>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00f      	beq.n	8001bd0 <TIM_Base_SetConfig+0xf8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <TIM_Base_SetConfig+0x124>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d00b      	beq.n	8001bd0 <TIM_Base_SetConfig+0xf8>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <TIM_Base_SetConfig+0x128>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d007      	beq.n	8001bd0 <TIM_Base_SetConfig+0xf8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <TIM_Base_SetConfig+0x12c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d003      	beq.n	8001bd0 <TIM_Base_SetConfig+0xf8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <TIM_Base_SetConfig+0x130>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d103      	bne.n	8001bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	615a      	str	r2, [r3, #20]
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40012c00 	.word	0x40012c00
 8001bf0:	40000400 	.word	0x40000400
 8001bf4:	40000800 	.word	0x40000800
 8001bf8:	40000c00 	.word	0x40000c00
 8001bfc:	40013400 	.word	0x40013400
 8001c00:	40014000 	.word	0x40014000
 8001c04:	40014400 	.word	0x40014400
 8001c08:	40014800 	.word	0x40014800

08001c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c5a:	2b84      	cmp	r3, #132	; 0x84
 8001c5c:	d005      	beq.n	8001c6a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001c5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4413      	add	r3, r2
 8001c66:	3303      	adds	r3, #3
 8001c68:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001c7c:	f000 ff60 	bl	8002b40 <vTaskStartScheduler>
  
  return osOK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c88:	b089      	sub	sp, #36	; 0x24
 8001c8a:	af04      	add	r7, sp, #16
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <osThreadCreate+0x54>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01c      	beq.n	8001cda <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685c      	ldr	r4, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681d      	ldr	r5, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691e      	ldr	r6, [r3, #16]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ffc8 	bl	8001c48 <makeFreeRtosPriority>
 8001cb8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cc2:	9202      	str	r2, [sp, #8]
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	9100      	str	r1, [sp, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4632      	mov	r2, r6
 8001ccc:	4629      	mov	r1, r5
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f000 fce4 	bl	800269c <xTaskCreateStatic>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	e01c      	b.n	8001d14 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685c      	ldr	r4, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ce6:	b29e      	uxth	r6, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ffaa 	bl	8001c48 <makeFreeRtosPriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	9200      	str	r2, [sp, #0]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	4632      	mov	r2, r6
 8001d02:	4629      	mov	r1, r5
 8001d04:	4620      	mov	r0, r4
 8001d06:	f000 fd23 	bl	8002750 <xTaskCreate>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d001      	beq.n	8001d14 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e000      	b.n	8001d16 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001d14:	68fb      	ldr	r3, [r7, #12]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d1e <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fe48 	bl	80029bc <vTaskDelete>
  return osOK;
 8001d2c:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <osDelay+0x16>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	e000      	b.n	8001d4e <osDelay+0x18>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fec2 	bl	8002ad8 <vTaskDelay>
  
  return osOK;
 8001d54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f103 0208 	add.w	r2, r3, #8
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d76:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f103 0208 	add.w	r2, r3, #8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f103 0208 	add.w	r2, r3, #8
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	601a      	str	r2, [r3, #0]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e16:	d103      	bne.n	8001e20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e00c      	b.n	8001e3a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3308      	adds	r3, #8
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	e002      	b.n	8001e2e <vListInsert+0x2e>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d9f6      	bls.n	8001e28 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e72:	b480      	push	{r7}
 8001e74:	b085      	sub	sp, #20
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6892      	ldr	r2, [r2, #8]
 8001e88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6852      	ldr	r2, [r2, #4]
 8001e92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d103      	bne.n	8001ea6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	1e5a      	subs	r2, r3, #1
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3b04      	subs	r3, #4
 8001ed8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3b04      	subs	r3, #4
 8001ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f023 0201 	bic.w	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	3b04      	subs	r3, #4
 8001ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001ef8:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <pxPortInitialiseStack+0x64>)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3b14      	subs	r3, #20
 8001f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3b04      	subs	r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f06f 0202 	mvn.w	r2, #2
 8001f16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3b20      	subs	r3, #32
 8001f1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	08001f31 	.word	0x08001f31

08001f30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <prvTaskExitError+0x50>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f42:	d009      	beq.n	8001f58 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f48:	f383 8811 	msr	BASEPRI, r3
 8001f4c:	f3bf 8f6f 	isb	sy
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	e7fe      	b.n	8001f56 <prvTaskExitError+0x26>
 8001f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5c:	f383 8811 	msr	BASEPRI, r3
 8001f60:	f3bf 8f6f 	isb	sy
 8001f64:	f3bf 8f4f 	dsb	sy
 8001f68:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001f6a:	bf00      	nop
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0fc      	beq.n	8001f6c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	2000000c 	.word	0x2000000c
	...

08001f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <pxCurrentTCBConst2>)
 8001f92:	6819      	ldr	r1, [r3, #0]
 8001f94:	6808      	ldr	r0, [r1, #0]
 8001f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f9a:	f380 8809 	msr	PSP, r0
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	f04f 0000 	mov.w	r0, #0
 8001fa6:	f380 8811 	msr	BASEPRI, r0
 8001faa:	4770      	bx	lr
 8001fac:	f3af 8000 	nop.w

08001fb0 <pxCurrentTCBConst2>:
 8001fb0:	20001038 	.word	0x20001038
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop

08001fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001fb8:	4808      	ldr	r0, [pc, #32]	; (8001fdc <prvPortStartFirstTask+0x24>)
 8001fba:	6800      	ldr	r0, [r0, #0]
 8001fbc:	6800      	ldr	r0, [r0, #0]
 8001fbe:	f380 8808 	msr	MSP, r0
 8001fc2:	f04f 0000 	mov.w	r0, #0
 8001fc6:	f380 8814 	msr	CONTROL, r0
 8001fca:	b662      	cpsie	i
 8001fcc:	b661      	cpsie	f
 8001fce:	f3bf 8f4f 	dsb	sy
 8001fd2:	f3bf 8f6f 	isb	sy
 8001fd6:	df00      	svc	0
 8001fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001fda:	bf00      	nop
 8001fdc:	e000ed08 	.word	0xe000ed08

08001fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001fe6:	4b44      	ldr	r3, [pc, #272]	; (80020f8 <xPortStartScheduler+0x118>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a44      	ldr	r2, [pc, #272]	; (80020fc <xPortStartScheduler+0x11c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d109      	bne.n	8002004 <xPortStartScheduler+0x24>
 8001ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff4:	f383 8811 	msr	BASEPRI, r3
 8001ff8:	f3bf 8f6f 	isb	sy
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	e7fe      	b.n	8002002 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002004:	4b3c      	ldr	r3, [pc, #240]	; (80020f8 <xPortStartScheduler+0x118>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a3d      	ldr	r2, [pc, #244]	; (8002100 <xPortStartScheduler+0x120>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d109      	bne.n	8002022 <xPortStartScheduler+0x42>
 800200e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002012:	f383 8811 	msr	BASEPRI, r3
 8002016:	f3bf 8f6f 	isb	sy
 800201a:	f3bf 8f4f 	dsb	sy
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	e7fe      	b.n	8002020 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002022:	4b38      	ldr	r3, [pc, #224]	; (8002104 <xPortStartScheduler+0x124>)
 8002024:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	22ff      	movs	r2, #255	; 0xff
 8002032:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b30      	ldr	r3, [pc, #192]	; (8002108 <xPortStartScheduler+0x128>)
 8002048:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800204a:	4b30      	ldr	r3, [pc, #192]	; (800210c <xPortStartScheduler+0x12c>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002050:	e009      	b.n	8002066 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002052:	4b2e      	ldr	r3, [pc, #184]	; (800210c <xPortStartScheduler+0x12c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3b01      	subs	r3, #1
 8002058:	4a2c      	ldr	r2, [pc, #176]	; (800210c <xPortStartScheduler+0x12c>)
 800205a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206e:	2b80      	cmp	r3, #128	; 0x80
 8002070:	d0ef      	beq.n	8002052 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002072:	4b26      	ldr	r3, [pc, #152]	; (800210c <xPortStartScheduler+0x12c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	d009      	beq.n	8002092 <xPortStartScheduler+0xb2>
 800207e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002082:	f383 8811 	msr	BASEPRI, r3
 8002086:	f3bf 8f6f 	isb	sy
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	e7fe      	b.n	8002090 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <xPortStartScheduler+0x12c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	4a1c      	ldr	r2, [pc, #112]	; (800210c <xPortStartScheduler+0x12c>)
 800209a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <xPortStartScheduler+0x12c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020a4:	4a19      	ldr	r2, [pc, #100]	; (800210c <xPortStartScheduler+0x12c>)
 80020a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80020b0:	4a17      	ldr	r2, [pc, #92]	; (8002110 <xPortStartScheduler+0x130>)
 80020b2:	4b17      	ldr	r3, [pc, #92]	; (8002110 <xPortStartScheduler+0x130>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <xPortStartScheduler+0x130>)
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <xPortStartScheduler+0x130>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80020c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80020c8:	f000 f8d6 	bl	8002278 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <xPortStartScheduler+0x134>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80020d2:	f000 f8f5 	bl	80022c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <xPortStartScheduler+0x138>)
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <xPortStartScheduler+0x138>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80020e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80020e2:	f7ff ff69 	bl	8001fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80020e6:	f000 feeb 	bl	8002ec0 <vTaskSwitchContext>
	prvTaskExitError();
 80020ea:	f7ff ff21 	bl	8001f30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	e000ed00 	.word	0xe000ed00
 80020fc:	410fc271 	.word	0x410fc271
 8002100:	410fc270 	.word	0x410fc270
 8002104:	e000e400 	.word	0xe000e400
 8002108:	20000458 	.word	0x20000458
 800210c:	2000045c 	.word	0x2000045c
 8002110:	e000ed20 	.word	0xe000ed20
 8002114:	2000000c 	.word	0x2000000c
 8002118:	e000ef34 	.word	0xe000ef34

0800211c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002126:	f383 8811 	msr	BASEPRI, r3
 800212a:	f3bf 8f6f 	isb	sy
 800212e:	f3bf 8f4f 	dsb	sy
 8002132:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <vPortEnterCritical+0x54>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <vPortEnterCritical+0x54>)
 800213c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <vPortEnterCritical+0x54>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d10e      	bne.n	8002164 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <vPortEnterCritical+0x58>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d009      	beq.n	8002164 <vPortEnterCritical+0x48>
 8002150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	e7fe      	b.n	8002162 <vPortEnterCritical+0x46>
	}
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	2000000c 	.word	0x2000000c
 8002174:	e000ed04 	.word	0xe000ed04

08002178 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <vPortExitCritical+0x4c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <vPortExitCritical+0x22>
 8002186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218a:	f383 8811 	msr	BASEPRI, r3
 800218e:	f3bf 8f6f 	isb	sy
 8002192:	f3bf 8f4f 	dsb	sy
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	e7fe      	b.n	8002198 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <vPortExitCritical+0x4c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <vPortExitCritical+0x4c>)
 80021a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80021a4:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <vPortExitCritical+0x4c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d104      	bne.n	80021b6 <vPortExitCritical+0x3e>
 80021ac:	2300      	movs	r3, #0
 80021ae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	2000000c 	.word	0x2000000c
	...

080021d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80021d0:	f3ef 8009 	mrs	r0, PSP
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <pxCurrentTCBConst>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	f01e 0f10 	tst.w	lr, #16
 80021e0:	bf08      	it	eq
 80021e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80021e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ea:	6010      	str	r0, [r2, #0]
 80021ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80021f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80021f4:	f380 8811 	msr	BASEPRI, r0
 80021f8:	f3bf 8f4f 	dsb	sy
 80021fc:	f3bf 8f6f 	isb	sy
 8002200:	f000 fe5e 	bl	8002ec0 <vTaskSwitchContext>
 8002204:	f04f 0000 	mov.w	r0, #0
 8002208:	f380 8811 	msr	BASEPRI, r0
 800220c:	bc09      	pop	{r0, r3}
 800220e:	6819      	ldr	r1, [r3, #0]
 8002210:	6808      	ldr	r0, [r1, #0]
 8002212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002216:	f01e 0f10 	tst.w	lr, #16
 800221a:	bf08      	it	eq
 800221c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002220:	f380 8809 	msr	PSP, r0
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	f3af 8000 	nop.w

08002230 <pxCurrentTCBConst>:
 8002230:	20001038 	.word	0x20001038
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop

08002238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
	__asm volatile
 800223e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002242:	f383 8811 	msr	BASEPRI, r3
 8002246:	f3bf 8f6f 	isb	sy
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002250:	f000 fd7e 	bl	8002d50 <xTaskIncrementTick>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <SysTick_Handler+0x3c>)
 800225c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	2300      	movs	r3, #0
 8002264:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	e000ed04 	.word	0xe000ed04

08002278 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <vPortSetupTimerInterrupt+0x34>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <vPortSetupTimerInterrupt+0x38>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <vPortSetupTimerInterrupt+0x3c>)
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <vPortSetupTimerInterrupt+0x40>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	490b      	ldr	r1, [pc, #44]	; (80022bc <vPortSetupTimerInterrupt+0x44>)
 8002290:	fba1 1303 	umull	r1, r3, r1, r3
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	3b01      	subs	r3, #1
 8002298:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <vPortSetupTimerInterrupt+0x34>)
 800229c:	2207      	movs	r2, #7
 800229e:	601a      	str	r2, [r3, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e010 	.word	0xe000e010
 80022b0:	e000e018 	.word	0xe000e018
 80022b4:	e000e014 	.word	0xe000e014
 80022b8:	20000000 	.word	0x20000000
 80022bc:	10624dd3 	.word	0x10624dd3

080022c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80022c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80022d0 <vPortEnableVFP+0x10>
 80022c4:	6801      	ldr	r1, [r0, #0]
 80022c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80022ca:	6001      	str	r1, [r0, #0]
 80022cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80022ce:	bf00      	nop
 80022d0:	e000ed88 	.word	0xe000ed88

080022d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80022e0:	f000 fc8c 	bl	8002bfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80022e4:	4b59      	ldr	r3, [pc, #356]	; (800244c <pvPortMalloc+0x178>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80022ec:	f000 f91a 	bl	8002524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80022f0:	4b57      	ldr	r3, [pc, #348]	; (8002450 <pvPortMalloc+0x17c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 8091 	bne.w	8002420 <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01c      	beq.n	800233e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002304:	2208      	movs	r2, #8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	2b00      	cmp	r3, #0
 8002314:	d013      	beq.n	800233e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f023 0307 	bic.w	r3, r3, #7
 800231c:	3308      	adds	r3, #8
 800231e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <pvPortMalloc+0x6a>
	__asm volatile
 800232a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232e:	f383 8811 	msr	BASEPRI, r3
 8002332:	f3bf 8f6f 	isb	sy
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e7fe      	b.n	800233c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d06d      	beq.n	8002420 <pvPortMalloc+0x14c>
 8002344:	4b43      	ldr	r3, [pc, #268]	; (8002454 <pvPortMalloc+0x180>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	d868      	bhi.n	8002420 <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800234e:	4b42      	ldr	r3, [pc, #264]	; (8002458 <pvPortMalloc+0x184>)
 8002350:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002352:	4b41      	ldr	r3, [pc, #260]	; (8002458 <pvPortMalloc+0x184>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002358:	e004      	b.n	8002364 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	429a      	cmp	r2, r3
 800236c:	d203      	bcs.n	8002376 <pvPortMalloc+0xa2>
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f1      	bne.n	800235a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002376:	4b35      	ldr	r3, [pc, #212]	; (800244c <pvPortMalloc+0x178>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237c:	429a      	cmp	r2, r3
 800237e:	d04f      	beq.n	8002420 <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2208      	movs	r2, #8
 8002386:	4413      	add	r3, r2
 8002388:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	1ad2      	subs	r2, r2, r3
 800239a:	2308      	movs	r3, #8
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	429a      	cmp	r2, r3
 80023a0:	d91e      	bls.n	80023e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80023a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4413      	add	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <pvPortMalloc+0xf4>
 80023b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	e7fe      	b.n	80023c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	1ad2      	subs	r2, r2, r3
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80023da:	69b8      	ldr	r0, [r7, #24]
 80023dc:	f000 f904 	bl	80025e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80023e0:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <pvPortMalloc+0x180>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <pvPortMalloc+0x180>)
 80023ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <pvPortMalloc+0x180>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <pvPortMalloc+0x188>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d203      	bcs.n	8002402 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <pvPortMalloc+0x180>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <pvPortMalloc+0x188>)
 8002400:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <pvPortMalloc+0x17c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	431a      	orrs	r2, r3
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <pvPortMalloc+0x18c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	3301      	adds	r3, #1
 800241c:	4a10      	ldr	r2, [pc, #64]	; (8002460 <pvPortMalloc+0x18c>)
 800241e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002420:	f000 fbfa 	bl	8002c18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <pvPortMalloc+0x16e>
 800242e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002432:	f383 8811 	msr	BASEPRI, r3
 8002436:	f3bf 8f6f 	isb	sy
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e7fe      	b.n	8002440 <pvPortMalloc+0x16c>
	return pvReturn;
 8002442:	69fb      	ldr	r3, [r7, #28]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3728      	adds	r7, #40	; 0x28
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20001020 	.word	0x20001020
 8002450:	20001034 	.word	0x20001034
 8002454:	20001024 	.word	0x20001024
 8002458:	20001018 	.word	0x20001018
 800245c:	20001028 	.word	0x20001028
 8002460:	2000102c 	.word	0x2000102c

08002464 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d04b      	beq.n	800250e <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002476:	2308      	movs	r3, #8
 8002478:	425b      	negs	r3, r3
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4413      	add	r3, r2
 800247e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4b23      	ldr	r3, [pc, #140]	; (8002518 <vPortFree+0xb4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <vPortFree+0x42>
 8002492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002496:	f383 8811 	msr	BASEPRI, r3
 800249a:	f3bf 8f6f 	isb	sy
 800249e:	f3bf 8f4f 	dsb	sy
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	e7fe      	b.n	80024a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <vPortFree+0x5e>
 80024ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b2:	f383 8811 	msr	BASEPRI, r3
 80024b6:	f3bf 8f6f 	isb	sy
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	e7fe      	b.n	80024c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <vPortFree+0xb4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01e      	beq.n	800250e <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d11a      	bne.n	800250e <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <vPortFree+0xb4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	401a      	ands	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80024e8:	f000 fb88 	bl	8002bfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <vPortFree+0xb8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <vPortFree+0xb8>)
 80024f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024fa:	6938      	ldr	r0, [r7, #16]
 80024fc:	f000 f874 	bl	80025e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <vPortFree+0xbc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3301      	adds	r3, #1
 8002506:	4a06      	ldr	r2, [pc, #24]	; (8002520 <vPortFree+0xbc>)
 8002508:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800250a:	f000 fb85 	bl	8002c18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20001034 	.word	0x20001034
 800251c:	20001024 	.word	0x20001024
 8002520:	20001030 	.word	0x20001030

08002524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800252a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800252e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <prvHeapInit+0xac>)
 8002532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00c      	beq.n	8002558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3307      	adds	r3, #7
 8002542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0307 	bic.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <prvHeapInit+0xac>)
 8002554:	4413      	add	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800255c:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <prvHeapInit+0xb0>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002562:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <prvHeapInit+0xb0>)
 8002564:	2200      	movs	r2, #0
 8002566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	4413      	add	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002570:	2208      	movs	r2, #8
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0307 	bic.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a15      	ldr	r2, [pc, #84]	; (80025d8 <prvHeapInit+0xb4>)
 8002584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <prvHeapInit+0xb4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2200      	movs	r2, #0
 800258c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <prvHeapInit+0xb4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	1ad2      	subs	r2, r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <prvHeapInit+0xb4>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <prvHeapInit+0xb8>)
 80025b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <prvHeapInit+0xbc>)
 80025ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <prvHeapInit+0xc0>)
 80025be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025c2:	601a      	str	r2, [r3, #0]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	20000460 	.word	0x20000460
 80025d4:	20001018 	.word	0x20001018
 80025d8:	20001020 	.word	0x20001020
 80025dc:	20001028 	.word	0x20001028
 80025e0:	20001024 	.word	0x20001024
 80025e4:	20001034 	.word	0x20001034

080025e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <prvInsertBlockIntoFreeList+0xac>)
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	e002      	b.n	80025fc <prvInsertBlockIntoFreeList+0x14>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	429a      	cmp	r2, r3
 8002604:	d3f7      	bcc.n	80025f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	441a      	add	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	429a      	cmp	r2, r3
 8002616:	d108      	bne.n	800262a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	441a      	add	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	441a      	add	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d118      	bne.n	8002670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <prvInsertBlockIntoFreeList+0xb0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d00d      	beq.n	8002666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	441a      	add	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e008      	b.n	8002678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <prvInsertBlockIntoFreeList+0xb0>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e003      	b.n	8002678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	d002      	beq.n	8002686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20001018 	.word	0x20001018
 8002698:	20001020 	.word	0x20001020

0800269c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08e      	sub	sp, #56	; 0x38
 80026a0:	af04      	add	r7, sp, #16
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80026aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <xTaskCreateStatic+0x28>
 80026b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	623b      	str	r3, [r7, #32]
 80026c2:	e7fe      	b.n	80026c2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80026c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <xTaskCreateStatic+0x42>
 80026ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ce:	f383 8811 	msr	BASEPRI, r3
 80026d2:	f3bf 8f6f 	isb	sy
 80026d6:	f3bf 8f4f 	dsb	sy
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	e7fe      	b.n	80026dc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80026de:	2354      	movs	r3, #84	; 0x54
 80026e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b54      	cmp	r3, #84	; 0x54
 80026e6:	d009      	beq.n	80026fc <xTaskCreateStatic+0x60>
 80026e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	e7fe      	b.n	80026fa <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80026fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01e      	beq.n	8002742 <xTaskCreateStatic+0xa6>
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01b      	beq.n	8002742 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002712:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800271c:	2300      	movs	r3, #0
 800271e:	9303      	str	r3, [sp, #12]
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f850 	bl	80027da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800273a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800273c:	f000 f8d4 	bl	80028e8 <prvAddNewTaskToReadyList>
 8002740:	e001      	b.n	8002746 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002746:	697b      	ldr	r3, [r7, #20]
	}
 8002748:	4618      	mov	r0, r3
 800274a:	3728      	adds	r7, #40	; 0x28
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af04      	add	r7, sp, #16
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	4613      	mov	r3, r2
 800275e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fdb5 	bl	80022d4 <pvPortMalloc>
 800276a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00e      	beq.n	8002790 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002772:	2054      	movs	r0, #84	; 0x54
 8002774:	f7ff fdae 	bl	80022d4 <pvPortMalloc>
 8002778:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	631a      	str	r2, [r3, #48]	; 0x30
 8002786:	e005      	b.n	8002794 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002788:	6978      	ldr	r0, [r7, #20]
 800278a:	f7ff fe6b 	bl	8002464 <vPortFree>
 800278e:	e001      	b.n	8002794 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d017      	beq.n	80027ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027a2:	88fa      	ldrh	r2, [r7, #6]
 80027a4:	2300      	movs	r3, #0
 80027a6:	9303      	str	r3, [sp, #12]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	9302      	str	r3, [sp, #8]
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68b9      	ldr	r1, [r7, #8]
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f80e 	bl	80027da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027be:	69f8      	ldr	r0, [r7, #28]
 80027c0:	f000 f892 	bl	80028e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80027c4:	2301      	movs	r3, #1
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	e002      	b.n	80027d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80027d0:	69bb      	ldr	r3, [r7, #24]
	}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b088      	sub	sp, #32
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027f2:	3b01      	subs	r3, #1
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	f023 0307 	bic.w	r3, r3, #7
 8002800:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	2b00      	cmp	r3, #0
 800280a:	d009      	beq.n	8002820 <prvInitialiseNewTask+0x46>
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	e7fe      	b.n	800281e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01f      	beq.n	8002866 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	e012      	b.n	8002852 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	4413      	add	r3, r2
 8002832:	7819      	ldrb	r1, [r3, #0]
 8002834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	4413      	add	r3, r2
 800283a:	3334      	adds	r3, #52	; 0x34
 800283c:	460a      	mov	r2, r1
 800283e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	4413      	add	r3, r2
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d006      	beq.n	800285a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	3301      	adds	r3, #1
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d9e9      	bls.n	800282c <prvInitialiseNewTask+0x52>
 8002858:	e000      	b.n	800285c <prvInitialiseNewTask+0x82>
			{
				break;
 800285a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002864:	e003      	b.n	800286e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	2b06      	cmp	r3, #6
 8002872:	d901      	bls.n	8002878 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002874:	2306      	movs	r3, #6
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800287c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002886:	2200      	movs	r2, #0
 8002888:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	3304      	adds	r3, #4
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fa85 	bl	8001d9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	3318      	adds	r3, #24
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fa80 	bl	8001d9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	f1c3 0207 	rsb	r2, r3, #7
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	2200      	movs	r2, #0
 80028b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80028ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	68f9      	ldr	r1, [r7, #12]
 80028c6:	69b8      	ldr	r0, [r7, #24]
 80028c8:	f7ff fafe 	bl	8001ec8 <pxPortInitialiseStack>
 80028cc:	4602      	mov	r2, r0
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80028d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028de:	bf00      	nop
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80028f0:	f7ff fc14 	bl	800211c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80028f4:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <prvAddNewTaskToReadyList+0xb8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	4a29      	ldr	r2, [pc, #164]	; (80029a0 <prvAddNewTaskToReadyList+0xb8>)
 80028fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80028fe:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <prvAddNewTaskToReadyList+0xbc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002906:	4a27      	ldr	r2, [pc, #156]	; (80029a4 <prvAddNewTaskToReadyList+0xbc>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800290c:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <prvAddNewTaskToReadyList+0xb8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d110      	bne.n	8002936 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002914:	f000 fb46 	bl	8002fa4 <prvInitialiseTaskLists>
 8002918:	e00d      	b.n	8002936 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800291a:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <prvAddNewTaskToReadyList+0xc0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <prvAddNewTaskToReadyList+0xbc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	429a      	cmp	r2, r3
 800292e:	d802      	bhi.n	8002936 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002930:	4a1c      	ldr	r2, [pc, #112]	; (80029a4 <prvAddNewTaskToReadyList+0xbc>)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <prvAddNewTaskToReadyList+0xc4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3301      	adds	r3, #1
 800293c:	4a1b      	ldr	r2, [pc, #108]	; (80029ac <prvAddNewTaskToReadyList+0xc4>)
 800293e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	2201      	movs	r2, #1
 8002946:	409a      	lsls	r2, r3
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <prvAddNewTaskToReadyList+0xc8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4313      	orrs	r3, r2
 800294e:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <prvAddNewTaskToReadyList+0xc8>)
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4a15      	ldr	r2, [pc, #84]	; (80029b4 <prvAddNewTaskToReadyList+0xcc>)
 8002960:	441a      	add	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3304      	adds	r3, #4
 8002966:	4619      	mov	r1, r3
 8002968:	4610      	mov	r0, r2
 800296a:	f7ff fa25 	bl	8001db8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800296e:	f7ff fc03 	bl	8002178 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <prvAddNewTaskToReadyList+0xc0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00e      	beq.n	8002998 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <prvAddNewTaskToReadyList+0xbc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	429a      	cmp	r2, r3
 8002986:	d207      	bcs.n	8002998 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <prvAddNewTaskToReadyList+0xd0>)
 800298a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20001138 	.word	0x20001138
 80029a4:	20001038 	.word	0x20001038
 80029a8:	20001144 	.word	0x20001144
 80029ac:	20001154 	.word	0x20001154
 80029b0:	20001140 	.word	0x20001140
 80029b4:	2000103c 	.word	0x2000103c
 80029b8:	e000ed04 	.word	0xe000ed04

080029bc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80029c4:	f7ff fbaa 	bl	800211c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <vTaskDelete+0x18>
 80029ce:	4b38      	ldr	r3, [pc, #224]	; (8002ab0 <vTaskDelete+0xf4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	e000      	b.n	80029d6 <vTaskDelete+0x1a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3304      	adds	r3, #4
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fa48 	bl	8001e72 <uxListRemove>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d115      	bne.n	8002a14 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ec:	4931      	ldr	r1, [pc, #196]	; (8002ab4 <vTaskDelete+0xf8>)
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10a      	bne.n	8002a14 <vTaskDelete+0x58>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	2201      	movs	r2, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43da      	mvns	r2, r3
 8002a0a:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <vTaskDelete+0xfc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <vTaskDelete+0xfc>)
 8002a12:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3318      	adds	r3, #24
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fa26 	bl	8001e72 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002a26:	4b25      	ldr	r3, [pc, #148]	; (8002abc <vTaskDelete+0x100>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	4a23      	ldr	r2, [pc, #140]	; (8002abc <vTaskDelete+0x100>)
 8002a2e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002a30:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <vTaskDelete+0xf4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d10b      	bne.n	8002a52 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	481f      	ldr	r0, [pc, #124]	; (8002ac0 <vTaskDelete+0x104>)
 8002a42:	f7ff f9b9 	bl	8001db8 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002a46:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <vTaskDelete+0x108>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <vTaskDelete+0x108>)
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	e009      	b.n	8002a66 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <vTaskDelete+0x10c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <vTaskDelete+0x10c>)
 8002a5a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fb0d 	bl	800307c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002a62:	f000 fb39 	bl	80030d8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8002a66:	f7ff fb87 	bl	8002178 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <vTaskDelete+0x110>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01a      	beq.n	8002aa8 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8002a72:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <vTaskDelete+0xf4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d115      	bne.n	8002aa8 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <vTaskDelete+0x114>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <vTaskDelete+0xdc>
 8002a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	e7fe      	b.n	8002a96 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <vTaskDelete+0x118>)
 8002a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002aa8:	bf00      	nop
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20001038 	.word	0x20001038
 8002ab4:	2000103c 	.word	0x2000103c
 8002ab8:	20001140 	.word	0x20001140
 8002abc:	20001154 	.word	0x20001154
 8002ac0:	2000110c 	.word	0x2000110c
 8002ac4:	20001120 	.word	0x20001120
 8002ac8:	20001138 	.word	0x20001138
 8002acc:	20001144 	.word	0x20001144
 8002ad0:	20001160 	.word	0x20001160
 8002ad4:	e000ed04 	.word	0xe000ed04

08002ad8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d016      	beq.n	8002b18 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <vTaskDelay+0x60>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <vTaskDelay+0x2e>
 8002af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af6:	f383 8811 	msr	BASEPRI, r3
 8002afa:	f3bf 8f6f 	isb	sy
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	e7fe      	b.n	8002b04 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002b06:	f000 f879 	bl	8002bfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fb03 	bl	8003118 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002b12:	f000 f881 	bl	8002c18 <xTaskResumeAll>
 8002b16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <vTaskDelay+0x64>)
 8002b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20001160 	.word	0x20001160
 8002b3c:	e000ed04 	.word	0xe000ed04

08002b40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	; 0x28
 8002b44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b4e:	463a      	mov	r2, r7
 8002b50:	1d39      	adds	r1, r7, #4
 8002b52:	f107 0308 	add.w	r3, r7, #8
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fb8a 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b5c:	6839      	ldr	r1, [r7, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	9202      	str	r2, [sp, #8]
 8002b64:	9301      	str	r3, [sp, #4]
 8002b66:	2300      	movs	r3, #0
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	460a      	mov	r2, r1
 8002b6e:	491d      	ldr	r1, [pc, #116]	; (8002be4 <vTaskStartScheduler+0xa4>)
 8002b70:	481d      	ldr	r0, [pc, #116]	; (8002be8 <vTaskStartScheduler+0xa8>)
 8002b72:	f7ff fd93 	bl	800269c <xTaskCreateStatic>
 8002b76:	4602      	mov	r2, r0
 8002b78:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <vTaskStartScheduler+0xac>)
 8002b7a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <vTaskStartScheduler+0xac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b84:	2301      	movs	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e001      	b.n	8002b8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d115      	bne.n	8002bc0 <vTaskStartScheduler+0x80>
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	613b      	str	r3, [r7, #16]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <vTaskStartScheduler+0xb0>)
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002bae:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <vTaskStartScheduler+0xb4>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002bb4:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <vTaskStartScheduler+0xb8>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002bba:	f7ff fa11 	bl	8001fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002bbe:	e00d      	b.n	8002bdc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bc6:	d109      	bne.n	8002bdc <vTaskStartScheduler+0x9c>
 8002bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	e7fe      	b.n	8002bda <vTaskStartScheduler+0x9a>
}
 8002bdc:	bf00      	nop
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	08004e40 	.word	0x08004e40
 8002be8:	08002f75 	.word	0x08002f75
 8002bec:	2000115c 	.word	0x2000115c
 8002bf0:	20001158 	.word	0x20001158
 8002bf4:	20001144 	.word	0x20001144
 8002bf8:	2000113c 	.word	0x2000113c

08002bfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <vTaskSuspendAll+0x18>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3301      	adds	r3, #1
 8002c06:	4a03      	ldr	r2, [pc, #12]	; (8002c14 <vTaskSuspendAll+0x18>)
 8002c08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002c0a:	bf00      	nop
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	20001160 	.word	0x20001160

08002c18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c26:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <xTaskResumeAll+0x114>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <xTaskResumeAll+0x2a>
 8002c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	e7fe      	b.n	8002c40 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c42:	f7ff fa6b 	bl	800211c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c46:	4b39      	ldr	r3, [pc, #228]	; (8002d2c <xTaskResumeAll+0x114>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	4a37      	ldr	r2, [pc, #220]	; (8002d2c <xTaskResumeAll+0x114>)
 8002c4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c50:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <xTaskResumeAll+0x114>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d161      	bne.n	8002d1c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c58:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <xTaskResumeAll+0x118>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d05d      	beq.n	8002d1c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c60:	e02e      	b.n	8002cc0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c62:	4b34      	ldr	r3, [pc, #208]	; (8002d34 <xTaskResumeAll+0x11c>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3318      	adds	r3, #24
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff f8ff 	bl	8001e72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3304      	adds	r3, #4
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff f8fa 	bl	8001e72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	2201      	movs	r2, #1
 8002c84:	409a      	lsls	r2, r3
 8002c86:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <xTaskResumeAll+0x120>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <xTaskResumeAll+0x120>)
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <xTaskResumeAll+0x124>)
 8002c9e:	441a      	add	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	f7ff f886 	bl	8001db8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <xTaskResumeAll+0x128>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d302      	bcc.n	8002cc0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002cba:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <xTaskResumeAll+0x12c>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <xTaskResumeAll+0x11c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1cc      	bne.n	8002c62 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002cce:	f000 fa03 	bl	80030d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cd2:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <xTaskResumeAll+0x130>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d010      	beq.n	8002d00 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002cde:	f000 f837 	bl	8002d50 <xTaskIncrementTick>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <xTaskResumeAll+0x12c>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f1      	bne.n	8002cde <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <xTaskResumeAll+0x130>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <xTaskResumeAll+0x12c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d009      	beq.n	8002d1c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <xTaskResumeAll+0x134>)
 8002d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d1c:	f7ff fa2c 	bl	8002178 <vPortExitCritical>

	return xAlreadyYielded;
 8002d20:	68bb      	ldr	r3, [r7, #8]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20001160 	.word	0x20001160
 8002d30:	20001138 	.word	0x20001138
 8002d34:	200010f8 	.word	0x200010f8
 8002d38:	20001140 	.word	0x20001140
 8002d3c:	2000103c 	.word	0x2000103c
 8002d40:	20001038 	.word	0x20001038
 8002d44:	2000114c 	.word	0x2000114c
 8002d48:	20001148 	.word	0x20001148
 8002d4c:	e000ed04 	.word	0xe000ed04

08002d50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d5a:	4b4e      	ldr	r3, [pc, #312]	; (8002e94 <xTaskIncrementTick+0x144>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f040 808d 	bne.w	8002e7e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d64:	4b4c      	ldr	r3, [pc, #304]	; (8002e98 <xTaskIncrementTick+0x148>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d6c:	4a4a      	ldr	r2, [pc, #296]	; (8002e98 <xTaskIncrementTick+0x148>)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d11f      	bne.n	8002db8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d78:	4b48      	ldr	r3, [pc, #288]	; (8002e9c <xTaskIncrementTick+0x14c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <xTaskIncrementTick+0x46>
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	e7fe      	b.n	8002d94 <xTaskIncrementTick+0x44>
 8002d96:	4b41      	ldr	r3, [pc, #260]	; (8002e9c <xTaskIncrementTick+0x14c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	4b40      	ldr	r3, [pc, #256]	; (8002ea0 <xTaskIncrementTick+0x150>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a3e      	ldr	r2, [pc, #248]	; (8002e9c <xTaskIncrementTick+0x14c>)
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4a3e      	ldr	r2, [pc, #248]	; (8002ea0 <xTaskIncrementTick+0x150>)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b3e      	ldr	r3, [pc, #248]	; (8002ea4 <xTaskIncrementTick+0x154>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	4a3c      	ldr	r2, [pc, #240]	; (8002ea4 <xTaskIncrementTick+0x154>)
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	f000 f990 	bl	80030d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002db8:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <xTaskIncrementTick+0x158>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d348      	bcc.n	8002e54 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dc2:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <xTaskIncrementTick+0x14c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d104      	bne.n	8002dd6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dcc:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <xTaskIncrementTick+0x158>)
 8002dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dd2:	601a      	str	r2, [r3, #0]
					break;
 8002dd4:	e03e      	b.n	8002e54 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dd6:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <xTaskIncrementTick+0x14c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d203      	bcs.n	8002df6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002dee:	4a2e      	ldr	r2, [pc, #184]	; (8002ea8 <xTaskIncrementTick+0x158>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002df4:	e02e      	b.n	8002e54 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff f839 	bl	8001e72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d004      	beq.n	8002e12 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	3318      	adds	r3, #24
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f830 	bl	8001e72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	2201      	movs	r2, #1
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	4b24      	ldr	r3, [pc, #144]	; (8002eac <xTaskIncrementTick+0x15c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	4a22      	ldr	r2, [pc, #136]	; (8002eac <xTaskIncrementTick+0x15c>)
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <xTaskIncrementTick+0x160>)
 8002e32:	441a      	add	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	3304      	adds	r3, #4
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	f7fe ffbc 	bl	8001db8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <xTaskIncrementTick+0x164>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d3b9      	bcc.n	8002dc2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e52:	e7b6      	b.n	8002dc2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e54:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <xTaskIncrementTick+0x164>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5a:	4915      	ldr	r1, [pc, #84]	; (8002eb0 <xTaskIncrementTick+0x160>)
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d901      	bls.n	8002e70 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <xTaskIncrementTick+0x168>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	e004      	b.n	8002e88 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <xTaskIncrementTick+0x16c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3301      	adds	r3, #1
 8002e84:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <xTaskIncrementTick+0x16c>)
 8002e86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e88:	697b      	ldr	r3, [r7, #20]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20001160 	.word	0x20001160
 8002e98:	2000113c 	.word	0x2000113c
 8002e9c:	200010f0 	.word	0x200010f0
 8002ea0:	200010f4 	.word	0x200010f4
 8002ea4:	20001150 	.word	0x20001150
 8002ea8:	20001158 	.word	0x20001158
 8002eac:	20001140 	.word	0x20001140
 8002eb0:	2000103c 	.word	0x2000103c
 8002eb4:	20001038 	.word	0x20001038
 8002eb8:	2000114c 	.word	0x2000114c
 8002ebc:	20001148 	.word	0x20001148

08002ec0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ec6:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <vTaskSwitchContext+0xa0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ece:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <vTaskSwitchContext+0xa4>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ed4:	e03e      	b.n	8002f54 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002ed6:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <vTaskSwitchContext+0xa4>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002edc:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <vTaskSwitchContext+0xa8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002eea:	7afb      	ldrb	r3, [r7, #11]
 8002eec:	f1c3 031f 	rsb	r3, r3, #31
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	491e      	ldr	r1, [pc, #120]	; (8002f6c <vTaskSwitchContext+0xac>)
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <vTaskSwitchContext+0x5a>
	__asm volatile
 8002f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0a:	f383 8811 	msr	BASEPRI, r3
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	e7fe      	b.n	8002f18 <vTaskSwitchContext+0x58>
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <vTaskSwitchContext+0xac>)
 8002f26:	4413      	add	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	3308      	adds	r3, #8
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d104      	bne.n	8002f4a <vTaskSwitchContext+0x8a>
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4a07      	ldr	r2, [pc, #28]	; (8002f70 <vTaskSwitchContext+0xb0>)
 8002f52:	6013      	str	r3, [r2, #0]
}
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	20001160 	.word	0x20001160
 8002f64:	2000114c 	.word	0x2000114c
 8002f68:	20001140 	.word	0x20001140
 8002f6c:	2000103c 	.word	0x2000103c
 8002f70:	20001038 	.word	0x20001038

08002f74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f7c:	f000 f852 	bl	8003024 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <prvIdleTask+0x28>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d9f9      	bls.n	8002f7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <prvIdleTask+0x2c>)
 8002f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f98:	e7f0      	b.n	8002f7c <prvIdleTask+0x8>
 8002f9a:	bf00      	nop
 8002f9c:	2000103c 	.word	0x2000103c
 8002fa0:	e000ed04 	.word	0xe000ed04

08002fa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	e00c      	b.n	8002fca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <prvInitialiseTaskLists+0x60>)
 8002fbc:	4413      	add	r3, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe fecd 	bl	8001d5e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b06      	cmp	r3, #6
 8002fce:	d9ef      	bls.n	8002fb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002fd0:	480d      	ldr	r0, [pc, #52]	; (8003008 <prvInitialiseTaskLists+0x64>)
 8002fd2:	f7fe fec4 	bl	8001d5e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002fd6:	480d      	ldr	r0, [pc, #52]	; (800300c <prvInitialiseTaskLists+0x68>)
 8002fd8:	f7fe fec1 	bl	8001d5e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002fdc:	480c      	ldr	r0, [pc, #48]	; (8003010 <prvInitialiseTaskLists+0x6c>)
 8002fde:	f7fe febe 	bl	8001d5e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002fe2:	480c      	ldr	r0, [pc, #48]	; (8003014 <prvInitialiseTaskLists+0x70>)
 8002fe4:	f7fe febb 	bl	8001d5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002fe8:	480b      	ldr	r0, [pc, #44]	; (8003018 <prvInitialiseTaskLists+0x74>)
 8002fea:	f7fe feb8 	bl	8001d5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <prvInitialiseTaskLists+0x78>)
 8002ff0:	4a05      	ldr	r2, [pc, #20]	; (8003008 <prvInitialiseTaskLists+0x64>)
 8002ff2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <prvInitialiseTaskLists+0x7c>)
 8002ff6:	4a05      	ldr	r2, [pc, #20]	; (800300c <prvInitialiseTaskLists+0x68>)
 8002ff8:	601a      	str	r2, [r3, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	2000103c 	.word	0x2000103c
 8003008:	200010c8 	.word	0x200010c8
 800300c:	200010dc 	.word	0x200010dc
 8003010:	200010f8 	.word	0x200010f8
 8003014:	2000110c 	.word	0x2000110c
 8003018:	20001124 	.word	0x20001124
 800301c:	200010f0 	.word	0x200010f0
 8003020:	200010f4 	.word	0x200010f4

08003024 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800302a:	e019      	b.n	8003060 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800302c:	f7ff f876 	bl	800211c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003030:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <prvCheckTasksWaitingTermination+0x4c>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe ff18 	bl	8001e72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <prvCheckTasksWaitingTermination+0x50>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3b01      	subs	r3, #1
 8003048:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <prvCheckTasksWaitingTermination+0x50>)
 800304a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <prvCheckTasksWaitingTermination+0x54>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3b01      	subs	r3, #1
 8003052:	4a09      	ldr	r2, [pc, #36]	; (8003078 <prvCheckTasksWaitingTermination+0x54>)
 8003054:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003056:	f7ff f88f 	bl	8002178 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f80e 	bl	800307c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <prvCheckTasksWaitingTermination+0x54>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e1      	bne.n	800302c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	2000110c 	.word	0x2000110c
 8003074:	20001138 	.word	0x20001138
 8003078:	20001120 	.word	0x20001120

0800307c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800308a:	2b00      	cmp	r3, #0
 800308c:	d108      	bne.n	80030a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff f9e6 	bl	8002464 <vPortFree>
				vPortFree( pxTCB );
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff f9e3 	bl	8002464 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800309e:	e017      	b.n	80030d0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d103      	bne.n	80030b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff f9da 	bl	8002464 <vPortFree>
	}
 80030b0:	e00e      	b.n	80030d0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d009      	beq.n	80030d0 <prvDeleteTCB+0x54>
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e7fe      	b.n	80030ce <prvDeleteTCB+0x52>
	}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <prvResetNextTaskUnblockTime+0x38>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d104      	bne.n	80030f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <prvResetNextTaskUnblockTime+0x3c>)
 80030ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80030f0:	e008      	b.n	8003104 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <prvResetNextTaskUnblockTime+0x38>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <prvResetNextTaskUnblockTime+0x3c>)
 8003102:	6013      	str	r3, [r2, #0]
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	200010f0 	.word	0x200010f0
 8003114:	20001158 	.word	0x20001158

08003118 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003122:	4b29      	ldr	r3, [pc, #164]	; (80031c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003128:	4b28      	ldr	r3, [pc, #160]	; (80031cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3304      	adds	r3, #4
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fe9f 	bl	8001e72 <uxListRemove>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10b      	bne.n	8003152 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800313a:	4b24      	ldr	r3, [pc, #144]	; (80031cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	2201      	movs	r2, #1
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4013      	ands	r3, r2
 800314e:	4a20      	ldr	r2, [pc, #128]	; (80031d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003150:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003158:	d10a      	bne.n	8003170 <prvAddCurrentTaskToDelayedList+0x58>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003160:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3304      	adds	r3, #4
 8003166:	4619      	mov	r1, r3
 8003168:	481a      	ldr	r0, [pc, #104]	; (80031d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800316a:	f7fe fe25 	bl	8001db8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800316e:	e026      	b.n	80031be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003178:	4b14      	ldr	r3, [pc, #80]	; (80031cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d209      	bcs.n	800319c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003188:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3304      	adds	r3, #4
 8003192:	4619      	mov	r1, r3
 8003194:	4610      	mov	r0, r2
 8003196:	f7fe fe33 	bl	8001e00 <vListInsert>
}
 800319a:	e010      	b.n	80031be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3304      	adds	r3, #4
 80031a6:	4619      	mov	r1, r3
 80031a8:	4610      	mov	r0, r2
 80031aa:	f7fe fe29 	bl	8001e00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80031ae:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d202      	bcs.n	80031be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80031b8:	4a09      	ldr	r2, [pc, #36]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	6013      	str	r3, [r2, #0]
}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	2000113c 	.word	0x2000113c
 80031cc:	20001038 	.word	0x20001038
 80031d0:	20001140 	.word	0x20001140
 80031d4:	20001124 	.word	0x20001124
 80031d8:	200010f4 	.word	0x200010f4
 80031dc:	200010f0 	.word	0x200010f0
 80031e0:	20001158 	.word	0x20001158

080031e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800321c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031e8:	f7fd faa8 	bl	800073c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80031ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80031ee:	e003      	b.n	80031f8 <LoopCopyDataInit>

080031f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80031f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80031f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80031f6:	3104      	adds	r1, #4

080031f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031f8:	480a      	ldr	r0, [pc, #40]	; (8003224 <LoopForever+0xa>)
	ldr	r3, =_edata
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <LoopForever+0xe>)
	adds	r2, r0, r1
 80031fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003200:	d3f6      	bcc.n	80031f0 <CopyDataInit>
	ldr	r2, =_sbss
 8003202:	4a0a      	ldr	r2, [pc, #40]	; (800322c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003204:	e002      	b.n	800320c <LoopFillZerobss>

08003206 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003206:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003208:	f842 3b04 	str.w	r3, [r2], #4

0800320c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800320c:	4b08      	ldr	r3, [pc, #32]	; (8003230 <LoopForever+0x16>)
	cmp	r2, r3
 800320e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003210:	d3f9      	bcc.n	8003206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003212:	f000 f817 	bl	8003244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003216:	f7fd f88b 	bl	8000330 <main>

0800321a <LoopForever>:

LoopForever:
    b LoopForever
 800321a:	e7fe      	b.n	800321a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800321c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003220:	08005064 	.word	0x08005064
	ldr	r0, =_sdata
 8003224:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003228:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 800322c:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8003230:	200011c8 	.word	0x200011c8

08003234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003234:	e7fe      	b.n	8003234 <ADC1_2_IRQHandler>
	...

08003238 <__errno>:
 8003238:	4b01      	ldr	r3, [pc, #4]	; (8003240 <__errno+0x8>)
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000010 	.word	0x20000010

08003244 <__libc_init_array>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	4e0d      	ldr	r6, [pc, #52]	; (800327c <__libc_init_array+0x38>)
 8003248:	4c0d      	ldr	r4, [pc, #52]	; (8003280 <__libc_init_array+0x3c>)
 800324a:	1ba4      	subs	r4, r4, r6
 800324c:	10a4      	asrs	r4, r4, #2
 800324e:	2500      	movs	r5, #0
 8003250:	42a5      	cmp	r5, r4
 8003252:	d109      	bne.n	8003268 <__libc_init_array+0x24>
 8003254:	4e0b      	ldr	r6, [pc, #44]	; (8003284 <__libc_init_array+0x40>)
 8003256:	4c0c      	ldr	r4, [pc, #48]	; (8003288 <__libc_init_array+0x44>)
 8003258:	f001 fd96 	bl	8004d88 <_init>
 800325c:	1ba4      	subs	r4, r4, r6
 800325e:	10a4      	asrs	r4, r4, #2
 8003260:	2500      	movs	r5, #0
 8003262:	42a5      	cmp	r5, r4
 8003264:	d105      	bne.n	8003272 <__libc_init_array+0x2e>
 8003266:	bd70      	pop	{r4, r5, r6, pc}
 8003268:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800326c:	4798      	blx	r3
 800326e:	3501      	adds	r5, #1
 8003270:	e7ee      	b.n	8003250 <__libc_init_array+0xc>
 8003272:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003276:	4798      	blx	r3
 8003278:	3501      	adds	r5, #1
 800327a:	e7f2      	b.n	8003262 <__libc_init_array+0x1e>
 800327c:	0800505c 	.word	0x0800505c
 8003280:	0800505c 	.word	0x0800505c
 8003284:	0800505c 	.word	0x0800505c
 8003288:	08005060 	.word	0x08005060

0800328c <memcpy>:
 800328c:	b510      	push	{r4, lr}
 800328e:	1e43      	subs	r3, r0, #1
 8003290:	440a      	add	r2, r1
 8003292:	4291      	cmp	r1, r2
 8003294:	d100      	bne.n	8003298 <memcpy+0xc>
 8003296:	bd10      	pop	{r4, pc}
 8003298:	f811 4b01 	ldrb.w	r4, [r1], #1
 800329c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032a0:	e7f7      	b.n	8003292 <memcpy+0x6>

080032a2 <memset>:
 80032a2:	4402      	add	r2, r0
 80032a4:	4603      	mov	r3, r0
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d100      	bne.n	80032ac <memset+0xa>
 80032aa:	4770      	bx	lr
 80032ac:	f803 1b01 	strb.w	r1, [r3], #1
 80032b0:	e7f9      	b.n	80032a6 <memset+0x4>
	...

080032b4 <iprintf>:
 80032b4:	b40f      	push	{r0, r1, r2, r3}
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <iprintf+0x2c>)
 80032b8:	b513      	push	{r0, r1, r4, lr}
 80032ba:	681c      	ldr	r4, [r3, #0]
 80032bc:	b124      	cbz	r4, 80032c8 <iprintf+0x14>
 80032be:	69a3      	ldr	r3, [r4, #24]
 80032c0:	b913      	cbnz	r3, 80032c8 <iprintf+0x14>
 80032c2:	4620      	mov	r0, r4
 80032c4:	f000 fa4e 	bl	8003764 <__sinit>
 80032c8:	ab05      	add	r3, sp, #20
 80032ca:	9a04      	ldr	r2, [sp, #16]
 80032cc:	68a1      	ldr	r1, [r4, #8]
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	4620      	mov	r0, r4
 80032d2:	f000 fc27 	bl	8003b24 <_vfiprintf_r>
 80032d6:	b002      	add	sp, #8
 80032d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032dc:	b004      	add	sp, #16
 80032de:	4770      	bx	lr
 80032e0:	20000010 	.word	0x20000010

080032e4 <_puts_r>:
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	460e      	mov	r6, r1
 80032e8:	4605      	mov	r5, r0
 80032ea:	b118      	cbz	r0, 80032f4 <_puts_r+0x10>
 80032ec:	6983      	ldr	r3, [r0, #24]
 80032ee:	b90b      	cbnz	r3, 80032f4 <_puts_r+0x10>
 80032f0:	f000 fa38 	bl	8003764 <__sinit>
 80032f4:	69ab      	ldr	r3, [r5, #24]
 80032f6:	68ac      	ldr	r4, [r5, #8]
 80032f8:	b913      	cbnz	r3, 8003300 <_puts_r+0x1c>
 80032fa:	4628      	mov	r0, r5
 80032fc:	f000 fa32 	bl	8003764 <__sinit>
 8003300:	4b23      	ldr	r3, [pc, #140]	; (8003390 <_puts_r+0xac>)
 8003302:	429c      	cmp	r4, r3
 8003304:	d117      	bne.n	8003336 <_puts_r+0x52>
 8003306:	686c      	ldr	r4, [r5, #4]
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	071b      	lsls	r3, r3, #28
 800330c:	d51d      	bpl.n	800334a <_puts_r+0x66>
 800330e:	6923      	ldr	r3, [r4, #16]
 8003310:	b1db      	cbz	r3, 800334a <_puts_r+0x66>
 8003312:	3e01      	subs	r6, #1
 8003314:	68a3      	ldr	r3, [r4, #8]
 8003316:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800331a:	3b01      	subs	r3, #1
 800331c:	60a3      	str	r3, [r4, #8]
 800331e:	b9e9      	cbnz	r1, 800335c <_puts_r+0x78>
 8003320:	2b00      	cmp	r3, #0
 8003322:	da2e      	bge.n	8003382 <_puts_r+0x9e>
 8003324:	4622      	mov	r2, r4
 8003326:	210a      	movs	r1, #10
 8003328:	4628      	mov	r0, r5
 800332a:	f000 f857 	bl	80033dc <__swbuf_r>
 800332e:	3001      	adds	r0, #1
 8003330:	d011      	beq.n	8003356 <_puts_r+0x72>
 8003332:	200a      	movs	r0, #10
 8003334:	bd70      	pop	{r4, r5, r6, pc}
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <_puts_r+0xb0>)
 8003338:	429c      	cmp	r4, r3
 800333a:	d101      	bne.n	8003340 <_puts_r+0x5c>
 800333c:	68ac      	ldr	r4, [r5, #8]
 800333e:	e7e3      	b.n	8003308 <_puts_r+0x24>
 8003340:	4b15      	ldr	r3, [pc, #84]	; (8003398 <_puts_r+0xb4>)
 8003342:	429c      	cmp	r4, r3
 8003344:	bf08      	it	eq
 8003346:	68ec      	ldreq	r4, [r5, #12]
 8003348:	e7de      	b.n	8003308 <_puts_r+0x24>
 800334a:	4621      	mov	r1, r4
 800334c:	4628      	mov	r0, r5
 800334e:	f000 f897 	bl	8003480 <__swsetup_r>
 8003352:	2800      	cmp	r0, #0
 8003354:	d0dd      	beq.n	8003312 <_puts_r+0x2e>
 8003356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800335a:	bd70      	pop	{r4, r5, r6, pc}
 800335c:	2b00      	cmp	r3, #0
 800335e:	da04      	bge.n	800336a <_puts_r+0x86>
 8003360:	69a2      	ldr	r2, [r4, #24]
 8003362:	4293      	cmp	r3, r2
 8003364:	db06      	blt.n	8003374 <_puts_r+0x90>
 8003366:	290a      	cmp	r1, #10
 8003368:	d004      	beq.n	8003374 <_puts_r+0x90>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	6022      	str	r2, [r4, #0]
 8003370:	7019      	strb	r1, [r3, #0]
 8003372:	e7cf      	b.n	8003314 <_puts_r+0x30>
 8003374:	4622      	mov	r2, r4
 8003376:	4628      	mov	r0, r5
 8003378:	f000 f830 	bl	80033dc <__swbuf_r>
 800337c:	3001      	adds	r0, #1
 800337e:	d1c9      	bne.n	8003314 <_puts_r+0x30>
 8003380:	e7e9      	b.n	8003356 <_puts_r+0x72>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	200a      	movs	r0, #10
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	6022      	str	r2, [r4, #0]
 800338a:	7018      	strb	r0, [r3, #0]
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	bf00      	nop
 8003390:	08004ec0 	.word	0x08004ec0
 8003394:	08004ee0 	.word	0x08004ee0
 8003398:	08004ea0 	.word	0x08004ea0

0800339c <puts>:
 800339c:	4b02      	ldr	r3, [pc, #8]	; (80033a8 <puts+0xc>)
 800339e:	4601      	mov	r1, r0
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	f7ff bf9f 	b.w	80032e4 <_puts_r>
 80033a6:	bf00      	nop
 80033a8:	20000010 	.word	0x20000010

080033ac <iscanf>:
 80033ac:	b40f      	push	{r0, r1, r2, r3}
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <iscanf+0x2c>)
 80033b0:	b513      	push	{r0, r1, r4, lr}
 80033b2:	681c      	ldr	r4, [r3, #0]
 80033b4:	b124      	cbz	r4, 80033c0 <iscanf+0x14>
 80033b6:	69a3      	ldr	r3, [r4, #24]
 80033b8:	b913      	cbnz	r3, 80033c0 <iscanf+0x14>
 80033ba:	4620      	mov	r0, r4
 80033bc:	f000 f9d2 	bl	8003764 <__sinit>
 80033c0:	ab05      	add	r3, sp, #20
 80033c2:	9a04      	ldr	r2, [sp, #16]
 80033c4:	6861      	ldr	r1, [r4, #4]
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	4620      	mov	r0, r4
 80033ca:	f000 ffab 	bl	8004324 <_vfiscanf_r>
 80033ce:	b002      	add	sp, #8
 80033d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033d4:	b004      	add	sp, #16
 80033d6:	4770      	bx	lr
 80033d8:	20000010 	.word	0x20000010

080033dc <__swbuf_r>:
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	460e      	mov	r6, r1
 80033e0:	4614      	mov	r4, r2
 80033e2:	4605      	mov	r5, r0
 80033e4:	b118      	cbz	r0, 80033ee <__swbuf_r+0x12>
 80033e6:	6983      	ldr	r3, [r0, #24]
 80033e8:	b90b      	cbnz	r3, 80033ee <__swbuf_r+0x12>
 80033ea:	f000 f9bb 	bl	8003764 <__sinit>
 80033ee:	4b21      	ldr	r3, [pc, #132]	; (8003474 <__swbuf_r+0x98>)
 80033f0:	429c      	cmp	r4, r3
 80033f2:	d12a      	bne.n	800344a <__swbuf_r+0x6e>
 80033f4:	686c      	ldr	r4, [r5, #4]
 80033f6:	69a3      	ldr	r3, [r4, #24]
 80033f8:	60a3      	str	r3, [r4, #8]
 80033fa:	89a3      	ldrh	r3, [r4, #12]
 80033fc:	071a      	lsls	r2, r3, #28
 80033fe:	d52e      	bpl.n	800345e <__swbuf_r+0x82>
 8003400:	6923      	ldr	r3, [r4, #16]
 8003402:	b363      	cbz	r3, 800345e <__swbuf_r+0x82>
 8003404:	6923      	ldr	r3, [r4, #16]
 8003406:	6820      	ldr	r0, [r4, #0]
 8003408:	1ac0      	subs	r0, r0, r3
 800340a:	6963      	ldr	r3, [r4, #20]
 800340c:	b2f6      	uxtb	r6, r6
 800340e:	4298      	cmp	r0, r3
 8003410:	4637      	mov	r7, r6
 8003412:	db04      	blt.n	800341e <__swbuf_r+0x42>
 8003414:	4621      	mov	r1, r4
 8003416:	4628      	mov	r0, r5
 8003418:	f000 f928 	bl	800366c <_fflush_r>
 800341c:	bb28      	cbnz	r0, 800346a <__swbuf_r+0x8e>
 800341e:	68a3      	ldr	r3, [r4, #8]
 8003420:	3b01      	subs	r3, #1
 8003422:	60a3      	str	r3, [r4, #8]
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	6022      	str	r2, [r4, #0]
 800342a:	701e      	strb	r6, [r3, #0]
 800342c:	6963      	ldr	r3, [r4, #20]
 800342e:	3001      	adds	r0, #1
 8003430:	4298      	cmp	r0, r3
 8003432:	d004      	beq.n	800343e <__swbuf_r+0x62>
 8003434:	89a3      	ldrh	r3, [r4, #12]
 8003436:	07db      	lsls	r3, r3, #31
 8003438:	d519      	bpl.n	800346e <__swbuf_r+0x92>
 800343a:	2e0a      	cmp	r6, #10
 800343c:	d117      	bne.n	800346e <__swbuf_r+0x92>
 800343e:	4621      	mov	r1, r4
 8003440:	4628      	mov	r0, r5
 8003442:	f000 f913 	bl	800366c <_fflush_r>
 8003446:	b190      	cbz	r0, 800346e <__swbuf_r+0x92>
 8003448:	e00f      	b.n	800346a <__swbuf_r+0x8e>
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <__swbuf_r+0x9c>)
 800344c:	429c      	cmp	r4, r3
 800344e:	d101      	bne.n	8003454 <__swbuf_r+0x78>
 8003450:	68ac      	ldr	r4, [r5, #8]
 8003452:	e7d0      	b.n	80033f6 <__swbuf_r+0x1a>
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <__swbuf_r+0xa0>)
 8003456:	429c      	cmp	r4, r3
 8003458:	bf08      	it	eq
 800345a:	68ec      	ldreq	r4, [r5, #12]
 800345c:	e7cb      	b.n	80033f6 <__swbuf_r+0x1a>
 800345e:	4621      	mov	r1, r4
 8003460:	4628      	mov	r0, r5
 8003462:	f000 f80d 	bl	8003480 <__swsetup_r>
 8003466:	2800      	cmp	r0, #0
 8003468:	d0cc      	beq.n	8003404 <__swbuf_r+0x28>
 800346a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800346e:	4638      	mov	r0, r7
 8003470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003472:	bf00      	nop
 8003474:	08004ec0 	.word	0x08004ec0
 8003478:	08004ee0 	.word	0x08004ee0
 800347c:	08004ea0 	.word	0x08004ea0

08003480 <__swsetup_r>:
 8003480:	4b32      	ldr	r3, [pc, #200]	; (800354c <__swsetup_r+0xcc>)
 8003482:	b570      	push	{r4, r5, r6, lr}
 8003484:	681d      	ldr	r5, [r3, #0]
 8003486:	4606      	mov	r6, r0
 8003488:	460c      	mov	r4, r1
 800348a:	b125      	cbz	r5, 8003496 <__swsetup_r+0x16>
 800348c:	69ab      	ldr	r3, [r5, #24]
 800348e:	b913      	cbnz	r3, 8003496 <__swsetup_r+0x16>
 8003490:	4628      	mov	r0, r5
 8003492:	f000 f967 	bl	8003764 <__sinit>
 8003496:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <__swsetup_r+0xd0>)
 8003498:	429c      	cmp	r4, r3
 800349a:	d10f      	bne.n	80034bc <__swsetup_r+0x3c>
 800349c:	686c      	ldr	r4, [r5, #4]
 800349e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	0715      	lsls	r5, r2, #28
 80034a6:	d42c      	bmi.n	8003502 <__swsetup_r+0x82>
 80034a8:	06d0      	lsls	r0, r2, #27
 80034aa:	d411      	bmi.n	80034d0 <__swsetup_r+0x50>
 80034ac:	2209      	movs	r2, #9
 80034ae:	6032      	str	r2, [r6, #0]
 80034b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b4:	81a3      	strh	r3, [r4, #12]
 80034b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034ba:	bd70      	pop	{r4, r5, r6, pc}
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <__swsetup_r+0xd4>)
 80034be:	429c      	cmp	r4, r3
 80034c0:	d101      	bne.n	80034c6 <__swsetup_r+0x46>
 80034c2:	68ac      	ldr	r4, [r5, #8]
 80034c4:	e7eb      	b.n	800349e <__swsetup_r+0x1e>
 80034c6:	4b24      	ldr	r3, [pc, #144]	; (8003558 <__swsetup_r+0xd8>)
 80034c8:	429c      	cmp	r4, r3
 80034ca:	bf08      	it	eq
 80034cc:	68ec      	ldreq	r4, [r5, #12]
 80034ce:	e7e6      	b.n	800349e <__swsetup_r+0x1e>
 80034d0:	0751      	lsls	r1, r2, #29
 80034d2:	d512      	bpl.n	80034fa <__swsetup_r+0x7a>
 80034d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034d6:	b141      	cbz	r1, 80034ea <__swsetup_r+0x6a>
 80034d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034dc:	4299      	cmp	r1, r3
 80034de:	d002      	beq.n	80034e6 <__swsetup_r+0x66>
 80034e0:	4630      	mov	r0, r6
 80034e2:	f000 fa49 	bl	8003978 <_free_r>
 80034e6:	2300      	movs	r3, #0
 80034e8:	6363      	str	r3, [r4, #52]	; 0x34
 80034ea:	89a3      	ldrh	r3, [r4, #12]
 80034ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034f0:	81a3      	strh	r3, [r4, #12]
 80034f2:	2300      	movs	r3, #0
 80034f4:	6063      	str	r3, [r4, #4]
 80034f6:	6923      	ldr	r3, [r4, #16]
 80034f8:	6023      	str	r3, [r4, #0]
 80034fa:	89a3      	ldrh	r3, [r4, #12]
 80034fc:	f043 0308 	orr.w	r3, r3, #8
 8003500:	81a3      	strh	r3, [r4, #12]
 8003502:	6923      	ldr	r3, [r4, #16]
 8003504:	b94b      	cbnz	r3, 800351a <__swsetup_r+0x9a>
 8003506:	89a3      	ldrh	r3, [r4, #12]
 8003508:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800350c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003510:	d003      	beq.n	800351a <__swsetup_r+0x9a>
 8003512:	4621      	mov	r1, r4
 8003514:	4630      	mov	r0, r6
 8003516:	f000 f9ef 	bl	80038f8 <__smakebuf_r>
 800351a:	89a2      	ldrh	r2, [r4, #12]
 800351c:	f012 0301 	ands.w	r3, r2, #1
 8003520:	d00c      	beq.n	800353c <__swsetup_r+0xbc>
 8003522:	2300      	movs	r3, #0
 8003524:	60a3      	str	r3, [r4, #8]
 8003526:	6963      	ldr	r3, [r4, #20]
 8003528:	425b      	negs	r3, r3
 800352a:	61a3      	str	r3, [r4, #24]
 800352c:	6923      	ldr	r3, [r4, #16]
 800352e:	b953      	cbnz	r3, 8003546 <__swsetup_r+0xc6>
 8003530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003534:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003538:	d1ba      	bne.n	80034b0 <__swsetup_r+0x30>
 800353a:	bd70      	pop	{r4, r5, r6, pc}
 800353c:	0792      	lsls	r2, r2, #30
 800353e:	bf58      	it	pl
 8003540:	6963      	ldrpl	r3, [r4, #20]
 8003542:	60a3      	str	r3, [r4, #8]
 8003544:	e7f2      	b.n	800352c <__swsetup_r+0xac>
 8003546:	2000      	movs	r0, #0
 8003548:	e7f7      	b.n	800353a <__swsetup_r+0xba>
 800354a:	bf00      	nop
 800354c:	20000010 	.word	0x20000010
 8003550:	08004ec0 	.word	0x08004ec0
 8003554:	08004ee0 	.word	0x08004ee0
 8003558:	08004ea0 	.word	0x08004ea0

0800355c <__sflush_r>:
 800355c:	898a      	ldrh	r2, [r1, #12]
 800355e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003562:	4605      	mov	r5, r0
 8003564:	0710      	lsls	r0, r2, #28
 8003566:	460c      	mov	r4, r1
 8003568:	d45a      	bmi.n	8003620 <__sflush_r+0xc4>
 800356a:	684b      	ldr	r3, [r1, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	dc05      	bgt.n	800357c <__sflush_r+0x20>
 8003570:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	dc02      	bgt.n	800357c <__sflush_r+0x20>
 8003576:	2000      	movs	r0, #0
 8003578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800357c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800357e:	2e00      	cmp	r6, #0
 8003580:	d0f9      	beq.n	8003576 <__sflush_r+0x1a>
 8003582:	2300      	movs	r3, #0
 8003584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003588:	682f      	ldr	r7, [r5, #0]
 800358a:	602b      	str	r3, [r5, #0]
 800358c:	d033      	beq.n	80035f6 <__sflush_r+0x9a>
 800358e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003590:	89a3      	ldrh	r3, [r4, #12]
 8003592:	075a      	lsls	r2, r3, #29
 8003594:	d505      	bpl.n	80035a2 <__sflush_r+0x46>
 8003596:	6863      	ldr	r3, [r4, #4]
 8003598:	1ac0      	subs	r0, r0, r3
 800359a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800359c:	b10b      	cbz	r3, 80035a2 <__sflush_r+0x46>
 800359e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035a0:	1ac0      	subs	r0, r0, r3
 80035a2:	2300      	movs	r3, #0
 80035a4:	4602      	mov	r2, r0
 80035a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035a8:	6a21      	ldr	r1, [r4, #32]
 80035aa:	4628      	mov	r0, r5
 80035ac:	47b0      	blx	r6
 80035ae:	1c43      	adds	r3, r0, #1
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	d106      	bne.n	80035c2 <__sflush_r+0x66>
 80035b4:	6829      	ldr	r1, [r5, #0]
 80035b6:	291d      	cmp	r1, #29
 80035b8:	d84b      	bhi.n	8003652 <__sflush_r+0xf6>
 80035ba:	4a2b      	ldr	r2, [pc, #172]	; (8003668 <__sflush_r+0x10c>)
 80035bc:	40ca      	lsrs	r2, r1
 80035be:	07d6      	lsls	r6, r2, #31
 80035c0:	d547      	bpl.n	8003652 <__sflush_r+0xf6>
 80035c2:	2200      	movs	r2, #0
 80035c4:	6062      	str	r2, [r4, #4]
 80035c6:	04d9      	lsls	r1, r3, #19
 80035c8:	6922      	ldr	r2, [r4, #16]
 80035ca:	6022      	str	r2, [r4, #0]
 80035cc:	d504      	bpl.n	80035d8 <__sflush_r+0x7c>
 80035ce:	1c42      	adds	r2, r0, #1
 80035d0:	d101      	bne.n	80035d6 <__sflush_r+0x7a>
 80035d2:	682b      	ldr	r3, [r5, #0]
 80035d4:	b903      	cbnz	r3, 80035d8 <__sflush_r+0x7c>
 80035d6:	6560      	str	r0, [r4, #84]	; 0x54
 80035d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035da:	602f      	str	r7, [r5, #0]
 80035dc:	2900      	cmp	r1, #0
 80035de:	d0ca      	beq.n	8003576 <__sflush_r+0x1a>
 80035e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035e4:	4299      	cmp	r1, r3
 80035e6:	d002      	beq.n	80035ee <__sflush_r+0x92>
 80035e8:	4628      	mov	r0, r5
 80035ea:	f000 f9c5 	bl	8003978 <_free_r>
 80035ee:	2000      	movs	r0, #0
 80035f0:	6360      	str	r0, [r4, #52]	; 0x34
 80035f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035f6:	6a21      	ldr	r1, [r4, #32]
 80035f8:	2301      	movs	r3, #1
 80035fa:	4628      	mov	r0, r5
 80035fc:	47b0      	blx	r6
 80035fe:	1c41      	adds	r1, r0, #1
 8003600:	d1c6      	bne.n	8003590 <__sflush_r+0x34>
 8003602:	682b      	ldr	r3, [r5, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0c3      	beq.n	8003590 <__sflush_r+0x34>
 8003608:	2b1d      	cmp	r3, #29
 800360a:	d001      	beq.n	8003610 <__sflush_r+0xb4>
 800360c:	2b16      	cmp	r3, #22
 800360e:	d101      	bne.n	8003614 <__sflush_r+0xb8>
 8003610:	602f      	str	r7, [r5, #0]
 8003612:	e7b0      	b.n	8003576 <__sflush_r+0x1a>
 8003614:	89a3      	ldrh	r3, [r4, #12]
 8003616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800361a:	81a3      	strh	r3, [r4, #12]
 800361c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003620:	690f      	ldr	r7, [r1, #16]
 8003622:	2f00      	cmp	r7, #0
 8003624:	d0a7      	beq.n	8003576 <__sflush_r+0x1a>
 8003626:	0793      	lsls	r3, r2, #30
 8003628:	680e      	ldr	r6, [r1, #0]
 800362a:	bf08      	it	eq
 800362c:	694b      	ldreq	r3, [r1, #20]
 800362e:	600f      	str	r7, [r1, #0]
 8003630:	bf18      	it	ne
 8003632:	2300      	movne	r3, #0
 8003634:	eba6 0807 	sub.w	r8, r6, r7
 8003638:	608b      	str	r3, [r1, #8]
 800363a:	f1b8 0f00 	cmp.w	r8, #0
 800363e:	dd9a      	ble.n	8003576 <__sflush_r+0x1a>
 8003640:	4643      	mov	r3, r8
 8003642:	463a      	mov	r2, r7
 8003644:	6a21      	ldr	r1, [r4, #32]
 8003646:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003648:	4628      	mov	r0, r5
 800364a:	47b0      	blx	r6
 800364c:	2800      	cmp	r0, #0
 800364e:	dc07      	bgt.n	8003660 <__sflush_r+0x104>
 8003650:	89a3      	ldrh	r3, [r4, #12]
 8003652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003656:	81a3      	strh	r3, [r4, #12]
 8003658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003660:	4407      	add	r7, r0
 8003662:	eba8 0800 	sub.w	r8, r8, r0
 8003666:	e7e8      	b.n	800363a <__sflush_r+0xde>
 8003668:	20400001 	.word	0x20400001

0800366c <_fflush_r>:
 800366c:	b538      	push	{r3, r4, r5, lr}
 800366e:	690b      	ldr	r3, [r1, #16]
 8003670:	4605      	mov	r5, r0
 8003672:	460c      	mov	r4, r1
 8003674:	b1db      	cbz	r3, 80036ae <_fflush_r+0x42>
 8003676:	b118      	cbz	r0, 8003680 <_fflush_r+0x14>
 8003678:	6983      	ldr	r3, [r0, #24]
 800367a:	b90b      	cbnz	r3, 8003680 <_fflush_r+0x14>
 800367c:	f000 f872 	bl	8003764 <__sinit>
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <_fflush_r+0x48>)
 8003682:	429c      	cmp	r4, r3
 8003684:	d109      	bne.n	800369a <_fflush_r+0x2e>
 8003686:	686c      	ldr	r4, [r5, #4]
 8003688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800368c:	b17b      	cbz	r3, 80036ae <_fflush_r+0x42>
 800368e:	4621      	mov	r1, r4
 8003690:	4628      	mov	r0, r5
 8003692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003696:	f7ff bf61 	b.w	800355c <__sflush_r>
 800369a:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <_fflush_r+0x4c>)
 800369c:	429c      	cmp	r4, r3
 800369e:	d101      	bne.n	80036a4 <_fflush_r+0x38>
 80036a0:	68ac      	ldr	r4, [r5, #8]
 80036a2:	e7f1      	b.n	8003688 <_fflush_r+0x1c>
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <_fflush_r+0x50>)
 80036a6:	429c      	cmp	r4, r3
 80036a8:	bf08      	it	eq
 80036aa:	68ec      	ldreq	r4, [r5, #12]
 80036ac:	e7ec      	b.n	8003688 <_fflush_r+0x1c>
 80036ae:	2000      	movs	r0, #0
 80036b0:	bd38      	pop	{r3, r4, r5, pc}
 80036b2:	bf00      	nop
 80036b4:	08004ec0 	.word	0x08004ec0
 80036b8:	08004ee0 	.word	0x08004ee0
 80036bc:	08004ea0 	.word	0x08004ea0

080036c0 <fflush>:
 80036c0:	4601      	mov	r1, r0
 80036c2:	b920      	cbnz	r0, 80036ce <fflush+0xe>
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <fflush+0x18>)
 80036c6:	4905      	ldr	r1, [pc, #20]	; (80036dc <fflush+0x1c>)
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	f000 b8d3 	b.w	8003874 <_fwalk_reent>
 80036ce:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <fflush+0x20>)
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	f7ff bfcb 	b.w	800366c <_fflush_r>
 80036d6:	bf00      	nop
 80036d8:	08004e9c 	.word	0x08004e9c
 80036dc:	0800366d 	.word	0x0800366d
 80036e0:	20000010 	.word	0x20000010

080036e4 <_cleanup_r>:
 80036e4:	4901      	ldr	r1, [pc, #4]	; (80036ec <_cleanup_r+0x8>)
 80036e6:	f000 b8c5 	b.w	8003874 <_fwalk_reent>
 80036ea:	bf00      	nop
 80036ec:	0800366d 	.word	0x0800366d

080036f0 <std.isra.0>:
 80036f0:	2300      	movs	r3, #0
 80036f2:	b510      	push	{r4, lr}
 80036f4:	4604      	mov	r4, r0
 80036f6:	6003      	str	r3, [r0, #0]
 80036f8:	6043      	str	r3, [r0, #4]
 80036fa:	6083      	str	r3, [r0, #8]
 80036fc:	8181      	strh	r1, [r0, #12]
 80036fe:	6643      	str	r3, [r0, #100]	; 0x64
 8003700:	81c2      	strh	r2, [r0, #14]
 8003702:	6103      	str	r3, [r0, #16]
 8003704:	6143      	str	r3, [r0, #20]
 8003706:	6183      	str	r3, [r0, #24]
 8003708:	4619      	mov	r1, r3
 800370a:	2208      	movs	r2, #8
 800370c:	305c      	adds	r0, #92	; 0x5c
 800370e:	f7ff fdc8 	bl	80032a2 <memset>
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <std.isra.0+0x38>)
 8003714:	6263      	str	r3, [r4, #36]	; 0x24
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <std.isra.0+0x3c>)
 8003718:	62a3      	str	r3, [r4, #40]	; 0x28
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <std.isra.0+0x40>)
 800371c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <std.isra.0+0x44>)
 8003720:	6224      	str	r4, [r4, #32]
 8003722:	6323      	str	r3, [r4, #48]	; 0x30
 8003724:	bd10      	pop	{r4, pc}
 8003726:	bf00      	nop
 8003728:	080047cd 	.word	0x080047cd
 800372c:	080047ef 	.word	0x080047ef
 8003730:	08004827 	.word	0x08004827
 8003734:	0800484b 	.word	0x0800484b

08003738 <__sfmoreglue>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	1e4a      	subs	r2, r1, #1
 800373c:	2568      	movs	r5, #104	; 0x68
 800373e:	4355      	muls	r5, r2
 8003740:	460e      	mov	r6, r1
 8003742:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003746:	f000 f965 	bl	8003a14 <_malloc_r>
 800374a:	4604      	mov	r4, r0
 800374c:	b140      	cbz	r0, 8003760 <__sfmoreglue+0x28>
 800374e:	2100      	movs	r1, #0
 8003750:	e880 0042 	stmia.w	r0, {r1, r6}
 8003754:	300c      	adds	r0, #12
 8003756:	60a0      	str	r0, [r4, #8]
 8003758:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800375c:	f7ff fda1 	bl	80032a2 <memset>
 8003760:	4620      	mov	r0, r4
 8003762:	bd70      	pop	{r4, r5, r6, pc}

08003764 <__sinit>:
 8003764:	6983      	ldr	r3, [r0, #24]
 8003766:	b510      	push	{r4, lr}
 8003768:	4604      	mov	r4, r0
 800376a:	bb33      	cbnz	r3, 80037ba <__sinit+0x56>
 800376c:	6483      	str	r3, [r0, #72]	; 0x48
 800376e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003770:	6503      	str	r3, [r0, #80]	; 0x50
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <__sinit+0x58>)
 8003774:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <__sinit+0x5c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6282      	str	r2, [r0, #40]	; 0x28
 800377a:	4298      	cmp	r0, r3
 800377c:	bf04      	itt	eq
 800377e:	2301      	moveq	r3, #1
 8003780:	6183      	streq	r3, [r0, #24]
 8003782:	f000 f81f 	bl	80037c4 <__sfp>
 8003786:	6060      	str	r0, [r4, #4]
 8003788:	4620      	mov	r0, r4
 800378a:	f000 f81b 	bl	80037c4 <__sfp>
 800378e:	60a0      	str	r0, [r4, #8]
 8003790:	4620      	mov	r0, r4
 8003792:	f000 f817 	bl	80037c4 <__sfp>
 8003796:	2200      	movs	r2, #0
 8003798:	60e0      	str	r0, [r4, #12]
 800379a:	2104      	movs	r1, #4
 800379c:	6860      	ldr	r0, [r4, #4]
 800379e:	f7ff ffa7 	bl	80036f0 <std.isra.0>
 80037a2:	2201      	movs	r2, #1
 80037a4:	2109      	movs	r1, #9
 80037a6:	68a0      	ldr	r0, [r4, #8]
 80037a8:	f7ff ffa2 	bl	80036f0 <std.isra.0>
 80037ac:	2202      	movs	r2, #2
 80037ae:	2112      	movs	r1, #18
 80037b0:	68e0      	ldr	r0, [r4, #12]
 80037b2:	f7ff ff9d 	bl	80036f0 <std.isra.0>
 80037b6:	2301      	movs	r3, #1
 80037b8:	61a3      	str	r3, [r4, #24]
 80037ba:	bd10      	pop	{r4, pc}
 80037bc:	08004e9c 	.word	0x08004e9c
 80037c0:	080036e5 	.word	0x080036e5

080037c4 <__sfp>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <__sfp+0x74>)
 80037c8:	681e      	ldr	r6, [r3, #0]
 80037ca:	69b3      	ldr	r3, [r6, #24]
 80037cc:	4607      	mov	r7, r0
 80037ce:	b913      	cbnz	r3, 80037d6 <__sfp+0x12>
 80037d0:	4630      	mov	r0, r6
 80037d2:	f7ff ffc7 	bl	8003764 <__sinit>
 80037d6:	3648      	adds	r6, #72	; 0x48
 80037d8:	68b4      	ldr	r4, [r6, #8]
 80037da:	6873      	ldr	r3, [r6, #4]
 80037dc:	3b01      	subs	r3, #1
 80037de:	d503      	bpl.n	80037e8 <__sfp+0x24>
 80037e0:	6833      	ldr	r3, [r6, #0]
 80037e2:	b133      	cbz	r3, 80037f2 <__sfp+0x2e>
 80037e4:	6836      	ldr	r6, [r6, #0]
 80037e6:	e7f7      	b.n	80037d8 <__sfp+0x14>
 80037e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80037ec:	b16d      	cbz	r5, 800380a <__sfp+0x46>
 80037ee:	3468      	adds	r4, #104	; 0x68
 80037f0:	e7f4      	b.n	80037dc <__sfp+0x18>
 80037f2:	2104      	movs	r1, #4
 80037f4:	4638      	mov	r0, r7
 80037f6:	f7ff ff9f 	bl	8003738 <__sfmoreglue>
 80037fa:	6030      	str	r0, [r6, #0]
 80037fc:	2800      	cmp	r0, #0
 80037fe:	d1f1      	bne.n	80037e4 <__sfp+0x20>
 8003800:	230c      	movs	r3, #12
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	4604      	mov	r4, r0
 8003806:	4620      	mov	r0, r4
 8003808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800380a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800380e:	81e3      	strh	r3, [r4, #14]
 8003810:	2301      	movs	r3, #1
 8003812:	81a3      	strh	r3, [r4, #12]
 8003814:	6665      	str	r5, [r4, #100]	; 0x64
 8003816:	6025      	str	r5, [r4, #0]
 8003818:	60a5      	str	r5, [r4, #8]
 800381a:	6065      	str	r5, [r4, #4]
 800381c:	6125      	str	r5, [r4, #16]
 800381e:	6165      	str	r5, [r4, #20]
 8003820:	61a5      	str	r5, [r4, #24]
 8003822:	2208      	movs	r2, #8
 8003824:	4629      	mov	r1, r5
 8003826:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800382a:	f7ff fd3a 	bl	80032a2 <memset>
 800382e:	6365      	str	r5, [r4, #52]	; 0x34
 8003830:	63a5      	str	r5, [r4, #56]	; 0x38
 8003832:	64a5      	str	r5, [r4, #72]	; 0x48
 8003834:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003836:	e7e6      	b.n	8003806 <__sfp+0x42>
 8003838:	08004e9c 	.word	0x08004e9c

0800383c <_fwalk>:
 800383c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003840:	4688      	mov	r8, r1
 8003842:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003846:	2600      	movs	r6, #0
 8003848:	b914      	cbnz	r4, 8003850 <_fwalk+0x14>
 800384a:	4630      	mov	r0, r6
 800384c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003850:	68a5      	ldr	r5, [r4, #8]
 8003852:	6867      	ldr	r7, [r4, #4]
 8003854:	3f01      	subs	r7, #1
 8003856:	d501      	bpl.n	800385c <_fwalk+0x20>
 8003858:	6824      	ldr	r4, [r4, #0]
 800385a:	e7f5      	b.n	8003848 <_fwalk+0xc>
 800385c:	89ab      	ldrh	r3, [r5, #12]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d906      	bls.n	8003870 <_fwalk+0x34>
 8003862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003866:	3301      	adds	r3, #1
 8003868:	d002      	beq.n	8003870 <_fwalk+0x34>
 800386a:	4628      	mov	r0, r5
 800386c:	47c0      	blx	r8
 800386e:	4306      	orrs	r6, r0
 8003870:	3568      	adds	r5, #104	; 0x68
 8003872:	e7ef      	b.n	8003854 <_fwalk+0x18>

08003874 <_fwalk_reent>:
 8003874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003878:	4680      	mov	r8, r0
 800387a:	4689      	mov	r9, r1
 800387c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003880:	2600      	movs	r6, #0
 8003882:	b914      	cbnz	r4, 800388a <_fwalk_reent+0x16>
 8003884:	4630      	mov	r0, r6
 8003886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800388a:	68a5      	ldr	r5, [r4, #8]
 800388c:	6867      	ldr	r7, [r4, #4]
 800388e:	3f01      	subs	r7, #1
 8003890:	d501      	bpl.n	8003896 <_fwalk_reent+0x22>
 8003892:	6824      	ldr	r4, [r4, #0]
 8003894:	e7f5      	b.n	8003882 <_fwalk_reent+0xe>
 8003896:	89ab      	ldrh	r3, [r5, #12]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d907      	bls.n	80038ac <_fwalk_reent+0x38>
 800389c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038a0:	3301      	adds	r3, #1
 80038a2:	d003      	beq.n	80038ac <_fwalk_reent+0x38>
 80038a4:	4629      	mov	r1, r5
 80038a6:	4640      	mov	r0, r8
 80038a8:	47c8      	blx	r9
 80038aa:	4306      	orrs	r6, r0
 80038ac:	3568      	adds	r5, #104	; 0x68
 80038ae:	e7ee      	b.n	800388e <_fwalk_reent+0x1a>

080038b0 <__swhatbuf_r>:
 80038b0:	b570      	push	{r4, r5, r6, lr}
 80038b2:	460e      	mov	r6, r1
 80038b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038b8:	2900      	cmp	r1, #0
 80038ba:	b090      	sub	sp, #64	; 0x40
 80038bc:	4614      	mov	r4, r2
 80038be:	461d      	mov	r5, r3
 80038c0:	da07      	bge.n	80038d2 <__swhatbuf_r+0x22>
 80038c2:	2300      	movs	r3, #0
 80038c4:	602b      	str	r3, [r5, #0]
 80038c6:	89b3      	ldrh	r3, [r6, #12]
 80038c8:	061a      	lsls	r2, r3, #24
 80038ca:	d410      	bmi.n	80038ee <__swhatbuf_r+0x3e>
 80038cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d0:	e00e      	b.n	80038f0 <__swhatbuf_r+0x40>
 80038d2:	aa01      	add	r2, sp, #4
 80038d4:	f001 f9b0 	bl	8004c38 <_fstat_r>
 80038d8:	2800      	cmp	r0, #0
 80038da:	dbf2      	blt.n	80038c2 <__swhatbuf_r+0x12>
 80038dc:	9a02      	ldr	r2, [sp, #8]
 80038de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80038e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80038e6:	425a      	negs	r2, r3
 80038e8:	415a      	adcs	r2, r3
 80038ea:	602a      	str	r2, [r5, #0]
 80038ec:	e7ee      	b.n	80038cc <__swhatbuf_r+0x1c>
 80038ee:	2340      	movs	r3, #64	; 0x40
 80038f0:	2000      	movs	r0, #0
 80038f2:	6023      	str	r3, [r4, #0]
 80038f4:	b010      	add	sp, #64	; 0x40
 80038f6:	bd70      	pop	{r4, r5, r6, pc}

080038f8 <__smakebuf_r>:
 80038f8:	898b      	ldrh	r3, [r1, #12]
 80038fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038fc:	079d      	lsls	r5, r3, #30
 80038fe:	4606      	mov	r6, r0
 8003900:	460c      	mov	r4, r1
 8003902:	d507      	bpl.n	8003914 <__smakebuf_r+0x1c>
 8003904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	6123      	str	r3, [r4, #16]
 800390c:	2301      	movs	r3, #1
 800390e:	6163      	str	r3, [r4, #20]
 8003910:	b002      	add	sp, #8
 8003912:	bd70      	pop	{r4, r5, r6, pc}
 8003914:	ab01      	add	r3, sp, #4
 8003916:	466a      	mov	r2, sp
 8003918:	f7ff ffca 	bl	80038b0 <__swhatbuf_r>
 800391c:	9900      	ldr	r1, [sp, #0]
 800391e:	4605      	mov	r5, r0
 8003920:	4630      	mov	r0, r6
 8003922:	f000 f877 	bl	8003a14 <_malloc_r>
 8003926:	b948      	cbnz	r0, 800393c <__smakebuf_r+0x44>
 8003928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800392c:	059a      	lsls	r2, r3, #22
 800392e:	d4ef      	bmi.n	8003910 <__smakebuf_r+0x18>
 8003930:	f023 0303 	bic.w	r3, r3, #3
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	81a3      	strh	r3, [r4, #12]
 800393a:	e7e3      	b.n	8003904 <__smakebuf_r+0xc>
 800393c:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <__smakebuf_r+0x7c>)
 800393e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003940:	89a3      	ldrh	r3, [r4, #12]
 8003942:	6020      	str	r0, [r4, #0]
 8003944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003948:	81a3      	strh	r3, [r4, #12]
 800394a:	9b00      	ldr	r3, [sp, #0]
 800394c:	6163      	str	r3, [r4, #20]
 800394e:	9b01      	ldr	r3, [sp, #4]
 8003950:	6120      	str	r0, [r4, #16]
 8003952:	b15b      	cbz	r3, 800396c <__smakebuf_r+0x74>
 8003954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003958:	4630      	mov	r0, r6
 800395a:	f001 f97f 	bl	8004c5c <_isatty_r>
 800395e:	b128      	cbz	r0, 800396c <__smakebuf_r+0x74>
 8003960:	89a3      	ldrh	r3, [r4, #12]
 8003962:	f023 0303 	bic.w	r3, r3, #3
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	81a3      	strh	r3, [r4, #12]
 800396c:	89a3      	ldrh	r3, [r4, #12]
 800396e:	431d      	orrs	r5, r3
 8003970:	81a5      	strh	r5, [r4, #12]
 8003972:	e7cd      	b.n	8003910 <__smakebuf_r+0x18>
 8003974:	080036e5 	.word	0x080036e5

08003978 <_free_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4605      	mov	r5, r0
 800397c:	2900      	cmp	r1, #0
 800397e:	d045      	beq.n	8003a0c <_free_r+0x94>
 8003980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003984:	1f0c      	subs	r4, r1, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	bfb8      	it	lt
 800398a:	18e4      	addlt	r4, r4, r3
 800398c:	f001 f9ac 	bl	8004ce8 <__malloc_lock>
 8003990:	4a1f      	ldr	r2, [pc, #124]	; (8003a10 <_free_r+0x98>)
 8003992:	6813      	ldr	r3, [r2, #0]
 8003994:	4610      	mov	r0, r2
 8003996:	b933      	cbnz	r3, 80039a6 <_free_r+0x2e>
 8003998:	6063      	str	r3, [r4, #4]
 800399a:	6014      	str	r4, [r2, #0]
 800399c:	4628      	mov	r0, r5
 800399e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039a2:	f001 b9a2 	b.w	8004cea <__malloc_unlock>
 80039a6:	42a3      	cmp	r3, r4
 80039a8:	d90c      	bls.n	80039c4 <_free_r+0x4c>
 80039aa:	6821      	ldr	r1, [r4, #0]
 80039ac:	1862      	adds	r2, r4, r1
 80039ae:	4293      	cmp	r3, r2
 80039b0:	bf04      	itt	eq
 80039b2:	681a      	ldreq	r2, [r3, #0]
 80039b4:	685b      	ldreq	r3, [r3, #4]
 80039b6:	6063      	str	r3, [r4, #4]
 80039b8:	bf04      	itt	eq
 80039ba:	1852      	addeq	r2, r2, r1
 80039bc:	6022      	streq	r2, [r4, #0]
 80039be:	6004      	str	r4, [r0, #0]
 80039c0:	e7ec      	b.n	800399c <_free_r+0x24>
 80039c2:	4613      	mov	r3, r2
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	b10a      	cbz	r2, 80039cc <_free_r+0x54>
 80039c8:	42a2      	cmp	r2, r4
 80039ca:	d9fa      	bls.n	80039c2 <_free_r+0x4a>
 80039cc:	6819      	ldr	r1, [r3, #0]
 80039ce:	1858      	adds	r0, r3, r1
 80039d0:	42a0      	cmp	r0, r4
 80039d2:	d10b      	bne.n	80039ec <_free_r+0x74>
 80039d4:	6820      	ldr	r0, [r4, #0]
 80039d6:	4401      	add	r1, r0
 80039d8:	1858      	adds	r0, r3, r1
 80039da:	4282      	cmp	r2, r0
 80039dc:	6019      	str	r1, [r3, #0]
 80039de:	d1dd      	bne.n	800399c <_free_r+0x24>
 80039e0:	6810      	ldr	r0, [r2, #0]
 80039e2:	6852      	ldr	r2, [r2, #4]
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	4401      	add	r1, r0
 80039e8:	6019      	str	r1, [r3, #0]
 80039ea:	e7d7      	b.n	800399c <_free_r+0x24>
 80039ec:	d902      	bls.n	80039f4 <_free_r+0x7c>
 80039ee:	230c      	movs	r3, #12
 80039f0:	602b      	str	r3, [r5, #0]
 80039f2:	e7d3      	b.n	800399c <_free_r+0x24>
 80039f4:	6820      	ldr	r0, [r4, #0]
 80039f6:	1821      	adds	r1, r4, r0
 80039f8:	428a      	cmp	r2, r1
 80039fa:	bf04      	itt	eq
 80039fc:	6811      	ldreq	r1, [r2, #0]
 80039fe:	6852      	ldreq	r2, [r2, #4]
 8003a00:	6062      	str	r2, [r4, #4]
 8003a02:	bf04      	itt	eq
 8003a04:	1809      	addeq	r1, r1, r0
 8003a06:	6021      	streq	r1, [r4, #0]
 8003a08:	605c      	str	r4, [r3, #4]
 8003a0a:	e7c7      	b.n	800399c <_free_r+0x24>
 8003a0c:	bd38      	pop	{r3, r4, r5, pc}
 8003a0e:	bf00      	nop
 8003a10:	20001164 	.word	0x20001164

08003a14 <_malloc_r>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	1ccd      	adds	r5, r1, #3
 8003a18:	f025 0503 	bic.w	r5, r5, #3
 8003a1c:	3508      	adds	r5, #8
 8003a1e:	2d0c      	cmp	r5, #12
 8003a20:	bf38      	it	cc
 8003a22:	250c      	movcc	r5, #12
 8003a24:	2d00      	cmp	r5, #0
 8003a26:	4606      	mov	r6, r0
 8003a28:	db01      	blt.n	8003a2e <_malloc_r+0x1a>
 8003a2a:	42a9      	cmp	r1, r5
 8003a2c:	d903      	bls.n	8003a36 <_malloc_r+0x22>
 8003a2e:	230c      	movs	r3, #12
 8003a30:	6033      	str	r3, [r6, #0]
 8003a32:	2000      	movs	r0, #0
 8003a34:	bd70      	pop	{r4, r5, r6, pc}
 8003a36:	f001 f957 	bl	8004ce8 <__malloc_lock>
 8003a3a:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <_malloc_r+0xb4>)
 8003a3c:	6814      	ldr	r4, [r2, #0]
 8003a3e:	4621      	mov	r1, r4
 8003a40:	b991      	cbnz	r1, 8003a68 <_malloc_r+0x54>
 8003a42:	4c22      	ldr	r4, [pc, #136]	; (8003acc <_malloc_r+0xb8>)
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	b91b      	cbnz	r3, 8003a50 <_malloc_r+0x3c>
 8003a48:	4630      	mov	r0, r6
 8003a4a:	f000 fe7f 	bl	800474c <_sbrk_r>
 8003a4e:	6020      	str	r0, [r4, #0]
 8003a50:	4629      	mov	r1, r5
 8003a52:	4630      	mov	r0, r6
 8003a54:	f000 fe7a 	bl	800474c <_sbrk_r>
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d126      	bne.n	8003aaa <_malloc_r+0x96>
 8003a5c:	230c      	movs	r3, #12
 8003a5e:	6033      	str	r3, [r6, #0]
 8003a60:	4630      	mov	r0, r6
 8003a62:	f001 f942 	bl	8004cea <__malloc_unlock>
 8003a66:	e7e4      	b.n	8003a32 <_malloc_r+0x1e>
 8003a68:	680b      	ldr	r3, [r1, #0]
 8003a6a:	1b5b      	subs	r3, r3, r5
 8003a6c:	d41a      	bmi.n	8003aa4 <_malloc_r+0x90>
 8003a6e:	2b0b      	cmp	r3, #11
 8003a70:	d90f      	bls.n	8003a92 <_malloc_r+0x7e>
 8003a72:	600b      	str	r3, [r1, #0]
 8003a74:	50cd      	str	r5, [r1, r3]
 8003a76:	18cc      	adds	r4, r1, r3
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f001 f936 	bl	8004cea <__malloc_unlock>
 8003a7e:	f104 000b 	add.w	r0, r4, #11
 8003a82:	1d23      	adds	r3, r4, #4
 8003a84:	f020 0007 	bic.w	r0, r0, #7
 8003a88:	1ac3      	subs	r3, r0, r3
 8003a8a:	d01b      	beq.n	8003ac4 <_malloc_r+0xb0>
 8003a8c:	425a      	negs	r2, r3
 8003a8e:	50e2      	str	r2, [r4, r3]
 8003a90:	bd70      	pop	{r4, r5, r6, pc}
 8003a92:	428c      	cmp	r4, r1
 8003a94:	bf0d      	iteet	eq
 8003a96:	6863      	ldreq	r3, [r4, #4]
 8003a98:	684b      	ldrne	r3, [r1, #4]
 8003a9a:	6063      	strne	r3, [r4, #4]
 8003a9c:	6013      	streq	r3, [r2, #0]
 8003a9e:	bf18      	it	ne
 8003aa0:	460c      	movne	r4, r1
 8003aa2:	e7e9      	b.n	8003a78 <_malloc_r+0x64>
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	6849      	ldr	r1, [r1, #4]
 8003aa8:	e7ca      	b.n	8003a40 <_malloc_r+0x2c>
 8003aaa:	1cc4      	adds	r4, r0, #3
 8003aac:	f024 0403 	bic.w	r4, r4, #3
 8003ab0:	42a0      	cmp	r0, r4
 8003ab2:	d005      	beq.n	8003ac0 <_malloc_r+0xac>
 8003ab4:	1a21      	subs	r1, r4, r0
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f000 fe48 	bl	800474c <_sbrk_r>
 8003abc:	3001      	adds	r0, #1
 8003abe:	d0cd      	beq.n	8003a5c <_malloc_r+0x48>
 8003ac0:	6025      	str	r5, [r4, #0]
 8003ac2:	e7d9      	b.n	8003a78 <_malloc_r+0x64>
 8003ac4:	bd70      	pop	{r4, r5, r6, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20001164 	.word	0x20001164
 8003acc:	20001168 	.word	0x20001168

08003ad0 <__sfputc_r>:
 8003ad0:	6893      	ldr	r3, [r2, #8]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	b410      	push	{r4}
 8003ad8:	6093      	str	r3, [r2, #8]
 8003ada:	da09      	bge.n	8003af0 <__sfputc_r+0x20>
 8003adc:	6994      	ldr	r4, [r2, #24]
 8003ade:	42a3      	cmp	r3, r4
 8003ae0:	db02      	blt.n	8003ae8 <__sfputc_r+0x18>
 8003ae2:	b2cb      	uxtb	r3, r1
 8003ae4:	2b0a      	cmp	r3, #10
 8003ae6:	d103      	bne.n	8003af0 <__sfputc_r+0x20>
 8003ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003aec:	f7ff bc76 	b.w	80033dc <__swbuf_r>
 8003af0:	6813      	ldr	r3, [r2, #0]
 8003af2:	1c58      	adds	r0, r3, #1
 8003af4:	6010      	str	r0, [r2, #0]
 8003af6:	7019      	strb	r1, [r3, #0]
 8003af8:	b2c8      	uxtb	r0, r1
 8003afa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <__sfputs_r>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	4606      	mov	r6, r0
 8003b04:	460f      	mov	r7, r1
 8003b06:	4614      	mov	r4, r2
 8003b08:	18d5      	adds	r5, r2, r3
 8003b0a:	42ac      	cmp	r4, r5
 8003b0c:	d101      	bne.n	8003b12 <__sfputs_r+0x12>
 8003b0e:	2000      	movs	r0, #0
 8003b10:	e007      	b.n	8003b22 <__sfputs_r+0x22>
 8003b12:	463a      	mov	r2, r7
 8003b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f7ff ffd9 	bl	8003ad0 <__sfputc_r>
 8003b1e:	1c43      	adds	r3, r0, #1
 8003b20:	d1f3      	bne.n	8003b0a <__sfputs_r+0xa>
 8003b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b24 <_vfiprintf_r>:
 8003b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b28:	b09d      	sub	sp, #116	; 0x74
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	4617      	mov	r7, r2
 8003b2e:	9303      	str	r3, [sp, #12]
 8003b30:	4606      	mov	r6, r0
 8003b32:	b118      	cbz	r0, 8003b3c <_vfiprintf_r+0x18>
 8003b34:	6983      	ldr	r3, [r0, #24]
 8003b36:	b90b      	cbnz	r3, 8003b3c <_vfiprintf_r+0x18>
 8003b38:	f7ff fe14 	bl	8003764 <__sinit>
 8003b3c:	4b7c      	ldr	r3, [pc, #496]	; (8003d30 <_vfiprintf_r+0x20c>)
 8003b3e:	429c      	cmp	r4, r3
 8003b40:	d157      	bne.n	8003bf2 <_vfiprintf_r+0xce>
 8003b42:	6874      	ldr	r4, [r6, #4]
 8003b44:	89a3      	ldrh	r3, [r4, #12]
 8003b46:	0718      	lsls	r0, r3, #28
 8003b48:	d55d      	bpl.n	8003c06 <_vfiprintf_r+0xe2>
 8003b4a:	6923      	ldr	r3, [r4, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d05a      	beq.n	8003c06 <_vfiprintf_r+0xe2>
 8003b50:	2300      	movs	r3, #0
 8003b52:	9309      	str	r3, [sp, #36]	; 0x24
 8003b54:	2320      	movs	r3, #32
 8003b56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b5a:	2330      	movs	r3, #48	; 0x30
 8003b5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b60:	f04f 0b01 	mov.w	fp, #1
 8003b64:	46b8      	mov	r8, r7
 8003b66:	4645      	mov	r5, r8
 8003b68:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d155      	bne.n	8003c1c <_vfiprintf_r+0xf8>
 8003b70:	ebb8 0a07 	subs.w	sl, r8, r7
 8003b74:	d00b      	beq.n	8003b8e <_vfiprintf_r+0x6a>
 8003b76:	4653      	mov	r3, sl
 8003b78:	463a      	mov	r2, r7
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	f7ff ffbf 	bl	8003b00 <__sfputs_r>
 8003b82:	3001      	adds	r0, #1
 8003b84:	f000 80c4 	beq.w	8003d10 <_vfiprintf_r+0x1ec>
 8003b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b8a:	4453      	add	r3, sl
 8003b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b8e:	f898 3000 	ldrb.w	r3, [r8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80bc 	beq.w	8003d10 <_vfiprintf_r+0x1ec>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b9e:	9304      	str	r3, [sp, #16]
 8003ba0:	9307      	str	r3, [sp, #28]
 8003ba2:	9205      	str	r2, [sp, #20]
 8003ba4:	9306      	str	r3, [sp, #24]
 8003ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003baa:	931a      	str	r3, [sp, #104]	; 0x68
 8003bac:	2205      	movs	r2, #5
 8003bae:	7829      	ldrb	r1, [r5, #0]
 8003bb0:	4860      	ldr	r0, [pc, #384]	; (8003d34 <_vfiprintf_r+0x210>)
 8003bb2:	f7fc fb0d 	bl	80001d0 <memchr>
 8003bb6:	f105 0801 	add.w	r8, r5, #1
 8003bba:	9b04      	ldr	r3, [sp, #16]
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d131      	bne.n	8003c24 <_vfiprintf_r+0x100>
 8003bc0:	06d9      	lsls	r1, r3, #27
 8003bc2:	bf44      	itt	mi
 8003bc4:	2220      	movmi	r2, #32
 8003bc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bca:	071a      	lsls	r2, r3, #28
 8003bcc:	bf44      	itt	mi
 8003bce:	222b      	movmi	r2, #43	; 0x2b
 8003bd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bd4:	782a      	ldrb	r2, [r5, #0]
 8003bd6:	2a2a      	cmp	r2, #42	; 0x2a
 8003bd8:	d02c      	beq.n	8003c34 <_vfiprintf_r+0x110>
 8003bda:	9a07      	ldr	r2, [sp, #28]
 8003bdc:	2100      	movs	r1, #0
 8003bde:	200a      	movs	r0, #10
 8003be0:	46a8      	mov	r8, r5
 8003be2:	3501      	adds	r5, #1
 8003be4:	f898 3000 	ldrb.w	r3, [r8]
 8003be8:	3b30      	subs	r3, #48	; 0x30
 8003bea:	2b09      	cmp	r3, #9
 8003bec:	d96d      	bls.n	8003cca <_vfiprintf_r+0x1a6>
 8003bee:	b371      	cbz	r1, 8003c4e <_vfiprintf_r+0x12a>
 8003bf0:	e026      	b.n	8003c40 <_vfiprintf_r+0x11c>
 8003bf2:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <_vfiprintf_r+0x214>)
 8003bf4:	429c      	cmp	r4, r3
 8003bf6:	d101      	bne.n	8003bfc <_vfiprintf_r+0xd8>
 8003bf8:	68b4      	ldr	r4, [r6, #8]
 8003bfa:	e7a3      	b.n	8003b44 <_vfiprintf_r+0x20>
 8003bfc:	4b4f      	ldr	r3, [pc, #316]	; (8003d3c <_vfiprintf_r+0x218>)
 8003bfe:	429c      	cmp	r4, r3
 8003c00:	bf08      	it	eq
 8003c02:	68f4      	ldreq	r4, [r6, #12]
 8003c04:	e79e      	b.n	8003b44 <_vfiprintf_r+0x20>
 8003c06:	4621      	mov	r1, r4
 8003c08:	4630      	mov	r0, r6
 8003c0a:	f7ff fc39 	bl	8003480 <__swsetup_r>
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	d09e      	beq.n	8003b50 <_vfiprintf_r+0x2c>
 8003c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c16:	b01d      	add	sp, #116	; 0x74
 8003c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c1c:	2b25      	cmp	r3, #37	; 0x25
 8003c1e:	d0a7      	beq.n	8003b70 <_vfiprintf_r+0x4c>
 8003c20:	46a8      	mov	r8, r5
 8003c22:	e7a0      	b.n	8003b66 <_vfiprintf_r+0x42>
 8003c24:	4a43      	ldr	r2, [pc, #268]	; (8003d34 <_vfiprintf_r+0x210>)
 8003c26:	1a80      	subs	r0, r0, r2
 8003c28:	fa0b f000 	lsl.w	r0, fp, r0
 8003c2c:	4318      	orrs	r0, r3
 8003c2e:	9004      	str	r0, [sp, #16]
 8003c30:	4645      	mov	r5, r8
 8003c32:	e7bb      	b.n	8003bac <_vfiprintf_r+0x88>
 8003c34:	9a03      	ldr	r2, [sp, #12]
 8003c36:	1d11      	adds	r1, r2, #4
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	9103      	str	r1, [sp, #12]
 8003c3c:	2a00      	cmp	r2, #0
 8003c3e:	db01      	blt.n	8003c44 <_vfiprintf_r+0x120>
 8003c40:	9207      	str	r2, [sp, #28]
 8003c42:	e004      	b.n	8003c4e <_vfiprintf_r+0x12a>
 8003c44:	4252      	negs	r2, r2
 8003c46:	f043 0302 	orr.w	r3, r3, #2
 8003c4a:	9207      	str	r2, [sp, #28]
 8003c4c:	9304      	str	r3, [sp, #16]
 8003c4e:	f898 3000 	ldrb.w	r3, [r8]
 8003c52:	2b2e      	cmp	r3, #46	; 0x2e
 8003c54:	d110      	bne.n	8003c78 <_vfiprintf_r+0x154>
 8003c56:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c5c:	f108 0101 	add.w	r1, r8, #1
 8003c60:	d137      	bne.n	8003cd2 <_vfiprintf_r+0x1ae>
 8003c62:	9b03      	ldr	r3, [sp, #12]
 8003c64:	1d1a      	adds	r2, r3, #4
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	9203      	str	r2, [sp, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bfb8      	it	lt
 8003c6e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003c72:	f108 0802 	add.w	r8, r8, #2
 8003c76:	9305      	str	r3, [sp, #20]
 8003c78:	4d31      	ldr	r5, [pc, #196]	; (8003d40 <_vfiprintf_r+0x21c>)
 8003c7a:	f898 1000 	ldrb.w	r1, [r8]
 8003c7e:	2203      	movs	r2, #3
 8003c80:	4628      	mov	r0, r5
 8003c82:	f7fc faa5 	bl	80001d0 <memchr>
 8003c86:	b140      	cbz	r0, 8003c9a <_vfiprintf_r+0x176>
 8003c88:	2340      	movs	r3, #64	; 0x40
 8003c8a:	1b40      	subs	r0, r0, r5
 8003c8c:	fa03 f000 	lsl.w	r0, r3, r0
 8003c90:	9b04      	ldr	r3, [sp, #16]
 8003c92:	4303      	orrs	r3, r0
 8003c94:	9304      	str	r3, [sp, #16]
 8003c96:	f108 0801 	add.w	r8, r8, #1
 8003c9a:	f898 1000 	ldrb.w	r1, [r8]
 8003c9e:	4829      	ldr	r0, [pc, #164]	; (8003d44 <_vfiprintf_r+0x220>)
 8003ca0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ca4:	2206      	movs	r2, #6
 8003ca6:	f108 0701 	add.w	r7, r8, #1
 8003caa:	f7fc fa91 	bl	80001d0 <memchr>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d034      	beq.n	8003d1c <_vfiprintf_r+0x1f8>
 8003cb2:	4b25      	ldr	r3, [pc, #148]	; (8003d48 <_vfiprintf_r+0x224>)
 8003cb4:	bb03      	cbnz	r3, 8003cf8 <_vfiprintf_r+0x1d4>
 8003cb6:	9b03      	ldr	r3, [sp, #12]
 8003cb8:	3307      	adds	r3, #7
 8003cba:	f023 0307 	bic.w	r3, r3, #7
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	9303      	str	r3, [sp, #12]
 8003cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cc4:	444b      	add	r3, r9
 8003cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003cc8:	e74c      	b.n	8003b64 <_vfiprintf_r+0x40>
 8003cca:	fb00 3202 	mla	r2, r0, r2, r3
 8003cce:	2101      	movs	r1, #1
 8003cd0:	e786      	b.n	8003be0 <_vfiprintf_r+0xbc>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	9305      	str	r3, [sp, #20]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	250a      	movs	r5, #10
 8003cda:	4688      	mov	r8, r1
 8003cdc:	3101      	adds	r1, #1
 8003cde:	f898 2000 	ldrb.w	r2, [r8]
 8003ce2:	3a30      	subs	r2, #48	; 0x30
 8003ce4:	2a09      	cmp	r2, #9
 8003ce6:	d903      	bls.n	8003cf0 <_vfiprintf_r+0x1cc>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0c5      	beq.n	8003c78 <_vfiprintf_r+0x154>
 8003cec:	9005      	str	r0, [sp, #20]
 8003cee:	e7c3      	b.n	8003c78 <_vfiprintf_r+0x154>
 8003cf0:	fb05 2000 	mla	r0, r5, r0, r2
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e7f0      	b.n	8003cda <_vfiprintf_r+0x1b6>
 8003cf8:	ab03      	add	r3, sp, #12
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	4622      	mov	r2, r4
 8003cfe:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <_vfiprintf_r+0x228>)
 8003d00:	a904      	add	r1, sp, #16
 8003d02:	4630      	mov	r0, r6
 8003d04:	f3af 8000 	nop.w
 8003d08:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003d0c:	4681      	mov	r9, r0
 8003d0e:	d1d8      	bne.n	8003cc2 <_vfiprintf_r+0x19e>
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	065b      	lsls	r3, r3, #25
 8003d14:	f53f af7d 	bmi.w	8003c12 <_vfiprintf_r+0xee>
 8003d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d1a:	e77c      	b.n	8003c16 <_vfiprintf_r+0xf2>
 8003d1c:	ab03      	add	r3, sp, #12
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	4622      	mov	r2, r4
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <_vfiprintf_r+0x228>)
 8003d24:	a904      	add	r1, sp, #16
 8003d26:	4630      	mov	r0, r6
 8003d28:	f000 f888 	bl	8003e3c <_printf_i>
 8003d2c:	e7ec      	b.n	8003d08 <_vfiprintf_r+0x1e4>
 8003d2e:	bf00      	nop
 8003d30:	08004ec0 	.word	0x08004ec0
 8003d34:	08004f00 	.word	0x08004f00
 8003d38:	08004ee0 	.word	0x08004ee0
 8003d3c:	08004ea0 	.word	0x08004ea0
 8003d40:	08004f06 	.word	0x08004f06
 8003d44:	08004f0a 	.word	0x08004f0a
 8003d48:	00000000 	.word	0x00000000
 8003d4c:	08003b01 	.word	0x08003b01

08003d50 <_printf_common>:
 8003d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d54:	4691      	mov	r9, r2
 8003d56:	461f      	mov	r7, r3
 8003d58:	688a      	ldr	r2, [r1, #8]
 8003d5a:	690b      	ldr	r3, [r1, #16]
 8003d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d60:	4293      	cmp	r3, r2
 8003d62:	bfb8      	it	lt
 8003d64:	4613      	movlt	r3, r2
 8003d66:	f8c9 3000 	str.w	r3, [r9]
 8003d6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d6e:	4606      	mov	r6, r0
 8003d70:	460c      	mov	r4, r1
 8003d72:	b112      	cbz	r2, 8003d7a <_printf_common+0x2a>
 8003d74:	3301      	adds	r3, #1
 8003d76:	f8c9 3000 	str.w	r3, [r9]
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	0699      	lsls	r1, r3, #26
 8003d7e:	bf42      	ittt	mi
 8003d80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d84:	3302      	addmi	r3, #2
 8003d86:	f8c9 3000 	strmi.w	r3, [r9]
 8003d8a:	6825      	ldr	r5, [r4, #0]
 8003d8c:	f015 0506 	ands.w	r5, r5, #6
 8003d90:	d107      	bne.n	8003da2 <_printf_common+0x52>
 8003d92:	f104 0a19 	add.w	sl, r4, #25
 8003d96:	68e3      	ldr	r3, [r4, #12]
 8003d98:	f8d9 2000 	ldr.w	r2, [r9]
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	429d      	cmp	r5, r3
 8003da0:	db29      	blt.n	8003df6 <_printf_common+0xa6>
 8003da2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	3300      	adds	r3, #0
 8003daa:	bf18      	it	ne
 8003dac:	2301      	movne	r3, #1
 8003dae:	0692      	lsls	r2, r2, #26
 8003db0:	d42e      	bmi.n	8003e10 <_printf_common+0xc0>
 8003db2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003db6:	4639      	mov	r1, r7
 8003db8:	4630      	mov	r0, r6
 8003dba:	47c0      	blx	r8
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	d021      	beq.n	8003e04 <_printf_common+0xb4>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	68e5      	ldr	r5, [r4, #12]
 8003dc4:	f8d9 2000 	ldr.w	r2, [r9]
 8003dc8:	f003 0306 	and.w	r3, r3, #6
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	bf08      	it	eq
 8003dd0:	1aad      	subeq	r5, r5, r2
 8003dd2:	68a3      	ldr	r3, [r4, #8]
 8003dd4:	6922      	ldr	r2, [r4, #16]
 8003dd6:	bf0c      	ite	eq
 8003dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ddc:	2500      	movne	r5, #0
 8003dde:	4293      	cmp	r3, r2
 8003de0:	bfc4      	itt	gt
 8003de2:	1a9b      	subgt	r3, r3, r2
 8003de4:	18ed      	addgt	r5, r5, r3
 8003de6:	f04f 0900 	mov.w	r9, #0
 8003dea:	341a      	adds	r4, #26
 8003dec:	454d      	cmp	r5, r9
 8003dee:	d11b      	bne.n	8003e28 <_printf_common+0xd8>
 8003df0:	2000      	movs	r0, #0
 8003df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df6:	2301      	movs	r3, #1
 8003df8:	4652      	mov	r2, sl
 8003dfa:	4639      	mov	r1, r7
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	47c0      	blx	r8
 8003e00:	3001      	adds	r0, #1
 8003e02:	d103      	bne.n	8003e0c <_printf_common+0xbc>
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e0c:	3501      	adds	r5, #1
 8003e0e:	e7c2      	b.n	8003d96 <_printf_common+0x46>
 8003e10:	18e1      	adds	r1, r4, r3
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	2030      	movs	r0, #48	; 0x30
 8003e16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e1a:	4422      	add	r2, r4
 8003e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e24:	3302      	adds	r3, #2
 8003e26:	e7c4      	b.n	8003db2 <_printf_common+0x62>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	4639      	mov	r1, r7
 8003e2e:	4630      	mov	r0, r6
 8003e30:	47c0      	blx	r8
 8003e32:	3001      	adds	r0, #1
 8003e34:	d0e6      	beq.n	8003e04 <_printf_common+0xb4>
 8003e36:	f109 0901 	add.w	r9, r9, #1
 8003e3a:	e7d7      	b.n	8003dec <_printf_common+0x9c>

08003e3c <_printf_i>:
 8003e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e40:	4617      	mov	r7, r2
 8003e42:	7e0a      	ldrb	r2, [r1, #24]
 8003e44:	b085      	sub	sp, #20
 8003e46:	2a6e      	cmp	r2, #110	; 0x6e
 8003e48:	4698      	mov	r8, r3
 8003e4a:	4606      	mov	r6, r0
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e50:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003e54:	f000 80bc 	beq.w	8003fd0 <_printf_i+0x194>
 8003e58:	d81a      	bhi.n	8003e90 <_printf_i+0x54>
 8003e5a:	2a63      	cmp	r2, #99	; 0x63
 8003e5c:	d02e      	beq.n	8003ebc <_printf_i+0x80>
 8003e5e:	d80a      	bhi.n	8003e76 <_printf_i+0x3a>
 8003e60:	2a00      	cmp	r2, #0
 8003e62:	f000 80c8 	beq.w	8003ff6 <_printf_i+0x1ba>
 8003e66:	2a58      	cmp	r2, #88	; 0x58
 8003e68:	f000 808a 	beq.w	8003f80 <_printf_i+0x144>
 8003e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e70:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003e74:	e02a      	b.n	8003ecc <_printf_i+0x90>
 8003e76:	2a64      	cmp	r2, #100	; 0x64
 8003e78:	d001      	beq.n	8003e7e <_printf_i+0x42>
 8003e7a:	2a69      	cmp	r2, #105	; 0x69
 8003e7c:	d1f6      	bne.n	8003e6c <_printf_i+0x30>
 8003e7e:	6821      	ldr	r1, [r4, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003e86:	d023      	beq.n	8003ed0 <_printf_i+0x94>
 8003e88:	1d11      	adds	r1, r2, #4
 8003e8a:	6019      	str	r1, [r3, #0]
 8003e8c:	6813      	ldr	r3, [r2, #0]
 8003e8e:	e027      	b.n	8003ee0 <_printf_i+0xa4>
 8003e90:	2a73      	cmp	r2, #115	; 0x73
 8003e92:	f000 80b4 	beq.w	8003ffe <_printf_i+0x1c2>
 8003e96:	d808      	bhi.n	8003eaa <_printf_i+0x6e>
 8003e98:	2a6f      	cmp	r2, #111	; 0x6f
 8003e9a:	d02a      	beq.n	8003ef2 <_printf_i+0xb6>
 8003e9c:	2a70      	cmp	r2, #112	; 0x70
 8003e9e:	d1e5      	bne.n	8003e6c <_printf_i+0x30>
 8003ea0:	680a      	ldr	r2, [r1, #0]
 8003ea2:	f042 0220 	orr.w	r2, r2, #32
 8003ea6:	600a      	str	r2, [r1, #0]
 8003ea8:	e003      	b.n	8003eb2 <_printf_i+0x76>
 8003eaa:	2a75      	cmp	r2, #117	; 0x75
 8003eac:	d021      	beq.n	8003ef2 <_printf_i+0xb6>
 8003eae:	2a78      	cmp	r2, #120	; 0x78
 8003eb0:	d1dc      	bne.n	8003e6c <_printf_i+0x30>
 8003eb2:	2278      	movs	r2, #120	; 0x78
 8003eb4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003eb8:	496e      	ldr	r1, [pc, #440]	; (8004074 <_printf_i+0x238>)
 8003eba:	e064      	b.n	8003f86 <_printf_i+0x14a>
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003ec2:	1d11      	adds	r1, r2, #4
 8003ec4:	6019      	str	r1, [r3, #0]
 8003ec6:	6813      	ldr	r3, [r2, #0]
 8003ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0a3      	b.n	8004018 <_printf_i+0x1dc>
 8003ed0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003ed4:	f102 0104 	add.w	r1, r2, #4
 8003ed8:	6019      	str	r1, [r3, #0]
 8003eda:	d0d7      	beq.n	8003e8c <_printf_i+0x50>
 8003edc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	da03      	bge.n	8003eec <_printf_i+0xb0>
 8003ee4:	222d      	movs	r2, #45	; 0x2d
 8003ee6:	425b      	negs	r3, r3
 8003ee8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003eec:	4962      	ldr	r1, [pc, #392]	; (8004078 <_printf_i+0x23c>)
 8003eee:	220a      	movs	r2, #10
 8003ef0:	e017      	b.n	8003f22 <_printf_i+0xe6>
 8003ef2:	6820      	ldr	r0, [r4, #0]
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003efa:	d003      	beq.n	8003f04 <_printf_i+0xc8>
 8003efc:	1d08      	adds	r0, r1, #4
 8003efe:	6018      	str	r0, [r3, #0]
 8003f00:	680b      	ldr	r3, [r1, #0]
 8003f02:	e006      	b.n	8003f12 <_printf_i+0xd6>
 8003f04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f08:	f101 0004 	add.w	r0, r1, #4
 8003f0c:	6018      	str	r0, [r3, #0]
 8003f0e:	d0f7      	beq.n	8003f00 <_printf_i+0xc4>
 8003f10:	880b      	ldrh	r3, [r1, #0]
 8003f12:	4959      	ldr	r1, [pc, #356]	; (8004078 <_printf_i+0x23c>)
 8003f14:	2a6f      	cmp	r2, #111	; 0x6f
 8003f16:	bf14      	ite	ne
 8003f18:	220a      	movne	r2, #10
 8003f1a:	2208      	moveq	r2, #8
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003f22:	6865      	ldr	r5, [r4, #4]
 8003f24:	60a5      	str	r5, [r4, #8]
 8003f26:	2d00      	cmp	r5, #0
 8003f28:	f2c0 809c 	blt.w	8004064 <_printf_i+0x228>
 8003f2c:	6820      	ldr	r0, [r4, #0]
 8003f2e:	f020 0004 	bic.w	r0, r0, #4
 8003f32:	6020      	str	r0, [r4, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d13f      	bne.n	8003fb8 <_printf_i+0x17c>
 8003f38:	2d00      	cmp	r5, #0
 8003f3a:	f040 8095 	bne.w	8004068 <_printf_i+0x22c>
 8003f3e:	4675      	mov	r5, lr
 8003f40:	2a08      	cmp	r2, #8
 8003f42:	d10b      	bne.n	8003f5c <_printf_i+0x120>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	07da      	lsls	r2, r3, #31
 8003f48:	d508      	bpl.n	8003f5c <_printf_i+0x120>
 8003f4a:	6923      	ldr	r3, [r4, #16]
 8003f4c:	6862      	ldr	r2, [r4, #4]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	bfde      	ittt	le
 8003f52:	2330      	movle	r3, #48	; 0x30
 8003f54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f5c:	ebae 0305 	sub.w	r3, lr, r5
 8003f60:	6123      	str	r3, [r4, #16]
 8003f62:	f8cd 8000 	str.w	r8, [sp]
 8003f66:	463b      	mov	r3, r7
 8003f68:	aa03      	add	r2, sp, #12
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	4630      	mov	r0, r6
 8003f6e:	f7ff feef 	bl	8003d50 <_printf_common>
 8003f72:	3001      	adds	r0, #1
 8003f74:	d155      	bne.n	8004022 <_printf_i+0x1e6>
 8003f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f7a:	b005      	add	sp, #20
 8003f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f80:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003f84:	493c      	ldr	r1, [pc, #240]	; (8004078 <_printf_i+0x23c>)
 8003f86:	6822      	ldr	r2, [r4, #0]
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003f8e:	f100 0504 	add.w	r5, r0, #4
 8003f92:	601d      	str	r5, [r3, #0]
 8003f94:	d001      	beq.n	8003f9a <_printf_i+0x15e>
 8003f96:	6803      	ldr	r3, [r0, #0]
 8003f98:	e002      	b.n	8003fa0 <_printf_i+0x164>
 8003f9a:	0655      	lsls	r5, r2, #25
 8003f9c:	d5fb      	bpl.n	8003f96 <_printf_i+0x15a>
 8003f9e:	8803      	ldrh	r3, [r0, #0]
 8003fa0:	07d0      	lsls	r0, r2, #31
 8003fa2:	bf44      	itt	mi
 8003fa4:	f042 0220 	orrmi.w	r2, r2, #32
 8003fa8:	6022      	strmi	r2, [r4, #0]
 8003faa:	b91b      	cbnz	r3, 8003fb4 <_printf_i+0x178>
 8003fac:	6822      	ldr	r2, [r4, #0]
 8003fae:	f022 0220 	bic.w	r2, r2, #32
 8003fb2:	6022      	str	r2, [r4, #0]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	e7b1      	b.n	8003f1c <_printf_i+0xe0>
 8003fb8:	4675      	mov	r5, lr
 8003fba:	fbb3 f0f2 	udiv	r0, r3, r2
 8003fbe:	fb02 3310 	mls	r3, r2, r0, r3
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	d1f5      	bne.n	8003fba <_printf_i+0x17e>
 8003fce:	e7b7      	b.n	8003f40 <_printf_i+0x104>
 8003fd0:	6808      	ldr	r0, [r1, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	6949      	ldr	r1, [r1, #20]
 8003fd6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003fda:	d004      	beq.n	8003fe6 <_printf_i+0x1aa>
 8003fdc:	1d10      	adds	r0, r2, #4
 8003fde:	6018      	str	r0, [r3, #0]
 8003fe0:	6813      	ldr	r3, [r2, #0]
 8003fe2:	6019      	str	r1, [r3, #0]
 8003fe4:	e007      	b.n	8003ff6 <_printf_i+0x1ba>
 8003fe6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fea:	f102 0004 	add.w	r0, r2, #4
 8003fee:	6018      	str	r0, [r3, #0]
 8003ff0:	6813      	ldr	r3, [r2, #0]
 8003ff2:	d0f6      	beq.n	8003fe2 <_printf_i+0x1a6>
 8003ff4:	8019      	strh	r1, [r3, #0]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	6123      	str	r3, [r4, #16]
 8003ffa:	4675      	mov	r5, lr
 8003ffc:	e7b1      	b.n	8003f62 <_printf_i+0x126>
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	1d11      	adds	r1, r2, #4
 8004002:	6019      	str	r1, [r3, #0]
 8004004:	6815      	ldr	r5, [r2, #0]
 8004006:	6862      	ldr	r2, [r4, #4]
 8004008:	2100      	movs	r1, #0
 800400a:	4628      	mov	r0, r5
 800400c:	f7fc f8e0 	bl	80001d0 <memchr>
 8004010:	b108      	cbz	r0, 8004016 <_printf_i+0x1da>
 8004012:	1b40      	subs	r0, r0, r5
 8004014:	6060      	str	r0, [r4, #4]
 8004016:	6863      	ldr	r3, [r4, #4]
 8004018:	6123      	str	r3, [r4, #16]
 800401a:	2300      	movs	r3, #0
 800401c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004020:	e79f      	b.n	8003f62 <_printf_i+0x126>
 8004022:	6923      	ldr	r3, [r4, #16]
 8004024:	462a      	mov	r2, r5
 8004026:	4639      	mov	r1, r7
 8004028:	4630      	mov	r0, r6
 800402a:	47c0      	blx	r8
 800402c:	3001      	adds	r0, #1
 800402e:	d0a2      	beq.n	8003f76 <_printf_i+0x13a>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	079b      	lsls	r3, r3, #30
 8004034:	d507      	bpl.n	8004046 <_printf_i+0x20a>
 8004036:	2500      	movs	r5, #0
 8004038:	f104 0919 	add.w	r9, r4, #25
 800403c:	68e3      	ldr	r3, [r4, #12]
 800403e:	9a03      	ldr	r2, [sp, #12]
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	429d      	cmp	r5, r3
 8004044:	db05      	blt.n	8004052 <_printf_i+0x216>
 8004046:	68e0      	ldr	r0, [r4, #12]
 8004048:	9b03      	ldr	r3, [sp, #12]
 800404a:	4298      	cmp	r0, r3
 800404c:	bfb8      	it	lt
 800404e:	4618      	movlt	r0, r3
 8004050:	e793      	b.n	8003f7a <_printf_i+0x13e>
 8004052:	2301      	movs	r3, #1
 8004054:	464a      	mov	r2, r9
 8004056:	4639      	mov	r1, r7
 8004058:	4630      	mov	r0, r6
 800405a:	47c0      	blx	r8
 800405c:	3001      	adds	r0, #1
 800405e:	d08a      	beq.n	8003f76 <_printf_i+0x13a>
 8004060:	3501      	adds	r5, #1
 8004062:	e7eb      	b.n	800403c <_printf_i+0x200>
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1a7      	bne.n	8003fb8 <_printf_i+0x17c>
 8004068:	780b      	ldrb	r3, [r1, #0]
 800406a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800406e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004072:	e765      	b.n	8003f40 <_printf_i+0x104>
 8004074:	08004f22 	.word	0x08004f22
 8004078:	08004f11 	.word	0x08004f11

0800407c <__svfiscanf_r>:
 800407c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004080:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8004084:	f10d 080c 	add.w	r8, sp, #12
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	2300      	movs	r3, #0
 800408c:	9346      	str	r3, [sp, #280]	; 0x118
 800408e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004090:	4ba0      	ldr	r3, [pc, #640]	; (8004314 <__svfiscanf_r+0x298>)
 8004092:	93a2      	str	r3, [sp, #648]	; 0x288
 8004094:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800431c <__svfiscanf_r+0x2a0>
 8004098:	4b9f      	ldr	r3, [pc, #636]	; (8004318 <__svfiscanf_r+0x29c>)
 800409a:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800409e:	4606      	mov	r6, r0
 80040a0:	460c      	mov	r4, r1
 80040a2:	93a3      	str	r3, [sp, #652]	; 0x28c
 80040a4:	4692      	mov	sl, r2
 80040a6:	270a      	movs	r7, #10
 80040a8:	f89a 3000 	ldrb.w	r3, [sl]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 812f 	beq.w	8004310 <__svfiscanf_r+0x294>
 80040b2:	f000 fde7 	bl	8004c84 <__locale_ctype_ptr>
 80040b6:	f89a b000 	ldrb.w	fp, [sl]
 80040ba:	4458      	add	r0, fp
 80040bc:	7843      	ldrb	r3, [r0, #1]
 80040be:	f013 0308 	ands.w	r3, r3, #8
 80040c2:	d143      	bne.n	800414c <__svfiscanf_r+0xd0>
 80040c4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80040c8:	f10a 0501 	add.w	r5, sl, #1
 80040cc:	f040 8099 	bne.w	8004202 <__svfiscanf_r+0x186>
 80040d0:	9345      	str	r3, [sp, #276]	; 0x114
 80040d2:	9343      	str	r3, [sp, #268]	; 0x10c
 80040d4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80040d8:	2b2a      	cmp	r3, #42	; 0x2a
 80040da:	d103      	bne.n	80040e4 <__svfiscanf_r+0x68>
 80040dc:	2310      	movs	r3, #16
 80040de:	9343      	str	r3, [sp, #268]	; 0x10c
 80040e0:	f10a 0502 	add.w	r5, sl, #2
 80040e4:	7829      	ldrb	r1, [r5, #0]
 80040e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80040ea:	2a09      	cmp	r2, #9
 80040ec:	46aa      	mov	sl, r5
 80040ee:	f105 0501 	add.w	r5, r5, #1
 80040f2:	d941      	bls.n	8004178 <__svfiscanf_r+0xfc>
 80040f4:	2203      	movs	r2, #3
 80040f6:	4889      	ldr	r0, [pc, #548]	; (800431c <__svfiscanf_r+0x2a0>)
 80040f8:	f7fc f86a 	bl	80001d0 <memchr>
 80040fc:	b138      	cbz	r0, 800410e <__svfiscanf_r+0x92>
 80040fe:	eba0 0309 	sub.w	r3, r0, r9
 8004102:	2001      	movs	r0, #1
 8004104:	4098      	lsls	r0, r3
 8004106:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004108:	4318      	orrs	r0, r3
 800410a:	9043      	str	r0, [sp, #268]	; 0x10c
 800410c:	46aa      	mov	sl, r5
 800410e:	f89a 3000 	ldrb.w	r3, [sl]
 8004112:	2b67      	cmp	r3, #103	; 0x67
 8004114:	f10a 0501 	add.w	r5, sl, #1
 8004118:	d84a      	bhi.n	80041b0 <__svfiscanf_r+0x134>
 800411a:	2b65      	cmp	r3, #101	; 0x65
 800411c:	f080 80b7 	bcs.w	800428e <__svfiscanf_r+0x212>
 8004120:	2b47      	cmp	r3, #71	; 0x47
 8004122:	d82f      	bhi.n	8004184 <__svfiscanf_r+0x108>
 8004124:	2b45      	cmp	r3, #69	; 0x45
 8004126:	f080 80b2 	bcs.w	800428e <__svfiscanf_r+0x212>
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 8082 	beq.w	8004234 <__svfiscanf_r+0x1b8>
 8004130:	2b25      	cmp	r3, #37	; 0x25
 8004132:	d066      	beq.n	8004202 <__svfiscanf_r+0x186>
 8004134:	2303      	movs	r3, #3
 8004136:	9349      	str	r3, [sp, #292]	; 0x124
 8004138:	9744      	str	r7, [sp, #272]	; 0x110
 800413a:	e045      	b.n	80041c8 <__svfiscanf_r+0x14c>
 800413c:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800413e:	3101      	adds	r1, #1
 8004140:	9147      	str	r1, [sp, #284]	; 0x11c
 8004142:	6861      	ldr	r1, [r4, #4]
 8004144:	3301      	adds	r3, #1
 8004146:	3901      	subs	r1, #1
 8004148:	6061      	str	r1, [r4, #4]
 800414a:	6023      	str	r3, [r4, #0]
 800414c:	6863      	ldr	r3, [r4, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	dd0b      	ble.n	800416a <__svfiscanf_r+0xee>
 8004152:	f000 fd97 	bl	8004c84 <__locale_ctype_ptr>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	7819      	ldrb	r1, [r3, #0]
 800415a:	4408      	add	r0, r1
 800415c:	7841      	ldrb	r1, [r0, #1]
 800415e:	070d      	lsls	r5, r1, #28
 8004160:	d4ec      	bmi.n	800413c <__svfiscanf_r+0xc0>
 8004162:	f10a 0501 	add.w	r5, sl, #1
 8004166:	46aa      	mov	sl, r5
 8004168:	e79e      	b.n	80040a8 <__svfiscanf_r+0x2c>
 800416a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800416c:	4621      	mov	r1, r4
 800416e:	4630      	mov	r0, r6
 8004170:	4798      	blx	r3
 8004172:	2800      	cmp	r0, #0
 8004174:	d0ed      	beq.n	8004152 <__svfiscanf_r+0xd6>
 8004176:	e7f4      	b.n	8004162 <__svfiscanf_r+0xe6>
 8004178:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800417a:	fb07 1303 	mla	r3, r7, r3, r1
 800417e:	3b30      	subs	r3, #48	; 0x30
 8004180:	9345      	str	r3, [sp, #276]	; 0x114
 8004182:	e7af      	b.n	80040e4 <__svfiscanf_r+0x68>
 8004184:	2b5b      	cmp	r3, #91	; 0x5b
 8004186:	d061      	beq.n	800424c <__svfiscanf_r+0x1d0>
 8004188:	d80c      	bhi.n	80041a4 <__svfiscanf_r+0x128>
 800418a:	2b58      	cmp	r3, #88	; 0x58
 800418c:	d1d2      	bne.n	8004134 <__svfiscanf_r+0xb8>
 800418e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004194:	9243      	str	r2, [sp, #268]	; 0x10c
 8004196:	2210      	movs	r2, #16
 8004198:	9244      	str	r2, [sp, #272]	; 0x110
 800419a:	2b6f      	cmp	r3, #111	; 0x6f
 800419c:	bfb4      	ite	lt
 800419e:	2303      	movlt	r3, #3
 80041a0:	2304      	movge	r3, #4
 80041a2:	e010      	b.n	80041c6 <__svfiscanf_r+0x14a>
 80041a4:	2b63      	cmp	r3, #99	; 0x63
 80041a6:	d05c      	beq.n	8004262 <__svfiscanf_r+0x1e6>
 80041a8:	2b64      	cmp	r3, #100	; 0x64
 80041aa:	d1c3      	bne.n	8004134 <__svfiscanf_r+0xb8>
 80041ac:	9744      	str	r7, [sp, #272]	; 0x110
 80041ae:	e7f4      	b.n	800419a <__svfiscanf_r+0x11e>
 80041b0:	2b70      	cmp	r3, #112	; 0x70
 80041b2:	d042      	beq.n	800423a <__svfiscanf_r+0x1be>
 80041b4:	d81d      	bhi.n	80041f2 <__svfiscanf_r+0x176>
 80041b6:	2b6e      	cmp	r3, #110	; 0x6e
 80041b8:	d059      	beq.n	800426e <__svfiscanf_r+0x1f2>
 80041ba:	d843      	bhi.n	8004244 <__svfiscanf_r+0x1c8>
 80041bc:	2b69      	cmp	r3, #105	; 0x69
 80041be:	d1b9      	bne.n	8004134 <__svfiscanf_r+0xb8>
 80041c0:	2300      	movs	r3, #0
 80041c2:	9344      	str	r3, [sp, #272]	; 0x110
 80041c4:	2303      	movs	r3, #3
 80041c6:	9349      	str	r3, [sp, #292]	; 0x124
 80041c8:	6863      	ldr	r3, [r4, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	dd61      	ble.n	8004292 <__svfiscanf_r+0x216>
 80041ce:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80041d0:	0659      	lsls	r1, r3, #25
 80041d2:	d56f      	bpl.n	80042b4 <__svfiscanf_r+0x238>
 80041d4:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	dc7c      	bgt.n	80042d4 <__svfiscanf_r+0x258>
 80041da:	ab01      	add	r3, sp, #4
 80041dc:	4622      	mov	r2, r4
 80041de:	a943      	add	r1, sp, #268	; 0x10c
 80041e0:	4630      	mov	r0, r6
 80041e2:	f000 f8c7 	bl	8004374 <_scanf_chars>
 80041e6:	2801      	cmp	r0, #1
 80041e8:	f000 8092 	beq.w	8004310 <__svfiscanf_r+0x294>
 80041ec:	2802      	cmp	r0, #2
 80041ee:	d1ba      	bne.n	8004166 <__svfiscanf_r+0xea>
 80041f0:	e01d      	b.n	800422e <__svfiscanf_r+0x1b2>
 80041f2:	2b75      	cmp	r3, #117	; 0x75
 80041f4:	d0da      	beq.n	80041ac <__svfiscanf_r+0x130>
 80041f6:	2b78      	cmp	r3, #120	; 0x78
 80041f8:	d0c9      	beq.n	800418e <__svfiscanf_r+0x112>
 80041fa:	2b73      	cmp	r3, #115	; 0x73
 80041fc:	d19a      	bne.n	8004134 <__svfiscanf_r+0xb8>
 80041fe:	2302      	movs	r3, #2
 8004200:	e7e1      	b.n	80041c6 <__svfiscanf_r+0x14a>
 8004202:	6863      	ldr	r3, [r4, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	dd0c      	ble.n	8004222 <__svfiscanf_r+0x1a6>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	781a      	ldrb	r2, [r3, #0]
 800420c:	4593      	cmp	fp, r2
 800420e:	d17f      	bne.n	8004310 <__svfiscanf_r+0x294>
 8004210:	3301      	adds	r3, #1
 8004212:	6862      	ldr	r2, [r4, #4]
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004218:	3a01      	subs	r2, #1
 800421a:	3301      	adds	r3, #1
 800421c:	6062      	str	r2, [r4, #4]
 800421e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004220:	e7a1      	b.n	8004166 <__svfiscanf_r+0xea>
 8004222:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004224:	4621      	mov	r1, r4
 8004226:	4630      	mov	r0, r6
 8004228:	4798      	blx	r3
 800422a:	2800      	cmp	r0, #0
 800422c:	d0ec      	beq.n	8004208 <__svfiscanf_r+0x18c>
 800422e:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004230:	2800      	cmp	r0, #0
 8004232:	d163      	bne.n	80042fc <__svfiscanf_r+0x280>
 8004234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004238:	e066      	b.n	8004308 <__svfiscanf_r+0x28c>
 800423a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800423c:	f042 0220 	orr.w	r2, r2, #32
 8004240:	9243      	str	r2, [sp, #268]	; 0x10c
 8004242:	e7a4      	b.n	800418e <__svfiscanf_r+0x112>
 8004244:	2308      	movs	r3, #8
 8004246:	9344      	str	r3, [sp, #272]	; 0x110
 8004248:	2304      	movs	r3, #4
 800424a:	e7bc      	b.n	80041c6 <__svfiscanf_r+0x14a>
 800424c:	4629      	mov	r1, r5
 800424e:	4640      	mov	r0, r8
 8004250:	f000 fa8c 	bl	800476c <__sccl>
 8004254:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800425a:	9343      	str	r3, [sp, #268]	; 0x10c
 800425c:	4605      	mov	r5, r0
 800425e:	2301      	movs	r3, #1
 8004260:	e7b1      	b.n	80041c6 <__svfiscanf_r+0x14a>
 8004262:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004268:	9343      	str	r3, [sp, #268]	; 0x10c
 800426a:	2300      	movs	r3, #0
 800426c:	e7ab      	b.n	80041c6 <__svfiscanf_r+0x14a>
 800426e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004270:	06d0      	lsls	r0, r2, #27
 8004272:	f53f af78 	bmi.w	8004166 <__svfiscanf_r+0xea>
 8004276:	f012 0f01 	tst.w	r2, #1
 800427a:	9a01      	ldr	r2, [sp, #4]
 800427c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800427e:	f102 0104 	add.w	r1, r2, #4
 8004282:	9101      	str	r1, [sp, #4]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	bf14      	ite	ne
 8004288:	8013      	strhne	r3, [r2, #0]
 800428a:	6013      	streq	r3, [r2, #0]
 800428c:	e76b      	b.n	8004166 <__svfiscanf_r+0xea>
 800428e:	2305      	movs	r3, #5
 8004290:	e799      	b.n	80041c6 <__svfiscanf_r+0x14a>
 8004292:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004294:	4621      	mov	r1, r4
 8004296:	4630      	mov	r0, r6
 8004298:	4798      	blx	r3
 800429a:	2800      	cmp	r0, #0
 800429c:	d097      	beq.n	80041ce <__svfiscanf_r+0x152>
 800429e:	e7c6      	b.n	800422e <__svfiscanf_r+0x1b2>
 80042a0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80042a2:	3201      	adds	r2, #1
 80042a4:	9247      	str	r2, [sp, #284]	; 0x11c
 80042a6:	6862      	ldr	r2, [r4, #4]
 80042a8:	3a01      	subs	r2, #1
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	6062      	str	r2, [r4, #4]
 80042ae:	dd0a      	ble.n	80042c6 <__svfiscanf_r+0x24a>
 80042b0:	3301      	adds	r3, #1
 80042b2:	6023      	str	r3, [r4, #0]
 80042b4:	f000 fce6 	bl	8004c84 <__locale_ctype_ptr>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	781a      	ldrb	r2, [r3, #0]
 80042bc:	4410      	add	r0, r2
 80042be:	7842      	ldrb	r2, [r0, #1]
 80042c0:	0712      	lsls	r2, r2, #28
 80042c2:	d4ed      	bmi.n	80042a0 <__svfiscanf_r+0x224>
 80042c4:	e786      	b.n	80041d4 <__svfiscanf_r+0x158>
 80042c6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80042c8:	4621      	mov	r1, r4
 80042ca:	4630      	mov	r0, r6
 80042cc:	4798      	blx	r3
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d0f0      	beq.n	80042b4 <__svfiscanf_r+0x238>
 80042d2:	e7ac      	b.n	800422e <__svfiscanf_r+0x1b2>
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	dc06      	bgt.n	80042e6 <__svfiscanf_r+0x26a>
 80042d8:	ab01      	add	r3, sp, #4
 80042da:	4622      	mov	r2, r4
 80042dc:	a943      	add	r1, sp, #268	; 0x10c
 80042de:	4630      	mov	r0, r6
 80042e0:	f000 f8ac 	bl	800443c <_scanf_i>
 80042e4:	e77f      	b.n	80041e6 <__svfiscanf_r+0x16a>
 80042e6:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <__svfiscanf_r+0x2a4>)
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f43f af3c 	beq.w	8004166 <__svfiscanf_r+0xea>
 80042ee:	ab01      	add	r3, sp, #4
 80042f0:	4622      	mov	r2, r4
 80042f2:	a943      	add	r1, sp, #268	; 0x10c
 80042f4:	4630      	mov	r0, r6
 80042f6:	f3af 8000 	nop.w
 80042fa:	e774      	b.n	80041e6 <__svfiscanf_r+0x16a>
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004302:	bf18      	it	ne
 8004304:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8004308:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800430c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004310:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004312:	e7f9      	b.n	8004308 <__svfiscanf_r+0x28c>
 8004314:	08004b11 	.word	0x08004b11
 8004318:	08004639 	.word	0x08004639
 800431c:	08004f06 	.word	0x08004f06
 8004320:	00000000 	.word	0x00000000

08004324 <_vfiscanf_r>:
 8004324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004328:	460c      	mov	r4, r1
 800432a:	4616      	mov	r6, r2
 800432c:	461f      	mov	r7, r3
 800432e:	4605      	mov	r5, r0
 8004330:	b118      	cbz	r0, 800433a <_vfiscanf_r+0x16>
 8004332:	6983      	ldr	r3, [r0, #24]
 8004334:	b90b      	cbnz	r3, 800433a <_vfiscanf_r+0x16>
 8004336:	f7ff fa15 	bl	8003764 <__sinit>
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <_vfiscanf_r+0x44>)
 800433c:	429c      	cmp	r4, r3
 800433e:	d108      	bne.n	8004352 <_vfiscanf_r+0x2e>
 8004340:	686c      	ldr	r4, [r5, #4]
 8004342:	463b      	mov	r3, r7
 8004344:	4632      	mov	r2, r6
 8004346:	4621      	mov	r1, r4
 8004348:	4628      	mov	r0, r5
 800434a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800434e:	f7ff be95 	b.w	800407c <__svfiscanf_r>
 8004352:	4b06      	ldr	r3, [pc, #24]	; (800436c <_vfiscanf_r+0x48>)
 8004354:	429c      	cmp	r4, r3
 8004356:	d101      	bne.n	800435c <_vfiscanf_r+0x38>
 8004358:	68ac      	ldr	r4, [r5, #8]
 800435a:	e7f2      	b.n	8004342 <_vfiscanf_r+0x1e>
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <_vfiscanf_r+0x4c>)
 800435e:	429c      	cmp	r4, r3
 8004360:	bf08      	it	eq
 8004362:	68ec      	ldreq	r4, [r5, #12]
 8004364:	e7ed      	b.n	8004342 <_vfiscanf_r+0x1e>
 8004366:	bf00      	nop
 8004368:	08004ec0 	.word	0x08004ec0
 800436c:	08004ee0 	.word	0x08004ee0
 8004370:	08004ea0 	.word	0x08004ea0

08004374 <_scanf_chars>:
 8004374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004378:	4615      	mov	r5, r2
 800437a:	688a      	ldr	r2, [r1, #8]
 800437c:	4680      	mov	r8, r0
 800437e:	460c      	mov	r4, r1
 8004380:	b932      	cbnz	r2, 8004390 <_scanf_chars+0x1c>
 8004382:	698a      	ldr	r2, [r1, #24]
 8004384:	2a00      	cmp	r2, #0
 8004386:	bf0c      	ite	eq
 8004388:	2201      	moveq	r2, #1
 800438a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800438e:	608a      	str	r2, [r1, #8]
 8004390:	6822      	ldr	r2, [r4, #0]
 8004392:	06d1      	lsls	r1, r2, #27
 8004394:	bf5f      	itttt	pl
 8004396:	681a      	ldrpl	r2, [r3, #0]
 8004398:	1d11      	addpl	r1, r2, #4
 800439a:	6019      	strpl	r1, [r3, #0]
 800439c:	6817      	ldrpl	r7, [r2, #0]
 800439e:	2600      	movs	r6, #0
 80043a0:	69a3      	ldr	r3, [r4, #24]
 80043a2:	b1db      	cbz	r3, 80043dc <_scanf_chars+0x68>
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d107      	bne.n	80043b8 <_scanf_chars+0x44>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	6962      	ldr	r2, [r4, #20]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	5cd3      	ldrb	r3, [r2, r3]
 80043b0:	b9a3      	cbnz	r3, 80043dc <_scanf_chars+0x68>
 80043b2:	2e00      	cmp	r6, #0
 80043b4:	d132      	bne.n	800441c <_scanf_chars+0xa8>
 80043b6:	e006      	b.n	80043c6 <_scanf_chars+0x52>
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d007      	beq.n	80043cc <_scanf_chars+0x58>
 80043bc:	2e00      	cmp	r6, #0
 80043be:	d12d      	bne.n	800441c <_scanf_chars+0xa8>
 80043c0:	69a3      	ldr	r3, [r4, #24]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d12a      	bne.n	800441c <_scanf_chars+0xa8>
 80043c6:	2001      	movs	r0, #1
 80043c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043cc:	f000 fc5a 	bl	8004c84 <__locale_ctype_ptr>
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	4418      	add	r0, r3
 80043d6:	7843      	ldrb	r3, [r0, #1]
 80043d8:	071b      	lsls	r3, r3, #28
 80043da:	d4ef      	bmi.n	80043bc <_scanf_chars+0x48>
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	06da      	lsls	r2, r3, #27
 80043e0:	bf5e      	ittt	pl
 80043e2:	682b      	ldrpl	r3, [r5, #0]
 80043e4:	781b      	ldrbpl	r3, [r3, #0]
 80043e6:	703b      	strbpl	r3, [r7, #0]
 80043e8:	682a      	ldr	r2, [r5, #0]
 80043ea:	686b      	ldr	r3, [r5, #4]
 80043ec:	f102 0201 	add.w	r2, r2, #1
 80043f0:	602a      	str	r2, [r5, #0]
 80043f2:	68a2      	ldr	r2, [r4, #8]
 80043f4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80043f8:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80043fc:	606b      	str	r3, [r5, #4]
 80043fe:	f106 0601 	add.w	r6, r6, #1
 8004402:	bf58      	it	pl
 8004404:	3701      	addpl	r7, #1
 8004406:	60a2      	str	r2, [r4, #8]
 8004408:	b142      	cbz	r2, 800441c <_scanf_chars+0xa8>
 800440a:	2b00      	cmp	r3, #0
 800440c:	dcc8      	bgt.n	80043a0 <_scanf_chars+0x2c>
 800440e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004412:	4629      	mov	r1, r5
 8004414:	4640      	mov	r0, r8
 8004416:	4798      	blx	r3
 8004418:	2800      	cmp	r0, #0
 800441a:	d0c1      	beq.n	80043a0 <_scanf_chars+0x2c>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	f013 0310 	ands.w	r3, r3, #16
 8004422:	d105      	bne.n	8004430 <_scanf_chars+0xbc>
 8004424:	68e2      	ldr	r2, [r4, #12]
 8004426:	3201      	adds	r2, #1
 8004428:	60e2      	str	r2, [r4, #12]
 800442a:	69a2      	ldr	r2, [r4, #24]
 800442c:	b102      	cbz	r2, 8004430 <_scanf_chars+0xbc>
 800442e:	703b      	strb	r3, [r7, #0]
 8004430:	6923      	ldr	r3, [r4, #16]
 8004432:	441e      	add	r6, r3
 8004434:	6126      	str	r6, [r4, #16]
 8004436:	2000      	movs	r0, #0
 8004438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800443c <_scanf_i>:
 800443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004440:	469a      	mov	sl, r3
 8004442:	4b74      	ldr	r3, [pc, #464]	; (8004614 <_scanf_i+0x1d8>)
 8004444:	460c      	mov	r4, r1
 8004446:	4683      	mov	fp, r0
 8004448:	4616      	mov	r6, r2
 800444a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800444e:	b087      	sub	sp, #28
 8004450:	ab03      	add	r3, sp, #12
 8004452:	68a7      	ldr	r7, [r4, #8]
 8004454:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004458:	4b6f      	ldr	r3, [pc, #444]	; (8004618 <_scanf_i+0x1dc>)
 800445a:	69a1      	ldr	r1, [r4, #24]
 800445c:	4a6f      	ldr	r2, [pc, #444]	; (800461c <_scanf_i+0x1e0>)
 800445e:	2903      	cmp	r1, #3
 8004460:	bf18      	it	ne
 8004462:	461a      	movne	r2, r3
 8004464:	1e7b      	subs	r3, r7, #1
 8004466:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800446a:	bf84      	itt	hi
 800446c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004470:	60a3      	strhi	r3, [r4, #8]
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	9200      	str	r2, [sp, #0]
 8004476:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800447a:	bf88      	it	hi
 800447c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004480:	f104 091c 	add.w	r9, r4, #28
 8004484:	6023      	str	r3, [r4, #0]
 8004486:	bf8c      	ite	hi
 8004488:	197f      	addhi	r7, r7, r5
 800448a:	2700      	movls	r7, #0
 800448c:	464b      	mov	r3, r9
 800448e:	f04f 0800 	mov.w	r8, #0
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	6831      	ldr	r1, [r6, #0]
 8004496:	ab03      	add	r3, sp, #12
 8004498:	2202      	movs	r2, #2
 800449a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800449e:	7809      	ldrb	r1, [r1, #0]
 80044a0:	f7fb fe96 	bl	80001d0 <memchr>
 80044a4:	9b01      	ldr	r3, [sp, #4]
 80044a6:	b328      	cbz	r0, 80044f4 <_scanf_i+0xb8>
 80044a8:	f1b8 0f01 	cmp.w	r8, #1
 80044ac:	d156      	bne.n	800455c <_scanf_i+0x120>
 80044ae:	6862      	ldr	r2, [r4, #4]
 80044b0:	b92a      	cbnz	r2, 80044be <_scanf_i+0x82>
 80044b2:	2208      	movs	r2, #8
 80044b4:	6062      	str	r2, [r4, #4]
 80044b6:	6822      	ldr	r2, [r4, #0]
 80044b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044bc:	6022      	str	r2, [r4, #0]
 80044be:	6822      	ldr	r2, [r4, #0]
 80044c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80044c4:	6022      	str	r2, [r4, #0]
 80044c6:	68a2      	ldr	r2, [r4, #8]
 80044c8:	1e51      	subs	r1, r2, #1
 80044ca:	60a1      	str	r1, [r4, #8]
 80044cc:	b192      	cbz	r2, 80044f4 <_scanf_i+0xb8>
 80044ce:	6832      	ldr	r2, [r6, #0]
 80044d0:	1c51      	adds	r1, r2, #1
 80044d2:	6031      	str	r1, [r6, #0]
 80044d4:	7812      	ldrb	r2, [r2, #0]
 80044d6:	701a      	strb	r2, [r3, #0]
 80044d8:	1c5d      	adds	r5, r3, #1
 80044da:	6873      	ldr	r3, [r6, #4]
 80044dc:	3b01      	subs	r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	6073      	str	r3, [r6, #4]
 80044e2:	dc06      	bgt.n	80044f2 <_scanf_i+0xb6>
 80044e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80044e8:	4631      	mov	r1, r6
 80044ea:	4658      	mov	r0, fp
 80044ec:	4798      	blx	r3
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d176      	bne.n	80045e0 <_scanf_i+0x1a4>
 80044f2:	462b      	mov	r3, r5
 80044f4:	f108 0801 	add.w	r8, r8, #1
 80044f8:	f1b8 0f03 	cmp.w	r8, #3
 80044fc:	d1c9      	bne.n	8004492 <_scanf_i+0x56>
 80044fe:	6862      	ldr	r2, [r4, #4]
 8004500:	b90a      	cbnz	r2, 8004506 <_scanf_i+0xca>
 8004502:	220a      	movs	r2, #10
 8004504:	6062      	str	r2, [r4, #4]
 8004506:	6862      	ldr	r2, [r4, #4]
 8004508:	4945      	ldr	r1, [pc, #276]	; (8004620 <_scanf_i+0x1e4>)
 800450a:	6960      	ldr	r0, [r4, #20]
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	1a89      	subs	r1, r1, r2
 8004510:	f000 f92c 	bl	800476c <__sccl>
 8004514:	9b01      	ldr	r3, [sp, #4]
 8004516:	f04f 0800 	mov.w	r8, #0
 800451a:	461d      	mov	r5, r3
 800451c:	68a3      	ldr	r3, [r4, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d038      	beq.n	8004594 <_scanf_i+0x158>
 8004522:	6831      	ldr	r1, [r6, #0]
 8004524:	6960      	ldr	r0, [r4, #20]
 8004526:	780a      	ldrb	r2, [r1, #0]
 8004528:	5c80      	ldrb	r0, [r0, r2]
 800452a:	2800      	cmp	r0, #0
 800452c:	d032      	beq.n	8004594 <_scanf_i+0x158>
 800452e:	2a30      	cmp	r2, #48	; 0x30
 8004530:	6822      	ldr	r2, [r4, #0]
 8004532:	d121      	bne.n	8004578 <_scanf_i+0x13c>
 8004534:	0510      	lsls	r0, r2, #20
 8004536:	d51f      	bpl.n	8004578 <_scanf_i+0x13c>
 8004538:	f108 0801 	add.w	r8, r8, #1
 800453c:	b117      	cbz	r7, 8004544 <_scanf_i+0x108>
 800453e:	3301      	adds	r3, #1
 8004540:	3f01      	subs	r7, #1
 8004542:	60a3      	str	r3, [r4, #8]
 8004544:	6873      	ldr	r3, [r6, #4]
 8004546:	3b01      	subs	r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	6073      	str	r3, [r6, #4]
 800454c:	dd1b      	ble.n	8004586 <_scanf_i+0x14a>
 800454e:	6833      	ldr	r3, [r6, #0]
 8004550:	3301      	adds	r3, #1
 8004552:	6033      	str	r3, [r6, #0]
 8004554:	68a3      	ldr	r3, [r4, #8]
 8004556:	3b01      	subs	r3, #1
 8004558:	60a3      	str	r3, [r4, #8]
 800455a:	e7df      	b.n	800451c <_scanf_i+0xe0>
 800455c:	f1b8 0f02 	cmp.w	r8, #2
 8004560:	d1b1      	bne.n	80044c6 <_scanf_i+0x8a>
 8004562:	6822      	ldr	r2, [r4, #0]
 8004564:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004568:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800456c:	d1c2      	bne.n	80044f4 <_scanf_i+0xb8>
 800456e:	2110      	movs	r1, #16
 8004570:	6061      	str	r1, [r4, #4]
 8004572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004576:	e7a5      	b.n	80044c4 <_scanf_i+0x88>
 8004578:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800457c:	6022      	str	r2, [r4, #0]
 800457e:	780b      	ldrb	r3, [r1, #0]
 8004580:	702b      	strb	r3, [r5, #0]
 8004582:	3501      	adds	r5, #1
 8004584:	e7de      	b.n	8004544 <_scanf_i+0x108>
 8004586:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800458a:	4631      	mov	r1, r6
 800458c:	4658      	mov	r0, fp
 800458e:	4798      	blx	r3
 8004590:	2800      	cmp	r0, #0
 8004592:	d0df      	beq.n	8004554 <_scanf_i+0x118>
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	05d9      	lsls	r1, r3, #23
 8004598:	d50c      	bpl.n	80045b4 <_scanf_i+0x178>
 800459a:	454d      	cmp	r5, r9
 800459c:	d908      	bls.n	80045b0 <_scanf_i+0x174>
 800459e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80045a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045a6:	4632      	mov	r2, r6
 80045a8:	4658      	mov	r0, fp
 80045aa:	4798      	blx	r3
 80045ac:	1e6f      	subs	r7, r5, #1
 80045ae:	463d      	mov	r5, r7
 80045b0:	454d      	cmp	r5, r9
 80045b2:	d02c      	beq.n	800460e <_scanf_i+0x1d2>
 80045b4:	6822      	ldr	r2, [r4, #0]
 80045b6:	f012 0210 	ands.w	r2, r2, #16
 80045ba:	d11e      	bne.n	80045fa <_scanf_i+0x1be>
 80045bc:	702a      	strb	r2, [r5, #0]
 80045be:	6863      	ldr	r3, [r4, #4]
 80045c0:	9e00      	ldr	r6, [sp, #0]
 80045c2:	4649      	mov	r1, r9
 80045c4:	4658      	mov	r0, fp
 80045c6:	47b0      	blx	r6
 80045c8:	6822      	ldr	r2, [r4, #0]
 80045ca:	f8da 3000 	ldr.w	r3, [sl]
 80045ce:	f012 0f20 	tst.w	r2, #32
 80045d2:	d008      	beq.n	80045e6 <_scanf_i+0x1aa>
 80045d4:	1d1a      	adds	r2, r3, #4
 80045d6:	f8ca 2000 	str.w	r2, [sl]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6018      	str	r0, [r3, #0]
 80045de:	e009      	b.n	80045f4 <_scanf_i+0x1b8>
 80045e0:	f04f 0800 	mov.w	r8, #0
 80045e4:	e7d6      	b.n	8004594 <_scanf_i+0x158>
 80045e6:	07d2      	lsls	r2, r2, #31
 80045e8:	d5f4      	bpl.n	80045d4 <_scanf_i+0x198>
 80045ea:	1d1a      	adds	r2, r3, #4
 80045ec:	f8ca 2000 	str.w	r2, [sl]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	8018      	strh	r0, [r3, #0]
 80045f4:	68e3      	ldr	r3, [r4, #12]
 80045f6:	3301      	adds	r3, #1
 80045f8:	60e3      	str	r3, [r4, #12]
 80045fa:	eba5 0509 	sub.w	r5, r5, r9
 80045fe:	44a8      	add	r8, r5
 8004600:	6925      	ldr	r5, [r4, #16]
 8004602:	4445      	add	r5, r8
 8004604:	6125      	str	r5, [r4, #16]
 8004606:	2000      	movs	r0, #0
 8004608:	b007      	add	sp, #28
 800460a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800460e:	2001      	movs	r0, #1
 8004610:	e7fa      	b.n	8004608 <_scanf_i+0x1cc>
 8004612:	bf00      	nop
 8004614:	08004e48 	.word	0x08004e48
 8004618:	08004a75 	.word	0x08004a75
 800461c:	08004955 	.word	0x08004955
 8004620:	08004f43 	.word	0x08004f43

08004624 <lflush>:
 8004624:	8983      	ldrh	r3, [r0, #12]
 8004626:	f003 0309 	and.w	r3, r3, #9
 800462a:	2b09      	cmp	r3, #9
 800462c:	d101      	bne.n	8004632 <lflush+0xe>
 800462e:	f7ff b847 	b.w	80036c0 <fflush>
 8004632:	2000      	movs	r0, #0
 8004634:	4770      	bx	lr
	...

08004638 <__srefill_r>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	460c      	mov	r4, r1
 800463c:	4605      	mov	r5, r0
 800463e:	b118      	cbz	r0, 8004648 <__srefill_r+0x10>
 8004640:	6983      	ldr	r3, [r0, #24]
 8004642:	b90b      	cbnz	r3, 8004648 <__srefill_r+0x10>
 8004644:	f7ff f88e 	bl	8003764 <__sinit>
 8004648:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <__srefill_r+0x100>)
 800464a:	429c      	cmp	r4, r3
 800464c:	d10a      	bne.n	8004664 <__srefill_r+0x2c>
 800464e:	686c      	ldr	r4, [r5, #4]
 8004650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004654:	2300      	movs	r3, #0
 8004656:	6063      	str	r3, [r4, #4]
 8004658:	b293      	uxth	r3, r2
 800465a:	069e      	lsls	r6, r3, #26
 800465c:	d50c      	bpl.n	8004678 <__srefill_r+0x40>
 800465e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004664:	4b35      	ldr	r3, [pc, #212]	; (800473c <__srefill_r+0x104>)
 8004666:	429c      	cmp	r4, r3
 8004668:	d101      	bne.n	800466e <__srefill_r+0x36>
 800466a:	68ac      	ldr	r4, [r5, #8]
 800466c:	e7f0      	b.n	8004650 <__srefill_r+0x18>
 800466e:	4b34      	ldr	r3, [pc, #208]	; (8004740 <__srefill_r+0x108>)
 8004670:	429c      	cmp	r4, r3
 8004672:	bf08      	it	eq
 8004674:	68ec      	ldreq	r4, [r5, #12]
 8004676:	e7eb      	b.n	8004650 <__srefill_r+0x18>
 8004678:	0758      	lsls	r0, r3, #29
 800467a:	d448      	bmi.n	800470e <__srefill_r+0xd6>
 800467c:	06d9      	lsls	r1, r3, #27
 800467e:	d405      	bmi.n	800468c <__srefill_r+0x54>
 8004680:	2309      	movs	r3, #9
 8004682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004686:	602b      	str	r3, [r5, #0]
 8004688:	81a2      	strh	r2, [r4, #12]
 800468a:	e7e8      	b.n	800465e <__srefill_r+0x26>
 800468c:	071a      	lsls	r2, r3, #28
 800468e:	d50b      	bpl.n	80046a8 <__srefill_r+0x70>
 8004690:	4621      	mov	r1, r4
 8004692:	4628      	mov	r0, r5
 8004694:	f7fe ffea 	bl	800366c <_fflush_r>
 8004698:	2800      	cmp	r0, #0
 800469a:	d1e0      	bne.n	800465e <__srefill_r+0x26>
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	60a0      	str	r0, [r4, #8]
 80046a0:	f023 0308 	bic.w	r3, r3, #8
 80046a4:	81a3      	strh	r3, [r4, #12]
 80046a6:	61a0      	str	r0, [r4, #24]
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	f043 0304 	orr.w	r3, r3, #4
 80046ae:	81a3      	strh	r3, [r4, #12]
 80046b0:	6923      	ldr	r3, [r4, #16]
 80046b2:	b91b      	cbnz	r3, 80046bc <__srefill_r+0x84>
 80046b4:	4621      	mov	r1, r4
 80046b6:	4628      	mov	r0, r5
 80046b8:	f7ff f91e 	bl	80038f8 <__smakebuf_r>
 80046bc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80046c0:	b2be      	uxth	r6, r7
 80046c2:	07b3      	lsls	r3, r6, #30
 80046c4:	d00f      	beq.n	80046e6 <__srefill_r+0xae>
 80046c6:	2301      	movs	r3, #1
 80046c8:	81a3      	strh	r3, [r4, #12]
 80046ca:	4b1e      	ldr	r3, [pc, #120]	; (8004744 <__srefill_r+0x10c>)
 80046cc:	491e      	ldr	r1, [pc, #120]	; (8004748 <__srefill_r+0x110>)
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	f006 0609 	and.w	r6, r6, #9
 80046d4:	f7ff f8b2 	bl	800383c <_fwalk>
 80046d8:	2e09      	cmp	r6, #9
 80046da:	81a7      	strh	r7, [r4, #12]
 80046dc:	d103      	bne.n	80046e6 <__srefill_r+0xae>
 80046de:	4621      	mov	r1, r4
 80046e0:	4628      	mov	r0, r5
 80046e2:	f7fe ff3b 	bl	800355c <__sflush_r>
 80046e6:	6922      	ldr	r2, [r4, #16]
 80046e8:	6022      	str	r2, [r4, #0]
 80046ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80046ec:	6963      	ldr	r3, [r4, #20]
 80046ee:	6a21      	ldr	r1, [r4, #32]
 80046f0:	4628      	mov	r0, r5
 80046f2:	47b0      	blx	r6
 80046f4:	2800      	cmp	r0, #0
 80046f6:	6060      	str	r0, [r4, #4]
 80046f8:	dc1c      	bgt.n	8004734 <__srefill_r+0xfc>
 80046fa:	89a3      	ldrh	r3, [r4, #12]
 80046fc:	bf17      	itett	ne
 80046fe:	2200      	movne	r2, #0
 8004700:	f043 0320 	orreq.w	r3, r3, #32
 8004704:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004708:	6062      	strne	r2, [r4, #4]
 800470a:	81a3      	strh	r3, [r4, #12]
 800470c:	e7a7      	b.n	800465e <__srefill_r+0x26>
 800470e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004710:	2900      	cmp	r1, #0
 8004712:	d0cd      	beq.n	80046b0 <__srefill_r+0x78>
 8004714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004718:	4299      	cmp	r1, r3
 800471a:	d002      	beq.n	8004722 <__srefill_r+0xea>
 800471c:	4628      	mov	r0, r5
 800471e:	f7ff f92b 	bl	8003978 <_free_r>
 8004722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004724:	6063      	str	r3, [r4, #4]
 8004726:	2000      	movs	r0, #0
 8004728:	6360      	str	r0, [r4, #52]	; 0x34
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0c0      	beq.n	80046b0 <__srefill_r+0x78>
 800472e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004734:	2000      	movs	r0, #0
 8004736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004738:	08004ec0 	.word	0x08004ec0
 800473c:	08004ee0 	.word	0x08004ee0
 8004740:	08004ea0 	.word	0x08004ea0
 8004744:	08004e9c 	.word	0x08004e9c
 8004748:	08004625 	.word	0x08004625

0800474c <_sbrk_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4c06      	ldr	r4, [pc, #24]	; (8004768 <_sbrk_r+0x1c>)
 8004750:	2300      	movs	r3, #0
 8004752:	4605      	mov	r5, r0
 8004754:	4608      	mov	r0, r1
 8004756:	6023      	str	r3, [r4, #0]
 8004758:	f7fb ff90 	bl	800067c <_sbrk>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d102      	bne.n	8004766 <_sbrk_r+0x1a>
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	b103      	cbz	r3, 8004766 <_sbrk_r+0x1a>
 8004764:	602b      	str	r3, [r5, #0]
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	200011c4 	.word	0x200011c4

0800476c <__sccl>:
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	780b      	ldrb	r3, [r1, #0]
 8004770:	2b5e      	cmp	r3, #94	; 0x5e
 8004772:	bf13      	iteet	ne
 8004774:	1c4a      	addne	r2, r1, #1
 8004776:	1c8a      	addeq	r2, r1, #2
 8004778:	784b      	ldrbeq	r3, [r1, #1]
 800477a:	2100      	movne	r1, #0
 800477c:	bf08      	it	eq
 800477e:	2101      	moveq	r1, #1
 8004780:	1e44      	subs	r4, r0, #1
 8004782:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8004786:	f804 1f01 	strb.w	r1, [r4, #1]!
 800478a:	42a5      	cmp	r5, r4
 800478c:	d1fb      	bne.n	8004786 <__sccl+0x1a>
 800478e:	b913      	cbnz	r3, 8004796 <__sccl+0x2a>
 8004790:	3a01      	subs	r2, #1
 8004792:	4610      	mov	r0, r2
 8004794:	bd70      	pop	{r4, r5, r6, pc}
 8004796:	f081 0401 	eor.w	r4, r1, #1
 800479a:	54c4      	strb	r4, [r0, r3]
 800479c:	4611      	mov	r1, r2
 800479e:	780d      	ldrb	r5, [r1, #0]
 80047a0:	2d2d      	cmp	r5, #45	; 0x2d
 80047a2:	f101 0201 	add.w	r2, r1, #1
 80047a6:	d006      	beq.n	80047b6 <__sccl+0x4a>
 80047a8:	2d5d      	cmp	r5, #93	; 0x5d
 80047aa:	d0f2      	beq.n	8004792 <__sccl+0x26>
 80047ac:	b90d      	cbnz	r5, 80047b2 <__sccl+0x46>
 80047ae:	460a      	mov	r2, r1
 80047b0:	e7ef      	b.n	8004792 <__sccl+0x26>
 80047b2:	462b      	mov	r3, r5
 80047b4:	e7f1      	b.n	800479a <__sccl+0x2e>
 80047b6:	784e      	ldrb	r6, [r1, #1]
 80047b8:	2e5d      	cmp	r6, #93	; 0x5d
 80047ba:	d0fa      	beq.n	80047b2 <__sccl+0x46>
 80047bc:	42b3      	cmp	r3, r6
 80047be:	dcf8      	bgt.n	80047b2 <__sccl+0x46>
 80047c0:	3102      	adds	r1, #2
 80047c2:	3301      	adds	r3, #1
 80047c4:	429e      	cmp	r6, r3
 80047c6:	54c4      	strb	r4, [r0, r3]
 80047c8:	dcfb      	bgt.n	80047c2 <__sccl+0x56>
 80047ca:	e7e8      	b.n	800479e <__sccl+0x32>

080047cc <__sread>:
 80047cc:	b510      	push	{r4, lr}
 80047ce:	460c      	mov	r4, r1
 80047d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047d4:	f000 fab0 	bl	8004d38 <_read_r>
 80047d8:	2800      	cmp	r0, #0
 80047da:	bfab      	itete	ge
 80047dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047de:	89a3      	ldrhlt	r3, [r4, #12]
 80047e0:	181b      	addge	r3, r3, r0
 80047e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047e6:	bfac      	ite	ge
 80047e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80047ea:	81a3      	strhlt	r3, [r4, #12]
 80047ec:	bd10      	pop	{r4, pc}

080047ee <__swrite>:
 80047ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f2:	461f      	mov	r7, r3
 80047f4:	898b      	ldrh	r3, [r1, #12]
 80047f6:	05db      	lsls	r3, r3, #23
 80047f8:	4605      	mov	r5, r0
 80047fa:	460c      	mov	r4, r1
 80047fc:	4616      	mov	r6, r2
 80047fe:	d505      	bpl.n	800480c <__swrite+0x1e>
 8004800:	2302      	movs	r3, #2
 8004802:	2200      	movs	r2, #0
 8004804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004808:	f000 fa4a 	bl	8004ca0 <_lseek_r>
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004816:	81a3      	strh	r3, [r4, #12]
 8004818:	4632      	mov	r2, r6
 800481a:	463b      	mov	r3, r7
 800481c:	4628      	mov	r0, r5
 800481e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004822:	f000 b9e7 	b.w	8004bf4 <_write_r>

08004826 <__sseek>:
 8004826:	b510      	push	{r4, lr}
 8004828:	460c      	mov	r4, r1
 800482a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800482e:	f000 fa37 	bl	8004ca0 <_lseek_r>
 8004832:	1c43      	adds	r3, r0, #1
 8004834:	89a3      	ldrh	r3, [r4, #12]
 8004836:	bf15      	itete	ne
 8004838:	6560      	strne	r0, [r4, #84]	; 0x54
 800483a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800483e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004842:	81a3      	strheq	r3, [r4, #12]
 8004844:	bf18      	it	ne
 8004846:	81a3      	strhne	r3, [r4, #12]
 8004848:	bd10      	pop	{r4, pc}

0800484a <__sclose>:
 800484a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484e:	f000 b9e3 	b.w	8004c18 <_close_r>

08004852 <_strtol_l.isra.0>:
 8004852:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004856:	4680      	mov	r8, r0
 8004858:	4689      	mov	r9, r1
 800485a:	4692      	mov	sl, r2
 800485c:	461f      	mov	r7, r3
 800485e:	468b      	mov	fp, r1
 8004860:	465d      	mov	r5, fp
 8004862:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004864:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004868:	f000 fa08 	bl	8004c7c <__locale_ctype_ptr_l>
 800486c:	4420      	add	r0, r4
 800486e:	7846      	ldrb	r6, [r0, #1]
 8004870:	f016 0608 	ands.w	r6, r6, #8
 8004874:	d10b      	bne.n	800488e <_strtol_l.isra.0+0x3c>
 8004876:	2c2d      	cmp	r4, #45	; 0x2d
 8004878:	d10b      	bne.n	8004892 <_strtol_l.isra.0+0x40>
 800487a:	782c      	ldrb	r4, [r5, #0]
 800487c:	2601      	movs	r6, #1
 800487e:	f10b 0502 	add.w	r5, fp, #2
 8004882:	b167      	cbz	r7, 800489e <_strtol_l.isra.0+0x4c>
 8004884:	2f10      	cmp	r7, #16
 8004886:	d114      	bne.n	80048b2 <_strtol_l.isra.0+0x60>
 8004888:	2c30      	cmp	r4, #48	; 0x30
 800488a:	d00a      	beq.n	80048a2 <_strtol_l.isra.0+0x50>
 800488c:	e011      	b.n	80048b2 <_strtol_l.isra.0+0x60>
 800488e:	46ab      	mov	fp, r5
 8004890:	e7e6      	b.n	8004860 <_strtol_l.isra.0+0xe>
 8004892:	2c2b      	cmp	r4, #43	; 0x2b
 8004894:	bf04      	itt	eq
 8004896:	782c      	ldrbeq	r4, [r5, #0]
 8004898:	f10b 0502 	addeq.w	r5, fp, #2
 800489c:	e7f1      	b.n	8004882 <_strtol_l.isra.0+0x30>
 800489e:	2c30      	cmp	r4, #48	; 0x30
 80048a0:	d127      	bne.n	80048f2 <_strtol_l.isra.0+0xa0>
 80048a2:	782b      	ldrb	r3, [r5, #0]
 80048a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80048a8:	2b58      	cmp	r3, #88	; 0x58
 80048aa:	d14b      	bne.n	8004944 <_strtol_l.isra.0+0xf2>
 80048ac:	786c      	ldrb	r4, [r5, #1]
 80048ae:	2710      	movs	r7, #16
 80048b0:	3502      	adds	r5, #2
 80048b2:	2e00      	cmp	r6, #0
 80048b4:	bf0c      	ite	eq
 80048b6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80048ba:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80048be:	2200      	movs	r2, #0
 80048c0:	fbb1 fef7 	udiv	lr, r1, r7
 80048c4:	4610      	mov	r0, r2
 80048c6:	fb07 1c1e 	mls	ip, r7, lr, r1
 80048ca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80048ce:	2b09      	cmp	r3, #9
 80048d0:	d811      	bhi.n	80048f6 <_strtol_l.isra.0+0xa4>
 80048d2:	461c      	mov	r4, r3
 80048d4:	42a7      	cmp	r7, r4
 80048d6:	dd1d      	ble.n	8004914 <_strtol_l.isra.0+0xc2>
 80048d8:	1c53      	adds	r3, r2, #1
 80048da:	d007      	beq.n	80048ec <_strtol_l.isra.0+0x9a>
 80048dc:	4586      	cmp	lr, r0
 80048de:	d316      	bcc.n	800490e <_strtol_l.isra.0+0xbc>
 80048e0:	d101      	bne.n	80048e6 <_strtol_l.isra.0+0x94>
 80048e2:	45a4      	cmp	ip, r4
 80048e4:	db13      	blt.n	800490e <_strtol_l.isra.0+0xbc>
 80048e6:	fb00 4007 	mla	r0, r0, r7, r4
 80048ea:	2201      	movs	r2, #1
 80048ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048f0:	e7eb      	b.n	80048ca <_strtol_l.isra.0+0x78>
 80048f2:	270a      	movs	r7, #10
 80048f4:	e7dd      	b.n	80048b2 <_strtol_l.isra.0+0x60>
 80048f6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80048fa:	2b19      	cmp	r3, #25
 80048fc:	d801      	bhi.n	8004902 <_strtol_l.isra.0+0xb0>
 80048fe:	3c37      	subs	r4, #55	; 0x37
 8004900:	e7e8      	b.n	80048d4 <_strtol_l.isra.0+0x82>
 8004902:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004906:	2b19      	cmp	r3, #25
 8004908:	d804      	bhi.n	8004914 <_strtol_l.isra.0+0xc2>
 800490a:	3c57      	subs	r4, #87	; 0x57
 800490c:	e7e2      	b.n	80048d4 <_strtol_l.isra.0+0x82>
 800490e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004912:	e7eb      	b.n	80048ec <_strtol_l.isra.0+0x9a>
 8004914:	1c53      	adds	r3, r2, #1
 8004916:	d108      	bne.n	800492a <_strtol_l.isra.0+0xd8>
 8004918:	2322      	movs	r3, #34	; 0x22
 800491a:	f8c8 3000 	str.w	r3, [r8]
 800491e:	4608      	mov	r0, r1
 8004920:	f1ba 0f00 	cmp.w	sl, #0
 8004924:	d107      	bne.n	8004936 <_strtol_l.isra.0+0xe4>
 8004926:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492a:	b106      	cbz	r6, 800492e <_strtol_l.isra.0+0xdc>
 800492c:	4240      	negs	r0, r0
 800492e:	f1ba 0f00 	cmp.w	sl, #0
 8004932:	d00c      	beq.n	800494e <_strtol_l.isra.0+0xfc>
 8004934:	b122      	cbz	r2, 8004940 <_strtol_l.isra.0+0xee>
 8004936:	3d01      	subs	r5, #1
 8004938:	f8ca 5000 	str.w	r5, [sl]
 800493c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004940:	464d      	mov	r5, r9
 8004942:	e7f9      	b.n	8004938 <_strtol_l.isra.0+0xe6>
 8004944:	2430      	movs	r4, #48	; 0x30
 8004946:	2f00      	cmp	r7, #0
 8004948:	d1b3      	bne.n	80048b2 <_strtol_l.isra.0+0x60>
 800494a:	2708      	movs	r7, #8
 800494c:	e7b1      	b.n	80048b2 <_strtol_l.isra.0+0x60>
 800494e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004954 <_strtol_r>:
 8004954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004956:	4c06      	ldr	r4, [pc, #24]	; (8004970 <_strtol_r+0x1c>)
 8004958:	4d06      	ldr	r5, [pc, #24]	; (8004974 <_strtol_r+0x20>)
 800495a:	6824      	ldr	r4, [r4, #0]
 800495c:	6a24      	ldr	r4, [r4, #32]
 800495e:	2c00      	cmp	r4, #0
 8004960:	bf08      	it	eq
 8004962:	462c      	moveq	r4, r5
 8004964:	9400      	str	r4, [sp, #0]
 8004966:	f7ff ff74 	bl	8004852 <_strtol_l.isra.0>
 800496a:	b003      	add	sp, #12
 800496c:	bd30      	pop	{r4, r5, pc}
 800496e:	bf00      	nop
 8004970:	20000010 	.word	0x20000010
 8004974:	20000074 	.word	0x20000074

08004978 <_strtoul_l.isra.0>:
 8004978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800497c:	4680      	mov	r8, r0
 800497e:	4689      	mov	r9, r1
 8004980:	4692      	mov	sl, r2
 8004982:	461e      	mov	r6, r3
 8004984:	460f      	mov	r7, r1
 8004986:	463d      	mov	r5, r7
 8004988:	9808      	ldr	r0, [sp, #32]
 800498a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800498e:	f000 f975 	bl	8004c7c <__locale_ctype_ptr_l>
 8004992:	4420      	add	r0, r4
 8004994:	7843      	ldrb	r3, [r0, #1]
 8004996:	f013 0308 	ands.w	r3, r3, #8
 800499a:	d10a      	bne.n	80049b2 <_strtoul_l.isra.0+0x3a>
 800499c:	2c2d      	cmp	r4, #45	; 0x2d
 800499e:	d10a      	bne.n	80049b6 <_strtoul_l.isra.0+0x3e>
 80049a0:	782c      	ldrb	r4, [r5, #0]
 80049a2:	2301      	movs	r3, #1
 80049a4:	1cbd      	adds	r5, r7, #2
 80049a6:	b15e      	cbz	r6, 80049c0 <_strtoul_l.isra.0+0x48>
 80049a8:	2e10      	cmp	r6, #16
 80049aa:	d113      	bne.n	80049d4 <_strtoul_l.isra.0+0x5c>
 80049ac:	2c30      	cmp	r4, #48	; 0x30
 80049ae:	d009      	beq.n	80049c4 <_strtoul_l.isra.0+0x4c>
 80049b0:	e010      	b.n	80049d4 <_strtoul_l.isra.0+0x5c>
 80049b2:	462f      	mov	r7, r5
 80049b4:	e7e7      	b.n	8004986 <_strtoul_l.isra.0+0xe>
 80049b6:	2c2b      	cmp	r4, #43	; 0x2b
 80049b8:	bf04      	itt	eq
 80049ba:	782c      	ldrbeq	r4, [r5, #0]
 80049bc:	1cbd      	addeq	r5, r7, #2
 80049be:	e7f2      	b.n	80049a6 <_strtoul_l.isra.0+0x2e>
 80049c0:	2c30      	cmp	r4, #48	; 0x30
 80049c2:	d125      	bne.n	8004a10 <_strtoul_l.isra.0+0x98>
 80049c4:	782a      	ldrb	r2, [r5, #0]
 80049c6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80049ca:	2a58      	cmp	r2, #88	; 0x58
 80049cc:	d14a      	bne.n	8004a64 <_strtoul_l.isra.0+0xec>
 80049ce:	786c      	ldrb	r4, [r5, #1]
 80049d0:	2610      	movs	r6, #16
 80049d2:	3502      	adds	r5, #2
 80049d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049d8:	2700      	movs	r7, #0
 80049da:	fbb1 f1f6 	udiv	r1, r1, r6
 80049de:	fb06 fe01 	mul.w	lr, r6, r1
 80049e2:	ea6f 0e0e 	mvn.w	lr, lr
 80049e6:	4638      	mov	r0, r7
 80049e8:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80049ec:	2a09      	cmp	r2, #9
 80049ee:	d811      	bhi.n	8004a14 <_strtoul_l.isra.0+0x9c>
 80049f0:	4614      	mov	r4, r2
 80049f2:	42a6      	cmp	r6, r4
 80049f4:	dd1d      	ble.n	8004a32 <_strtoul_l.isra.0+0xba>
 80049f6:	2f00      	cmp	r7, #0
 80049f8:	db18      	blt.n	8004a2c <_strtoul_l.isra.0+0xb4>
 80049fa:	4281      	cmp	r1, r0
 80049fc:	d316      	bcc.n	8004a2c <_strtoul_l.isra.0+0xb4>
 80049fe:	d101      	bne.n	8004a04 <_strtoul_l.isra.0+0x8c>
 8004a00:	45a6      	cmp	lr, r4
 8004a02:	db13      	blt.n	8004a2c <_strtoul_l.isra.0+0xb4>
 8004a04:	fb00 4006 	mla	r0, r0, r6, r4
 8004a08:	2701      	movs	r7, #1
 8004a0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a0e:	e7eb      	b.n	80049e8 <_strtoul_l.isra.0+0x70>
 8004a10:	260a      	movs	r6, #10
 8004a12:	e7df      	b.n	80049d4 <_strtoul_l.isra.0+0x5c>
 8004a14:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8004a18:	2a19      	cmp	r2, #25
 8004a1a:	d801      	bhi.n	8004a20 <_strtoul_l.isra.0+0xa8>
 8004a1c:	3c37      	subs	r4, #55	; 0x37
 8004a1e:	e7e8      	b.n	80049f2 <_strtoul_l.isra.0+0x7a>
 8004a20:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8004a24:	2a19      	cmp	r2, #25
 8004a26:	d804      	bhi.n	8004a32 <_strtoul_l.isra.0+0xba>
 8004a28:	3c57      	subs	r4, #87	; 0x57
 8004a2a:	e7e2      	b.n	80049f2 <_strtoul_l.isra.0+0x7a>
 8004a2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004a30:	e7eb      	b.n	8004a0a <_strtoul_l.isra.0+0x92>
 8004a32:	2f00      	cmp	r7, #0
 8004a34:	da09      	bge.n	8004a4a <_strtoul_l.isra.0+0xd2>
 8004a36:	2322      	movs	r3, #34	; 0x22
 8004a38:	f8c8 3000 	str.w	r3, [r8]
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a40:	f1ba 0f00 	cmp.w	sl, #0
 8004a44:	d107      	bne.n	8004a56 <_strtoul_l.isra.0+0xde>
 8004a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a4a:	b103      	cbz	r3, 8004a4e <_strtoul_l.isra.0+0xd6>
 8004a4c:	4240      	negs	r0, r0
 8004a4e:	f1ba 0f00 	cmp.w	sl, #0
 8004a52:	d00c      	beq.n	8004a6e <_strtoul_l.isra.0+0xf6>
 8004a54:	b127      	cbz	r7, 8004a60 <_strtoul_l.isra.0+0xe8>
 8004a56:	3d01      	subs	r5, #1
 8004a58:	f8ca 5000 	str.w	r5, [sl]
 8004a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a60:	464d      	mov	r5, r9
 8004a62:	e7f9      	b.n	8004a58 <_strtoul_l.isra.0+0xe0>
 8004a64:	2430      	movs	r4, #48	; 0x30
 8004a66:	2e00      	cmp	r6, #0
 8004a68:	d1b4      	bne.n	80049d4 <_strtoul_l.isra.0+0x5c>
 8004a6a:	2608      	movs	r6, #8
 8004a6c:	e7b2      	b.n	80049d4 <_strtoul_l.isra.0+0x5c>
 8004a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004a74 <_strtoul_r>:
 8004a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a76:	4c06      	ldr	r4, [pc, #24]	; (8004a90 <_strtoul_r+0x1c>)
 8004a78:	4d06      	ldr	r5, [pc, #24]	; (8004a94 <_strtoul_r+0x20>)
 8004a7a:	6824      	ldr	r4, [r4, #0]
 8004a7c:	6a24      	ldr	r4, [r4, #32]
 8004a7e:	2c00      	cmp	r4, #0
 8004a80:	bf08      	it	eq
 8004a82:	462c      	moveq	r4, r5
 8004a84:	9400      	str	r4, [sp, #0]
 8004a86:	f7ff ff77 	bl	8004978 <_strtoul_l.isra.0>
 8004a8a:	b003      	add	sp, #12
 8004a8c:	bd30      	pop	{r4, r5, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000010 	.word	0x20000010
 8004a94:	20000074 	.word	0x20000074

08004a98 <__submore>:
 8004a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9c:	460c      	mov	r4, r1
 8004a9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aa4:	4299      	cmp	r1, r3
 8004aa6:	d11e      	bne.n	8004ae6 <__submore+0x4e>
 8004aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004aac:	f7fe ffb2 	bl	8003a14 <_malloc_r>
 8004ab0:	b918      	cbnz	r0, 8004aba <__submore+0x22>
 8004ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004abe:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ac0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ac6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004aca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004ace:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004ad2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004ad6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004ada:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004ade:	6020      	str	r0, [r4, #0]
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ae6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004ae8:	0077      	lsls	r7, r6, #1
 8004aea:	463a      	mov	r2, r7
 8004aec:	f000 f8fe 	bl	8004cec <_realloc_r>
 8004af0:	4605      	mov	r5, r0
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d0dd      	beq.n	8004ab2 <__submore+0x1a>
 8004af6:	eb00 0806 	add.w	r8, r0, r6
 8004afa:	4601      	mov	r1, r0
 8004afc:	4632      	mov	r2, r6
 8004afe:	4640      	mov	r0, r8
 8004b00:	f7fe fbc4 	bl	800328c <memcpy>
 8004b04:	f8c4 8000 	str.w	r8, [r4]
 8004b08:	6365      	str	r5, [r4, #52]	; 0x34
 8004b0a:	63a7      	str	r7, [r4, #56]	; 0x38
 8004b0c:	e7e8      	b.n	8004ae0 <__submore+0x48>
	...

08004b10 <_ungetc_r>:
 8004b10:	1c4b      	adds	r3, r1, #1
 8004b12:	b570      	push	{r4, r5, r6, lr}
 8004b14:	4606      	mov	r6, r0
 8004b16:	460d      	mov	r5, r1
 8004b18:	4614      	mov	r4, r2
 8004b1a:	d103      	bne.n	8004b24 <_ungetc_r+0x14>
 8004b1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004b20:	4628      	mov	r0, r5
 8004b22:	bd70      	pop	{r4, r5, r6, pc}
 8004b24:	b118      	cbz	r0, 8004b2e <_ungetc_r+0x1e>
 8004b26:	6983      	ldr	r3, [r0, #24]
 8004b28:	b90b      	cbnz	r3, 8004b2e <_ungetc_r+0x1e>
 8004b2a:	f7fe fe1b 	bl	8003764 <__sinit>
 8004b2e:	4b2e      	ldr	r3, [pc, #184]	; (8004be8 <_ungetc_r+0xd8>)
 8004b30:	429c      	cmp	r4, r3
 8004b32:	d12c      	bne.n	8004b8e <_ungetc_r+0x7e>
 8004b34:	6874      	ldr	r4, [r6, #4]
 8004b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b3a:	f023 0320 	bic.w	r3, r3, #32
 8004b3e:	81a3      	strh	r3, [r4, #12]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	0759      	lsls	r1, r3, #29
 8004b44:	d413      	bmi.n	8004b6e <_ungetc_r+0x5e>
 8004b46:	06da      	lsls	r2, r3, #27
 8004b48:	d5e8      	bpl.n	8004b1c <_ungetc_r+0xc>
 8004b4a:	071b      	lsls	r3, r3, #28
 8004b4c:	d50b      	bpl.n	8004b66 <_ungetc_r+0x56>
 8004b4e:	4621      	mov	r1, r4
 8004b50:	4630      	mov	r0, r6
 8004b52:	f7fe fd8b 	bl	800366c <_fflush_r>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	d1e0      	bne.n	8004b1c <_ungetc_r+0xc>
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	60a0      	str	r0, [r4, #8]
 8004b5e:	f023 0308 	bic.w	r3, r3, #8
 8004b62:	81a3      	strh	r3, [r4, #12]
 8004b64:	61a0      	str	r0, [r4, #24]
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f043 0304 	orr.w	r3, r3, #4
 8004b6c:	81a3      	strh	r3, [r4, #12]
 8004b6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b70:	6862      	ldr	r2, [r4, #4]
 8004b72:	b2ed      	uxtb	r5, r5
 8004b74:	b1e3      	cbz	r3, 8004bb0 <_ungetc_r+0xa0>
 8004b76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	da12      	bge.n	8004ba2 <_ungetc_r+0x92>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	1e5a      	subs	r2, r3, #1
 8004b80:	6022      	str	r2, [r4, #0]
 8004b82:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004b86:	6863      	ldr	r3, [r4, #4]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	6063      	str	r3, [r4, #4]
 8004b8c:	e7c8      	b.n	8004b20 <_ungetc_r+0x10>
 8004b8e:	4b17      	ldr	r3, [pc, #92]	; (8004bec <_ungetc_r+0xdc>)
 8004b90:	429c      	cmp	r4, r3
 8004b92:	d101      	bne.n	8004b98 <_ungetc_r+0x88>
 8004b94:	68b4      	ldr	r4, [r6, #8]
 8004b96:	e7ce      	b.n	8004b36 <_ungetc_r+0x26>
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <_ungetc_r+0xe0>)
 8004b9a:	429c      	cmp	r4, r3
 8004b9c:	bf08      	it	eq
 8004b9e:	68f4      	ldreq	r4, [r6, #12]
 8004ba0:	e7c9      	b.n	8004b36 <_ungetc_r+0x26>
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	f7ff ff77 	bl	8004a98 <__submore>
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d0e6      	beq.n	8004b7c <_ungetc_r+0x6c>
 8004bae:	e7b5      	b.n	8004b1c <_ungetc_r+0xc>
 8004bb0:	6921      	ldr	r1, [r4, #16]
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	b151      	cbz	r1, 8004bcc <_ungetc_r+0xbc>
 8004bb6:	4299      	cmp	r1, r3
 8004bb8:	d208      	bcs.n	8004bcc <_ungetc_r+0xbc>
 8004bba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004bbe:	428d      	cmp	r5, r1
 8004bc0:	d104      	bne.n	8004bcc <_ungetc_r+0xbc>
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	3201      	adds	r2, #1
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	6062      	str	r2, [r4, #4]
 8004bca:	e7a9      	b.n	8004b20 <_ungetc_r+0x10>
 8004bcc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004bce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bd2:	6363      	str	r3, [r4, #52]	; 0x34
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	63a3      	str	r3, [r4, #56]	; 0x38
 8004bd8:	4623      	mov	r3, r4
 8004bda:	6422      	str	r2, [r4, #64]	; 0x40
 8004bdc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	2301      	movs	r3, #1
 8004be4:	e7d1      	b.n	8004b8a <_ungetc_r+0x7a>
 8004be6:	bf00      	nop
 8004be8:	08004ec0 	.word	0x08004ec0
 8004bec:	08004ee0 	.word	0x08004ee0
 8004bf0:	08004ea0 	.word	0x08004ea0

08004bf4 <_write_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4c07      	ldr	r4, [pc, #28]	; (8004c14 <_write_r+0x20>)
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	4608      	mov	r0, r1
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	2200      	movs	r2, #0
 8004c00:	6022      	str	r2, [r4, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f7fb fb75 	bl	80002f2 <_write>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d102      	bne.n	8004c12 <_write_r+0x1e>
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	b103      	cbz	r3, 8004c12 <_write_r+0x1e>
 8004c10:	602b      	str	r3, [r5, #0]
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	200011c4 	.word	0x200011c4

08004c18 <_close_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4c06      	ldr	r4, [pc, #24]	; (8004c34 <_close_r+0x1c>)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	4605      	mov	r5, r0
 8004c20:	4608      	mov	r0, r1
 8004c22:	6023      	str	r3, [r4, #0]
 8004c24:	f7fb fd56 	bl	80006d4 <_close>
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	d102      	bne.n	8004c32 <_close_r+0x1a>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	b103      	cbz	r3, 8004c32 <_close_r+0x1a>
 8004c30:	602b      	str	r3, [r5, #0]
 8004c32:	bd38      	pop	{r3, r4, r5, pc}
 8004c34:	200011c4 	.word	0x200011c4

08004c38 <_fstat_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4c07      	ldr	r4, [pc, #28]	; (8004c58 <_fstat_r+0x20>)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4605      	mov	r5, r0
 8004c40:	4608      	mov	r0, r1
 8004c42:	4611      	mov	r1, r2
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	f7fb fd51 	bl	80006ec <_fstat>
 8004c4a:	1c43      	adds	r3, r0, #1
 8004c4c:	d102      	bne.n	8004c54 <_fstat_r+0x1c>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	b103      	cbz	r3, 8004c54 <_fstat_r+0x1c>
 8004c52:	602b      	str	r3, [r5, #0]
 8004c54:	bd38      	pop	{r3, r4, r5, pc}
 8004c56:	bf00      	nop
 8004c58:	200011c4 	.word	0x200011c4

08004c5c <_isatty_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4c06      	ldr	r4, [pc, #24]	; (8004c78 <_isatty_r+0x1c>)
 8004c60:	2300      	movs	r3, #0
 8004c62:	4605      	mov	r5, r0
 8004c64:	4608      	mov	r0, r1
 8004c66:	6023      	str	r3, [r4, #0]
 8004c68:	f7fb fd50 	bl	800070c <_isatty>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d102      	bne.n	8004c76 <_isatty_r+0x1a>
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	b103      	cbz	r3, 8004c76 <_isatty_r+0x1a>
 8004c74:	602b      	str	r3, [r5, #0]
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
 8004c78:	200011c4 	.word	0x200011c4

08004c7c <__locale_ctype_ptr_l>:
 8004c7c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004c80:	4770      	bx	lr
	...

08004c84 <__locale_ctype_ptr>:
 8004c84:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <__locale_ctype_ptr+0x14>)
 8004c86:	4a05      	ldr	r2, [pc, #20]	; (8004c9c <__locale_ctype_ptr+0x18>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	bf08      	it	eq
 8004c90:	4613      	moveq	r3, r2
 8004c92:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8004c96:	4770      	bx	lr
 8004c98:	20000010 	.word	0x20000010
 8004c9c:	20000074 	.word	0x20000074

08004ca0 <_lseek_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4c07      	ldr	r4, [pc, #28]	; (8004cc0 <_lseek_r+0x20>)
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	4608      	mov	r0, r1
 8004ca8:	4611      	mov	r1, r2
 8004caa:	2200      	movs	r2, #0
 8004cac:	6022      	str	r2, [r4, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f7fb fd37 	bl	8000722 <_lseek>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d102      	bne.n	8004cbe <_lseek_r+0x1e>
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	b103      	cbz	r3, 8004cbe <_lseek_r+0x1e>
 8004cbc:	602b      	str	r3, [r5, #0]
 8004cbe:	bd38      	pop	{r3, r4, r5, pc}
 8004cc0:	200011c4 	.word	0x200011c4

08004cc4 <__ascii_mbtowc>:
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	b901      	cbnz	r1, 8004cca <__ascii_mbtowc+0x6>
 8004cc8:	a901      	add	r1, sp, #4
 8004cca:	b142      	cbz	r2, 8004cde <__ascii_mbtowc+0x1a>
 8004ccc:	b14b      	cbz	r3, 8004ce2 <__ascii_mbtowc+0x1e>
 8004cce:	7813      	ldrb	r3, [r2, #0]
 8004cd0:	600b      	str	r3, [r1, #0]
 8004cd2:	7812      	ldrb	r2, [r2, #0]
 8004cd4:	1c10      	adds	r0, r2, #0
 8004cd6:	bf18      	it	ne
 8004cd8:	2001      	movne	r0, #1
 8004cda:	b002      	add	sp, #8
 8004cdc:	4770      	bx	lr
 8004cde:	4610      	mov	r0, r2
 8004ce0:	e7fb      	b.n	8004cda <__ascii_mbtowc+0x16>
 8004ce2:	f06f 0001 	mvn.w	r0, #1
 8004ce6:	e7f8      	b.n	8004cda <__ascii_mbtowc+0x16>

08004ce8 <__malloc_lock>:
 8004ce8:	4770      	bx	lr

08004cea <__malloc_unlock>:
 8004cea:	4770      	bx	lr

08004cec <_realloc_r>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	4607      	mov	r7, r0
 8004cf0:	4614      	mov	r4, r2
 8004cf2:	460e      	mov	r6, r1
 8004cf4:	b921      	cbnz	r1, 8004d00 <_realloc_r+0x14>
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cfc:	f7fe be8a 	b.w	8003a14 <_malloc_r>
 8004d00:	b922      	cbnz	r2, 8004d0c <_realloc_r+0x20>
 8004d02:	f7fe fe39 	bl	8003978 <_free_r>
 8004d06:	4625      	mov	r5, r4
 8004d08:	4628      	mov	r0, r5
 8004d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d0c:	f000 f833 	bl	8004d76 <_malloc_usable_size_r>
 8004d10:	4284      	cmp	r4, r0
 8004d12:	d90f      	bls.n	8004d34 <_realloc_r+0x48>
 8004d14:	4621      	mov	r1, r4
 8004d16:	4638      	mov	r0, r7
 8004d18:	f7fe fe7c 	bl	8003a14 <_malloc_r>
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d0f2      	beq.n	8004d08 <_realloc_r+0x1c>
 8004d22:	4631      	mov	r1, r6
 8004d24:	4622      	mov	r2, r4
 8004d26:	f7fe fab1 	bl	800328c <memcpy>
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	4638      	mov	r0, r7
 8004d2e:	f7fe fe23 	bl	8003978 <_free_r>
 8004d32:	e7e9      	b.n	8004d08 <_realloc_r+0x1c>
 8004d34:	4635      	mov	r5, r6
 8004d36:	e7e7      	b.n	8004d08 <_realloc_r+0x1c>

08004d38 <_read_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	4c07      	ldr	r4, [pc, #28]	; (8004d58 <_read_r+0x20>)
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	4608      	mov	r0, r1
 8004d40:	4611      	mov	r1, r2
 8004d42:	2200      	movs	r2, #0
 8004d44:	6022      	str	r2, [r4, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	f7fb fc7a 	bl	8000640 <_read>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d102      	bne.n	8004d56 <_read_r+0x1e>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	b103      	cbz	r3, 8004d56 <_read_r+0x1e>
 8004d54:	602b      	str	r3, [r5, #0]
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	200011c4 	.word	0x200011c4

08004d5c <__ascii_wctomb>:
 8004d5c:	b149      	cbz	r1, 8004d72 <__ascii_wctomb+0x16>
 8004d5e:	2aff      	cmp	r2, #255	; 0xff
 8004d60:	bf85      	ittet	hi
 8004d62:	238a      	movhi	r3, #138	; 0x8a
 8004d64:	6003      	strhi	r3, [r0, #0]
 8004d66:	700a      	strbls	r2, [r1, #0]
 8004d68:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004d6c:	bf98      	it	ls
 8004d6e:	2001      	movls	r0, #1
 8004d70:	4770      	bx	lr
 8004d72:	4608      	mov	r0, r1
 8004d74:	4770      	bx	lr

08004d76 <_malloc_usable_size_r>:
 8004d76:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	f1a0 0004 	sub.w	r0, r0, #4
 8004d80:	bfbc      	itt	lt
 8004d82:	580b      	ldrlt	r3, [r1, r0]
 8004d84:	18c0      	addlt	r0, r0, r3
 8004d86:	4770      	bx	lr

08004d88 <_init>:
 8004d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8a:	bf00      	nop
 8004d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8e:	bc08      	pop	{r3}
 8004d90:	469e      	mov	lr, r3
 8004d92:	4770      	bx	lr

08004d94 <_fini>:
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	bf00      	nop
 8004d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9a:	bc08      	pop	{r3}
 8004d9c:	469e      	mov	lr, r3
 8004d9e:	4770      	bx	lr
